{"problem_id": "p02913", "submission_id": "s439336138", "problem_description": "Given is a string S of length N.\nFind the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping.\nMore formally, find the maximum positive integer len such that there exist integers l_1 and l_2 ( 1 \\leq l_1, l_2 \\leq N - len + 1 ) that satisfy the following:\n\n\nl_1 + len \\leq l_2\n\n\nS[l_1+i] = S[l_2+i] (i = 0, 1, ..., len - 1)\n\n\nIf there is no such integer len, print 0.", "quality_score": {"functionality": "3", "readability": "3", "pythonic": "3", "error_handling": "3", "efficiency": "3"}}
{"problem_id": "p02913", "submission_id": "s989655700", "problem_description": "Given is a string S of length N.\nFind the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping.\nMore formally, find the maximum positive integer len such that there exist integers l_1 and l_2 ( 1 \\leq l_1, l_2 \\leq N - len + 1 ) that satisfy the following:\n\n\nl_1 + len \\leq l_2\n\n\nS[l_1+i] = S[l_2+i] (i = 0, 1, ..., len - 1)\n\n\nIf there is no such integer len, print 0.", "quality_score": {"functionality": "5", "readability": "5", "pythonic": "5", "error_handling": "4", "efficiency": "5"}}
