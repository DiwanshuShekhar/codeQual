{"problem_id":"p03546","problem":"Joisino the magical girl has decided to turn every single digit that exists on this world into 1.\nRewriting a digit i with j (0\u2264i,j\u22649) costs c_{i,j} MP (Magic Points).\nShe is now standing before a wall. The wall is divided into HW squares in H rows and W columns, and at least one square contains a digit between 0 and 9 (inclusive).\nYou are given A_{i,j} that describes the square at the i-th row from the top and j-th column from the left, as follows:\n\nIf A_{i,j}\u2260-1, the square contains a digit A_{i,j}.\nIf A_{i,j}=-1, the square does not contain a digit.\n\nFind the minimum total amount of MP required to turn every digit on this wall into 1 in the end.","submission_id":"s033601798","submission":"from types import CodeType\nimport unittest\n\n\ndef solve():\n    return 0\n\n\ndef main():\n    h, w = map(int, input().split())\n    c = [list(map(int, input().split())) for i in range(10)]\n    a = [list(map(int, input().split())) for i in range(h)]\n\n    for k in range(10):\n        for i in range(10):\n            for j in range(10):\n                if c[i][k] + c[k][j] < c[i][j]:\n                    c[i][j] = c[i][k] + c[k][j]\n    total = 0\n    for i in range(h):\n        for j in range(w):\n            if a[i][j] == -1:\n                continue\n            total += c[a[i][j]][1]\n    print(total)\n\n\nif __name__ == \"__main__\":\n    main()\n\n\nclass Test(unittest.TestCase):\n    def test_case1(self):\n        expected = 0\n        actual = solve()\n        self.assertEqual(actual, expected)\n","label":2}
{"problem_id":"p03186","problem":"Takahashi has A untasty cookies containing antidotes, B tasty cookies containing antidotes and C tasty cookies containing poison.\nEating a cookie containing poison results in a stomachache, and eating a cookie containing poison while having a stomachache results in a death.\nAs he wants to live, he cannot eat one in such a situation.\nEating a cookie containing antidotes while having a stomachache cures it, and there is no other way to cure stomachaches.\nFind the maximum number of tasty cookies that Takahashi can eat.","submission_id":"s278512074","submission":"def main():\n    A,B,C = map(int,input().split())\n    ans = min(A+B+1,C) + B\n    print(ans)\n\nif __name__ == '__main__':\n    main()","label":2}
{"problem_id":"p02392","problem":"Write a program which reads three integers a, b and c, and prints \"Yes\" if a < b < c, otherwise \"No\".","submission_id":"s059427604","submission":"# coding: utf-8\n# Your code here!\n\nN=input().split()\na=int(N[0])\nb=int(N[1])\nc=int(N[2])\n\nif a < b < c:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s098831305","submission":"\nt = input()\nans = \"\"\nif t[len(t)-1] == \"s\":\n  ans = t + \"es\"\nelse:\n  ans = t + \"s\"\n  \nprint(ans)","label":2}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s460026560","submission":"def main():\n    import sys\n    input = lambda : sys.stdin.readline().rstrip()\n\n    n, q = map(int, input().split())\n    stx = []\n    for _ in range(n):\n        s, t, x = map(int, input().split())\n        stx.append([x, s - x, t - x])\n    stx.sort(reverse=True)\n    d = [int(input()) for _ in range(q)]\n\n    N = q\n    N0 = 2**(N-1).bit_length()\n    data = [None]*(2*N0)\n    INF = (-1, 10**9 + 1)\n    def update(l, r, v):\n        L = l + N0; R = r + N0\n        while L < R:\n            if R & 1:\n                R -= 1\n                data[R-1] = v\n\n            if L & 1:\n                data[L-1] = v\n                L += 1\n            L >>= 1; R >>= 1\n    def _query(k):\n        k += N0-1\n        s = INF\n        while k >= 0:\n            if data[k]:\n                s = max(s, data[k])\n            k = (k - 1) \/\/ 2\n        return s\n    def query(k):\n        return _query(k)[1]\n\n\n\n    import bisect\n\n    for i, (x, start, last) in enumerate(stx):\n        l = bisect.bisect_left(d, start)\n        r = bisect.bisect_left(d, last)\n        update(l, r, (i, x))\n\n    for i in range(q):\n        res = query(i)\n        if res == 10**9 + 1:\n            print(-1)\n        else:\n            print(res)\nif __name__ == '__main__':\n    main()\n    \n\n","label":2}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s136348877","submission":"from math import factorial\nn,p=map(int,input().split())\na=list(map(int,input().split()))\neven=0\nodd=0\nfor i in a:\n    if i%2==0:\n        even+=1\n    else:\n        odd+=1\ndef comb(a,b):\n    return factorial(a)\/\/(factorial(a-b)*factorial(b))\nn_even=0\nn_odd=0\nfor i in range(even+1):\n    n_even+=comb(even,i)\n\nif p==1:\n    for i in range(1,odd+1,2):\n        n_odd+=comb(odd,i)\nelse:\n    for i in range(0,odd+1,2):\n        n_odd+=comb(odd,i)\nprint(n_even*n_odd)\n","label":2}
{"problem_id":"p02696","problem":"Given are integers A, B, and N.\nFind the maximum possible value of floor(Ax\/B) - A \u00d7 floor(x\/B) for a non-negative integer x not greater than N.\nHere floor(t) denotes the greatest integer not greater than the real number t.","submission_id":"s619283853","submission":"a,b,n=list(map(int,input().split()))\nif b==1:\n    print(0)\nelif n>=b:\n    k=n%b\n    if k==b-1:\n        print(int(a*(n)\/b)-a*int(n\/b))\n    else:\n        print(int(a*(n-k-1)\/b)-a*int(n\/b-1))\nelse:\n    print(int(a*n\/b))","label":2}
{"problem_id":"p03370","problem":"Akaki, a patissier, can make N kinds of doughnut using only a certain powder called \"Okashi no Moto\" (literally \"material of pastry\", simply called Moto below) as ingredient. These doughnuts are called Doughnut 1, Doughnut 2, ..., Doughnut N. In order to make one Doughnut i (1 \u2264 i \u2264 N), she needs to consume m_i grams of Moto. She cannot make a non-integer number of doughnuts, such as 0.5 doughnuts.\nNow, she has X grams of Moto. She decides to make as many doughnuts as possible for a party tonight. However, since the tastes of the guests differ, she will obey the following condition:\n\nFor each of the N kinds of doughnuts, make at least one doughnut of that kind.\n\nAt most how many doughnuts can be made here? She does not necessarily need to consume all of her Moto. Also, under the constraints of this problem, it is always possible to obey the condition.","submission_id":"s738781241","submission":"from sys import stdin,stdout\ndef INPUT():return list(int(i) for i in stdin.readline().split())\ndef inp():return stdin.readline()\ndef out(x):return stdout.write(x)\nimport math\nimport random\nJ=998244353\nfrom collections import deque\n########################################################\nn,x=INPUT()\nA=[]\nfor i in range(n):\n    A.append(int(input()))\nA.sort()\nprint(n+(x-sum(A))\/\/A[0])\n","label":2}
{"problem_id":"p03549","problem":"Takahashi is now competing in a programming contest, but he received TLE in a problem where the answer is YES or NO.\nWhen he checked the detailed status of the submission, there were N test cases in the problem, and the code received TLE in M of those cases.\nThen, he rewrote the code to correctly solve each of those M cases with 1\/2 probability in 1900 milliseconds, and correctly solve each of the other N-M cases without fail in 100 milliseconds.\nNow, he goes through the following process:\n\nSubmit the code.\nWait until the code finishes execution on all the cases.\nIf the code fails to correctly solve some of the M cases, submit it again.\nRepeat until the code correctly solve all the cases in one submission.\n\nLet the expected value of the total execution time of the code be X milliseconds. Print X (as an integer).","submission_id":"s010426758","submission":"# https:\/\/atcoder.jp\/contests\/abc078\/tasks\/arc085_a\n\nimport sys\n# sys.setrecursionlimit(100000)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef input_int():\n    return int(input())\n\n\ndef input_int_list():\n    return [int(i) for i in input().split()]\n\n\ndef main():\n    n, m = input_int_list()\n    ans = (1900 * m + 100 * (n - m)) * 2**m\n    print(ans)\n\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s562304832","submission":"N=int(input())\nA=int(input())\n\ns=N%500\n\nif s<=A:\n    print(\"Yes\")\n    exit()\n\nprint(\"No\")","label":2}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s906682112","submission":"n, m = map(int, input().split())\n\nimport math\ndef comb(n, r):\n    if n < r:\n        return 0\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\nprint(comb(n,2) + comb(m,2))","label":2}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s330010561","submission":"print(sum([1 for x, y in zip(input(), input()) if x == y]))","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s203694740","submission":"s=list(map(str,input().split(\"\/\")))\ns[0]=\"2018\"\nprint(\"\/\".join(s))","label":2}
{"problem_id":"p02401","problem":"Write a program which reads two integers a, b and an operator op, and then prints the value of a op b.","submission_id":"s009862257","submission":"while True:\n    L = raw_input().split()\n\n    a = int(L[0])\n    o = (L[1])\n    b = int(L[2])\n\n    if o == \"?\":\n         break\n        \n    elif o == \"+\":\n        print a + b\n    elif o == \"-\":\n        print a - b\n    elif o == \"*\":\n        print a * b\n    elif o == \"\/\":\n        print a\/b","label":2}
{"problem_id":"p02725","problem":"There is a circular pond with a perimeter of K meters, and N houses around them.\nThe i-th house is built at a distance of A_i meters from the northmost point of the pond, measured clockwise around the pond.\nWhen traveling between these houses, you can only go around the pond.\nFind the minimum distance that needs to be traveled when you start at one of the houses and visit all the N houses.","submission_id":"s470982485","submission":"K, N = [int(x) for x in input().split()]\nA = list([int(x) for x in input().split()])\n\nresult = []\n\nfor i in range(N):\n    if i == N - 1:\n        result.append(K - A[i] + A[0])\n    else:\n        result.append(A[i + 1] - A[i])\n\nresult.sort()\n\nprint(sum(result[:-1]))\n","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s331184851","submission":"import math\nN=int(input())\nans=[]\nfor i in range(1,int(math.sqrt(N))+1):\n    if N%i==0:\n        num1=i\n        num2=N\/\/i\n        if (num1-1)>num2:\n            ans.append(num1-1)\n        if (num2-1)>num1:\n            ans.append(num2-1)\n#print(ans)\nans=list(set(ans))\nprint(sum(ans))","label":2}
{"problem_id":"p02554","problem":"How many integer sequences A_1,A_2,\\ldots,A_N of length N satisfy all of the following conditions?\n\n0 \\leq A_i \\leq 9\nThere exists some i such that A_i=0 holds.\nThere exists some i such that A_i=9 holds.\n\nThe answer can be very large, so output it modulo 10^9 + 7.","submission_id":"s003258105","submission":"n = int(input())\nall = 10**n\nall -= 9**n*2-8**n\nprint(all%(10**9+7))    \n","label":2}
{"problem_id":"p03679","problem":"Takahashi has a strong stomach. He never gets a stomachache from eating something whose \"best-by\" date is at most X days earlier.\nHe gets a stomachache if the \"best-by\" date of the food is X+1 or more days earlier, though.\nOther than that, he finds the food delicious if he eats it not later than the \"best-by\" date. Otherwise, he does not find it delicious.\nTakahashi bought some food A days before the \"best-by\" date, and ate it B days after he bought it.\nWrite a program that outputs delicious if he found it delicious, safe if he did not found it delicious but did not get a stomachache either, and dangerous if he got a stomachache.","submission_id":"s144835804","submission":"x,a,b=map(int,input().split())\nprint('delicious' if b-a<=0 else 'safe' if b-a<x+1 else 'dangerous')","label":2}
{"problem_id":"p02389","problem":"Write a program which calculates the area and perimeter of a given rectangle.","submission_id":"s851090082","submission":"a,b=map(int, input().split())\nlength=2*a+2*b\nmenseki=a*b\nprint(menseki,length)\n","label":2}
{"problem_id":"p02801","problem":"Given is a lowercase English letter C that is not z. Print the letter that follows C in alphabetical order.","submission_id":"s012975414","submission":"ac = input()\nacc ='abcdefghijklmnopqrstuvwxyz'\nprint(acc[acc.index(ac) + 1])","label":2}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s286054257","submission":"H, W = map(int, input().split())\nC = [input() for h in range(H)]\n\nfor c in C:\n    print(c)\n    print(c)","label":2}
{"problem_id":"p03600","problem":"In Takahashi Kingdom, which once existed, there are N cities, and some pairs of cities are connected bidirectionally by roads.\nThe following are known about the road network:\n\nPeople traveled between cities only through roads. It was possible to reach any city from any other city, via intermediate cities if necessary.\nDifferent roads may have had different lengths, but all the lengths were positive integers.\n\nSnuke the archeologist found a table with N rows and N columns, A, in the ruin of Takahashi Kingdom.\nHe thought that it represented the shortest distances between the cities along the roads in the kingdom.\nDetermine whether there exists a road network such that for each u and v, the integer A_{u, v} at the u-th row and v-th column of A is equal to the length of the shortest path from City u to City v.\nIf such a network exist, find the shortest possible total length of the roads.","submission_id":"s551711307","submission":"def warshall_floyd(G):\n    import copy\n    ret = copy.deepcopy(G)\n    for k in range(N):\n        for i in range(N):\n            for j in range(N):\n                ret[i][j] = min(ret[i][j], ret[i][k] + ret[k][j])\n    return ret\n\n\nN = int(input())\nA = [list(map(int, input().split())) for _ in range(N)]\nW, ans = warshall_floyd(A), 0\nif A == W:\n    for i in range(N):\n        for j in range(N):\n            if sum([A[i][j] == A[i][k] + A[k][j] for k in range(N) if k != i and k != j]) == 0:\n                ans += A[i][j]\n    print(ans \/\/ 2)\nelse:\n    print(-1)\n","label":2}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s510414255","submission":"N=int(input())\nt=[]\nx=[]\ny=[]\nfor i in range(N):\n    txy=list(map(int,input().split()))\n    t.append(txy[0])\n    x.append(txy[1])\n    y.append(txy[2])\n\nnow_x=0\nnow_y=0\nnow_time=0\nisOK=True\nfor i in range(N):\n    dist=(x[i]-now_x)**2+(y[i]-now_y)**2\n    time=t[i]-now_time\n\n    if dist<=time**2 and dist%2 ==time%2:\n        now_x=x[i]\n        now_y=y[i]\n        now_time=t[i]\n    else:\n        isOK=False\n        break\n        \n\nif isOK:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s115548502","submission":"word = input()\n\nif word[-1] == 's':\n    word += 'es'\nelse:\n    word += 's'\n\nprint(word)","label":2}
{"problem_id":"p02970","problem":"There are N apple trees in a row. People say that one of them will bear golden apples.\nWe want to deploy some number of inspectors so that each of these trees will be inspected.\nEach inspector will be deployed under one of the trees. For convenience, we will assign numbers from 1 through N to the trees. An inspector deployed under the i-th tree (1 \\leq i \\leq N) will inspect the trees with numbers between i-D and i+D (inclusive).\nFind the minimum number of inspectors that we need to deploy to achieve the objective.","submission_id":"s138061098","submission":"def main():\n    n, d = map(int, input().split())\n    x = 1\n\n    while True:\n        monitoring = (2*d+1) * x\n\n        if monitoring < n:\n            x += 1\n        else:\n            break\n\n    print(x)\n\nif __name__ == '__main__':\n    main()","label":2}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s649727963","submission":"h,_ = list(map(int, input().split()))\nfor _ in range(h):\n    s = input()\n    print(s)\n    print(s)\n","label":2}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s761090284","submission":"def resolve():\n    x, k, d = map(int, input().split())\n    x = abs(x)\n    if x \/\/ d > k:  # \u6700\u5927\u9577\u304c0\u307e\u3067\u5c4a\u304f\u304b\n        print(x - k * d)\n    elif (k - x \/\/ d) % 2 == 0:  # 0\u3092\u53cd\u5fa9\u6a2a\u8df3\u3073\u3059\u308b     \u5076\u6570->X\u5074\u3001\u5947\u6570->-X\u5074\n        print(x % d)\n    else:\n        print(d - x % d)\n        \nresolve()","label":2}
{"problem_id":"p03311","problem":"Snuke has an integer sequence A of length N.\nHe will freely choose an integer b.\nHere, he will get sad if A_i and b+i are far from each other.\nMore specifically, the sadness of Snuke is calculated as follows:\n\nabs(A_1 - (b+1)) + abs(A_2 - (b+2)) + ... + abs(A_N - (b+N))\n\nHere, abs(x) is a function that returns the absolute value of x.\nFind the minimum possible sadness of Snuke.","submission_id":"s438132173","submission":"import statistics\nn = int(input())\nx = list(map(int, input().split()))\n\nfor i in range(n):\n    x[i] -= i+1\n\nx.sort()\nx_ = []\nb = 0\nif x.count(0) <= n\/\/2:\n    for i in range(n):\n        if x[i] != 0:\n             x_.append(x[i])\n\n    b = statistics.median(x_)\n\nans = 0\nfor i in range(n):\n    ans += abs(x[i] - b)\n\nprint(int(ans))","label":2}
{"problem_id":"p03488","problem":"A robot is put at the origin in a two-dimensional plane.\nInitially, the robot is facing in the positive x-axis direction.\nThis robot will be given an instruction sequence s.\ns consists of the following two kinds of letters, and will be executed in order from front to back.\n\nF : Move in the current direction by distance 1.\nT : Turn 90 degrees, either clockwise or counterclockwise.\n\nThe objective of the robot is to be at coordinates (x, y) after all the instructions are executed.\nDetermine whether this objective is achievable.","submission_id":"s739333372","submission":"#!\/usr\/bin\/env python3\nimport sys\nsys.setrecursionlimit(10**6)\n\ns = str(input())\nobj_x, obj_y = list(map(int, input().split()))\n\n\nx = []\ny = []\nflag = 0\nnum = 0\nfor i in range(len(s)):\n    if s[i] == \"T\":\n        if flag % 2 == 0:\n            x.append(num)\n        else:\n            y.append(num)\n        flag += 1\n        num = 0\n    else:\n        num += 1\n\nif num > 0:\n    if flag % 2 == 0:\n        x.append(num)\n    else:\n        y.append(num)\n\n\nif x == []:\n    x = [0]\nif y == []:\n    y = [0]\n\n\nnum_x = sum(x)\nnum_y = sum(y)\n\nmax_x = num_x*2+1\nmax_y = num_y*2+1\n\ndp_x = [[0]*((len(x)+1)) for i in range(max_x)]\ndp_y = [[0]*((len(y)+1)) for i in range(max_y)]\n\ndp_x[num_x][0] = 1\ndp_y[num_y][0] = 1\n\n# print(x)\ndp_x[num_x+x[0]][1]=1\n\n# print(dp_x)\n\nfor i in range(1, len(x)):\n    num = x[i]\n    for j in range(0, len(dp_x)):\n        if j+num < max_x:\n            dp_x[j+num][i+1] = max(dp_x[j+num][i+1], dp_x[j][i]*1)\n        if j-num >= 0:\n            dp_x[j-num][i+1] = max(dp_x[j-num][i+1], dp_x[j][i]*1)\n        # if dp_x[j][i] == 1:\n        #     print(j+num, j-num)\nfor i in range(0, len(y)):\n    num = y[i]\n    for j in range(0, len(dp_y)):\n        if j+num < max_y:\n            dp_y[j+num][i+1] = max(dp_y[j+num][i+1], dp_y[j][i]*1)\n        if j-num >= 0:\n            dp_y[j-num][i+1] = max(dp_y[j-num][i+1], dp_y[j][i]*1)\n        # if dp_y[j][i] == 1:\n        #     print(j+num, j-num)\n\n\nif (num_x+obj_x)<len(dp_x) and (num_x+obj_x)>=0:\n    ans_x = dp_x[num_x+obj_x][-1]\nelse:\n    print(\"No\")\n    exit()\nif (num_y+obj_y)<len(dp_y) and (num_y+obj_y)>=0:\n    ans_y = dp_y[num_y+obj_y][-1]\nelse:\n    print(\"No\")\n    exit()\n\n# print(dp_x)\nif ans_x*ans_y == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":2}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s802851333","submission":"a, b, t = map(int, input().split())\nif t < a:\n    print(0)\nelse:\n    print(t \/\/ a * b) ","label":2}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s250472061","submission":"l=list(map(int,input().split()))\nif sum(l)%9==0:\n  print('Yes')\nelse:\n  print('No')","label":2}
{"problem_id":"p03776","problem":"You are given N items.\nThe value of the i-th item (1 \\leq i \\leq N) is v_i.\nYour have to select at least A and at most B of these items.\nUnder this condition, find the maximum possible arithmetic mean of the values of selected items.\nAdditionally, find the number of ways to select items so that the mean of the values of selected items is maximized.","submission_id":"s984293978","submission":"import sys\nimport math\nfrom collections import defaultdict\nfrom bisect import bisect_left, bisect_right\n\nsys.setrecursionlimit(10**7)\ndef input():\n    return sys.stdin.readline()[:-1]\n\nmod = 10**9 + 7\n\ndef I(): return int(input())\ndef LI(): return list(map(int, input().split()))\ndef LIR(row,col):\n    if row <= 0:\n        return [[] for _ in range(col)]\n    elif col == 1:\n        return [I() for _ in range(row)]\n    else:\n        read_all = [LI() for _ in range(row)]\n        return map(list, zip(*read_all))\n\n#################\n\n# \u30bd\u30fc\u30c8\u3057\u3066\u4e0a\u4f4dA\u500b\u3092\u4f7f\u3046\u3068\u6700\u5927\n# \u5834\u5408\u306e\u6570\u306f\uff0cv\u306e\u6700\u5927\u5024\u304cA\u500b\u4ee5\u4e0a\u3042\u308b\u304b\u3067\u5834\u5408\u5206\u3051\n\nN,A,B = LI()\nv = LI()\n\ndef linear_nCk(n,k):\n    a = [1]*(k+1)\n    for i in range(1,k+1):\n        a[i] = a[i-1]*(n-k+i)\/\/i\n    return a[-1]\n\nv.sort(reverse=True)\n\nd = defaultdict(int)\nuse = defaultdict(int)\n\nfor i in range(N):\n    d[v[i]] += 1\n    if i < A:\n        use[v[i]] += 1\n\nif v[0] == v[A-1]:\n    num = d[v[0]]\n    ans = 0\n    for i in range(A,min(B+1,num+1)):\n        ans += linear_nCk(num,i)\n    print(v[0])\n    print(ans)\nelse:\n    max_val = 0\n    ans = 1\n    for k,v in use.items():\n        ans *= linear_nCk(d[k],v)\n        max_val += k*v\n    print(max_val\/A)\n    print(ans)","label":2}
{"problem_id":"p03157","problem":"There is a grid with H rows and W columns, where each square is painted black or white.\nYou are given H strings S_1, S_2, ..., S_H, each of length W.\nIf the square at the i-th row from the top and the j-th column from the left is painted black, the j-th character in the string S_i is #; if that square is painted white, the j-th character in the string S_i is ..\nFind the number of pairs of a black square c_1 and a white square c_2 that satisfy the following condition:\n\nThere is a path from the square c_1 to the square c_2 where we repeatedly move to a vertically or horizontally adjacent square through an alternating sequence of black and white squares: black, white, black, white...","submission_id":"s318166642","submission":"def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby, product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    from math import floor, ceil,pi,factorial\n    from operator import itemgetter\n    def I(): return int(input().rstrip())\n    def MI(): return map(int, input().split())\n    def LI(): return list(map(int, input().split()))\n    def LI2(): return [int(input()) for i in range(n)]\n    def MXI(): return [[LI()]for i in range(n)]\n    def SI(): return input().rstrip()\n    def printns(x): print('\\n'.join(x))\n    def printni(x): print('\\n'.join(list(map(str,x))))\n    inf = 10**17\n    mod = 10**9 + 7\n    \n    #https:\/\/note.nkmk.me\/python-union-find\/\n    \n    class UnionFind():\n        def __init__(self, n):\n            self.n = n\n            self.parents = [-1] * n\n    \n        def find(self, x):\n            if self.parents[x] < 0:\n                return x\n            else:\n                self.parents[x] = self.find(self.parents[x])\n                return self.parents[x]\n    \n        def union(self, x, y):\n            x = self.find(x)\n            y = self.find(y)\n    \n            if x == y:\n                return\n    \n            if self.parents[x] > self.parents[y]:\n                x, y = y, x\n    \n            self.parents[x] += self.parents[y]\n            self.parents[y] = x\n    \n        def size(self, x):\n            return -self.parents[self.find(x)]\n    \n        def same(self, x, y):\n            return self.find(x) == self.find(y)\n    \n        def members(self, x):\n            root = self.find(x)\n            return [i for i in range(self.n) if self.find(i) == root]\n    \n        def roots(self):\n            return [i for i, x in enumerate(self.parents) if x < 0]\n    \n        def group_count(self):\n            return len(self.roots())\n    \n        def all_group_members(self):\n            return {r: self.members(r) for r in self.roots()}\n    \n        def __str__(self):\n            return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n    \n    h,w=MI()\n    uf=UnionFind(h*w)\n    lis=[[0]*w for i in range(h)]\n    for i in range(h):\n        s=SI()\n        for j in range(w):\n            if s[j]==\"#\":\n                lis[i][j]=1\n    step=[[0,1],[0,-1],[-1,0],[1,0]]\n    for i in range(h):\n        for j in range(w):\n            for x,y in step:\n                if not (0<=i+x<h and 0<=j+y<w):\n                    continue\n                if lis[i][j]!=lis[i+x][j+y]:\n                    uf.union(w*i+j,w*(i+x)+(j+y))\n    ans=0\n    dic=defaultdict(lambda:[0,0])\n    for i in range(h):\n        for j in range(w):\n            dic[uf.find(w*i+j)][lis[i][j]==1]+=1\n    for p in dic.keys():\n        ans+=dic[p][0]*dic[p][1]\n    print(ans)\nif __name__==\"__main__\":\n    main()\n            \n            \n                \n                \n    \n        \n    \n            \n            \n\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s349087056","submission":"def main():\n    S = input()\n\n    if S[-1] == 's':\n        S = S + 'es'\n    else:\n        S = S + 's'\n\n    print(S)\n\n\n\nmain()","label":2}
{"problem_id":"p02821","problem":"Takahashi has come to a party as a special guest.\nThere are N ordinary guests at the party. The i-th ordinary guest has a power of A_i.\nTakahashi has decided to perform M handshakes to increase the happiness of the party (let the current happiness be 0).\nA handshake will be performed as follows:\n\nTakahashi chooses one (ordinary) guest x for his left hand and another guest y for his right hand (x and y can be the same).\nThen, he shakes the left hand of Guest x and the right hand of Guest y simultaneously to increase the happiness by A_x+A_y.\n\nHowever, Takahashi should not perform the same handshake more than once. Formally, the following condition must hold:\n\nAssume that, in the k-th handshake, Takahashi shakes the left hand of Guest x_k and the right hand of Guest y_k. Then, there is no pair p, q (1 \\leq p < q \\leq M) such that (x_p,y_p)=(x_q,y_q).\n\nWhat is the maximum possible happiness after M handshakes?","submission_id":"s473817198","submission":"import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\nMOD = 10 ** 9 +7\n\nn,m = map(int,readline().split())\na = np.array(read().split(),np.int64)\n\na.sort()\n\ndef shake_cnt(x):\n    X=np.searchsorted(a,x-a)\n    return n*n-X.sum()\n\nleft = 0\nright = 10 ** 6\nwhile left+1 <right:\n    x = (left + right)\/\/2\n    if shake_cnt(x) >= m:\n        left = x\n    else:\n        right = x\n\nleft,right\n\nX=np.searchsorted(a,right-a)\nAcum = np.zeros(n+1,np.int64)\nAcum[1:] = np.cumsum(a)\n\nshake = n * n -X.sum()\nhappy = (Acum[-1]-Acum[X]).sum()+(a*(n-X)).sum()\n\nhappy += (m-shake)*left\nprint(happy)","label":2}
{"problem_id":"p02601","problem":"M-kun has the following three cards:\n\nA red card with the integer A.\nA green card with the integer B.\nA blue card with the integer C.\n\nHe is a genius magician who can do the following operation at most K times:\n\nChoose one of the three cards and multiply the written integer by 2.\n\nHis magic is successful if both of the following conditions are satisfied after the operations:\n\nThe integer on the green card is strictly greater than the integer on the red card.\nThe integer on the blue card is strictly greater than the integer on the green card.\n\nDetermine whether the magic can be successful.","submission_id":"s390451489","submission":"def main():\n    A, B, C = map(int, input().split())\n    K = int(input())\n    while B <= A:\n        B *= 2\n        K -= 1\n    while C <= B:\n        C *= 2\n        K -= 1\n    if K >= 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s776532974","submission":"n, x, t = list(map(int, input().split()))\n\nprint(((n - 1) \/\/ x + 1) * t)","label":2}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s341673683","submission":"from math import gcd\n\nN = int(input())\nA = list(map(int, input().split()))\n\nL = [0] * N\nL[0] = A[0]\n\n#\u914d\u5217\u306e\u5de6\u304b\u3089\u9806\u756a\u306b\u6700\u5927\u516c\u7d04\u6570\u3092\u6c42\u3081\u308b\nfor i, a in enumerate(A):\n    L[i] = gcd(L[max(0, i-1)], a)\n\n# print(\"L\", L)\nR = [0] * N\nR[0] = A[-1]\n\n#\u914d\u5217\u306e\u53f3\u304b\u3089\u9806\u756a\u306b\u6700\u5927\u516c\u7d04\u6570\u3092\u6c42\u3081\u308b\nfor i, a in enumerate(A[::-1]):\n    R[i] = gcd(R[max(0, i-1)], a)\n\n# print(\"R\", R)\nans = 0\n\nfor i in range(N):\n    #\u4e00\u756a\u5de6\u306e\u6570\u5b57\u3092\u524a\u9664\n    if i == 0:\n        ans = max(ans, R[N-2])\n    #\u4e00\u756a\u53f3\u306e\u6570\u5b57\u3092\u524a\u9664\n    elif i == N-1:\n        ans = max(ans, L[N-2])\n    #i+1\u756a\u76ee\u306e\u6570\u5b57\u3092\u524a\u9664\n    else:\n        ans = max(ans, gcd(L[i-1], R[N-i-2]))\n    \nprint(ans)\n","label":2}
{"problem_id":"p03986","problem":"We have a string X, which has an even number of characters. Half the characters are S, and the other half are T.\nTakahashi, who hates the string ST, will perform the following operation 10^{10000} times:\n\nAmong the occurrences of ST in X as (contiguous) substrings, remove the leftmost one. If there is no occurrence, do nothing.\n\nFind the eventual length of X.","submission_id":"s354905771","submission":"# input()\n# int(input())\n# map(int, input().split())\n# list(map(int, input().split()))\nimport math\nimport sys\nimport bisect\nimport heapq  # \u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc(\u6700\u5c0f\u5024\u53d6\u308a\u51fa\u3057)\nfrom collections import deque\ninf = 10 ** 15\nmod = 10 ** 9 + 7\ns = input()\nn = len(s)\nstack = []\nfor c in s:\n    if c == 'S':\n        stack.append(c)\n    if c == 'T':\n        if stack:\n            if stack.pop() == 'T':\n                stack.append('T')\n                stack.append(c)\n        else:\n            stack.append(c)\nprint(len(stack))","label":2}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s331863108","submission":"N = int(input())\na = list(map(int,input().split()))\n\na.sort(reverse=True)\n\nans = 0\n\nfor i in range(0,N):\n  ans = ans + a[i]*(-1)**i\n\n  \nprint(ans)\n","label":2}
{"problem_id":"p04044","problem":"Iroha has a sequence of N strings S_1, S_2, ..., S_N. The length of each string is L.\nShe will concatenate all of the strings in some order, to produce a long string.\nAmong all strings that she can produce in this way, find the lexicographically smallest one.\nHere, a string s=s_1s_2s_3...s_n is lexicographically smaller than another string t=t_1t_2t_3...t_m if and only if one of the following holds:\n\nThere exists an index i(1\u2266i\u2266min(n,m)), such that s_j = t_j for all indices j(1\u2266j<i), and s_i<t_i.\ns_i = t_i for all integers i(1\u2266i\u2266min(n,m)), and n<m.","submission_id":"s216336633","submission":"n, l = input().split()\nn = int(n)\ns = [input() for _ in range(n)]\ns.sort()\nprint(*s, sep='')","label":2}
{"problem_id":"p03694","problem":"It is only six months until Christmas, and AtCoDeer the reindeer is now planning his travel to deliver gifts.\nThere are N houses along TopCoDeer street. The i-th house is located at coordinate a_i. He has decided to deliver gifts to all these houses.\nFind the minimum distance to be traveled when AtCoDeer can start and end his travel at any positions.","submission_id":"s505007902","submission":"N = int(input())\nA = sorted(map(int, input().split()))\nd = 0\nfor i in range(1, N):\n    d += A[i] - A[i-1]\nprint(d)\n","label":2}
{"problem_id":"p03697","problem":"You are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.","submission_id":"s469898417","submission":"n = sum(map(int, input().split()))\nprint(n if n<10 else \"error\")","label":2}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s911252352","submission":"from heapq import heappop,heappush\n\nN,Q=map(int,input().split())\n\n\nevent=[]\nq=[]\nfor _ in range(N):\n    S,T,X=map(int,input().split())\n    event.append([S-X,1,X])\n    event.append([T-X,-1,X])\n\nfor i in range(Q):\n    event.append([int(input()),2,i])\n\nstop_set=set()\nevent.sort()\nq=[]\n\nfor pos,m,x in event:\n    if m==-1:\n        stop_set.remove(x)\n        \n    elif m==1:\n        #heappush\u3059\u308b\u6642\u70b9\u3067q\u306f\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\n        heappush(q,x)\n        stop_set.add(x)\n    \n    else:\n        #\u3053\u306e\u6642\u70b9\u3067\u306estop_set\u306f\u3001i\u756a\u76ee\u306e\u4eba\u304c\u906d\u9047\u3059\u308b\u901a\u884c\u6b62\u3081\u306e\u5ea7\u6a19\n        #\u3053\u306e\u6642\u70b9\u3067\u306eq\u306f\u4eca\u307e\u3067stop\u306b\u306a\u3063\u305f\u5ea7\u6a19\n        while q:\n            #q\u306f\u30bd\u30fc\u30c8\u6e08\u306a\u306e\u3067\u3001q[0]\u306f\u6700\u5c0f\u5024\u3000\u305d\u308c\u304cstop_set\u304b\u3089\u5916\u308c\u3066\u3044\u308b\u5834\u5408\u3001heappop\u3067\u305d\u308c\u3092\u6392\u9664\u3059\u308b\n            if q[0] not in stop_set:\n                heappop(q)\n            #q[0]\u304cstop_set\u304b\u3089\u5916\u308c\u3066\u306a\u3044\u5834\u5408\u3001\u305d\u308c\u4ee5\u964d\u306eq\u3082\u5916\u308c\u3066\u3044\u306a\u3044\u306e\u3067break    \n            else:\n                break\n\n        if q:\n            print(q[0])\n        else:\n            print(-1)","label":2}
{"problem_id":"p03548","problem":"We have a long seat of width X centimeters.\nThere are many people who wants to sit here. A person sitting on the seat will always occupy an interval of length Y centimeters.\nWe would like to seat as many people as possible, but they are all very shy, and there must be a gap of length at least Z centimeters between two people, and between the end of the seat and a person.\nAt most how many people can sit on the seat?","submission_id":"s246170635","submission":"X, Y, Z = map(int, input().split())\nc = 0\nl = Z\nwhile l < X:\n    if l + Y + Z <= X:\n        l += Y + Z\n        c += 1\n    else:\n        break\nprint(c)","label":2}
{"problem_id":"p03959","problem":"Mountaineers Mr. Takahashi and Mr. Aoki recently trekked across a certain famous mountain range.\nThe mountain range consists of N mountains, extending from west to east in a straight line as Mt. 1, Mt. 2, ..., Mt. N.\nMr. Takahashi traversed the range from the west and Mr. Aoki from the east.  \nThe height of Mt. i is h_i, but they have forgotten the value of each h_i.\nInstead, for each i (1 \u2264 i \u2264 N), they recorded the maximum height of the mountains climbed up to the time they reached the peak of Mt. i (including Mt. i).\nMr. Takahashi's record is T_i and Mr. Aoki's record is A_i.  \nWe know that the height of each mountain h_i is a positive integer.\nCompute the number of the possible sequences of the mountains' heights, modulo 10^9 + 7.\nNote that the records may be incorrect and thus there may be no possible sequence of the mountains' heights.\nIn such a case, output 0.","submission_id":"s997833702","submission":"n = int(input())\nt = list(map(int, input().split(' ')))\na = list(map(int, input().split(' ')))\nresult = 1\nfor i in range(n):\n    h_max, h_min = min(t[i], a[i])+1, 1\n    if i != 0:\n        if t[i-1] < t[i]:\n            h_min = t[i]\n    else:\n        h_min = t[0]\n\n    if i != n-1:\n        if a[i] > a[i+1]:\n            h_min = max(a[i], h_min)\n    else:\n        h_min = max(a[i], h_min)\n    result = result * max(h_max - h_min, 0) % (10**9+7)\nprint(result)","label":2}
{"problem_id":"p02783","problem":"Serval is fighting with a monster.\nThe health of the monster is H.\nIn one attack, Serval can decrease the monster's health by A.\nThere is no other way to decrease the monster's health.\nServal wins when the monster's health becomes 0 or below.\nFind the number of attacks Serval needs to make before winning.","submission_id":"s544122916","submission":"h,a=map(int,input().split())\nprint(0--h\/\/a)","label":2}
{"problem_id":"p02694","problem":"Takahashi has a deposit of 100 yen (the currency of Japan) in AtCoder Bank.\nThe bank pays an annual interest rate of 1 % compounded annually. (A fraction of less than one yen is discarded.)\nAssuming that nothing other than the interest affects Takahashi's balance, in how many years does the balance reach X yen or above for the first time?","submission_id":"s509529967","submission":"# -*- coding: utf-8 -*-\n\ndef main():\n\n    X = int(input())\n\n    num = 100\n    ans = 0\n\n    while num < X:\n        num += + num \/\/ 100\n        ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","label":2}
{"problem_id":"p03660","problem":"Fennec and Snuke are playing a board game.\nOn the board, there are N cells numbered 1 through N, and N-1 roads, each connecting two cells. Cell a_i is adjacent to Cell b_i through the i-th road. Every cell can be reached from every other cell by repeatedly traveling to an adjacent cell. In terms of graph theory, the graph formed by the cells and the roads is a tree.\nInitially, Cell 1 is painted black, and Cell N is painted white. The other cells are not yet colored.\nFennec (who goes first) and Snuke (who goes second) alternately paint an uncolored cell.\nMore specifically, each player performs the following action in her\/his turn:\n\nFennec: selects an uncolored cell that is adjacent to a black cell, and paints it black.\nSnuke: selects an uncolored cell that is adjacent to a white cell, and paints it white.\n\nA player loses when she\/he cannot paint a cell. Determine the winner of the game when Fennec and Snuke play optimally.","submission_id":"s355180329","submission":"from collections import deque\nimport sys\nsys.setrecursionlimit(1000000000)\nN = int(input())\nedges = [[] for _ in range(N)]\nfor _ in range(N-1):\n    a, b = map(int, input().split())\n    edges[a-1].append(b-1)\n    edges[b-1].append(a-1)\nque = deque([0])\nparent = [-1]*N\nparent[0] = 0\nwhile que:\n    cur = que.pop()\n    for nxt in edges[cur]:\n        if parent[nxt] < 0:\n            parent[nxt] = cur\n            que.append(nxt)\ncur = N-1\nroute = [N-1]\nwhile cur:\n    cur = parent[cur]\n    route.append(cur)\ni = len(route)\/\/2\na, b = route[i-1:i+1]\nedges[a].remove(b)\nedges[b].remove(a)\nque = deque([0])\nflag = [True]*N\nscore = 0\nflag[0] = False\nwhile que:\n    v0 = que.pop()\n    score+=1\n    for v in edges[v0]:\n        if flag[v]:\n            que.append(v)\n            flag[v] = False\nif score>N\/\/2:\n    print('Fennec')\nelse:\n    print('Snuke')","label":2}
{"problem_id":"p03407","problem":"An elementary school student Takahashi has come to a variety store.\nHe has two coins, A-yen and B-yen coins (yen is the currency of Japan), and wants to buy a toy that costs C yen. Can he buy it?\nNote that he lives in Takahashi Kingdom, and may have coins that do not exist in Japan.","submission_id":"s517839748","submission":"a, b, c = map(int, input().split())\nanswer = 'Yes' if c <= a + b else 'No'\nprint(answer)","label":2}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s833536207","submission":"import math\nfrom functools import reduce\n \ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n\nN, X = list(map(int, input().split()))\n \nx = list(map(int, input().split()))\nx.append(X)\nx.sort()\n \nres = [abs(x[i+1]-x[i]) for i in range(len(x)-1)]\nprint(gcd(*res))","label":2}
{"problem_id":"p03139","problem":"We conducted a survey on newspaper subscriptions.\nMore specifically, we asked each of the N respondents the following two questions:\n\nQuestion 1: Are you subscribing to Newspaper X?\nQuestion 2: Are you subscribing to Newspaper Y?\n\nAs the result, A respondents answered \"yes\" to Question 1, and B respondents answered \"yes\" to Question 2.\nWhat are the maximum possible number and the minimum possible number of respondents subscribing to both newspapers X and Y?\nWrite a program to answer this question.","submission_id":"s147718950","submission":"n, a, b = map(int, input().split())\nx = min(a, b)\ny = - ( n - a - b )\ny = 0 if y < 0 else y\nprint(x,y)","label":2}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s921426928","submission":"from scipy.special import comb\n\nN, P = map(int, input().split())\nA = list(map(int, input().split()))\n\no,e = 0,0\nfor a in A:\n    if a%2==0:\n        e+=1\n    else:\n        o+=1\n\nif P == 0:\n    # select even cnt from o\n    t = 0\n    for i in range(0, o+1, 2):\n        t += comb(o, i, True)\n    print(2**e * t)\nelse:\n    t = 0\n    for i in range(1, o+1, 2):\n        t += comb(o, i, True)\n    print(2**e * t)\n\n\n\n","label":2}
{"problem_id":"p04011","problem":"There is a hotel with the following accommodation fee:\n\nX yen (the currency of Japan) per night, for the first K nights\nY yen per night, for the (K+1)-th and subsequent nights\n\nTak is staying at this hotel for N consecutive nights.\nFind his total accommodation fee.","submission_id":"s134966431","submission":"if __name__ == \"__main__\":\n  n = int(input())\n  k = int(input())\n  x = int(input())\n  y = int(input())\n\n  if n <= k:\n    print(int(n*x))\n  else:\n    print(int(k*x+(n-k)*y))\n","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s960616227","submission":"N=input()\nN=int(N)\n\nans=0\n\nfor i in range(N):\n    l,r=input().split()\n    l=int(l)\n    r=int(r)\n    p=r-l+1\n    ans+=p\n\nprint(ans)","label":2}
{"problem_id":"p02783","problem":"Serval is fighting with a monster.\nThe health of the monster is H.\nIn one attack, Serval can decrease the monster's health by A.\nThere is no other way to decrease the monster's health.\nServal wins when the monster's health becomes 0 or below.\nFind the number of attacks Serval needs to make before winning.","submission_id":"s871707130","submission":"#https:\/\/atcoder.jp\/contests\/abc153\/tasks\/abc153_a\nM,N =map(int,input().split())\na,b = divmod(M,N)\nif b == 0:\n    print(a)\nelse:\n    print(a+1)","label":2}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s162994833","submission":"import bisect, collections, copy, heapq, itertools, math, string\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef MI(): return map(int, sys.stdin.readline().rstrip().split())\ndef LI(): return list(map(int, sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\n\n\nK = I()\n\nB = []\n\n#(i, j): i\u304b\u3089\u59cb\u307e\u308bj\u6841\u306e\u30eb\u30f3\u30eb\u30f3\u6570\u306e\u500b\u6570\nlun = {(0, 1): 1, (1, 1): 1, (2, 1): 1, (3, 1): 1, (4, 1): 1, (5, 1): 1, (6, 1): 1, (7, 1): 1, (8, 1): 1, (9, 1): 1}\nfor j in range(2, 11):\n    for i in range(10):\n        if i == 0:\n            lun[(i, j)] = lun[(i, j - 1)] + lun[(i + 1, j - 1)]\n        elif i == 9 :\n            lun[(i, j)] = lun[(i - 1, j - 1)] + lun[(i, j - 1)]\n        else:\n            lun[(i, j)] = lun[(i - 1, j - 1)] + lun[(i, j - 1)] + lun[(i + 1, j - 1)]\n\ncnt = 0\nfor j in range(1, 10):\n    for i in range(1, 10):\n        cnt += lun[(i, j)]\n    B.append(cnt)\n\nb = bisect.bisect_right(B, K)\n\nans = []\nif b == 0:\n    print(K)\n    exit()\nif K == B[b - 1]:\n    print(pow(10, b) - 1)\n    exit()\nelse:\n    K -= B[b - 1]\n    i = 1\n    while K > 0:\n        K -= lun[(i, b + 1)]\n        i += 1\n    if K == 0:\n        for j in range(b + 1):\n            c = i - 1 + j\n            if c <= 9:\n                ans.append(c)\n            else:\n                ans.append(9)\n    else:\n        K += lun[(i - 1, b + 1)]\n        ans.append(i - 1)\n        for l in range(b):\n            if ans[-1] == 0:\n                k = 0\n            else:\n                k = ans[-1] - 1\n            while K > 0:\n                K -= lun[(k, b - l)]\n                k += 1\n            if K == 0:\n                for j in range(b - l):\n                    c = k - 1 + j\n                    if c <= 9:\n                        ans.append(c)\n                    else:\n                        ans.append(9)\n                break\n            else:\n                K += lun[(k - 1, b - l)]\n                ans.append(k - 1)\nprint(''.join(map(str, ans)))\n\n\n","label":2}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s670736973","submission":"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\nfrom collections import deque\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nDR = [1, -1, 0, 0]\nDC = [0, 0, 1, -1]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n     \ndef main():\n    N, K = LI()\n    P = LI_()\n    C = LI()\n    G = [-1 for _ in range(N)]\n    for i, p in enumerate(P):\n        G[i] = p\n    seen = set()\n\n    loop_score = []\n    loop_size = []\n    loop_id2node = collections.defaultdict(list)\n\n    _id = 0\n    def calc_one_loop(v):\n        nodes = set()\n        if G[v] == -1:\n            return -1, -1\n        # calc loop, and return score\n        score = 0\n        size = 0\n        while G[v] not in seen:\n            v = G[v]\n            seen.add(v)\n            nodes.add(v)\n            score += C[v]\n            size += 1\n        return score, size, nodes\n\n    for i in range(N):\n        if i in seen:\n            continue\n        score, size, nodes = calc_one_loop(i)\n        if score == -1 and size == -1:\n            continue\n        loop_score.append(score)\n        loop_size.append(size)\n        loop_id2node[_id].extend(list(nodes))\n        seen.add(i)\n        _id += 1\n\n    # print('loop_size: ', loop_size)\n    # print('loop_score: ', loop_score)\n    ans = -inf\n    for i in range(_id):\n        # i: id\n        n_loop = K \/\/ loop_size[i]\n\n        # score_after\u3092\u4f5c\u308b\n        score_after = [[0] for _ in range(N)]\n        for v in loop_id2node[i]:\n            max_move_cnt = loop_size[i] + 1\n            move_cnt = 0\n            cum_score = 0\n            cur_v = v\n            while move_cnt < max_move_cnt:\n                cur_v = G[cur_v]\n                cum_score += C[cur_v]\n                score_after[v].append(cum_score)\n                move_cnt += 1\n        # print('score_after: ', score_after)\n        if loop_score[i] <= 0:\n            max_step = min(K, loop_size[i])\n            score = 0\n        else:\n            # \u5148\u306b\u56de\u308b\n            # \u3061\u3087\u3046\u30691\u5468\u3060\u3063\u305f\u3089\u3001\u56de\u3089\u306a\u3044\n            score = 0\n            max_step = loop_size[i]\n\n            # if K == loop_size[i]:\n            #     max_step = K\n            #     score = 0\n            # else:\n            #     K -= n_loop * loop_size[i]\n            #     max_step = K\n            #     score = n_loop * loop_score[i]\n\n        # loop_size[i]\u3088\u308a\u5c0f\u3055\u3044\u6570\u3067\u5168\u63a2\u7d22\n        for l in range(1, max_step + 1):\n            for v in loop_id2node[i]:\n                cp_score = score\n                cnt = 0\n                cp_score += score_after[v][l]\n                # \u5b9f\u73fe\u4e0d\u53ef\u80fd\u306a\u3089\u98db\u3070\u3059\n                if l > K:\n                    continue\n                # \u56de\u3063\u305f\u6642\u3082\u8a66\u3057\u3066\u307f\u308b\n                if K - l >= loop_size[i]:\n                    cp_score = max(cp_score, cp_score + loop_score[i] * ((K - l) \/\/ loop_size[i]))\n                ans = max(ans, cp_score)\n    print(ans)\n\nmain()\n\n","label":2}
{"problem_id":"p03778","problem":"AtCoDeer the deer found two rectangles lying on the table, each with height 1 and width W.\nIf we consider the surface of the desk as a two-dimensional plane, the first rectangle covers the vertical range of [0,1] and the horizontal range of [a,a+W], and the second rectangle covers the vertical range of [1,2] and the horizontal range of [b,b+W], as shown in the following figure:\n\nAtCoDeer will move the second rectangle horizontally so that it connects with the first rectangle.\nFind the minimum distance it needs to be moved.","submission_id":"s265120335","submission":"w,a,b = map(int,input().split())\nprint((a+w<b)*(b-a-w) or (b+w<a)*(a-b-w) or 0)","label":2}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s525493416","submission":"X, K, D = map(int, input().split())\ny = abs(X)\/\/D\nif y >= K:\n  ans = abs(X) - K * D\nelif (K - y)%2 == 1:\n  ans = abs(abs(X) - y * D - D)\nelse:\n  ans = abs(abs(X) - y * D)\nprint(ans)","label":2}
{"problem_id":"p02679","problem":"We have caught N sardines. The deliciousness and fragrantness of the i-th sardine is A_i and B_i, respectively.\nWe will choose one or more of these sardines and put them into a cooler. However, two sardines on bad terms cannot be chosen at the same time.\nThe i-th and j-th sardines (i \\neq j) are on bad terms if and only if A_i \\cdot A_j + B_i \\cdot B_j = 0.\nIn how many ways can we choose the set of sardines to put into the cooler? Since the count can be enormous, print it modulo 1000000007.","submission_id":"s141870264","submission":"from collections import defaultdict\nfrom math import gcd\n\nMOD = 1000000007\nN = int(input())\nzeros = 0\nbads = defaultdict(lambda: [0, 0])\nfor _ in range(N):\n    x, y = map(int, input().split())\n    # \u4e21\u65b9\u30bc\u30ed\u306e\u6642\u306e\u4f8b\u5916\u51e6\u7406\n    if x == 0 and y == 0:\n        zeros += 1\n        continue\n    # 180\u5ea6\u56de\u8ee2\n    if y < 0 or (y == 0 and x < 0):\n        x, y = -x, -y\n    g = gcd(x, y)\n    x, y = x \/\/ g, y \/\/ g\n    if x > 0:\n        bads[(x, y)][0] += 1\n    else:\n        bads[(y, -x)][1] += 1\n\nans = 1\nfor k, l in bads.values():\n    ans *= (pow(2, k, MOD) - 1) + (pow(2, l, MOD) - 1) + 1\n    ans %= MOD\nprint((ans + zeros - 1) % MOD)\n","label":2}
{"problem_id":"p02631","problem":"There are N Snuke Cats numbered 1, 2, \\ldots, N, where N is even.\nEach Snuke Cat wears a red scarf, on which his favorite non-negative integer is written.\nRecently, they learned the operation called xor (exclusive OR).\n\nWhat is xor?\n\nFor n non-negative integers x_1, x_2, \\ldots, x_n, their xor, x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is defined as follows:\n\n When x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even. \n\nFor example, 3~\\textrm{xor}~5 = 6.\n\n\nThey wanted to use this operation quickly, so each of them calculated the xor of the integers written on their scarfs except his scarf.\nWe know that the xor calculated by Snuke Cat i, that is, the xor of the integers written on the scarfs except the scarf of Snuke Cat i is a_i.\nUsing this information, restore the integer written on the scarf of each Snuke Cat.","submission_id":"s152744813","submission":"n = int( input() )\na = list( map(int, input().split()) )\nx = 0\nfor i in a:\n    x ^= i\nprint( * list( map( lambda y: x^y , a ) ) )","label":2}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s889497280","submission":"n = int(input())\na = int(input())\nd = n%500\nif a >= d:\n  print(\"Yes\")\nelse: print(\"No\")","label":2}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s036084960","submission":"import heapq\n\nX,Y,A,B,C = map(int, input().split())\np_list = sorted([(-v, 'p') for v in map(int, input().split())])\nq_list = sorted([(-v, 'q') for v in map(int, input().split())])\nr_list = sorted([(-v, 'r') for v in map(int, input().split())])\n\nres = 0\nr_cnt = 0\nfor v, k in heapq.merge(p_list, q_list, r_list):\n    v = -v\n    if X+Y-r_cnt == 0:\n        break\n    if k == 'p':\n        if X != 0:\n            X -= 1\n            res += v\n        continue\n    \n    if k == 'q':\n        if Y != 0:\n            Y -= 1\n            res += v\n        continue\n\n    res += v\n    r_cnt += 1\n\nprint(res)\n","label":2}
{"problem_id":"p02609","problem":"Let \\mathrm{popcount}(n) be the number of 1s in the binary representation of n.\nFor example, \\mathrm{popcount}(3) = 2, \\mathrm{popcount}(7) = 3, and \\mathrm{popcount}(0) = 0.\nLet f(n) be the number of times the following operation will be done when we repeat it until n becomes 0: \"replace n with the remainder when n is divided by \\mathrm{popcount}(n).\" (It can be proved that, under the constraints of this problem, n always becomes 0 after a finite number of operations.)\nFor example, when n=7, it becomes 0 after two operations, as follows:\n\n\\mathrm{popcount}(7)=3, so we divide 7 by 3 and replace it with the remainder, 1.\n\\mathrm{popcount}(1)=1, so we divide 1 by 1 and replace it with the remainder, 0.\n\nYou are given an integer X with N digits in binary.\nFor each integer i such that 1 \\leq i \\leq N, let X_i be what X becomes when the i-th bit from the top is inverted.\nFind f(X_1), f(X_2), \\ldots, f(X_N).","submission_id":"s656674888","submission":"def bitcount(N):  # \u7acb\u3063\u3066\u308bbit\u306e\u6570\n    bitcnt = [0]\n    for _ in range(N):\n        bitcnt += [i + 1 for i in bitcnt]\n    return bitcnt\n\n\nn, x = int(input()), input()\n\nnum, cnt = int(x, 2), x.count('1')\nnum0, num1 = num % (cnt + 1), num % max(cnt - 1, 1)\nlbit = bitcount(18)\nfor i in range(n):\n    ans = 1\n    if x[i] == '0':\n        ctmp = cnt + 1\n        tmp = num0 + pow(2, n - (i + 1), ctmp)\n    elif x[i] == '1':\n        if cnt <= 1:\n            print(0)\n            continue\n        ctmp = cnt - 1\n        tmp = num1 - pow(2, n - (i + 1), ctmp)\n    tmp %= ctmp\n    ctmp = lbit[tmp]\n    while tmp > 0:\n        ans += 1\n        tmp %= ctmp\n        ctmp = lbit[tmp]\n    print(ans)\n","label":2}
{"problem_id":"p03095","problem":"You are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.","submission_id":"s253196748","submission":"import bisect,collections,copy,itertools,math,string\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\ndef main():\n    n = I()\n    s = S()\n    ans = 1\n    num = 10**9 + 7\n    count = collections.Counter(s)\n\n    for value in count.values():\n        ans *= value+1\n        ans %= num\n\n    ans -= 1\n    ans % num\n    print(ans)\n        \nmain()\n","label":2}
{"problem_id":"p03546","problem":"Joisino the magical girl has decided to turn every single digit that exists on this world into 1.\nRewriting a digit i with j (0\u2264i,j\u22649) costs c_{i,j} MP (Magic Points).\nShe is now standing before a wall. The wall is divided into HW squares in H rows and W columns, and at least one square contains a digit between 0 and 9 (inclusive).\nYou are given A_{i,j} that describes the square at the i-th row from the top and j-th column from the left, as follows:\n\nIf A_{i,j}\u2260-1, the square contains a digit A_{i,j}.\nIf A_{i,j}=-1, the square does not contain a digit.\n\nFind the minimum total amount of MP required to turn every digit on this wall into 1 in the end.","submission_id":"s768090727","submission":"from copy import copy\nh, w = map(int, input().split())\ndata = [list(map(int, input().split())) for _ in range(10)]\n\nc = [list(map(int, input().split())) for _ in range(h)]\n\nd = copy(data)\ndef cnt_set(d):\n    for k in range(10):\n        for i in range(10):\n            for j in range(10):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\ncnt_set(d)\nans = 0\n\nfor i in range(h):\n    for j in range(w):\n        if c[i][j] == -1:\n            continue\n        ans += d[c[i][j]][1]\n\nprint(ans)","label":2}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s577521133","submission":"a, b = map(int, input().split())\n\na -= 1\nb -= 1\nprint(100, 100)\nfor i in range(100):\n  l = []\n  for j in range(100):\n    c = '#' if i < 50 else '.'\n    if i % 2 and j % 2:\n      if i < 50 and a:\n        c = '.'\n        a -= 1\n      if i >= 50 and b:\n        c = '#'\n        b -= 1\n    l.append(c)\n  print(''.join(l))\n    \n","label":2}
{"problem_id":"p02664","problem":"For a string S consisting of the uppercase English letters P and D, let the doctoral and postdoctoral quotient of S be the total number of occurrences of D and PD in S as contiguous substrings. For example, if S = PPDDP, it contains two occurrences of D and one occurrence of PD as contiguous substrings, so the doctoral and postdoctoral quotient of S is 3.\nWe have a string T consisting of P, D, and ?.\nAmong the strings that can be obtained by replacing each ? in T with P or D, find one with the maximum possible doctoral and postdoctoral quotient.","submission_id":"s968997994","submission":"s = str(input())\nprint(s.replace('?', 'D'))\n","label":2}
{"problem_id":"p03340","problem":"There is an integer sequence A of length N.\nFind the number of the pairs of integers l and r (1 \\leq l \\leq r \\leq N) that satisfy the following condition:\n\nA_l\\ xor\\ A_{l+1}\\ xor\\ ...\\ xor\\ A_r = A_l\\ +\\ A_{l+1}\\ +\\ ...\\ +\\ A_r\n\nHere, xor denotes the bitwise exclusive OR.\n\nDefinition of XOR\nThe XOR of integers c_1, c_2, ..., c_m is defined as follows:\n\nLet the XOR be X. In the binary representation of X, the digit in the 2^k's place (0 \\leq k; k is an integer) is 1 if there are an odd number of integers among c_1, c_2, ...c_m whose binary representation has 1 in the 2^k's place, and 0 if that number is even.\n\nFor example, let us compute the XOR of 3 and 5. The binary representation of 3 is 011, and the binary representation of 5 is 101, thus the XOR has the binary representation 110, that is, the XOR is 6.","submission_id":"s676913610","submission":"def solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    ret = N\n    i = 0\n    xor_A = A[0]\n    j = 1\n    while i < N-1:\n        tail_flag = False\n        # next_i = i+1\n        if i == j:\n            xor_A = A[i]\n            j = i+1\n        while j < N:\n            if xor_A ^ A[j] == xor_A+A[j]:\n                tail_flag = True\n                # print(i,j, xor_A, xor_A^A[j], xor_A+A[j])\n                xor_A = xor_A ^ A[j]\n                ret += j-i\n            else: \n                tail_flag = False\n                break\n            \n            if j != N-1: \n                j += 1\n            else: break\n        \n        xor_A ^= A[i]\n        i += 1\n        if tail_flag and j == N-1: break\n                \n    print(ret)\n    \nsolve()","label":2}
{"problem_id":"p03096","problem":"There are N stones arranged in a row. The i-th stone from the left is painted in the color C_i.\nSnuke will perform the following operation zero or more times:\n\nChoose two stones painted in the same color. Repaint all the stones between them, with the color of the chosen stones.\n\nFind the number of possible final sequences of colors of the stones, modulo 10^9+7.","submission_id":"s334610121","submission":"n=int(input());d=[0]*200001;a=1;b=0\nfor i in range(n):\n    c=int(input())\n    if b!=c:\n        a+=d[c]\n        d[c]=a\n    b=c\nprint(a%(10**9+7))","label":2}
{"problem_id":"p03697","problem":"You are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.","submission_id":"s534912217","submission":"#!\/usr\/bin\/env python3\nimport sys\n\n\ndef solve(A: int, B: int):\n    print(\"error\" if A + B >= 10 else A + B)\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    A = int(next(tokens))  # type: int\n    B = int(next(tokens))  # type: int\n    solve(A, B)\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s632952466","submission":"def main():\n  s = input()\n  if s[-1] == 's':\n    ans = s + 'es'\n  else:\n    ans = s + 's'\n  print(ans)\n  \nmain()\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s924727359","submission":"def plural():\n\ts = input()\n\tif s[-1] == 's' : ans = s + \"es\"\n\telse : ans = s + \"s\"\n\treturn ans\n\ndef main()\t:\n\tprint(plural())\n\nif __name__\t == '__main__' :\n\tmain()","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s418927088","submission":"input_n = input()\nn = str(input_n)\n\nlistN = list(n)\n#listN = n.split(' ')\n\nif listN[len(listN) - 1] == \"s\":\n    listN.append(\"e\")\n    listN.append(\"s\")\nelse:\n    listN.append(\"s\")\n\nfor i in range(len(listN)):\n    print(listN[i], end = \"\")\n","label":2}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s618921622","submission":"from collections import deque\nn = int(input())\nL = list(range(1, 10))\ncount = 9\nd = deque([1,2,3,4,5,6,7,8,9])\nwhile count < n:\n    p = d.popleft()\n    p1 = p%10\n    if p1 == 0:\n        lunlun = p*10 + p1\n        d.append(lunlun)\n        L.append(lunlun)\n        count += 1\n        lunlun += 1\n        d.append(lunlun)\n        L.append(lunlun)\n        count += 1\n    elif p1 == 9:\n        lunlun = p*10 + p1 - 1\n        d.append(lunlun)\n        L.append(lunlun)\n        count += 1\n        lunlun += 1\n        d.append(lunlun)\n        L.append(lunlun)\n        count += 1\n    else:\n        lunlun = p*10 + p1 - 1\n        d.append(lunlun)\n        L.append(lunlun)\n        count += 1\n        lunlun += 1\n        d.append(lunlun)\n        L.append(lunlun)\n        count += 1\n        lunlun += 1\n        d.append(lunlun)\n        L.append(lunlun)\n        count += 1\nprint(L[n-1])\n","label":2}
{"problem_id":"p03946","problem":"There are N towns located in a line, conveniently numbered 1 through N. Takahashi the merchant is going on a travel from town 1 to town N, buying and selling apples.\nTakahashi will begin the travel at town 1, with no apple in his possession. The actions that can be performed during the travel are as follows:\n\nMove: When at town i (i < N), move to town i + 1.\nMerchandise: Buy or sell an arbitrary number of apples at the current town. Here, it is assumed that one apple can always be bought and sold for A_i yen (the currency of Japan) at town i (1 \u2266 i \u2266 N), where A_i are distinct integers. Also, you can assume that he has an infinite supply of money.\n\nFor some reason, there is a constraint on merchandising apple during the travel: the sum of the number of apples bought and the number of apples sold during the whole travel, must be at most T. (Note that a single apple can be counted in both.)\nDuring the travel, Takahashi will perform actions so that the profit of the travel is maximized. Here, the profit of the travel is the amount of money that is gained by selling apples, minus the amount of money that is spent on buying apples. Note that we are not interested in apples in his possession at the end of the travel.\nAoki, a business rival of Takahashi, wants to trouble Takahashi by manipulating the market price of apples. Prior to the beginning of Takahashi's travel, Aoki can change A_i into another arbitrary non-negative integer A_i' for any town i, any number of times. The cost of performing this operation is |A_i - A_i'|. After performing this operation, different towns may have equal values of A_i.\nAoki's objective is to decrease Takahashi's expected profit by at least 1 yen. Find the minimum total cost to achieve it. You may assume that Takahashi's expected profit is initially at least 1 yen.","submission_id":"s589769441","submission":"n,t = map(int, input().split())\na = list(map(int, input().split()))\nmin_a = a[0]\nmin_b = 0\ncnt = 0\nfor i in range(1, n):\n    min_a = min(min_a, a[i-1])\n    if min_b < a[i]-min_a:\n        min_b = a[i]-min_a\n        cnt = 1\n    elif min_b == a[i]-min_a:\n        cnt += 1\nprint(cnt)\n","label":2}
{"problem_id":"p03000","problem":"A ball will bounce along a number line, making N + 1 bounces. It will make the first bounce at coordinate D_1 = 0, and the i-th bounce (2 \\leq i \\leq N+1) at coordinate D_i = D_{i-1} + L_{i-1}.\nHow many times will the ball make a bounce where the coordinate is at most X?","submission_id":"s044616440","submission":"n,x=list(map(int,input().split()))\nl=list(map(int,input().split()))\nfrom itertools import accumulate\nl=[0]+list(accumulate(l))\n\n\nfrom bisect import bisect_right\nprint(bisect_right(l,x))\n","label":2}
{"problem_id":"p03140","problem":"You are given three strings A, B and C. Each of these is a string of length N consisting of lowercase English letters.\nOur objective is to make all these three strings equal. For that, you can repeatedly perform the following operation:\n\nOperation: Choose one of the strings A, B and C, and specify an integer i between 1 and N (inclusive). Change the i-th character from the beginning of the chosen string to some other lowercase English letter.\n\nWhat is the minimum number of operations required to achieve the objective?","submission_id":"s616951445","submission":"N = int(input())\nA = input()\nB = input()\nC = input()\n\nl = [[a, b, c] for a, b, c in zip(A, B, C)]\n\ncnt = 0\nfor i in range(N):\n    l_set = set(l[i])\n    if len(l_set) == 1:\n        pass\n    elif len(l_set) == 2:\n        cnt += 1\n    else:\n        cnt += 2\n\nprint(cnt)","label":2}
{"problem_id":"p03104","problem":"Let f(A, B) be the exclusive OR of A, A+1, ..., B. Find f(A, B).\n\nWhat is exclusive OR?\nThe bitwise exclusive OR of integers c_1, c_2, ..., c_n (let us call it y) is defined as follows:\n\nWhen y is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if, the number of integers among c_1, c_2, ...c_m whose binary representations have 1 in the 2^k's place, is odd, and 0 if that count is even.\n\nFor example, the exclusive OR of 3 and 5 is 6. (When written in base two: the exclusive OR of 011 and 101 is 110.)","submission_id":"s227194982","submission":"A, B = map(int, input().split())\n\nif A == B:\n    print(A)\nelse:\n    A -= 1\n    ans = 0\n    a = 1\n    b = 1\n    if ((A+1)\/\/2) % 2 == 1:\n        if A % 2 == 0:\n            a = 1 ^ A\n        else:\n            a = 1\n    else:\n        if A % 2 == 1:\n            a = 0\n        else:\n            a = A\n\n    if ((B+1)\/\/2) % 2 == 1:\n        if B % 2 == 0:\n            b = 1 ^ B\n        else:\n            b = 1\n    else:\n        if B % 2 == 1:\n            b = 0\n        else:\n            b = B\n\n    print(a ^ b)\n","label":2}
{"problem_id":"p02768","problem":"Akari has n kinds of flowers, one of each kind.\nShe is going to choose one or more of these flowers to make a bouquet.\nHowever, she hates two numbers a and b, so the number of flowers in the bouquet cannot be a or b.\nHow many different bouquets are there that Akari can make?\nFind the count modulo (10^9 + 7).\nHere, two bouquets are considered different when there is a flower that is used in one of the bouquets but not in the other bouquet.","submission_id":"s699049708","submission":"n, a, b = map(int, input().split())\n\nmod = 1000000007\n\ndef pow(x, n):\n    ret = 1\n    while n > 0:\n        if (n & 1) == 1:\n            ret = (ret * x) % mod\n        x = (x * x) % mod\n        n \/\/= 2\n    return ret\n\ndef inv(x):\n    return pow(x, mod - 2)\n\ndef cmb(n, k):\n    ret = 1\n    for i in range(k):\n        ret = (ret * (n - i) * inv(i + 1)) % mod\n    return ret\n\nprint((pow(2, n) - cmb(n, a) - cmb(n, b) - 1) % mod)\n","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s652967721","submission":"n = int(input())\nl, r = zip(*[map(int, input().split()) for _ in range(n)])\nans = 0\nfor i in range(n):\n    ans += r[i] - l[i] + 1\nprint(ans)\n","label":2}
{"problem_id":"p02759","problem":"Takahashi wants to print a document with N pages double-sided, where two pages of data can be printed on one sheet of paper.\nAt least how many sheets of paper does he need?","submission_id":"s966705782","submission":"import sys\ninput = lambda: sys.stdin.readline().rstrip()\n\ndef main():\n    n = int(input())\n    if n % 2 == 0:\n        print(n\/\/2)\n    else:\n        print(n\/\/2+1)\n\nif __name__ == '__main__':\n    main()","label":2}
{"problem_id":"p02792","problem":"Given is a positive integer N.\nFind the number of pairs (A, B) of positive integers not greater than N that satisfy the following condition:\n\nWhen A and B are written in base ten without leading zeros, the last digit of A is equal to the first digit of B, and the first digit of A is equal to the last digit of B.","submission_id":"s174326699","submission":"import sys\nimport collections\nimport bisect\n\n\ndef main():\n    n = int(input())\n    ac, bc = collections.Counter([str(i + 1)[0] + str(i + 1)[-1] for i in range(\n        n)]), collections.Counter([str(i + 1)[-1] + str(i + 1)[0] for i in range(n)])\n    print(sum(ac[i] * bc[i] for i in ac.keys()))\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s768198310","submission":"n,x,t=map(int,input().split())\nprint((n\/\/x+1-(n%x==0))*t)","label":2}
{"problem_id":"p03347","problem":"There is a sequence X of length N, where every element is initially 0. Let X_i denote the i-th element of X.\nYou are given a sequence A of length N. The i-th element of A is A_i. Determine if we can make X equal to A by repeating the operation below. If we can, find the minimum number of operations required.\n\nChoose an integer i such that 1\\leq i\\leq N-1. Replace the value of X_{i+1} with the value of X_i plus 1.","submission_id":"s293290578","submission":"N = int(input())\n\nans = 0\narr = [-1]\nfor i in range(N):\n    A = int(input())\n    if A > arr[i] + 1:\n        print(-1)\n        break\n    if A == arr[i] + 1 and i != 0:\n        ans += 1\n    else:\n        ans += A\n    arr.append(A)\nelse:\n    print(ans)\n    \n","label":2}
{"problem_id":"p03304","problem":"Let us define the beauty of a sequence (a_1,... ,a_n) as the number of pairs of two adjacent elements in it whose absolute differences are d.\nFor example, when d=1, the beauty of the sequence (3, 2, 3, 10, 9) is 3.\nThere are a total of n^m sequences of length m where each element is an integer between 1 and n (inclusive).\nFind the beauty of each of these n^m sequences, and print the average of those values.","submission_id":"s622951521","submission":"# soundhound2018-summer-qualC - Ordinary Beauty\ndef main():\n    N, M, D = map(int, open(0).read().split())\n    x = 2 if D else 1\n    ans = x * (N - D) * (M - 1) \/ (N * N)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s644737190","submission":"S = str(input())\n\nif S[-1]==\"s\":\n  fix = \"es\"\nelse:\n  fix = \"s\"\n\nprint( S + fix )","label":2}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s988080536","submission":"n = int(input())\na = list(map(int, input().split()))\n\"\"\"\n\uff14\u306e\u500d\u6570\u304cn\/\/2\u500b\u4ee5\u4e0a\nor\n\u5168\u90e8\u304c\uff12\u306e\u500d\u6570\n\"\"\"\n\nn2 = 0\nn4 = 0\n\nfor _a in a:\n    if _a%4 == 0:\n        n4 += 1\n    elif _a%2 == 0:\n        n2 += 1\n\nif n4 + n2\/\/2 >= n\/\/2:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":2}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s706837397","submission":"n, x, t = map(int, input().split())\nanswer = 0\nwhile n > 0:\n    n -= x\n    answer += t\nprint(answer)\n","label":2}
{"problem_id":"p02806","problem":"Niwango created a playlist of N songs.\nThe title and the duration of the i-th song are s_i and t_i seconds, respectively.\nIt is guaranteed that s_1,\\ldots,s_N are all distinct.\nNiwango was doing some work while playing this playlist. (That is, all the songs were played once, in the order they appear in the playlist, without any pause in between.)\nHowever, he fell asleep during his work, and he woke up after all the songs were played.\nAccording to his record, it turned out that he fell asleep at the very end of the song titled X.\nFind the duration of time when some song was played while Niwango was asleep.","submission_id":"s321830385","submission":"n = int(input())\nst = []\nfor _ in range(n):\n  si, ti = input().split()\n  st.append((si, int(ti)))\nname = input()\ncount = 0\nflag = False\nfor i in range(n):\n  if flag:\n    count += st[i][1]\n  if st[i][0] == name:\n    flag = True\nprint(count)","label":2}
{"problem_id":"p02897","problem":"Given is an integer N.\nTakahashi chooses an integer a from the positive integers not greater than N with equal probability.\nFind the probability that a is odd.","submission_id":"s184419364","submission":"N=int(input())\nif N%2==0:\n    print(1\/2)\nelse:\n    print((N+1)\/(2*N))","label":2}
{"problem_id":"p03609","problem":"We have a sandglass that runs for X seconds. The sand drops from the upper bulb at a rate of 1 gram per second. That is, the upper bulb initially contains X grams of sand.\nHow many grams of sand will the upper bulb contains after t seconds?","submission_id":"s179671047","submission":"X, t = map(int, input().split())\nprint(0 if X <= t else X-t)","label":2}
{"problem_id":"p03138","problem":"You are given N non-negative integers A_1, A_2, ..., A_N and another non-negative integer K.\nFor a integer X between 0 and K (inclusive), let f(X) = (X XOR A_1) + (X XOR A_2) + ... + (X XOR A_N).\nHere, for non-negative integers a and b, a XOR b denotes the bitwise exclusive OR of a and b.\nFind the maximum value of f.\n\nWhat is XOR?\nThe bitwise exclusive OR of a and b, X, is defined as follows:\n\nWhen X is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if, when written in base two, exactly one of A and B has 1 in the 2^k's place, and 0 otherwise.\n\nFor example, 3 XOR 5 = 6. (When written in base two: 011 XOR 101 = 110.)","submission_id":"s907637754","submission":"n, k = map(int, input().split())\nA = list(map(int, input().split()))\n\nk_bin = \"{:040b}\".format(k)\nA_bin = list(map(lambda x: '{:040b}'.format(x), A))\nX = ''\nfirst = 1\nfor i, col in enumerate(zip(*A_bin)):\n    if k_bin[i] == '0' and first:\n        X += '0'\n        continue\n    if first:\n        zero_cnt = col.count('0')\n        one_cnt = n-zero_cnt\n        if one_cnt < zero_cnt:\n            X += '1'\n        else:\n            first = 0\n            X += '0'\n        continue\n\n    zero_cnt = col.count('0')\n    one_cnt = n-zero_cnt\n    if one_cnt < zero_cnt:\n        X += '1'\n    else:\n        X += '0'\n\nX = int(X, 2)\n\nans = 0\nfor a in A:\n    ans += X ^ a\nprint(ans)\n","label":2}
{"problem_id":"p03328","problem":"In some village, there are 999 towers that are 1,(1+2),(1+2+3),...,(1+2+3+...+999) meters high from west to east, at intervals of 1 meter.\nIt had been snowing for a while before it finally stopped. For some two adjacent towers located 1 meter apart, we measured the lengths of the parts of those towers that are not covered with snow, and the results are a meters for the west tower, and b meters for the east tower.\nAssuming that the depth of snow cover and the altitude are the same everywhere in the village, find the amount of the snow cover.\nAssume also that the depth of the snow cover is always at least 1 meter.","submission_id":"s043184884","submission":"a,b=map(int,input().split())\nx=[i*(i+1)\/\/2 for i in range(1,1000)]\nfor i in range(999):\n    if a<x[i] and x[i]-a==x[i+1]-b:\n        print(x[i]-a)\n        break","label":2}
{"problem_id":"p03578","problem":"Rng is preparing a problem set for a qualification round of CODEFESTIVAL.\nHe has N candidates of problems. The difficulty of the i-th candidate is D_i.\nThere must be M problems in the problem set, and the difficulty of the i-th problem must be T_i. Here, one candidate of a problem cannot be used as multiple problems.\nDetermine whether Rng can complete the problem set without creating new candidates of problems.","submission_id":"s888776159","submission":"n = int(input())\nd = list(map(int,input().split()))\nm = int(input())\nt = list(map(int,input().split()))\nif n < m:\n    print('NO')\n    exit(0)\ndcnt = {}\nfor x in d:dcnt[x] = 0\nok = True\nfor x in d:dcnt[x]+=1\nfor i in range(m):\n    if t[i] not in dcnt:\n        ok = False\n        break\n    if dcnt[t[i]] == 0:\n        ok = False\n        break\n    dcnt[t[i]] -= 1\nif ok:print('YES')\nelse:print('NO')\n","label":2}
{"problem_id":"p03380","problem":"Let {\\rm comb}(n,r) be the number of ways to choose r objects from among n objects, disregarding order.\nFrom n non-negative integers a_1, a_2, ..., a_n, select two numbers a_i > a_j so that {\\rm comb}(a_i,a_j) is maximized.\nIf there are multiple pairs that maximize the value, any of them is accepted.","submission_id":"s309757755","submission":"from bisect import bisect_left, bisect_right\n\nn = int(input())\nal = list(map(int, input().split()))\nal.sort()\nai = al[-1]\nif ai%2 == 0:\n    aj_best = ai\/\/2\n    ind = bisect_right(al, aj_best) - 1\n    ind = ind if 0 <= ind < n else None\n    val1 = al[ind] if ind is not None else 0\n\n    ind = bisect_left(al, aj_best)\n    ind = ind if 0 <= ind < n else None\n    val2 = al[ind] if ind is not None else ai\n\n    if abs(aj_best-val1) <= abs(aj_best-val2):\n        aj = val1\n    else:\n        aj = val2\n\n\nelse:\n    aj_best = ai\/\/2\n    ind = bisect_right(al, aj_best) - 1\n    ind = ind if 0 <= ind < n else None\n    val1 = al[ind] if ind is not None else 0\n\n    ind = bisect_left(al, aj_best)\n    ind = ind if 0 <= ind < n else None\n    val2 = al[ind] if ind is not None else ai\n\n    if abs(aj_best-val1) <= abs(aj_best+1-val2):\n        aj = val1\n    else:\n        aj = val2\n\nprint(ai,aj)","label":2}
{"problem_id":"p02885","problem":"The window of Takahashi's room has a width of A. There are two curtains hung over the window, each of which has a horizontal length of B. (Vertically, the curtains are long enough to cover the whole window.)\nWe will close the window so as to minimize the total horizontal length of the uncovered part of the window.\nFind the total horizontal length of the uncovered parts of the window then.","submission_id":"s027407522","submission":"\ndef main():\n    a,b = list(map(int, input().split()))\n    ans = a - 2*b\n    ans = 0 if ans < 0 else ans \n    print(ans)\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s727295189","submission":"word = input().rstrip()\nif word[-1] == \"s\":\n  print(word+\"es\")\nelse:\n  print(word+\"s\")","label":2}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s195447815","submission":"N = int(input())\nT = [];X = [];Y = []\nfor _ in range(N):\n    t,x,y = map(int, input().split())\n    T.append(t)\n    X.append(x)\n    Y.append(y)\nif N == 1:\n    print('Yes' if T[0] == sum(X+Y) else 'No')\n    exit()\nfor i in range(N):\n    if i == 0: continue\n    d = abs(X[i] + Y[i] - X[i-1] - Y[i-1])\n    t = T[i] - T[i-1]\n    if t >= d:\n        t = t % 2\n        d = d % 2\n        if (t != 0 and d == 0) or (t == 0 and d != 0):\n            print('No')\n            exit()\n    else:\n        print('No')\n        exit()\nelse:\n    print('Yes')","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s652674275","submission":"a=input()\nif a[-1]!='s':\n  a = a+\"s\"\nelse:\n  a = a+\"es\"\nprint(a)","label":2}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s431587311","submission":"from sys import stdin\nimport sys\nimport math\nfrom functools import reduce\nimport functools\nimport itertools\nfrom collections import deque,Counter,defaultdict\nfrom operator import mul\nimport copy\n# ! \/usr\/bin\/env python\n# -*- coding: utf-8 -*-\nimport heapq\nsys.setrecursionlimit(10**6)\n# INF =  float(\"inf\")\nINF = 10**18\nimport bisect\nimport statistics\nmod = 10**9+7\n# mod = 998244353\n\nN, Q = map(int, input().split())\n\nevents = []\nfor i in range(N):\n    S, T, X = map(int, input().split())\n    events.append([S-X-0.5, 1, X])\n    events.append([T-X-0.5, -1, X])\n\nfor i in range(Q):\n    d = int(input())\n    events.append([d, 0, i])\n\nevents = sorted(events)\n\ncount = defaultdict(int)\nXheap = []\nheapq.heapify(Xheap)\nans = [-1 for i in range(Q)]\n\nfor e in events:\n    if e[1] == 1:\n        heapq.heappush(Xheap, e[2])\n        count[e[2]] += 1\n    elif e[1] == -1:\n        count[e[2]] -= 1\n    else:\n        while Xheap:\n            a = Xheap[0]\n            if count[a] == 0:\n                heapq.heappop(Xheap)\n            else:\n                ans[e[2]] = a\n                break\n\nfor i in range(Q):\n    print(ans[i])","label":2}
{"problem_id":"p04030","problem":"Sig has built his own keyboard. Designed for ultimate simplicity, this keyboard only has 3 keys on it: the 0 key, the 1 key and the backspace key.\nTo begin with, he is using a plain text editor with this keyboard. This editor always displays one string (possibly empty). Just after the editor is launched, this string is empty. When each key on the keyboard is pressed, the following changes occur to the string:\n\nThe 0 key: a letter 0 will be inserted to the right of the string.\nThe 1 key: a letter 1 will be inserted to the right of the string.\nThe backspace key: if the string is empty, nothing happens. Otherwise, the rightmost letter of the string is deleted.\n\nSig has launched the editor, and pressed these keys several times. You are given a string s, which is a record of his keystrokes in order. In this string, the letter 0 stands for the 0 key, the letter 1 stands for the 1 key and the letter B stands for the backspace key. What string is displayed in the editor now?","submission_id":"s902147013","submission":"s = input()\nans = \"\"\nfor _ in range(len(s)):\n    if s[0] == \"0\":\n        ans += \"0\"\n        s = s[1:]\n    elif s[0] == \"1\":\n        ans += \"1\"\n        s = s[1:]\n    else:\n        s = s[1:]\n        ans = ans[:-1]\nprint(ans)","label":2}
{"problem_id":"p02912","problem":"Takahashi is going to buy N items one by one.\nThe price of the i-th item he buys is A_i yen (the currency of Japan).\nHe has M discount tickets, and he can use any number of them when buying an item.\nIf Y tickets are used when buying an item priced X yen, he can get the item for \\frac{X}{2^Y} (rounded down to the nearest integer) yen.\nWhat is the minimum amount of money required to buy all the items?","submission_id":"s322713686","submission":"import heapq\nn, m = map(int, input().split())\na = [i*-1 for i in list(map(int, input().split()))]\nheapq.heapify(a)\nfor i in range(m):\n    x = heapq.heappop(a)\n    heapq.heappush(a, ((-1*x)\/\/2)*-1)\nprint(sum(a)*-1)","label":2}
{"problem_id":"p03739","problem":"You are given an integer sequence of length N. The i-th term in the sequence is a_i.\nIn one operation, you can select a term and either increment or decrement it by one.\nAt least how many operations are necessary to satisfy the following conditions?\n\nFor every i (1\u2264i\u2264n), the sum of the terms from the 1-st through i-th term is not zero.\nFor every i (1\u2264i\u2264n-1), the sign of the sum of the terms from the 1-st through i-th term, is different from the sign of the sum of the terms from the 1-st through (i+1)-th term.","submission_id":"s598941630","submission":"from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n=int(readline())\n    a=list(map(int,readline().split()))\n\n    s=[a[0]]*n\n    for i in range(1,n):\n        s[i]=s[i-1]+a[i]\n\n    cnt1=0\n    s1=s[:]\n    f1=0\n    #1,-1,...\n    for i in range(n):\n        if i%2==0:\n            if s1[i]+f1<=0:\n                cnt1+=abs(1-s1[i]-f1)\n                f1+=1-s1[i]-f1\n        else:\n            if s1[i]+f1>=0:\n                cnt1+=abs(-1-s1[i]-f1)\n                f1+=-1-s1[i]-f1\n    \n    cnt2=0\n    s2=s[:]\n    f2=0\n    #-1,1,...\n    for i in range(n):\n        if i%2==0:\n            if s2[i]+f2>=0:\n                cnt2+=abs(-1-s2[i]-f2)\n                f2+=-1-s2[i]-f2\n        else:\n            if s2[i]+f2<=0:\n                cnt2+=abs(1-s2[i]-f2)\n                f2+=1-s2[i]-f2\n    print(min(cnt1,cnt2))\n\nif __name__==\"__main__\":\n    main()","label":2}
{"problem_id":"p02748","problem":"You are visiting a large electronics store to buy a refrigerator and a microwave.\nThe store sells A kinds of refrigerators and B kinds of microwaves. The i-th refrigerator ( 1 \\le i \\le A ) is sold at a_i yen (the currency of Japan), and the j-th microwave ( 1 \\le j \\le B ) is sold at b_j yen.\nYou have M discount tickets. With the i-th ticket ( 1 \\le i \\le M ), you can get a discount of c_i yen from the total price when buying the x_i-th refrigerator and the y_i-th microwave together. Only one ticket can be used at a time.\nYou are planning to buy one refrigerator and one microwave. Find the minimum amount of money required.","submission_id":"s049997553","submission":"a,b,m = map(int,input().split())\na = list(map(int,input().split()))\nb = list(map(int,input().split()))\nxyc = [list(map(int,input().split())) for nesya in range(m)]\ncheap = min(a)+min(b)\nfor hoge in xyc:\n  ch = a[hoge[0]-1]+b[hoge[1]-1]-hoge[2]\n  cheap = min(ch,cheap)\nprint(cheap)","label":2}
{"problem_id":"p03834","problem":"As a New Year's gift, Dolphin received a string s of length 19.\nThe string s has the following format: [five lowercase English letters],[seven lowercase English letters],[five lowercase English letters].\nDolphin wants to convert the comma-separated string s into a space-separated string.\nWrite a program to perform the conversion for him.","submission_id":"s750769065","submission":"s,t,u=input().split(\",\")\nprint(s+\" \"+t+\" \"+u)","label":2}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s313656070","submission":"N = input() \nInp = list(input().split())\nInp = [int(i) for i in Inp]\nInp.sort()\nans = 0\nfor i in range(0,len(Inp),2) :\n\tkushi = [int(Inp[i]),int(Inp[i+1])]\n\tans += min(kushi)\nprint(ans)","label":2}
{"problem_id":"p03835","problem":"You are given two integers K and S.\nThree variable X, Y and Z takes integer values satisfying 0\u2264X,Y,Z\u2264K.\nHow many different assignments of values to X, Y and Z are there such that X + Y + Z = S?","submission_id":"s817276977","submission":"import sys\n\nsys.setrecursionlimit(10**7)\ndef I(): return int(sys.stdin.readline().rstrip())\ndef MI(): return map(int,sys.stdin.readline().rstrip().split())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\ndef LI2(): return list(map(int,sys.stdin.readline().rstrip()))  #\u7a7a\u767d\u306a\u3057\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())  #\u7a7a\u767d\u3042\u308a\ndef LS2(): return list(sys.stdin.readline().rstrip())  #\u7a7a\u767d\u306a\u3057\n\n\nK,S = MI()\n\nans = 0\nfor i in range(K+1):\n    for j in range(K+1):\n        if 0 <= S-(i+j) <= K:\n            ans += 1\n\nprint(ans)\n","label":2}
{"problem_id":"p03095","problem":"You are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.","submission_id":"s337828734","submission":"from collections import Counter\n\nn = int(input())\nS = input()\nmod = 10**9+7\n\nn = Counter(S)\nans = 1\nfor i, j in n.items():\n  ans *= (j+1)\nprint((ans-1)%mod)\n","label":2}
{"problem_id":"p03387","problem":"You are given three integers A, B and C. Find the minimum number of operations required to make A, B and C all equal by repeatedly performing the following two kinds of operations in any order:\n\nChoose two among A, B and C, then increase both by 1.\nChoose one among A, B and C, then increase it by 2.\n\nIt can be proved that we can always make A, B and C all equal by repeatedly performing these operations.","submission_id":"s398518905","submission":"abc = list(map(int, input().split()))\nabc.sort()\na, b, c = abc[0], abc[1], abc[2]\nif a % 2 == b % 2:\n    ans = (2 * c - a - b) \/\/ 2\nelse:\n    ans = (2 * c + 1 - a - b) \/\/ 2 + 1\nprint(ans)\n","label":2}
{"problem_id":"p03786","problem":"Snuke found N strange creatures.\nEach creature has a fixed color and size. The color and size of the i-th creature are represented by i and A_i, respectively.\nEvery creature can absorb another creature whose size is at most twice the size of itself.\nWhen a creature of size A and color B absorbs another creature of size C and color D (C \\leq 2 \\times A), they will merge into one creature of size A+C and color B.\nHere, depending on the sizes of two creatures, it is possible that both of them can absorb the other.\nSnuke has been watching these creatures merge over and over and ultimately become one creature.\nFind the number of the possible colors of this creature.","submission_id":"s024913894","submission":"N = int(input())\nA = sorted(list(map(int, input().split())))\n\na = [0]*(N+1)\n\nfor i in range(N):\n    a[i+1] = a[i]+A[i]\n\nA.reverse()\na.reverse()\n# print(A)\n# print(a)\n\nans = 1\nfor i in range(N):\n    if A[i]\/2 > a[i+1]:\n        break\n    ans += 1\nprint(ans)","label":2}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s408919725","submission":"import collections\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n \/\/= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n \/\/= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n  \nU = 2*10**6\nMOD = 10**9+7\n \nfact = [1]*(U+1)\nfact_inv = [1]*(U+1)\n \nfor i in range(1,U+1):\n  fact[i] = (fact[i-1]*i)%MOD\nfact_inv[U] = pow(fact[U],MOD-2,MOD)\n \nfor i in range(U,0,-1):\n  fact_inv[i-1] = (fact_inv[i]*i)%MOD\n \ndef comb(n,k):\n  if k < 0 or k > n:\n    return 0\n  z = fact[n]\n  z *= fact_inv[k]\n  z %= MOD\n  z *= fact_inv[n-k]\n  z %= MOD\n  return z\n\nn, m = map(int, input().split())\nc = collections.Counter(prime_factorize(m))\nans = 1\nfor i in c.values():\n  ans *= comb(i+n-1, n-1)\n  ans %= MOD\nprint(ans)","label":2}
{"problem_id":"p03698","problem":"You are given a string S consisting of lowercase English letters. Determine whether all the characters in S are different.","submission_id":"s094200864","submission":"def answer(s: str) -> str:\n    return 'yes' if len(s) == len(set(s)) else 'no'\n\n\ndef main():\n    s = input()\n    print(answer(s))\n\n\nif __name__ == '__main__':\n    main()","label":2}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s297554237","submission":"n = int(input())\nl = list(map(int, input().split()))\ns = sum(l)\na, b = 0, 0\n\nwhile l:\n  m1 = max(l)\n  a += m1\n  l.remove(m1)\n  if l:\n    m2 = max(l)\n    l.remove(m2)\nprint( 2 * a - s )\n\n","label":2}
{"problem_id":"p03436","problem":"We have an H \\times W grid whose squares are painted black or white. The square at the i-th row from the top and the j-th column from the left is denoted as (i, j).\nSnuke would like to play the following game on this grid. At the beginning of the game, there is a character called Kenus at square (1, 1). The player repeatedly moves Kenus up, down, left or right by one square. The game is completed when Kenus reaches square (H, W) passing only white squares.\nBefore Snuke starts the game, he can change the color of some of the white squares to black. However, he cannot change the color of square (1, 1) and (H, W). Also, changes of color must all be carried out before the beginning of the game.\nWhen the game is completed, Snuke's score will be the number of times he changed the color of a square before the beginning of the game. Find the maximum possible score that Snuke can achieve, or print -1 if the game cannot be completed, that is, Kenus can never reach square (H, W) regardless of how Snuke changes the color of the squares.  \nThe color of the squares are given to you as characters s_{i, j}. If square (i, j) is initially painted by white, s_{i, j} is .; if square (i, j) is initially painted by black, s_{i, j} is #.","submission_id":"s888003197","submission":"from collections import deque\nH, W = map(int, input().split())\narea = [['#']*(W+2)]\nspace = 0\nfor i in range(H):\n    temp = ['#']+list(input())+['#']\n    for t in temp:\n        if t=='.': space+=1 \n    area.append(temp)\narea.append(['#']*(W+2))\nmove = ((1, 0), (-1, 0), (0, 1), (0, -1))\n    \ndq = deque([(1,1)])\ndist = [[-1]*(W+2) for _ in range(H+2)]\ndist[1][1] = 1\n    \nwhile dq:\n    nowx, nowy = dq.popleft()\n    if (nowx, nowy) == (W, H): break\n    for dx, dy in move:\n        nxtx, nxty = nowx+dx, nowy+dy\n        if not 0<=nxtx<W+2 and 0<=nxty<H+2: continue\n        if dist[nxty][nxtx]>=0 or area[nxty][nxtx]=='#': continue\n        dist[nxty][nxtx] = dist[nowy][nowx]+1\n        dq.append((nxtx, nxty))\nif dist[H][W]==-1: print(-1)\nelse: print(space-dist[H][W])","label":2}
{"problem_id":"p03146","problem":"A sequence a=\\{a_1,a_2,a_3,......\\} is determined as follows:\n\n\nThe first term s is given as input.\n\n\nLet f(n) be the following function: f(n) = n\/2 if n is even, and f(n) = 3n+1 if n is odd.\n\n\na_i = s when i = 1, and a_i = f(a_{i-1}) when i > 1.\n\n\nFind the minimum integer m that satisfies the following condition:\n\nThere exists an integer n such that a_m = a_n (m > n).","submission_id":"s540910398","submission":"s=int(input())\ndef collatz(number):            \n    if number % 2 == 0:          \n        number \/= 2              \n    else:                        \n        number = 3 * number + 1  \n    return int(number)\nc=0\nwhile s!=1 and s!=2 and s!=4:\n    s=collatz(s)\n    c=c+1\nelse:\n    print(c+4)","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s975788098","submission":"import sys\ninput = sys.stdin.readline\n\n# A - Colorful Slimes 2\nN = int(input())\na = list(input().split())\nprev = a[0]\n\nfor i in range(1, N):\n\tif a[i] == prev:\n\t\ta[i] = 'changed'\n\t\n\tprev = a[i]\n\nprint(a.count('changed'))","label":2}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s894435357","submission":"n, m = map(int, input().split())\nans = 'Yes' if n == m else 'No'\nprint(ans)","label":2}
{"problem_id":"p03720","problem":"There are N cities and M roads.\nThe i-th road (1\u2264i\u2264M) connects two cities a_i and b_i (1\u2264a_i,b_i\u2264N) bidirectionally.\nThere may be more than one road that connects the same pair of two cities.\nFor each city, how many roads are connected to the city?","submission_id":"s793257573","submission":"dd = {}\nn, m = map(int, input().split())\nfor _ in range(m):\n    a, b = map(int, input().split())\n    dd[a] = dd.get(a,0) + 1\n    dd[b] = dd.get(b,0) + 1\nfor i in range(1, n+1):\n    print(dd.get(i, 0))","label":2}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s017722344","submission":"s = input()\ncnt = 0\n\nif s == 'RSR':\n    cnt = 1\nelse:\n    for i in range(3):\n        if s[i] == 'R':\n            cnt += 1\n    \nprint(cnt)","label":2}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s510428559","submission":"import sys\ninput = sys.stdin.readline\n \n############ ---- Input Functions ---- ############\ndef inp():\n    return(int(input()))\ndef inlt():\n    return(list(map(int,input().split())))\ndef insr():\n    s = input()\n    return(list(s[:len(s) - 1]))#might need to remove the -1\ndef invr():\n    return(map(int,input().split()))\n\nd, t, s = invr()\n\nif d\/s<=t:\n\tprint('Yes')\nelse:\n\tprint('No')","label":2}
{"problem_id":"p03251","problem":"Our world is one-dimensional, and ruled by two empires called Empire A and Empire B.\nThe capital of Empire A is located at coordinate X, and that of Empire B is located at coordinate Y.\nOne day, Empire A becomes inclined to put the cities at coordinates x_1, x_2, ..., x_N under its control, and Empire B becomes inclined to put the cities at coordinates y_1, y_2, ..., y_M under its control.\nIf there exists an integer Z that satisfies all of the following three conditions, they will come to an agreement, but otherwise war will break out.\n\nX < Z \\leq Y\nx_1, x_2, ..., x_N < Z\ny_1, y_2, ..., y_M \\geq Z\n\nDetermine if war will break out.","submission_id":"s223356569","submission":"n, m, x, y = map(int, input().split())\nxn = [int(num) for num in input().split()]\nyn = [int(num) for num in input().split()]\n\nxn.append(x)\nyn.append(y)\nxn.sort(reverse=True)\nyn.sort()\nif xn[0] < yn[0]:\n  print(\"No War\")\nelse :\n  print(\"War\")\n","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s110163365","submission":"n = int(input())\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n\/\/i)\n\n    #divisors.sort(reverse=True)\n    return divisors\n\nd = make_divisors(n)\nans = 0\nfor a in d:\n    if a == 1:\n        continue\n    else:\n        q = n\/\/a\n        m = a-1\n        if 0 <= q <= m-1:\n            ans += m\nprint(ans)\n","label":2}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s827604340","submission":"import sys\n\n\n#input = sys.stdin.buffer.readline\n\n#sys.setrecursionlimit(10**9)\n#from functools import lru_cache\n\ndef RD(): return sys.stdin.read()\n\n\ndef II(): return int(input())\n\n\ndef MI(): return map(int,input().split())\n\n\ndef MF(): return map(float,input().split())\n\n\ndef LI(): return list(map(int,input().split()))\n\n\ndef LF(): return list(map(float,input().split()))\n\n\ndef TI(): return tuple(map(int,input().split()))\n\n\n# rstrip().decode('utf-8')\n\n\ndef main():\n\tn=II()\n\ts=input()\n\tss=s\n\tfor _ in range(100):\n\t\ts=s.replace(\"()\",\"\")\n\tans=\"(\"*s.count(\")\")+ss+\")\"*s.count(\"(\")\n\tprint(ans)\n\t\n\t\n\t\n\n\n\n\n\n\t\n\nif __name__==\"__main__\":\n\tmain()\n","label":2}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s366109681","submission":"import sys, math\nfrom functools import lru_cache\nfrom collections import defaultdict\nfrom decimal import Decimal\nsys.setrecursionlimit(10**9)\nMOD = 10**9+7\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef mi():\n    return map(int, input().split())\n\ndef ii():\n    return int(input())\n\ndef i2(n):\n    tmp = [list(mi()) for i in range(n)]\n    return [list(i) for i in zip(*tmp)]\n\ndef main():\n    N, P = mi()\n    A = list(mi())\n\n    if all(a%2==0 for a in A):\n        print(0 if P else pow(2, N))\n    else:\n        print(pow(2, N-1))\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p02988","problem":"We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.","submission_id":"s646336284","submission":"n = int(input())\nP = [int(i) for i in input().split()]\n\nans = 0\nfor i in range(1, n-1):\n    if P[i-1] < P[i] < P[i+1]:\n        ans += 1\n    elif P[i-1] > P[i] > P[i+1]:\n        ans += 1\nprint(ans)","label":2}
{"problem_id":"p03001","problem":"There is a rectangle in a coordinate plane. The coordinates of the four vertices are (0,0), (W,0), (W,H), and (0,H).\nYou are given a point (x,y) which is within the rectangle or on its border. We will draw a straight line passing through (x,y) to cut the rectangle into two parts. Find the maximum possible area of the part whose area is not larger than that of the other. Additionally, determine if there are multiple ways to cut the rectangle and achieve that maximum.","submission_id":"s349047861","submission":"W, H, x, y = [int(n) for n in input().split()]\n\ncx, cy = W\/2, H\/2\n\nflg = 0\nif x == cx and y == cy:\n    flg = 1\n\nprint(W*H\/2, flg)   ","label":2}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s623200426","submission":"import sys\nimport itertools\n# import numpy as np\nimport time\nimport math\n \nsys.setrecursionlimit(10 ** 7)\n \nfrom collections import defaultdict\n \nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nX, Y, A, B, C = map(int, readline().split())\nP = sorted(map(int, readline().split()), reverse=True)\nQ = sorted(map(int, readline().split()), reverse=True)\nR = sorted(map(int, readline().split()), reverse=True)\n\nZ = sorted(P[:X] + Q[:Y] + R, reverse=True)\nprint(sum(Z[:X + Y]))","label":2}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s157153936","submission":"import numpy as np\nMOD = 10**9 + 7\ndef solve(s):\n    a = np.zeros(4, dtype=int)\n    a[0] = 1\n    for c in s:\n        t = 2 * int(c == \"?\") + 1\n        b = t * a % MOD\n        if c == \"A\":\n            b[1] += a[0]\n        elif c == \"B\":\n            b[2] += a[1]\n        elif c == \"C\":\n            b[3] += a[2]\n        else:\n            b[1:] += a[:-1]\n        a = b\n    return a[3] % MOD\n\ns = input()\nprint(solve(s))","label":2}
{"problem_id":"p03860","problem":"Snuke is going to open a contest named \"AtCoder s Contest\".\nHere, s is a string of length 1 or greater, where the first character is an uppercase English letter, and the second and subsequent characters are lowercase English letters.\nSnuke has decided to abbreviate the name of the contest as \"AxC\".\nHere, x is the uppercase English letter at the beginning of s.\nGiven the name of the contest, print the abbreviation of the name.","submission_id":"s946740995","submission":"s = input()\nprint('A{}C'.format(s.split()[1][0].upper()))","label":2}
{"problem_id":"p03263","problem":"There is a grid of square cells with H horizontal rows and W vertical columns. The cell at the i-th row and the j-th column will be denoted as Cell (i, j).\nIn Cell (i, j), a_{ij} coins are placed.\nYou can perform the following operation any number of times:\nOperation: Choose a cell that was not chosen before and contains one or more coins, then move one of those coins to a vertically or horizontally adjacent cell.\nMaximize the number of cells containing an even number of coins.","submission_id":"s417633492","submission":"h, w = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(h)]\nfor i in range(h):\n    a[i] = [aij % 2 for aij in a[i]]\n\ncnt, ans = 0, []\nfor i, ai in enumerate(a):\n    for j in range(w):\n        if i % 2 == 1:\n            j = w - 1 - j\n        if cnt == 1:\n            ans.append([bi + 1, bj + 1, i + 1, j + 1])\n            cnt = 0\n            ai[j] = (ai[j] + 1) % 2\n        if ai[j] == 1:\n            cnt = 1\n        bi, bj = i, j\n\nprint(len(ans))\nfor q in ans:\n    print(*q)\n","label":2}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s148820141","submission":"N,P=list(map(int, input().split()))\nA=list(map(int, input().split()))\n\n# \u305f\u3076\u3093\u666e\u901a\u306bDP\n# dp[i]:i\u756a\u76ee(1-index)\u307e\u3067\u306e\u888b\u304b\u3089\u5076\u5947\u304c\u6b63\u3057\u304f\u306a\u308b\u3088\u3046\u306b\u9078\u3076\u5834\u5408\u306e\u6570\n\ndp=[0]*(N+2)\ndp[0]=(P+1)%2\n\nfor i in range(1,N+1):\n    if A[i-1]%2==0:\n        dp[i]=2*dp[i-1]\n    else:\n        dp[i]=(2**(i-1)-dp[i-1])+dp[i-1]\nprint(dp[N])","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s177924482","submission":"if __name__ == '__main__':\n  s = str(input())\n\n  if s[-1] != 's':\n    print(f'{s}s')\n  else:\n    print(f'{s}es')","label":2}
{"problem_id":"p03168","problem":"Let N be a positive odd number.\nThere are N coins, numbered 1, 2, \\ldots, N.\nFor each i (1 \\leq i \\leq N), when Coin i is tossed, it comes up heads with probability p_i and tails with probability 1 - p_i.\nTaro has tossed all the N coins.\nFind the probability of having more heads than tails.","submission_id":"s359971576","submission":"n=int(input())\np=list(map(float,input().split()))\ndp=[[0]*(n+1) for _ in range(n+1)]\ndp[1][0]=1-p[0]\ndp[1][1]=p[0]\nfor i in range(2,n+1):\n    for j in range(n+1):\n        dp[i][j]=dp[i-1][j]*(1-p[i-1])+dp[i-1][j-1]*p[i-1]\nprint(sum(dp[n][(n\/\/2+1):]))","label":2}
{"problem_id":"p02761","problem":"If there is an integer not less than 0 satisfying the following conditions, print the smallest such integer; otherwise, print -1.\n\nThe integer has exactly N digits in base ten. (We assume 0 to be a 1-digit integer. For other integers, leading zeros are not allowed.)\nThe s_i-th digit from the left is c_i. \\left(i = 1, 2, \\cdots, M\\right)","submission_id":"s282263629","submission":"import sys\ninput = sys.stdin.readline\nn,m=map(int,input().split())\nL=[-1]*n\nfor i in range(m):\n    s,c = map(int,input().split())\n    s-=1\n    if s>n-1: \n        continue\n    if L[s] ==-1 and s<=n-1:\n        L[s] = c\n\n    else:\n        if L[s]!=c:\n            print(-1)\n            sys.exit()\n    if L[0]==0 and n>1:\n        print(-1)\n        sys.exit()\nif len(L)==1 and L[0]==-1:\n    L[0]=0\nelif L[0]==-1:\n    L[0]=1\nfor i in range(n):\n    if L[i]==-1:\n        L[i]=0\nprint(\"\".join(map(str,L)))\n        \n\n\n\n\n","label":2}
{"problem_id":"p03739","problem":"You are given an integer sequence of length N. The i-th term in the sequence is a_i.\nIn one operation, you can select a term and either increment or decrement it by one.\nAt least how many operations are necessary to satisfy the following conditions?\n\nFor every i (1\u2264i\u2264n), the sum of the terms from the 1-st through i-th term is not zero.\nFor every i (1\u2264i\u2264n-1), the sign of the sum of the terms from the 1-st through i-th term, is different from the sign of the sum of the terms from the 1-st through (i+1)-th term.","submission_id":"s331823937","submission":"import sys\ndef input(): return sys.stdin.readline().strip()\ndef mapint(): return map(int, input().split())\nsys.setrecursionlimit(10**9)\n\nN = int(input())\nAs = list(mapint())\n\ncum = As.pop(0)\nif cum!=0:\n    cum2 = cum\n    ans = 0\n    for a in As:\n        if cum*(cum+a)>=0:\n            ans += abs(cum+a)+1\n            cum = -1 if cum>0 else 1\n        else:\n            cum += a\n        \n    ans2 = abs(cum2)+1\n    cum2 = 1 if cum2<0 else -1\n    for a in As:\n        if cum2*(cum2+a)>=0:\n            ans2 += abs(cum2+a)+1\n            cum2 = -1 if cum2>0 else 1\n        else:\n            cum2 += a\n    print(min(ans, ans2))\nelse:\n    cum = -1\n    ans = 1\n    for a in As:\n        if cum*(cum+a)>=0:\n            ans += abs(cum+a)+1\n            cum = -1 if cum>0 else 1\n        else:\n            cum += a\n        \n    ans2 = 1\n    cum2 = 1\n    for a in As:\n        if cum2*(cum2+a)>=0:\n            ans2 += abs(cum2+a)+1\n            cum2 = -1 if cum2>0 else 1\n        else:\n            cum2 += a\n    print(min(ans, ans2))","label":2}
{"problem_id":"p00007","problem":"Your friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.","submission_id":"s257799363","submission":"import math\n\ndef myceil(x,n):\n  return math.pow(10,-n)*math.ceil(x*math.pow(10,n))\n\ndef debt(principal,w):\n  if w==1:\n    return int(myceil(principal*1.05,-3))\n  else:\n    return int(debt(myceil(principal*1.05,-3),w-1))\n\n\n\nw=int(input())\nprint(debt(100000,w))","label":2}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s652727255","submission":"s = input()\ncount =0\nfcount = 0\nfor i in s:\n  if i=='R' and count>0:\n    count = count + 1\n    fcount = max(fcount,count)\n  elif i=='R':\n    count = 1\n    fcount = 1\n  else:\n  \tcount = 0\nprint(fcount)\n","label":2}
{"problem_id":"p03007","problem":"There are N integers, A_1, A_2, ..., A_N, written on a blackboard.\nWe will repeat the following operation N-1 times so that we have only one integer on the blackboard.\n\nChoose two integers x and y on the blackboard and erase these two integers. Then, write a new integer x-y.\n\nFind the maximum possible value of the final integer on the blackboard and a sequence of operations that maximizes the final integer.","submission_id":"s903128406","submission":"n,*a=map(int,open(0).read().split())\na.sort()\nprint(sum(abs(i)for i in a)-2*min(abs(a[-1]),abs(a[0]))*(a[0]*a[-1]>0))\nfor i in a[1:-1]:\n    if i<0:\n        print(a[-1],i)\n        a[-1]-=i\n    else:\n        print(a[0],i)\n        a[0]-=i\nprint(a[-1],a[0])","label":2}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s198435407","submission":"X, Y, A ,B, C = list(map(int, input().split()))\nP = sorted(list(map(int, input().split())), reverse = True)[:X]\nQ = sorted(list(map(int, input().split())), reverse = True)[:Y]\nR = sorted(list(map(int, input().split())), reverse = True)\nans = 0\nfor i in range(C):\n  if(len(P) == 0):\n    if(len(Q) == 0):\n      break\n    elif(Q[-1] < R[i]):\n      Q.pop()\n      ans += R[i]\n    else:\n      break\n  elif(len(Q) == 0):\n    if(P[-1] < R[i]):\n      P.pop()\n      ans += R[i]\n    else:\n      break\n  else:\n    if(P[-1] < Q[-1] and P[-1] < R[i]):\n      P.pop()\n      ans += R[i]\n    elif(Q[-1] <= P[-1] and Q[-1] < R[i]):\n      Q.pop()\n      ans += R[i]\n    else:\n      break\nans += sum(P) + sum(Q)\nprint(ans)","label":2}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s508912036","submission":"#!\/usr\/bin\/env python3\nimport sys, math, itertools, collections, bisect, heapq\ninput = lambda: sys.stdin.buffer.readline().rstrip().decode('utf-8')\ninf = float('inf') ;mod = 10**9+7\nmans = inf ;ans = 0 ;count = 0 ;pro = 1\n\nn,q=map(int,input().split())\nSTX=[tuple(map(int,input().split())) for i in range(n)]\nD=[int(input()) for i in range(q)]\nevent=[]\nfor si,ti,xi in STX:\n  event.append((si-xi,0,xi))\n  event.append((ti-xi,-1,xi))\nfor di in D:\n  event.append((di,1,di))\nevent.sort()\nhq=[]; S=set()\nans = []\nfor time, query, number in event:\n  if query == 0:\n    heapq.heappush(hq,number)\n    S.add(number)\n  elif query == -1:\n    S.remove(number)\n  else:\n    while hq and hq[0] not in S:\n      heapq.heappop(hq)\n    if not hq:\n      ans.append(-1)\n    else:\n      ans.append(hq[0])\nprint(*ans,sep=\"\\n\")\n\n\n","label":2}
{"problem_id":"p02258","problem":"You can obtain profits from foreign exchange margin transactions. For example,  if you buy 1000 dollar at a rate of 100 yen per dollar, and sell them at a rate of 108 yen per dollar, you can obtain (108 - 100) \u00d7 1000 = 8000 yen.","submission_id":"s433856703","submission":"def max_profit(A, n):\n    minv = A[0]\n    for j in range(1, n):\n        if j == 1:\n            maxv = A[j] - A[j-1]\n        if maxv < A[j] - minv:\n            maxv = A[j] - minv\n        if minv > A[j]:\n            minv = A[j]\n    print(maxv)\n\nn=int(input())\nA=[int(input()) for i in range(n)]\n\nmax_profit(A, n)\n","label":2}
{"problem_id":"p03072","problem":"There are N mountains ranging from east to west, and an ocean to the west.\nAt the top of each mountain, there is an inn. You have decided to choose where to stay from these inns.\nThe height of the i-th mountain from the west is H_i.\nYou can certainly see the ocean from the inn at the top of the westmost mountain.\nFor the inn at the top of the i-th mountain from the west (i = 2, 3, ..., N), you can see the ocean if and only if H_1 \\leq H_i, H_2 \\leq H_i, ..., and H_{i-1} \\leq H_i.\nFrom how many of these N inns can you see the ocean?","submission_id":"s938007856","submission":"n = int(input())\nh = list(map(int,input().split()))\nc = 0\nd = 0\nfor i in range(n):\n    if h[i] >= d:\n        c+=1\n        d = h[i]\nprint(c)","label":2}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s908461066","submission":"s = list(input())\ncount = 0\nmaxcount = 0\nfor i in range(3):\n    if s[i] == 'R':\n        count += 1\n        maxcount = count\n    else:\n        count = 0\n\nprint(maxcount)","label":2}
{"problem_id":"p02662","problem":"Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N and another positive integer S.\nFor a non-empty subset T of the set \\{1, 2, \\ldots , N \\}, let us define f(T) as follows:\n\nf(T) is the number of different non-empty subsets \\{x_1, x_2, \\ldots , x_k \\} of T such that A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S.\n\nFind the sum of f(T) over all 2^N-1 subsets T of \\{1, 2, \\ldots , N \\}. Since the sum can be enormous, print it modulo 998244353.","submission_id":"s859104365","submission":"\nimport sys, io, os, re\nimport bisect\nfrom pprint import pprint\nfrom math import sin, cos, pi, radians, sqrt, floor\nfrom copy import copy, deepcopy\nfrom collections import deque\nfrom fractions import gcd\nfrom functools import reduce\n\ndef array1(n): return [0] * n\ndef array2(n, m): return [[0] * m for x in range(n)]\ndef array3(n, m, l): return [[[0] * l for y in xrange(m)] for x in xrange(n)]\n\nn, s = list(map(int, sys.stdin.readline().strip().split()))\na = [0 for x in range(n)]\na = list(map(int, sys.stdin.readline().strip().split()))\n\nmod = 998244353\n\nd = array2(n+1, s+1)\nd[0][0] = 1\n\nfor i in range(n):\n    #print(d)\n    for j in range(s+1):\n        d[i+1][j] += d[i][j] * 2\n        d[i+1][j] %= mod\n        if j + a[i] <= s:\n            d[i+1][j+a[i]] += d[i][j]\n            d[i+1][j+a[i]] %= mod\n\n#print(d)\nprint(d[n][s])\n","label":2}
{"problem_id":"p02596","problem":"Takahashi loves the number 7 and multiples of K.\nWhere is the first occurrence of a multiple of K in the sequence 7,77,777,\\ldots? (Also see Output and Sample Input\/Output below.)\nIf the sequence contains no multiples of K, print -1 instead.","submission_id":"s402818150","submission":"K = int(input())\nid = 1\ncnt = 7\nwhile cnt < K:\n    cnt = cnt * 10 + 7\n    id += 1\n\nvisited = [0] * K\nwhile True:\n    remz = (cnt % K)\n    if remz == 0:\n        break\n    visited[remz] += 1\n    if visited[remz] > 1:\n        id = -1\n        break\n    cnt = remz * 10 + 7\n    id += 1\n\nprint(id)\n","label":2}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s078715217","submission":"H, W  = map(int, input().split())\nX = [list(input().split()) for i in range(H)]\nfor i in range(2*H):\n  print(*X[int(i\/2)])","label":2}
{"problem_id":"p03695","problem":"In AtCoder, a person who has participated in a contest receives a color, which corresponds to the person's rating as follows:  \n\nRating 1-399 : gray\nRating 400-799 : brown\nRating 800-1199 : green\nRating 1200-1599 : cyan\nRating 1600-1999 : blue\nRating 2000-2399 : yellow\nRating 2400-2799 : orange\nRating 2800-3199 : red\n\nOther than the above, a person whose rating is 3200 or higher can freely pick his\/her color, which can be one of the eight colors above or not.\nCurrently, there are N users who have participated in a contest in AtCoder, and the i-th user has a rating of a_i.\nFind the minimum and maximum possible numbers of different colors of the users.","submission_id":"s615455860","submission":"#!\/usr\/bin\/env python3\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef rank(n):\n    if 1 <= n <= 399:\n        return 'gray'\n    elif 400 <= n <= 799:\n        return 'brown'\n    elif 800 <= n <= 1199:\n        return 'green'\n    elif 1200 <= n <= 1599:\n        return 'skyblue'\n    elif 1600 <= n <= 1999:\n        return 'blue'\n    elif 2000 <= n <= 2399:\n        return 'yellow'\n    elif 2400 <= n <= 2799:\n        return 'orange'\n    elif 2800 <= n <= 3199:\n        return 'red'\n    else:\n        return 'others'\n\ncolors = [rank(a[i]) for i in range(n)]\nnumother = colors.count('others')\ncolors = set(colors)\n\nif 'others' in colors:\n    colors.remove('others')\n    minimum = len(colors)\n    tmp = minimum\n    if minimum == 0:\n        minimum = 1 \n    maximum = tmp + numother\nelse:\n    minimum = len(colors)\n    maximum = minimum\n\nprint(minimum, maximum)\n","label":2}
{"problem_id":"p03038","problem":"You have N cards. On the i-th card, an integer A_i is written.\nFor each j = 1, 2, ..., M in this order, you will perform the following operation once:\nOperation: Choose at most B_j cards (possibly zero). Replace the integer written on each chosen card with C_j.\nFind the maximum possible sum of the integers written on the N cards after the M operations.","submission_id":"s740879836","submission":"import sys\nsys.setrecursionlimit(10**9)\n\ndef mi(): return map(int,input().split())\ndef ii(): return int(input())\ndef isp(): return input().split()\ndef deb(text): print(\"-------\\n{}\\n-------\".format(text))\n\nclass Counter:\n    def __init__(self):\n        self.dict = {}\n\n    def add(self,x):\n        if x in self.dict: self.dict[x] += 1\n        else: self.dict[x] = 1\n\n    def decrement(self,x):\n        self.dict[x] -= 1\n        if self.dict[x] <= 0:\n            del self.dict[x]\n\n    def get_dict(self):\n        return self.dict\n\n\nINF=10**20\ndef main():\n    N,M=mi()\n    A=list(mi())\n\n    X = []\n    for i in range(M):\n        b,c=mi()\n        X.append((c,b))\n    \n    X.sort(reverse=True)\n    A.sort(reverse=True)\n\n    xi = 0\n    b = 0\n\n    newA = []\n    while A:\n        if not xi < len(X): break\n        \n        if b == 0: c,b = X[xi]\n        a = A.pop() # \u5c0f\u3055\u3044\u9806\u306b\n\n        # print(a,b,c)\n        if a < c:   \n            newA.append(c)\n        else:\n            A.append(a)\n            b = 0\n\n        b -= 1 \n        if b <= 0:\n            xi += 1\n    \n    # print(A)\n    # print(newA)\n    print(sum(newA) + sum(A))\n        \n\n        \n\n\n\n\nif __name__ == \"__main__\":\n    main()","label":2}
{"problem_id":"p02861","problem":"There are N towns in a coordinate plane. Town i is located at coordinates (x_i, y_i). The distance between Town i and Town j is \\sqrt{\\left(x_i-x_j\\right)^2+\\left(y_i-y_j\\right)^2}.\nThere are N! possible paths to visit all of these towns once. Let the length of a path be the distance covered when we start at the first town in the path, visit the second, third, \\dots, towns, and arrive at the last town (assume that we travel in a straight line from a town to another). Compute the average length of these N! paths.","submission_id":"s767116678","submission":"from fractions import gcd\nfrom collections import Counter, deque, defaultdict\nfrom heapq import heappush, heappop, heappushpop, heapify, heapreplace, merge\nfrom bisect import bisect_left, bisect_right, bisect, insort_left, insort_right, insort\nfrom itertools import product, combinations,permutations\nfrom copy import deepcopy\nimport sys\nfrom math import sqrt\nsys.setrecursionlimit(4100000)\n\n\n\nif __name__ == '__main__':\n    N = int(input())\n    xy = []\n    for _ in range(N):\n        x, y = map(int, input().split())\n        xy.append([x, y])\n    \n    visit_perm = list(range(N))\n    sum_dist = 0\n    cnt = 0\n    for v in permutations(visit_perm):\n        cnt += 1\n        prev = -1\n        for i, p in enumerate(v):\n            if i==0:\n                prev = [xy[p][0], xy[p][1]]\n            else:\n                sum_dist += sqrt((xy[p][0]-prev[0])**2+(xy[p][1]-prev[1])**2)\n    print(sum_dist\/cnt)","label":2}
{"problem_id":"p03409","problem":"On a two-dimensional plane, there are N red points and N blue points.\nThe coordinates of the i-th red point are (a_i, b_i), and the coordinates of the i-th blue point are (c_i, d_i).\nA red point and a blue point can form a friendly pair when, the x-coordinate of the red point is smaller than that of the blue point, and the y-coordinate of the red point is also smaller than that of the blue point.\nAt most how many friendly pairs can you form? Note that a point cannot belong to multiple pairs.","submission_id":"s391139871","submission":"n=int(input())\n\nredlist=[list(map(int,input().split())) for _ in range(n)]\nbluelist=[list(map(int,input().split())) for _ in range(n)]\n\nredlist.sort(key = lambda x : x[1], reverse = True)\nbluelist.sort(key = lambda x : x[0])\n\n\noutput=0\n\nfor blue in bluelist:\n\tfor red in redlist:\n\t\tif blue[1] > red[1] and blue[0] > red[0]:\n\t\t\toutput+=1\n\t\t\tredlist.remove(red)\n\t\t\tbreak\n\nprint(output)\n","label":2}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s099222991","submission":"N = int(input())\nS = input()\nnow = 0\nright = 0\nleft = 0\nadd_left = 0\nwhile now < N:\n    if S[now] == '(':\n        left += 1\n    else:\n        if left:\n            left -= 1\n        else:\n            add_left += 1\n    now += 1\nfor _ in range(add_left):\n    print('(', end='')\nprint(S, end='')\nfor _ in range(left):\n    print(')', end='')\n\n","label":2}
{"problem_id":"p03240","problem":"In the Ancient Kingdom of Snuke, there was a pyramid to strengthen the authority of Takahashi, the president of AtCoder Inc.\nThe pyramid had center coordinates (C_X, C_Y) and height H. The altitude of coordinates (X, Y) is max(H - |X - C_X| - |Y - C_Y|, 0).  \nAoki, an explorer, conducted a survey to identify the center coordinates and height of this pyramid. As a result, he obtained the following information:  \n\nC_X, C_Y was integers between 0 and 100 (inclusive), and H was an integer not less than 1.  \nAdditionally, he obtained N pieces of information. The i-th of them is: \"the altitude of point (x_i, y_i) is h_i.\"  \n\nThis was enough to identify the center coordinates and the height of the pyramid. Find these values with the clues above.","submission_id":"s609775250","submission":"n = int(input())\nxyh = []\nfor _ in range(n):\n    x, y, h = map(int, input().split())\n    xyh.append((x, y, h))\nfor cx in range(101):\n    for cy in range(101):\n        H = None\n        maxH = 10**12\n        for x, y, h in xyh:\n            if h>0:\n                if H is None:\n                    H = h+abs(x-cx)+abs(y-cy)\n                elif H!=h+abs(x-cx)+abs(y-cy):\n                    break\n                if H>maxH:\n                    break\n            else:\n                maxH = min(maxH, abs(x-cx)+abs(y-cy))\n                if H is not None and H>maxH:\n                    break\n        else:\n            print(cx, cy, H)\n            exit()","label":2}
{"problem_id":"p03631","problem":"You are given a three-digit positive integer N.\nDetermine whether N is a palindromic number.\nHere, a palindromic number is an integer that reads the same backward as forward in decimal notation.","submission_id":"s843958165","submission":"n = input()\nreverse = n[::-1]\nif n == reverse:\n  print('Yes')\nelse:\n  print('No')","label":2}
{"problem_id":"p03090","problem":"You are given an integer N.\nBuild an undirected graph with N vertices with indices 1 to N that satisfies the following two conditions:\n\nThe graph is simple and connected.\nThere exists an integer S such that, for every vertex, the sum of the indices of the vertices adjacent to that vertex is S.\n\nIt can be proved that at least one such graph exists under the constraints of this problem.","submission_id":"s067576139","submission":"n=int(input())\nm=(n*(n-1)\/\/2)-(n\/\/2)\nprint(m)\nx=n+1-n%2\nfor i in range(1,n):\n    for j in range(i+1,n+1):\n        if i+j!=x:\n            print(i,j)\n    \n\n\n","label":2}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s687076106","submission":"s=list(input())\nt=list(input())\ncnt=0\nfor a,b in zip(s,t):\n  if a==b:\n    cnt+=1\nprint(cnt)","label":2}
{"problem_id":"p02600","problem":"M-kun is a competitor in AtCoder, whose highest rating is X.\nIn this site, a competitor is given a kyu (class) according to his\/her highest rating. For ratings from 400 through 1999, the following kyus are given:\n\nFrom 400 through 599: 8-kyu\nFrom 600 through 799: 7-kyu\nFrom 800 through 999: 6-kyu\nFrom 1000 through 1199: 5-kyu\nFrom 1200 through 1399: 4-kyu\nFrom 1400 through 1599: 3-kyu\nFrom 1600 through 1799: 2-kyu\nFrom 1800 through 1999: 1-kyu\n\nWhat kyu does M-kun have?","submission_id":"s384543889","submission":"x = int(input())\n\ndef score(x):\n if  400 <= x <= 599:\n        print(\"8\")\n elif 600 <= x <= 799:\n        print(\"7\")\n elif 800 <= x <= 999:\n        print(\"6\")\n elif 1000 <= x <= 1199:\n        print(\"5\")\n elif 1200 <= x <= 1399:\n        print(\"4\")\n elif 1400 <= x <= 1599:\n        print(\"3\")\n elif 1600 <= x <= 1799:\n        print(\"2\")\n elif 1800 <= x <= 1999:\n        print(\"1\")\n\nscore(x)","label":2}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s164200497","submission":"NXT= [int(i) for i in input().split(' ')]\ni=NXT[0]\ncount=0\nwhile i>0: \n    i -= NXT[1];count +=1\nprint(int(NXT[2]*count))","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s469124831","submission":"n=int(input())\nprint(sum(n\/\/i-1 for i in range(1,int((n+1)**0.5)) if n%i<1))\n","label":2}
{"problem_id":"p02272","problem":"Write a program of a Merge Sort algorithm implemented by the following pseudocode. You should also report the number of comparisons in the Merge function.","submission_id":"s388495205","submission":"n = int(input())\nnums = [int(i) for i in input().split(\" \")]\n\ncount = 0\n\ndef merge(nums, left, mid, right):\n    i = 0\n    j = 0\n    nums_l = nums[left:mid]\n    nums_r = nums[mid:right]\n    nums_l.append(10 ** 9 + 1)\n    nums_r.append(10 ** 9 + 1)\n    for x in range(0, right - left):\n        global count\n        count = count + 1\n        if nums_l[i] <= nums_r[j]:\n            nums[left + x] = nums_l[i]\n            i = i + 1\n        else:\n            nums[left + x] = nums_r[j]\n            j = j + 1\n\ndef merge_sort(nums, left, right):\n    if left + 1 < right:\n        mid = int((left + right) \/ 2)\n        merge_sort(nums, left, mid)\n        merge_sort(nums, mid, right)\n        merge(nums, left, mid, right)\n\nmerge_sort(nums, 0, n)\nresult = \"\"\nfor i in nums:\n    result += str(i) + \" \"\nprint(result.rstrip())\nprint(count)\n","label":2}
{"problem_id":"p03030","problem":"You have decided to write a book introducing good restaurants.\nThere are N restaurants that you want to introduce: Restaurant 1, Restaurant 2, ..., Restaurant N. Restaurant i is in city S_i, and your assessment score of that restaurant on a 100-point scale is P_i.\nNo two restaurants have the same score.\nYou want to introduce the restaurants in the following order:\n\nThe restaurants are arranged in lexicographical order of the names of their cities.\nIf there are multiple restaurants in the same city, they are arranged in descending order of score.\n\nPrint the identification numbers of the restaurants in the order they are introduced in the book.","submission_id":"s291850772","submission":"n = int(input())\na = [input().split() for i in range(n)]\nfor i in range(n):\n    a[i][1] = int(a[i][1])\n    a[i].append(i + 1)\na.sort()\nfor i in range(100):\n    for j in range(1,n):\n        if a[j][0] == a[j-1][0] and a[j][1] > a[j-1][1]:\n            a[j-1],a[j] = a[j],a[j-1]\nfor i in range(n):\n    print(a[i][2])","label":2}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s253994982","submission":"if (int(input())%500)<=int(input()):\n    print('Yes')\nelse:\n    print('No')","label":2}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s910262895","submission":"n=int(input())\nl=[int(input()) for i in range(n)]\nres = sum(l)-max(l)\/\/2\nprint(res)","label":2}
{"problem_id":"p02715","problem":"Consider sequences \\{A_1,...,A_N\\} of length N consisting of integers between 1 and K (inclusive).\nThere are K^N such sequences. Find the sum of \\gcd(A_1, ..., A_N) over all of them.\nSince this sum can be enormous, print the value modulo (10^9+7).\nHere \\gcd(A_1, ..., A_N) denotes the greatest common divisor of A_1, ..., A_N.","submission_id":"s682630766","submission":"def solve():\n    mod = 10**9+7\n    N, K = map(int, input().split())\n    lis = [0]*(K+1)\n    ans = 0\n    for i in range(K,0,-1):\n        lis[i] = pow((K\/\/i),N,mod)\n        for j in range(2,K\/\/i+1):\n            lis[i] -= lis[i*j]\n        ans += lis[i]*i\n        ans %= mod\n    return ans\nprint(solve())","label":2}
{"problem_id":"p02402","problem":"Write a program which reads a sequence of $n$ integers $a_i (i = 1, 2, ... n)$, and prints the minimum value, maximum value and sum of the sequence.","submission_id":"s889959069","submission":"# encoding:utf-8\n\ncount = input()\ninput = map(int, raw_input().split())\n\nmin = min(input)\nmax =max(input) \nsum = sum(input)\n\nprint(min),\nprint(max),\nprint(sum)","label":2}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s777022270","submission":"# region header\nimport sys\nimport math\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right\nfrom collections import defaultdict, deque, Counter\nfrom copy import deepcopy\nfrom fractions import gcd\nfrom functools import lru_cache, reduce\nfrom heapq import heappop, heappush\nfrom itertools import accumulate, groupby, product, permutations, combinations, combinations_with_replacement\nfrom math import ceil, floor, factorial, log, sqrt, sin, cos\nfrom operator import itemgetter\nfrom string import ascii_lowercase, ascii_uppercase, digits\nsys.setrecursionlimit(10**7)\nrs = lambda: sys.stdin.readline().rstrip()\nri = lambda: int(rs())\nrf = lambda: float(rs())\nrs_ = lambda: [_ for _ in rs().split()]\nri_ = lambda: [int(_) for _ in rs().split()]\nrf_ = lambda: [float(_) for _ in rs().split()]\nINF = float('inf')\nMOD = 10 ** 9 + 7\nPI = math.pi\n# endregion\nx1, y1, x2, y2 = ri_()\nprint(x2 - (y2 - y1), y2 + (x2 - x1), x1 - (y2 - y1), y1 + (x2 - x1))","label":2}
{"problem_id":"p03131","problem":"Snuke has one biscuit and zero Japanese yen (the currency) in his pocket.\nHe will perform the following operations exactly K times in total, in the order he likes:\n\nHit his pocket, which magically increases the number of biscuits by one.\nExchange A biscuits to 1 yen.\nExchange 1 yen to B biscuits.\n\nFind the maximum possible number of biscuits in Snuke's pocket after K operations.","submission_id":"s238809061","submission":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nK, A, B = MAP()\n\nif A+1 >= B or A >= K:\n\tprint(1+K)\nelse:\n\tans = A\n\tK -= A-1\n\tn, left = divmod(K, 2)\n\tans += n*(B-A)+left\n\tprint(ans)\n","label":2}
{"problem_id":"p03315","problem":"There is always an integer in Takahashi's mind.\nInitially, the integer in Takahashi's mind is 0. Takahashi is now going to eat four symbols, each of which is + or -. When he eats +, the integer in his mind increases by 1; when he eats -, the integer in his mind decreases by 1.\nThe symbols Takahashi is going to eat are given to you as a string S. The i-th character in S is the i-th symbol for him to eat.\nFind the integer in Takahashi's mind after he eats all the symbols.","submission_id":"s605543867","submission":"s=input()\nc=0\nfor i in s:\n    if(i=='-'):\n        c-=1\n        \n    else:\n        c+=1\nprint(c)","label":2}
{"problem_id":"p03473","problem":"How many hours do we have until New Year at M o'clock (24-hour notation) on 30th, December?","submission_id":"s163816602","submission":"import sys\n\nm = int(sys.stdin.readline().rstrip())\n\ndef main():\n    return 48 - m\n\nif __name__ == '__main__':\n    ans = main()\n    print(ans)","label":2}
{"problem_id":"p02624","problem":"For a positive integer X, let f(X) be the number of positive divisors of X.\nGiven a positive integer N, find \\sum_{K=1}^N K\\times f(K).","submission_id":"s451279173","submission":"N = int(input())\n\nA = [1] * (N+1)\nfor i in range(2,N+1):\n  a = i\n  while a < N+1:\n    A[a] += 1\n    a += i\n\n#print(A)\nans = 0\nfor i in range(N+1):\n  ans += i * A[i]\n  \nprint(ans)","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s230051027","submission":"n = int(input())\nl = [list(map(int, input().strip().split())) for i in range(n)]\ncnt = 0\nfor i in l:\n    cnt += len([j for j in range(i[0], i[1]+1)])\nprint(cnt)","label":2}
{"problem_id":"p03636","problem":"The word internationalization is sometimes abbreviated to i18n.\nThis comes from the fact that there are 18 letters between the first i and the last n.\nYou are given a string s of length at least 3 consisting of lowercase English letters.\nAbbreviate s in the same way.","submission_id":"s385294709","submission":"s = input()\nprint(s[0],len(s[1:-1]),s[-1],sep='')","label":2}
{"problem_id":"p03371","problem":"\"Pizza At\", a fast food chain, offers three kinds of pizza: \"A-pizza\", \"B-pizza\" and \"AB-pizza\". A-pizza and B-pizza are completely different pizzas, and AB-pizza is one half of A-pizza and one half of B-pizza combined together. The prices of one A-pizza, B-pizza and AB-pizza are A yen, B yen and C yen (yen is the currency of Japan), respectively.\nNakahashi needs to prepare X A-pizzas and Y B-pizzas for a party tonight. He can only obtain these pizzas by directly buying A-pizzas and B-pizzas, or buying two AB-pizzas and then rearrange them into one A-pizza and one B-pizza. At least how much money does he need for this? It is fine to have more pizzas than necessary by rearranging pizzas.","submission_id":"s754631345","submission":"import math\nA,B,C,X,Y = map(int,input().split())\n\na = [0,1,2,X-2,X-1,X,abs(X-Y),abs(X-Y+1),abs(X-Y-1)]\nb = [0,1,2,Y-2,Y-1,Y,abs(Y-X),abs(Y-X+1),abs(Y-X-1)]\nc = [0,1,2,X*2-2,X*2-1,X*2,Y*2-2,Y*2-1,Y*2]\nans = A * X + B * Y\nfor aa in a:\n    for bb in b:\n        for cc in c:\n            if aa + cc * 0.5 >= X and bb + cc * 0.5 >= Y:\n                mny = A * aa + B * bb + C * cc\n                if mny < ans:\n                    ans = mny\nprint(ans)","label":2}
{"problem_id":"p03767","problem":"There are 3N participants in AtCoder Group Contest.\nThe strength of the i-th participant is represented by an integer a_i.\nThey will form N teams, each consisting of three participants.\nNo participant may belong to multiple teams.\nThe strength of a team is defined as the second largest strength among its members.\nFor example, a team of participants of strength 1, 5, 2 has a strength 2, and a team of three participants of strength 3, 2, 3 has a strength 3.\nFind the maximum possible sum of the strengths of N teams.","submission_id":"s923020220","submission":"# vim: fileencoding=utf-8\n\n\ndef main():\n    n = int(input())\n    li = list(map(int, input().split()))\n    li.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        ans += li[i * 2 + 1]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p03797","problem":"Snuke loves puzzles.\nToday, he is working on a puzzle using S- and c-shaped pieces.\nIn this puzzle, you can combine two c-shaped pieces into one S-shaped piece, as shown in the figure below:\n\n\n\nSnuke decided to create as many Scc groups as possible by putting together one S-shaped piece and two c-shaped pieces.\nFind the maximum number of Scc groups that can be created when Snuke has N S-shaped pieces and M c-shaped pieces.","submission_id":"s874275831","submission":"n,m = map(int,input().split())\nprint(min(m\/\/2,(n+m\/\/2)\/\/2))\n","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s638845400","submission":"from operator import mul\nfrom functools import reduce\nfrom collections import Counter\n# from itertools import combinations as comb\n# from itertools import permutations as perm\n# from copy import copy\n# \u914d\u5217\u4e8c\u5206\u6cd5\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n# https:\/\/docs.python.jp\/3\/library\/bisect.html\n# import bisect\n# \u6841\u6570\u6307\u5b9a\n# print('{:.3f}'.format(X))\n# from collections import defaultdict\n# dic = defaultdict(lambda: ...)\n# \u5024\u3067\u8f9e\u66f8\u3092\u30bd\u30fc\u30c8\n# sorted(dic.items(), key=lambda x:x[1])\n# \u30d2\u30fc\u30d7\u30ad\u30e5\u30fc\n# https:\/\/docs.python.org\/ja\/3\/library\/heapq.html\n# import heapq\n# \u6b63\u898f\u8868\u73fe(regular expression)\u306e\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\n# import re\n\nimport sys\n\nsys.setrecursionlimit(2000)\n\n\ndef inpl():\n    return list(map(int, input().split()))\n\n\n# \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\u306f nHr = (n + r - 1)Cn\ndef cmb(n, r):\n    # combination\n    if n < r:\n        return 0\n    r = min(n - r, r)\n    if r == 0:\n        return 1\n    over = reduce(mul, range(n, n - r, -1))\n    under = reduce(mul, range(1, r + 1))\n    return over \/\/ under\n\n\ndef gcd(a, b):\n    # greatest common divisor\n    while b > 0:\n        a, b = b, a % b\n\n    return a\n\n\ndef lcm(a, b):\n    # least common multiple\n    return a * b \/\/ gcd(a, b)\n\n\nN = int(input())\nA = inpl()\nans = 0\nfor i in range(N - 1):\n    if A[i] == A[i + 1]:\n        A[i + 1] = -1\n        ans += 1\n\nprint(ans)\n","label":2}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s964891990","submission":"import functools\nimport os\nimport sys\n\nsys.setrecursionlimit(10000)\nINF = float('inf')\n\n\ndef debug(fn):\n    if not os.getenv('LOCAL'):\n        return fn\n\n    @functools.wraps(fn)\n    def wrapper(*args, **kwargs):\n        ret = fn(*args, **kwargs)\n        print('DEBUG: {}({}) -> '.format(\n            fn.__name__,\n            ', '.join(\n                list(map(str, args)) +\n                ['{}={}'.format(k, str(v)) for k, v in kwargs.items()]\n            )\n        ), end='')\n        print(ret)\n        return ret\n\n    return wrapper\n\n\n# @debug\n# @functools.lru_cache(maxsize=None)\n# def solve(idx, abc=3):\n#     \"\"\"\n#     S[0:idx+1] \u306e ABC \u6570\u306e\u6570\n#     abc=2 \u306a\u3089 AB \u6570\u3001abc=1 \u306a\u3089 A \u6570\u3001abc=0 \u306a\u3089\u4eca\u307e\u3067\u306e\u30d1\u30bf\u30fc\u30f3\u6570\n#     :param idx:\n#     :param abc:\n#     :return:\n#     \"\"\"\n#     if idx < 0:\n#         return 1 if abc == 0 else 0\n#     c = S[idx]\n#     if 1 <= abc <= 3:\n#         if c == '0ABC'[abc]:\n#             return (solve(idx - 1, abc=abc) + solve(idx - 1, abc=abc - 1)) % MOD\n#         elif c == '?':\n#             return (solve(idx - 1, abc=abc) * 3 + solve(idx - 1, abc=abc - 1)) % MOD\n#         else:\n#             return (solve(idx - 1, abc=abc)) % MOD\n#     elif abc == 0:\n#         if c == '?':\n#             return (solve(idx - 1, abc=0) * 3) % MOD\n#         else:\n#             return (solve(idx - 1, abc=0)) % MOD\n\n\nS = input()\nMOD = 10 ** 9 + 7\n# print(solve(len(S) - 1) % MOD)\n\n# \u2191\u306e DP \u7248\n# dp[i][3]: S[0:i] \u306e ABC \u6570\n# dp[i][2]: S[0:i] \u306e AB \u6570\n# dp[i][1]: S[0:i] \u306e A \u6570\n# dp[i][0]: S[0:i] \u306e\u7d44\u307f\u5408\u308f\u305b\u6570\n# dp = np.empty((len(S) + 1, 4))\n# dp[0][0] = 1\n# for i in range(len(S)):\n#     c = S[i]\n#     if c == '?':\n#         dp[i + 1][0] = dp[i][0] * 3 % MOD\n#     else:\n#         dp[i + 1][0] = dp[i][0] % MOD\n#     for abc in [1, 2, 3]:\n#         if c == '0ABC'[abc]:\n#             dp[i + 1][abc] = (dp[i][abc] + dp[i][abc - 1]) % MOD\n#         elif c == '?':\n#             dp[i + 1][abc] = (dp[i][abc] * 3 + dp[i][abc - 1]) % MOD\n#         else:\n#             dp[i + 1][abc] = dp[i][abc] % MOD\n#     # dp[i + 1, :] %= MOD\n# print(int(dp[len(S), 3]))\n\n\n# \u2191\u306e\u914d\u5217\u518d\u5229\u7528\u7248\ndp = [0] * 4\ndp[0] = 1\nfor i in range(len(S)):\n    c = S[i]\n    for abc in [3, 2, 1]:\n        if c == '0ABC'[abc]:\n            dp[abc] = (dp[abc] + dp[abc - 1]) % MOD\n        elif c == '?':\n            dp[abc] = (dp[abc] * 3 + dp[abc - 1]) % MOD\n    if c == '?':\n        dp[0] = dp[0] * 3 % MOD\nprint(int(dp[3]))\n","label":2}
{"problem_id":"p03660","problem":"Fennec and Snuke are playing a board game.\nOn the board, there are N cells numbered 1 through N, and N-1 roads, each connecting two cells. Cell a_i is adjacent to Cell b_i through the i-th road. Every cell can be reached from every other cell by repeatedly traveling to an adjacent cell. In terms of graph theory, the graph formed by the cells and the roads is a tree.\nInitially, Cell 1 is painted black, and Cell N is painted white. The other cells are not yet colored.\nFennec (who goes first) and Snuke (who goes second) alternately paint an uncolored cell.\nMore specifically, each player performs the following action in her\/his turn:\n\nFennec: selects an uncolored cell that is adjacent to a black cell, and paints it black.\nSnuke: selects an uncolored cell that is adjacent to a white cell, and paints it white.\n\nA player loses when she\/he cannot paint a cell. Determine the winner of the game when Fennec and Snuke play optimally.","submission_id":"s279234626","submission":"import sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef MI(): return map(int,sys.stdin.readline().rstrip().split())\n\nN = I()\n\nGraph = [[] for i in range(N+1)]\nfor i in range(N-1):\n    a,b = MI()\n    Graph[a].append(b)\n    Graph[b].append(a)\n\nFennec = [-1]*(N+1)  # Fennec \u306e\u5404\u9802\u70b9\u3078\u306e\u6700\u77ed\u8ddd\u96e2\nSnuke = [-1]*(N+1)  # Snuke \u306e\u5404\u9802\u70b9\u3078\u306e\u8ddd\u96e2\n\nfrom collections import deque\n\nq1 = deque([1])\nq2 = deque([N])\nFennec[1] = 0\nSnuke[N] = 0\nwhile q1:\n    n = q1.pop()\n    for d in Graph[n]:\n        if Fennec[d] == -1:\n            Fennec[d] = Fennec[n] + 1\n            q1.appendleft(d)\nwhile q2:\n    n = q2.pop()\n    for d in Graph[n]:\n        if Snuke[d] == -1:\n            Snuke[d] = Snuke[n] + 1\n            q2.appendleft(d)\n            \na = sum(Fennec[i] <= Snuke[i] for i in range(1,N+1))\nprint('Fennec' if a >= N\/\/2+1 else 'Snuke')\n","label":2}
{"problem_id":"p02256","problem":"Write a program which finds the greatest common divisor of two natural numbers a and b","submission_id":"s941451139","submission":"N=raw_input()\nN = [int(i) for i in N.split()]\nm,n = (N[1],N[0]) if N[1] > N[0] else (N[0],N[1])\ndef gcd(m, n):\n    if ((m % n) == 0):\n        return n\n    else:\n        return gcd(n, m % n)\nprint gcd(m,n)","label":2}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s211217096","submission":"N=int(input())\na=list(map(int,input().split()))\n\na.sort(reverse=True)\n\npt_alice = 0\npt_bob = 0\nalices_turn = True\nfor i in range(N):\n    if alices_turn:\n        pt_alice += a[i]\n    else:\n        pt_bob += a[i]\n    alices_turn = not alices_turn\n\nprint(pt_alice-pt_bob)","label":2}
{"problem_id":"p02951","problem":"We have two bottles for holding water.\nBottle 1 can hold up to A milliliters of water, and now it contains B milliliters of water.\nBottle 2 contains C milliliters of water.\nWe will transfer water from Bottle 2 to Bottle 1 as much as possible.\nHow much amount of water will remain in Bottle 2?","submission_id":"s046217105","submission":"A,B,C=map(int,input().split())\n\nans=(C-(A-B))\n\nans=max(0,ans)\nprint(ans)\n\n","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s699276525","submission":"s = input()\nr = s[:3]+'8'+s[4:]\nprint(r)\n","label":2}
{"problem_id":"p03671","problem":"Snuke is buying a bicycle.\nThe bicycle of his choice does not come with a bell, so he has to buy one separately.\nHe has very high awareness of safety, and decides to buy two bells, one for each hand.\nThe store sells three kinds of bells for the price of a, b and c yen (the currency of Japan), respectively.\nFind the minimum total price of two different bells.","submission_id":"s926927467","submission":"l = list(map(int, input().split()))\nprint(min(sum(l[:2]), sum(l[1:]), l[0]+l[2]))","label":2}
{"problem_id":"p02627","problem":"An uppercase or lowercase English letter \\alpha will be given as input.\nIf \\alpha is uppercase, print A; if it is lowercase, print a.","submission_id":"s913676668","submission":"n = input()\nprint(\"A\" if n.isupper() else \"a\")","label":2}
{"problem_id":"p03165","problem":"You are given strings s and t.\nFind one longest string that is a subsequence of both s and t.","submission_id":"s069359857","submission":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\ndef longest_common_subsequence(S, T):\n    \"\"\"compute table dp satisfying: \n    dp[i,j] = LCS(S[:i], T[:j])\"\"\"\n    LS, LT = len(S), len(T)\n    dp = np.zeros((LS + 1, LT + 1), np.int32)\n    for n in range(1, LS + 1):\n        dp[n, 1:] = dp[n - 1, :-1] + (S[n - 1] == T)  # \u5de6\u4e0a\u304b\u3089\n        np.maximum(dp[n], dp[n - 1], out=dp[n])  # \u4e0a\u304b\u3089\n        np.maximum.accumulate(dp[n], out=dp[n])  # \u5de6\u304b\u3089\n    return dp\n\ndef reconstruct_LCS(S, T, dp):\n    tmp = []\n    i, j = len(S), len(T)\n    while i > 0 and j > 0:\n        if S[i - 1] == T[j - 1]:\n            i, j = i - 1, j - 1\n            tmp.append(S[i])\n        elif dp[i, j] == dp[i - 1, j]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(tmp))\n\nS = np.array(list(readline().decode()), 'U1')[:-1]\nT = np.array(list(readline().decode()), 'U1')[:-1]\n\ndp = longest_common_subsequence(S, T)\n\nprint(reconstruct_LCS(S, T, dp))\n","label":2}
{"problem_id":"p02239","problem":"Write a program which reads an directed graph $G = (V, E)$, and finds the shortest distance from vertex $1$ to each vertex (the number of edges in the shortest path). Vertices are identified by IDs $1, 2, ... n$.","submission_id":"s799195381","submission":"from collections import deque\n\n#\u30ad\u30e5\u30fc\u3092\u4f7f\u3063\u305f\u5e45\u512a\u5148\u63a2\u7d22\u306e\u5b9f\u88c5\nl = int(input())\nrlist = []\nfor i in range(l):\n    li = list(map(int, input().split()))\n    rlist.append(deque([ll-1 for ll in li[2:]]))\n\n\ncolor = ['white'] * l\nqueue = deque([])\nd = [10000000] * l\n\ndef bfs(u):\n    color[u] = 'gray'\n    d[u] = 0\n    queue.append(u)\n\n    while(len(queue) > 0):\n        u = queue.popleft()\n        for rl in rlist[u]:\n            if color[rl] == 'white':\n                color[rl] = 'gray'\n                d[rl] = d[u] + 1\n                queue.append(rl)\n        color[u] = 'black'\n\nbfs(0)\n\nfor i in range(l):\n    if d[i] == 10000000:\n        d[i] = -1\n\nfor i in range(l):\n    print(str(i+1) + ' ' + str(d[i]))\n","label":2}
{"problem_id":"p02609","problem":"Let \\mathrm{popcount}(n) be the number of 1s in the binary representation of n.\nFor example, \\mathrm{popcount}(3) = 2, \\mathrm{popcount}(7) = 3, and \\mathrm{popcount}(0) = 0.\nLet f(n) be the number of times the following operation will be done when we repeat it until n becomes 0: \"replace n with the remainder when n is divided by \\mathrm{popcount}(n).\" (It can be proved that, under the constraints of this problem, n always becomes 0 after a finite number of operations.)\nFor example, when n=7, it becomes 0 after two operations, as follows:\n\n\\mathrm{popcount}(7)=3, so we divide 7 by 3 and replace it with the remainder, 1.\n\\mathrm{popcount}(1)=1, so we divide 1 by 1 and replace it with the remainder, 0.\n\nYou are given an integer X with N digits in binary.\nFor each integer i such that 1 \\leq i \\leq N, let X_i be what X becomes when the i-th bit from the top is inverted.\nFind f(X_1), f(X_2), \\ldots, f(X_N).","submission_id":"s598402610","submission":"import sys\n\ndef input(): return sys.stdin.readline().strip()\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\ndef ceil(x, y=1): return int(-(-x \/\/ y))\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\ndef Yes(): print('Yes')\ndef No(): print('No')\ndef YES(): print('YES')\ndef NO(): print('NO')\nsys.setrecursionlimit(10 ** 9)\nINF = 10 ** 19\nMOD = 10 ** 9 + 7\nEPS = 10 ** -10\n\ndef popcount(i):\n    return bin(i).count('1')\n\nN = INT()\nS = list(map(int, input()))[::-1]\n\npcnt1 = S.count(1) - 1\npcnt2 = S.count(1) + 1\nbase1 = base2 = 0\nfor i in range(N):\n    if S[i]:\n        if pcnt1 != 0:\n            base1 += pow(2, i, pcnt1)\n        base2 += pow(2, i, pcnt2)\n\nans = [0] * N\nfor i in range(N):\n    if S[i] and pcnt1 == 0:\n        ans[i] = 0\n        continue\n    cur = 0\n    if S[i]:\n        cur += (base1 - pow(2, i, pcnt1)) % pcnt1\n    else:\n        cur += (base2 + pow(2, i, pcnt2)) % pcnt2\n    cnt = 1\n    while cur:\n        cur %= popcount(cur)\n        cnt += 1\n    ans[i] = cnt\nfor a in ans[::-1]:\n    print(a)\n","label":2}
{"problem_id":"p03737","problem":"You are given three words s_1, s_2 and s_3, each composed of lowercase English letters, with spaces in between.\nPrint the acronym formed from the uppercased initial letters of the words.","submission_id":"s450935099","submission":"S = input().split()\n\nmy_list = []\n\nfor i in range(len(S)):\n    S[i] = S[i].title()\n    my_list.append(S[i][0])\n\nprint(my_list[0]+my_list[1]+my_list[2])","label":2}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s915985760","submission":"h, w = map(int, input().split())\nc = []\nfor i in range(h):\n    c.append(input())\nthined_c = [0] * (2 * h)\nfor i in range(2 * h):\n    s = ''\n    for j in range(w):\n        s += c[i \/\/ 2][j]\n    thined_c[i] = s\nfor s in thined_c:\n    print(s)\n","label":2}
{"problem_id":"p03951","problem":"Snuke is interested in strings that satisfy the following conditions:\n\nThe length of the string is at least N.\nThe first N characters equal to the string s.\nThe last N characters equal to the string t.\n\nFind the length of the shortest string that satisfies the conditions.","submission_id":"s147569615","submission":"n = int(input())\ns = input()\nt = input()\n\nif s == t:\n\tprint(n)\n\texit()\n\nfor i in range(n):\n\tif s[i:] == t[:-i]:\n\t\tprint(n + i)\n\t\texit()\nelse:\n\tprint(n * 2)","label":2}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s132386554","submission":"h, w = list(map(int, input().split()))\np = [[\"\"] for _ in range(h)]\nfor i in range(h):\n    p[i] = input()\n\nfor i in p:\n    print(\"\".join(i))\n    print(\"\".join(i))\n","label":2}
{"problem_id":"p03574","problem":"You are given an H \u00d7 W grid.\nThe squares in the grid are described by H strings, S_1,...,S_H.\nThe j-th character in the string S_i corresponds to the square at the i-th row from the top and j-th column from the left (1 \\leq i \\leq H,1 \\leq j \\leq W).\n. stands for an empty square, and # stands for a square containing a bomb.  \nDolphin is interested in how many bomb squares are horizontally, vertically or diagonally adjacent to each empty square.\n(Below, we will simply say \"adjacent\" for this meaning. For each square, there are at most eight adjacent squares.)\nHe decides to replace each . in our H strings with a digit that represents the number of bomb squares adjacent to the corresponding empty square.  \nPrint the strings after the process.","submission_id":"s347612913","submission":"# AtCoder Beginner Contest 075\n# B - Minesweeper\n\ndef f(i,j):\n    ans[i+1][j+1]+=10**9+7\n    ans[i][j]+=1\n    ans[i][j+1]+=1\n    ans[i][j+2]+=1\n    ans[i+1][j]+=1\n    # ans[i+1][j+1]+=1\n    ans[i+1][j+2]+=1\n    ans[i+2][j]+=1\n    ans[i+2][j+1]+=1\n    ans[i+2][j+2]+=1\n\n\nH,W=map(int,input().split())\n\nans=[[0]*(W+2) for i in range (H+2)]\n\narea=[]\nfor i in range (H):\n    area.append(input())\n\nfor i in range(H):\n    for j in range (W):\n        if area[i][j]==\"#\":\n            f(i,j)\n\n\nfor i in range (H):\n    A=ans[1+i][1:-1]\n    for j in range (len(A)):\n        if A[j]>10**9:\n            A[j]=\"#\"\n        else:\n            A[j]=str(A[j])\n    print(\"\".join(A))","label":2}
{"problem_id":"p03549","problem":"Takahashi is now competing in a programming contest, but he received TLE in a problem where the answer is YES or NO.\nWhen he checked the detailed status of the submission, there were N test cases in the problem, and the code received TLE in M of those cases.\nThen, he rewrote the code to correctly solve each of those M cases with 1\/2 probability in 1900 milliseconds, and correctly solve each of the other N-M cases without fail in 100 milliseconds.\nNow, he goes through the following process:\n\nSubmit the code.\nWait until the code finishes execution on all the cases.\nIf the code fails to correctly solve some of the M cases, submit it again.\nRepeat until the code correctly solve all the cases in one submission.\n\nLet the expected value of the total execution time of the code be X milliseconds. Print X (as an integer).","submission_id":"s312671954","submission":"N, M = list(map(int, input().split()))\nprint((2**M)*(M*1800+N*100))","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s546029863","submission":"def main():\n    import sys\n    inl = sys.stdin.buffer.readline\n    \n    n = input()\n\n    if(n[len(n)-1] ==\"s\"):\n        n+='es'\n    else:\n        n+='s'\n    print(n)\n\n\n        \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    main()","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s476007599","submission":"N = int(input())\nsum = 0\nfor i in range(N):\n  l, r = map(int, input().split())\n  sum += (r-l) + 1\n  \nprint(sum)","label":2}
{"problem_id":"p02948","problem":"There are N one-off jobs available. If you take the i-th job and complete it, you will earn the reward of B_i after A_i days from the day you do it.\nYou can take and complete at most one of these jobs in a day.\nHowever, you cannot retake a job that you have already done.\nFind the maximum total reward that you can earn no later than M days from today.\nYou can already start working today.","submission_id":"s348159696","submission":"import heapq\nn,m = map(int,input().split())\nal = [[] for i in range(10**5)]\nans = 0\nh = []\nfor i in range(n):\n    a,b = map(int,input().split())\n    al[a-1] += [-b]\nfor i in range(m):\n    for j in al[i]:\n        heapq.heappush(h,j)\n    if h:\n        ans -= heapq.heappop(h)\nprint(ans)","label":2}
{"problem_id":"p03112","problem":"Along a road running in an east-west direction, there are A shrines and B temples.\nThe i-th shrine from the west is located at a distance of s_i meters from the west end of the road, and the i-th temple from the west is located at a distance of t_i meters from the west end of the road.\nAnswer the following Q queries:\n\nQuery i (1 \\leq i \\leq Q): If we start from a point at a distance of x_i meters from the west end of the road and freely travel along the road, what is the minimum distance that needs to be traveled in order to visit one shrine and one temple? (It is allowed to pass by more shrines and temples than required.)","submission_id":"s068566223","submission":"# coding: utf-8\nimport sys\nfrom bisect import bisect_left\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n# \u756a\u5175\u3092\u5de6\u53f3\u306b\u7f6e\u3044\u3066\u30014\u901a\u308a\u8a66\u3059\nA, B, Q = lr()\nINF = 10 ** 12\nS = [-INF] + [ir() for _ in range(A)] + [INF]\nT = [-INF] + [ir() for _ in range(B)] + [INF]\nS.sort(); T.sort()\nfor _ in range(Q):\n    x = ir()\n    si = bisect_left(S, x)\n    ti = bisect_left(T, x)\n    temp = []\n    temp.append(max(S[si], T[ti]) - x)\n    y = abs(S[si] - x)\n    z = abs(T[ti-1] - x)\n    temp.append(min(y, z) * 2 + max(y, z))\n    y = abs(S[si-1] - x)\n    z = abs(T[ti] - x)\n    temp.append(min(y, z) * 2 + max(y, z))\n    temp.append(x - min(S[si-1], T[ti-1]))\n    print(min(temp))\n\n# 46\n","label":2}
{"problem_id":"p03943","problem":"Two students of AtCoder Kindergarten are fighting over candy packs.\nThere are three candy packs, each of which contains a, b, and c candies, respectively.\nTeacher Evi is trying to distribute the packs between the two students so that each student gets the same number of candies. Determine whether it is possible.\nNote that Evi cannot take candies out of the packs, and the whole contents of each pack must be given to one of the students.","submission_id":"s500535533","submission":"li = list(map(int, input().split()))\nli = sorted(li)\nprint(\"Yes\" if li[0]+li[1]==li[2] else \"No\")","label":2}
{"problem_id":"p03126","problem":"Katsusando loves omelette rice.\nBesides, he loves cr\u00e8me br\u00fbl\u00e9e, tenderloin steak and so on, and believes that these foods are all loved by everyone.\nTo prove that hypothesis, he conducted a survey on M kinds of foods and asked N people whether they like these foods or not.\nThe i-th person answered that he\/she only likes the A_{i1}-th, A_{i2}-th, ..., A_{iK_i}-th food.\nFind the number of the foods liked by all the N people.","submission_id":"s408644348","submission":"N,M = map(int, input().split())\n\nans = set(range(1, M+1))\n\nfor _ in range(N):\n    L = list(map(int, input().split()))\n    ans &= set(L[1:])\n\nprint(len(ans))","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s844445613","submission":"string = input()\n \nif string[-1] != 's':\n  new_string = string[0:] + 's'\nif string[-1] == 's':\n  new_string = string[0:] +'es'\n \nprint(new_string)","label":2}
{"problem_id":"p03060","problem":"There are N gems. The value of the i-th gem is V_i.\nYou will choose some of these gems, possibly all or none, and get them.\nHowever, you need to pay a cost of C_i to get the i-th gem.\nLet X be the sum of the values of the gems obtained, and Y be the sum of the costs paid.\nFind the maximum possible value of X-Y.","submission_id":"s477618690","submission":"def q2():\n    N = int(input())\n    V = [int(i) for i in input().split()]\n    C = [int(i) for i in input().split()]\n\n    ans = 0\n    for i in range(N):\n        if V[i] - C[i] > 0:\n            ans += V[i] - C[i]\n    return ans\n\nif __name__ == '__main__':\n    print(q2())\n","label":2}
{"problem_id":"p02609","problem":"Let \\mathrm{popcount}(n) be the number of 1s in the binary representation of n.\nFor example, \\mathrm{popcount}(3) = 2, \\mathrm{popcount}(7) = 3, and \\mathrm{popcount}(0) = 0.\nLet f(n) be the number of times the following operation will be done when we repeat it until n becomes 0: \"replace n with the remainder when n is divided by \\mathrm{popcount}(n).\" (It can be proved that, under the constraints of this problem, n always becomes 0 after a finite number of operations.)\nFor example, when n=7, it becomes 0 after two operations, as follows:\n\n\\mathrm{popcount}(7)=3, so we divide 7 by 3 and replace it with the remainder, 1.\n\\mathrm{popcount}(1)=1, so we divide 1 by 1 and replace it with the remainder, 0.\n\nYou are given an integer X with N digits in binary.\nFor each integer i such that 1 \\leq i \\leq N, let X_i be what X becomes when the i-th bit from the top is inverted.\nFind f(X_1), f(X_2), \\ldots, f(X_N).","submission_id":"s475158588","submission":"N = int(input())\nX = input()\nans = [1 for _ in range(N)]\n#original 1 count\nl = X.count('1')\nif l == 0:\n  for _ in range(N):\n    print(1)\n  exit()\nif l == 1:\n  if X[-1] == '1':\n    for _ in range(N-1):\n      ans[_] = 2\n  else:\n    ans[-1] = 2 \n  for k in range(N):\n    if X[k] =='1':\n      ans[k] = 0 \n  for _ in range(N):\n    print(ans[_])\n  exit()\n \n \nintN = int(X, 2)\nN1 = intN %(l-1)\nN0 = intN % (l+1)\n \n \nstart = []\nif N == 1:\n  if X[0] == '1':\n    print(0)\n    exit()\n  else:\n    print(1)\n    exit()\nelse:\n  s1 = 1\n  s0 = 1\n  for k in range(N-1, -1, -1):\n    if X[k] == '1':      \n      ia = (N1 - s1)%(l-1)\n    else:\n      ia = (N0 + s0)%(l+1)\n    start.append(ia)\n    s1 = s1*2%(l-1)\n    s0 = s0*2%(l+1)\nstart = start[::-1]\n \nml = len(bin(l+1))-2\npoplist = [0 for _ in range(N)]\nt = 1\nwhile t < N + 1:\n  t *= 2\n  for k in range(t\/\/2, N, t):\n    for j in range(t\/\/2):\n      if k+j>N-1:\n        break\n      poplist[k+j] += 1\n\"\"\"\n \ndef popcount(n):\n  c = 0\n  n = bin(n)[2:]\n  for k in range(len(n)):\n    if n[k] == '1':\n      c+=1\n  return c\n\"\"\"\nfor k in range(len(start)):\n  for count in range(10*5):\n    if start[k] == 0:\n      ans[k] += count\n      break\n    else:\n      start[k] = start[k] % poplist[start[k]]\n \nfor k in range(N):\n  print(ans[k])","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s580091842","submission":"def main():\n    i = input()\n    if(i[-1]==\"s\"):\n        print(i+'es')\n    else:\n        print(i+'s')    \nif __name__ == '__main__':\n    main()","label":2}
{"problem_id":"p02712","problem":"Let us define the FizzBuzz sequence a_1,a_2,... as follows:\n\nIf both 3 and 5 divides i, a_i=\\mbox{FizzBuzz}.\nIf the above does not hold but 3 divides i, a_i=\\mbox{Fizz}.\nIf none of the above holds but 5 divides i, a_i=\\mbox{Buzz}.\nIf none of the above holds, a_i=i.\n\nFind the sum of all numbers among the first N terms of the FizzBuzz sequence.","submission_id":"s006909967","submission":"# 1 <= N <= 1000000\nN = int(input())\n\ntotal = []\n\n# N\u9805\u76ee\u307e\u3067\u306b\u542b\u307e\u308c\u308b->N\u9805\u76ee\u306f\u542b\u307e\u306a\u3044\u3002\u3060\u304b\u3089N\u9805\u76ee\u306f+1\u3067\u5916\u3059\u3002\nfor x in range(1, N+1):\n    if x % 15 == 0:\n        \"FizzBuzz\"\n    elif x % 5 == 0:\n        \"Buzz\"\n    elif x % 3 == 0:\n        \"Fizz\"\n    else:\n        total.append(x) #\u30ea\u30b9\u30c8\u306b\u52a0\u3048\u308b\nprint(sum(total))","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s116719035","submission":"N = int(input())\nans = 0\nfor i in range(N):\n  l,r = [int(x) for x in input().split()]\n  ans +=r-l+1\nprint(ans)","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s265037004","submission":"s = input()\nprint(s + \"es\") if s[-1] == \"s\" else print(s + \"s\")","label":2}
{"problem_id":"p03565","problem":"E869120 found a chest which is likely to contain treasure.\nHowever, the chest is locked. In order to open it, he needs to enter a string S consisting of lowercase English letters.\nHe also found a string S', which turns out to be the string S with some of its letters (possibly all or none) replaced with ?.  \nOne more thing he found is a sheet of paper with the following facts written on it:  \n\nCondition 1: The string S contains a string T as a contiguous substring.\nCondition 2: S is the lexicographically smallest string among the ones that satisfy Condition 1.\n\nPrint the string S.\nIf such a string does not exist, print UNRESTORABLE.","submission_id":"s728757749","submission":"s = list(input())\nt = list(input())\n\nfor i in range(len(s)-len(t), -1, -1):\n    flag = True\n    for j in range(len(t)):\n        if not(s[i+j] == t[j] or s[i+j] == '?'):\n            flag = False \n    if flag :\n        for j in range(len(t)):\n            s[i+j] = t[j]\n        for k in range(len(s)):\n            if s[k] == '?':\n                s[k] = 'a'\n        print(''.join(s))\n        exit()\nprint('UNRESTORABLE')\n","label":2}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s052887225","submission":"from numba import njit\nfrom sys import maxsize\n\n\n@njit\ndef solve(n, k, p, c):\n    used = [0] * n\n    ss = []\n    for i in range(n):\n        if used[i]:\n            continue\n        now = i\n        s = []\n        while not used[now]:\n            used[now] = 1\n            s.append(c[now])\n            now = p[now]\n        ss.append(s)\n\n    res = -maxsize\n    for s in ss:\n        s_len = len(s)\n        cumsum = [0]\n        # 2\u5468\u5206\u306e\u7d2f\u7a4d\u548c\n        for i in range(2*s_len):\n            cumsum.append(cumsum[-1] + s[i%s_len])\n\n        max_sum = [-maxsize] * s_len\n        for i in range(s_len):\n            for j in range(s_len):\n                max_sum[j] = max(max_sum[j], cumsum[i+j] - cumsum[i])\n\n        for i in range(s_len):\n            if i > k:\n                continue\n            v = (k - i) \/\/ s_len\n            if i == 0 and v == 0:\n                continue\n            if cumsum[s_len] > 0:\n                res = max(res, max_sum[i] + cumsum[s_len] * v)\n            elif i > 0:\n                res = max(res, max_sum[i])\n    print(res)\n\n\nif __name__ == '__main__':\n    n, k = map(int, input().split())\n    p = list(map(lambda x: int(x)-1, input().split()))\n    c = list(map(int, input().split()))\n    solve(n, k, p, c)\n","label":2}
{"problem_id":"p03600","problem":"In Takahashi Kingdom, which once existed, there are N cities, and some pairs of cities are connected bidirectionally by roads.\nThe following are known about the road network:\n\nPeople traveled between cities only through roads. It was possible to reach any city from any other city, via intermediate cities if necessary.\nDifferent roads may have had different lengths, but all the lengths were positive integers.\n\nSnuke the archeologist found a table with N rows and N columns, A, in the ruin of Takahashi Kingdom.\nHe thought that it represented the shortest distances between the cities along the roads in the kingdom.\nDetermine whether there exists a road network such that for each u and v, the integer A_{u, v} at the u-th row and v-th column of A is equal to the length of the shortest path from City u to City v.\nIf such a network exist, find the shortest possible total length of the roads.","submission_id":"s027743105","submission":"INF = 10 ** 12\n\nN = int(input())\na = [list(map(int, input().split())) for _ in range(N)]\n\nfor i in range(N):\n    for j in range(N):\n        for k in range(N):\n            if a[i][j] > a[i][k] + a[k][j]:\n                print(-1)\n                exit()\n\nres = 0\nfor i in range(N):\n    for j in range(i + 1, N):\n        for k in range(N):\n            if i != k and j != k and a[i][j] == a[i][k] + a[k][j]:\n                break\n        else:\n            res += a[i][j]\n\nprint(res)\n","label":2}
{"problem_id":"p04020","problem":"Snuke has a large collection of cards. Each card has an integer between 1 and N, inclusive, written on it.\nHe has A_i cards with an integer i.\nTwo cards can form a pair if the absolute value of the difference of the integers written on them is at most 1.\nSnuke wants to create the maximum number of pairs from his cards, on the condition that no card should be used in multiple pairs. Find the maximum number of pairs that he can create.","submission_id":"s559989826","submission":"import sys\ninput = sys.stdin.buffer.readline\n\ndef main():\n    N = int(input())\n    ans = 0\n    L = [0]\n    for i in range(N):\n        num = int(input())\n        if L[-1] == 0:\n            ans += (num\/\/2)\n            L.append(num%2)\n        else:\n            if num == 0:\n                L.append(num)\n                continue\n            else:\n                num -= 1\n                ans += (num\/\/2+1)\n                L.append(num%2)\n                \n    print(ans)\n            \nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p03946","problem":"There are N towns located in a line, conveniently numbered 1 through N. Takahashi the merchant is going on a travel from town 1 to town N, buying and selling apples.\nTakahashi will begin the travel at town 1, with no apple in his possession. The actions that can be performed during the travel are as follows:\n\nMove: When at town i (i < N), move to town i + 1.\nMerchandise: Buy or sell an arbitrary number of apples at the current town. Here, it is assumed that one apple can always be bought and sold for A_i yen (the currency of Japan) at town i (1 \u2266 i \u2266 N), where A_i are distinct integers. Also, you can assume that he has an infinite supply of money.\n\nFor some reason, there is a constraint on merchandising apple during the travel: the sum of the number of apples bought and the number of apples sold during the whole travel, must be at most T. (Note that a single apple can be counted in both.)\nDuring the travel, Takahashi will perform actions so that the profit of the travel is maximized. Here, the profit of the travel is the amount of money that is gained by selling apples, minus the amount of money that is spent on buying apples. Note that we are not interested in apples in his possession at the end of the travel.\nAoki, a business rival of Takahashi, wants to trouble Takahashi by manipulating the market price of apples. Prior to the beginning of Takahashi's travel, Aoki can change A_i into another arbitrary non-negative integer A_i' for any town i, any number of times. The cost of performing this operation is |A_i - A_i'|. After performing this operation, different towns may have equal values of A_i.\nAoki's objective is to decrease Takahashi's expected profit by at least 1 yen. Find the minimum total cost to achieve it. You may assume that Takahashi's expected profit is initially at least 1 yen.","submission_id":"s446886761","submission":"import sys\nfrom collections import Counter\n\nn, t, *a = map(int, sys.stdin.read().split())\n\ndef main():\n  cand = []\n  mi = a[0]\n  for x in a[1:]:\n    cand.append(x - mi)\n    mi = min(mi, x)\n  c = Counter(cand)\n  ans = c[max(c.keys())]\n  print(ans)\n  \nif __name__ == '__main__':\n  main()","label":2}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s199448877","submission":"input();s=t=input();l,r=p='()'\nexec(\"t=t.replace('()','');\"*50)\nc=t.count;print(l*c(r)+s+r*c(l))","label":2}
{"problem_id":"p02724","problem":"Takahashi loves gold coins. He gains 1000 happiness points for each 500-yen coin he has and gains 5 happiness points for each 5-yen coin he has. (Yen is the currency of Japan.)\nTakahashi has X yen. If he exchanges his money so that he will gain the most happiness points, how many happiness points will he earn?\n(We assume that there are six kinds of coins available: 500-yen, 100-yen, 50-yen, 10-yen, 5-yen, and 1-yen coins.)","submission_id":"s549223361","submission":"N = int(input())\nd = N \/\/ 500\nmod = N % 500\nd2 = mod \/\/ 5\nprint(d*1000+d2*5)","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s903232553","submission":"from sys import stdin\nfrom itertools import groupby\nn = int(stdin.readline().rstrip())\nli = list(map(int,stdin.readline().rstrip().split()))\nlin = []\nfor key, value in groupby(li):\n    lin.append(len(list(value)))\nprint(sum(i\/\/2 for i in lin))","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s896938666","submission":"from functools import reduce\nfrom collections import Counter\n\n\nN = int(input())\na = list(map(int, input().split()))\nif N % 3 and a != [0] * N:\n    print(\"No\")\n    exit()\n\nnums = Counter(a)\nks = sorted(nums)\nvs = sorted(nums.values())\nif (\n    (len(nums) == 1 and ks[0] == 0)\n    or (len(nums) == 2 and ks[0] == 0 and vs[0] == N \/\/ 3)\n    or (\n        len(nums) == 3\n        and all(v == N \/\/ 3 for v in vs)\n        and reduce(lambda x, y: x ^ y, ks) == 0\n    )\n):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":2}
{"problem_id":"p03416","problem":"Find the number of palindromic numbers among the integers between A and B (inclusive).\nHere, a palindromic number is a positive integer whose string representation in base 10 (without leading zeros) reads the same forward and backward.","submission_id":"s236597135","submission":"A,B = map(int,input().split())\nii = 0\nfor i in range(A,B+1):\n    Is = str(i)\n    if Is[0] == Is[4] and Is[1] == Is[3]:\n        ii += 1\nprint(ii)","label":2}
{"problem_id":"p02607","problem":"We have N squares assigned the numbers 1,2,3,\\ldots,N. Each square has an integer written on it, and the integer written on Square i is a_i.\nHow many squares i satisfy both of the following conditions?\n\nThe assigned number, i, is odd.\nThe written integer is odd.","submission_id":"s114718469","submission":"N = int(input())\na = list(map(int,input().split()))\ni=0\nfor x,y in enumerate (a):\n    b=x+1\n    if b%2!=0 and y%2!=0:\n        i+=1\nprint(i)","label":2}
{"problem_id":"p04046","problem":"We have a large square grid with H rows and W columns.\nIroha is now standing in the top-left cell.\nShe will repeat going right or down to the adjacent cell, until she reaches the bottom-right cell.\nHowever, she cannot enter the cells in the intersection of the bottom A rows and the leftmost B columns. (That is, there are A\u00d7B forbidden cells.) There is no restriction on entering the other cells.\nFind the number of ways she can travel to the bottom-right cell.\nSince this number can be extremely large, print the number modulo 10^9+7.","submission_id":"s932614654","submission":"H, W, A, B = map(int, input().split())\nmod = 10**9 + 7\n\nfact = [1] * (H+W+1)\nfact_inv = [1] * (H+W+1)\nfor i in range(1, H+W+1):\n    fact[i] = i * fact[i-1] % mod\nfact_inv[H+W] = pow(fact[H+W], mod-2, mod)\nfor i in range(1, H+W+1)[::-1]:\n    fact_inv[i-1] = i * fact_inv[i] % mod\ncomb = lambda n, k: fact[n] * fact_inv[k] * fact_inv[n-k] % mod\n\nans = 0\nfor i in range(B+1, W+1):\n    ans += comb((i-1) + (H-A-1), i-1) * comb((W-i) + (A-1), W-i) % mod\n    ans %= mod\nprint(ans)\n","label":2}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s236349120","submission":"X, Y, A, B, C = map(int, input().split())\nps = list(map(int, input().split()))\nqs = list(map(int, input().split()))\nrs = list(map(int, input().split()))\nps = sorted(ps, reverse=True)[:X]\nqs = sorted(qs, reverse=True)[:Y]\nrs = sorted(ps+qs+rs, reverse=True)[:X+Y]\nr = sum(rs)\nprint(r)\n","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s873315982","submission":"A =  input()\nA = A.replace('2017', '2018') \nprint(A)","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s349171981","submission":"n = int(input())\nA = [tuple(map(int, input().split())) for _ in range(n)]\n\nans = 0\nfor l, r in A:\n    ans += r - l + 1\nprint(ans)\n","label":2}
{"problem_id":"p03387","problem":"You are given three integers A, B and C. Find the minimum number of operations required to make A, B and C all equal by repeatedly performing the following two kinds of operations in any order:\n\nChoose two among A, B and C, then increase both by 1.\nChoose one among A, B and C, then increase it by 2.\n\nIt can be proved that we can always make A, B and C all equal by repeatedly performing these operations.","submission_id":"s033296907","submission":"a, b, c = list(map(int, input().split()))\na, b, c = sorted([a, b, c])\nans = 0\nans += c-b\nans += (b-a + 1)\/\/2\nif (b-a)%2:\n    ans += 1\nprint(ans)\n","label":2}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s107967554","submission":"S = input()\nflg = True\nfor i, s in enumerate(S):\n    if i % 2 == 0:\n        flg = flg & (s != 'L')\n    elif i % 2 == 1:\n        flg = flg & (s != 'R')\nif flg:\n    print('Yes')\nelse:\n    print('No')\n","label":2}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s890653217","submission":"N = int(input())\nA =list(map(int, input().split()))\n\n\nodd = 0\n\nfor i in range(N):\n  if A[i] % 2 !=0:\n    odd += 1\n    \n    \nif odd % 2 !=0 :\n  print('NO')\nelse:\n  print('YES')","label":2}
{"problem_id":"p02948","problem":"There are N one-off jobs available. If you take the i-th job and complete it, you will earn the reward of B_i after A_i days from the day you do it.\nYou can take and complete at most one of these jobs in a day.\nHowever, you cannot retake a job that you have already done.\nFind the maximum total reward that you can earn no later than M days from today.\nYou can already start working today.","submission_id":"s263220848","submission":"from heapq import heappop, heappush\n\nn,m=map(int,input().split())\nl=[]\nfor _ in range(n):\n    a,b=map(int,input().split())\n    if a>m:continue\n    l.append((a,b))\n\nl.sort(reverse=True)\n\nq=[]\nans=0\n\nfor i in range(1,m+1):\n    while l and l[-1][0]<=i:\n        a,b=l.pop()\n        heappush(q,-b)\n    if q:\n        b=-heappop(q)\n        ans+=b\nprint(ans)\n","label":2}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s471665869","submission":"import sys, heapq\ninput = sys.stdin.buffer.readline # \u5165\u51fa\u529b\u9ad8\u901f\u5316\n\ndef main():\n    N, Q = map(int, input().split())\n    tl = [] # \u30a4\u30d9\u30f3\u30c8\u30bf\u30a4\u30e0\u30e9\u30a4\u30f3\n    for _ in range(N):\n        S, T, X = map(int, input().split())\n        tl.append((S-X, 1, X)) # insert\n        tl.append((T-X, 0, X)) # erase\n    for _ in range(Q):\n        D = int(input())\n        tl.append((D, 2, 0)) # min\n    tl.sort()\n    working = list() # \u5de5\u4e8b\u4e2d\n    todelete = list() # \u524a\u9664\u7528\n    for t, c, x in tl:\n        if c == 0: # erase\n            heapq.heappush(todelete, x)\n        elif c == 1: # insert\n            heapq.heappush(working, x)\n        else: # min\n            while todelete and todelete[0] == working[0]:\n                heapq.heappop(todelete)\n                heapq.heappop(working)\n            print(-1 if not working else working[0])\n    return\n    \nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p03206","problem":"In some other world, today is December D-th.\nWrite a program that prints Christmas if D = 25, Christmas Eve if D = 24, Christmas Eve Eve if D = 23 and Christmas Eve Eve Eve if D = 22.","submission_id":"s459875732","submission":"D=int(input())\nif D==25:\n  print(\"Christmas\")\nif D==24:\n  print(\"Christmas Eve\")\nif D==23:\n  print(\"Christmas Eve Eve\")\nif D==22:\n  print(\"Christmas Eve Eve Eve\")","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s644291328","submission":"\nS = input()\nif S[-1] != \"s\":\n    print(S + \"s\")\nelse:\n    print(S + \"es\")\n","label":2}
{"problem_id":"p03111","problem":"You have N bamboos. The lengths (in centimeters) of these are l_1, l_2, ..., l_N, respectively.\nYour objective is to use some of these bamboos (possibly all) to obtain three bamboos of length A, B, C. For that, you can use the following three kinds of magics any number:\n\nExtension Magic: Consumes 1 MP (magic point). Choose one bamboo and increase its length by 1.\nShortening Magic: Consumes 1 MP. Choose one bamboo of length at least 2 and decrease its length by 1.\nComposition Magic: Consumes 10 MP. Choose two bamboos and combine them into one bamboo. The length of this new bamboo is equal to the sum of the lengths of the two bamboos combined. (Afterwards, further magics can be used on this bamboo.)\n\nAt least how much MP is needed to achieve the objective?","submission_id":"s309386377","submission":"# C - Synthetic Kadomatsu\n'''\n100, 90, 80\n98, 80, 40, 30, 21\nL[0]\u301cL[N-1]\u304c\u305d\u308c\u305e\u308c\u3001A,B,C,\u4f7f\u308f\u306a\u3044\u306e\u3044\u305a\u308c\u304b\u304b\u3092\u8003\u3048\u308b\u3002\n4**8=65536\n'''\nimport itertools\nINF = 10**18\nN, A, B, C = map(int, input().split())\nL = [0] * N\nfor i in range(N):\n    L[i] = int(input())\n    \nc = (0, 1, 2, 3) # 3\u306f\u4f7f\u308f\u306a\u3044\nans = INF\n\nfor comb in itertools.product(c,repeat=N):\n    tmp = [0]*4 \n    ansArr = [0]*3\n    #print(comb)\n    for i, j in enumerate(comb):\n        if tmp[j]==0:\n            tmp[j] += L[i]\n        elif j!=3:\n            tmp[j] += L[i]\n            ansArr[j] += 10\n    if tmp[0]==0 or tmp[1]==0 or tmp[2]==0:\n        continue\n    ansArr[0] += abs(A-tmp[0])\n    ansArr[1] += abs(B-tmp[1])        \n    ansArr[2] += abs(C-tmp[2])\n    #print(tmp)\n    #print(ansArr)\n    ans = min(ans, sum(ansArr))\n    #print(ans)\n\nprint(ans)","label":2}
{"problem_id":"p02837","problem":"There are N people numbered 1 to N. Each of them is either an honest person whose testimonies are always correct or an unkind person whose testimonies may be correct or not.\nPerson i gives A_i testimonies. The j-th testimony by Person i is represented by two integers x_{ij} and y_{ij}. If y_{ij} = 1, the testimony says Person x_{ij} is honest; if y_{ij} = 0, it says Person x_{ij} is unkind.\nHow many honest persons can be among those N people at most?","submission_id":"s148158903","submission":"import sys\ninput = sys.stdin.readline\n\n#l = list(map(int, input().split()))\n#import numpy as np\n#arr = np.array([int(i) for i in input().split()])\n'''\na,b=[],[]\nfor i in range(n):\n    A, B = map(int, input().split())\n    a.append(A)   \n    b.append(B)'''\n\n\nn=int(input())\n\na,x=[],[]\nfor i in range(n):\n    A = int(input())\n    a.append(A)\n    B=[]\n    for j in range(A):\n        B.append(list(map(int, input().split())))\n    x.append(B)\n\nma=0\nfor i in range(2**n):\n    now=0\n    flg=True\n    e=[0]*n\n    for j in range(n):\n        if (i>>j)&1:\n            now+=1\n            e[j]=1\n\n    for j in range(n):\n        #print(e)\n        if (i>>j)&1:\n            \n            if e[j]==0:\n                flg=False\n                break\n            elif not flg:\n                break\n\n            for k in range(a[j]):\n                \"\"\"if e[x[j][k][0]-1]==-1: \n                    if x[j][k][1] and\n                    e[x[j][k][0]-1]=x[j][k][1]\"\"\"\n                \n                if (e[x[j][k][0]-1]==0 and x[j][k][1]==1) or (e[x[j][k][0]-1]==1 and x[j][k][1]==0):\n                    flg=False\n                    break\n\n    if flg and ma<now:\n        ma=now\n        #print(ma)\n\nprint(ma)\n\n","label":2}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s096635518","submission":"n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\npnt = 0\ncnt = -2\nfor i in a:\n  if i == cnt+1:\n    pnt += c[cnt-1]\n  pnt += b[i-1]\n  cnt = i\nprint(pnt)","label":2}
{"problem_id":"p02832","problem":"We have N bricks arranged in a row from left to right.\nThe i-th brick from the left (1 \\leq i \\leq N) has an integer a_i written on it.\nAmong them, you can break at most N-1 bricks of your choice.\nLet us say there are K bricks remaining. Snuke will be satisfied if, for each integer i (1 \\leq i \\leq K), the i-th of those brick from the left has the integer i written on it.\nFind the minimum number of bricks you need to break to satisfy Snuke's desire. If his desire is unsatisfiable, print -1 instead.","submission_id":"s699531159","submission":"n = int(input())\nla = [int(w) for w in input().split()]\n\nans = 0\ni = 1\nfor a in la:\n    if a != i:\n        ans += 1\n    else:\n        i += 1\nif ans == n and i == 1:\n    ans = -1\n\nprint(ans)\n","label":2}
{"problem_id":"p03268","problem":"You are given integers N and K. Find the number of triples (a,b,c) of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K.\nThe order of a,b,c does matter, and some of them can be the same.","submission_id":"s466687231","submission":"n, k = map(int, input().split())\n\nans = (n \/\/ k) ** 3\n\nif k % 2 == 0:\n    tmpN = n - k \/ 2\n    ans += (tmpN \/\/ k + 1) ** 3\n\n\nprint(int(ans))","label":2}
{"problem_id":"p03338","problem":"You are given a string S of length N consisting of lowercase English letters.\nWe will cut this string at one position into two strings X and Y.\nHere, we would like to maximize the number of different letters contained in both X and Y.\nFind the largest possible number of different letters contained in both X and Y when we cut the string at the optimal position.","submission_id":"s844800011","submission":"N=int(input())\nS=input()\n\nMAX=0\nfor i in range(1,N-1):\n  s1,s2=set(S[:i]),set(S[i:])\n  tmp = len(s1.intersection(s2))\n  if tmp > MAX:MAX=tmp\n\nprint(MAX)","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s714919129","submission":"n=int(input())\nans=0\nfor i in range(1,int(n**.5+(n**.5%1!=0))):\n  j=(n-i)\/\/i\n  if n%j==n\/\/j:\n    ans+=j\nprint(ans)","label":2}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s289098704","submission":"x, y, a, b, c = map(int, input().split())\n\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\nr = list(map(int, input().split()))\n\np.sort(reverse=True)\nq.sort(reverse=True)\n\neat_list = []\n\nfor i in range(x):\n    eat_list.append(p[i])\nfor i in range(y):\n    eat_list.append(q[i])\nfor i in range(c):\n    eat_list.append(r[i])\n    \neat_list.sort(reverse=True)\n\nans = 0\n\nfor i in range(x+y):\n    ans += eat_list[i]\n\nprint(ans)","label":2}
{"problem_id":"p02695","problem":"Given are positive integers N, M, Q, and Q quadruples of integers ( a_i , b_i , c_i , d_i ).\nConsider a sequence A satisfying the following conditions:\n\nA is a sequence of N positive integers.\n1 \\leq A_1 \\leq A_2 \\le \\cdots \\leq A_N \\leq M.\n\nLet us define a score of this sequence as follows:\n\nThe score is the sum of d_i over all indices i such that A_{b_i} - A_{a_i} = c_i. (If there is no such i, the score is 0.)\n\nFind the maximum possible score of A.","submission_id":"s396096072","submission":"import itertools\nn,m,q=map(int,input().split())\nL=list(itertools.combinations_with_replacement(range(m),n))\na=[0]*q\nb=[0]*q\nc=[0]*q\nd=[0]*q\nfor i in range(q):\n    a[i],b[i],c[i],d[i]=map(int,input().split())\n    a[i]-=1\n    b[i]-=1\nans=0\nfor l in L:\n    tmp=0\n    for i in range(q):\n        if l[b[i]]-l[a[i]]==c[i]:\n            tmp+=d[i]\n    ans=max(ans,tmp)\nprint(ans)","label":2}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s992122130","submission":"import itertools\nimport math\nimport fractions\nimport functools\nimport copy\na, b = map(int, input().split())\nif a >= 13:\n    print(b)\nelif 6 <= a and 12 >= a:\n    print(b\/\/2)\nelse:\n    print(0)","label":2}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s627609294","submission":"S=list(input())\n\nans='No'\nfor s in S:\n    if s =='7':\n        ans='Yes'\nprint(ans)","label":2}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s452251284","submission":"N = int(input())\nA = [int(n) for n in input().split()]\nA = sorted(A,reverse=True)\n\nAlice = 0\nBob = 0\n\nfor i in range(N):\n    if i%2 == 0:\n        Alice += A[i]\n    else:\n        Bob += A[i]\n\nprint(Alice - Bob)","label":2}
{"problem_id":"p03609","problem":"We have a sandglass that runs for X seconds. The sand drops from the upper bulb at a rate of 1 gram per second. That is, the upper bulb initially contains X grams of sand.\nHow many grams of sand will the upper bulb contains after t seconds?","submission_id":"s514979762","submission":"x,t = map(int,input().split())\nif x - t > 0:\n  print(x-t)\nelif x - t < 0:\n  print(0)\nelse:\n  print(0)","label":2}
{"problem_id":"p03679","problem":"Takahashi has a strong stomach. He never gets a stomachache from eating something whose \"best-by\" date is at most X days earlier.\nHe gets a stomachache if the \"best-by\" date of the food is X+1 or more days earlier, though.\nOther than that, he finds the food delicious if he eats it not later than the \"best-by\" date. Otherwise, he does not find it delicious.\nTakahashi bought some food A days before the \"best-by\" date, and ate it B days after he bought it.\nWrite a program that outputs delicious if he found it delicious, safe if he did not found it delicious but did not get a stomachache either, and dangerous if he got a stomachache.","submission_id":"s407076993","submission":"x,a,b=map(int,input().split())\nprint('delicious' if a>=b else 'dangerous' if b>a+x else 'safe')","label":2}
{"problem_id":"p02598","problem":"We have N logs of lengths A_1,A_2,\\cdots A_N.\nWe can cut these logs at most K times in total. When a log of length L is cut at a point whose distance from an end of the log is t (0<t<L), it becomes two logs of lengths t and L-t.\nFind the shortest possible length of the longest log after at most K cuts, and print it after rounding up to an integer.","submission_id":"s149297288","submission":"import math\n\nM=list(map(int, input().split()))\nN=M[0]\nK=M[1]\n\nA=list(map(int, input().split()))\n\ndef cancut(A,N,K,X): #A1..AN\u3092K\u56de\u3067\u5168\u3066X\u4ee5\u4e0b\u306b\u5207\u308c\u308b\u304b\uff1fYes\u306a\u30891\u3001No\u306a\u30892\u3092\u8fd4\u3059\u3002\n    cut=0\n    for a in A:\n        n = (a + X - 1) \/\/ X  # a\/x \u306e\u5c11\u6570\u5207\u4e0a\u3052\n        cut += n - 1\n    if cut<=K:\n        return 1\n    else:\n        return 0\n\nleft=0\nright=max(A)\n\nwhile(abs(right - left) > 1):\n    mid=(right+left)\/\/2\n    if cancut(A,N,K,mid)==1:\n        right=mid\n    else:\n        left=mid\n\nprint(right)","label":2}
{"problem_id":"p03486","problem":"You are given strings s and t, consisting of lowercase English letters.\nYou will create a string s' by freely rearranging the characters in s.\nYou will also create a string t' by freely rearranging the characters in t.\nDetermine whether it is possible to satisfy s' < t' for the lexicographic order.","submission_id":"s105117390","submission":"import math\nfrom math import gcd,pi,sqrt\nINF = float(\"inf\")\n\nimport sys\nsys.setrecursionlimit(10**6)\nimport itertools\nfrom collections import Counter,deque\ndef i_input(): return int(input())\ndef i_map(): return map(int, input().split())\ndef i_list(): return list(i_map())\ndef i_row(N): return [i_input() for _ in range(N)]\ndef i_row_list(N): return [i_list() for _ in range(N)]\ndef s_input(): return input()\ndef s_map(): return input().split()\ndef s_list(): return list(s_map())\ndef s_row(N): return [s_input for _ in range(N)]\ndef s_row_str(N): return [s_list() for _ in range(N)]\ndef s_row_list(N): return [list(s_input()) for _ in range(N)]\n\nimport string\n\ndef main():\n    s = \"\".join(list(sorted(s_input())))\n    t = \"\".join(list(sorted(s_input(), reverse=True)))\n    if s < t:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\n\n\n\nif __name__==\"__main__\":\n    main()\n","label":2}
{"problem_id":"p02695","problem":"Given are positive integers N, M, Q, and Q quadruples of integers ( a_i , b_i , c_i , d_i ).\nConsider a sequence A satisfying the following conditions:\n\nA is a sequence of N positive integers.\n1 \\leq A_1 \\leq A_2 \\le \\cdots \\leq A_N \\leq M.\n\nLet us define a score of this sequence as follows:\n\nThe score is the sum of d_i over all indices i such that A_{b_i} - A_{a_i} = c_i. (If there is no such i, the score is 0.)\n\nFind the maximum possible score of A.","submission_id":"s612185145","submission":"#!\/usr\/bin\/env python3\nimport sys\nsys.setrecursionlimit(10**8)\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return [LIST() for _ in range(n)]\n\n\nINF = float(\"inf\")\nMOD = 10**9 + 7\n\n\ndef main():\n    n, m, q = MAP()\n    abcd = ZIP(q)\n\n    def ascending(X):\n        for i in range(1, n):\n            if A[i - 1] > A[i]:\n                return False\n        return True\n\n    def point(A):\n        tot = 0\n        for a, b, c, d in abcd:\n            if A[b - 1] - A[a - 1] == c:\n                tot += d\n        return tot\n\n    def forward(A):\n        # M\u3088\u308a\u5c0f\u3055\u3044\u6700\u5f8c\u306e\u6841\n        k = None\n        for i in reversed(range(n)):\n            if A[i] < m:\n                k = i\n                break\n        if k is not None:\n            A[k] += 1\n            for j in range(k + 1, n):\n                A[j] = A[k]\n        else:\n            A[0] = INF\n\n    # \u6607\u9806\u5217\u3092\u5de1\u56de\u3059\u308b\n    A = [1] * n\n    ans = 0\n    while ascending(A):         # O(N)\n        # print(A)\n        p = point(A)\n        if ans <= p:\n            ans = p\n        forward(A)\n    print(ans)\n\n    return\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p02951","problem":"We have two bottles for holding water.\nBottle 1 can hold up to A milliliters of water, and now it contains B milliliters of water.\nBottle 2 contains C milliliters of water.\nWe will transfer water from Bottle 2 to Bottle 1 as much as possible.\nHow much amount of water will remain in Bottle 2?","submission_id":"s195170584","submission":"A,B,C=map(int, input().split())\nR=A-B\nprint((C-R)*(C>R))","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s535194371","submission":"# -*- coding: utf-8 -*-\n\ndef answer(s):\n    if s.endswith('s'):\n        print(s + 'es')\n    else:\n        print(s + 's')\n\n\nanswer(input())","label":2}
{"problem_id":"p02881","problem":"Takahashi is standing on a multiplication table with infinitely many rows and columns.\nThe square (i,j) contains the integer i \\times j. Initially, Takahashi is standing at (1,1).\nIn one move, he can move from (i,j) to either (i+1,j) or (i,j+1).\nGiven an integer N, find the minimum number of moves needed to reach a square that contains N.","submission_id":"s385476532","submission":"import math\n\nN = int(input())\nans = math.inf\nfor i in range(1, math.ceil(math.sqrt(N)) + 1):\n    if N%i == 0:\n        ans = i+N\/\/i-2\nprint(ans)\n","label":2}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s558085216","submission":"s = input()\nt = input()\nprint(sum(a == b for a, b in zip(s, t)))","label":2}
{"problem_id":"p03563","problem":"Takahashi is a user of a site that hosts programming contests.\nWhen a user competes in a contest, the rating of the user (not necessarily an integer) changes according to the performance of the user, as follows:  \n\nLet the current rating of the user be a.\nSuppose that the performance of the user in the contest is b.\nThen, the new rating of the user will be the avarage of a and b.\n\nFor example, if a user with rating 1 competes in a contest and gives performance 1000, his\/her new rating will be 500.5, the average of 1 and 1000.\nTakahashi's current rating is R, and he wants his rating to be exactly G after the next contest.\nFind the performance required to achieve it.","submission_id":"s264502669","submission":"a = int(input())\nb = int(input())\nres = 2 * b - a\nprint(res)","label":2}
{"problem_id":"p02949","problem":"There is a directed graph with N vertices numbered 1 to N and M edges.\nThe i-th edge is directed from Vertex A_i to Vertex B_i, and there are C_i coins \bplaced along that edge.\nAdditionally, there is a button on Vertex N.\nWe will play a game on this graph.\nYou start the game on Vertex 1 with zero coins, and head for Vertex N by traversing the edges while collecting coins.\nIt takes one minute to traverse an edge, and you can collect the coins placed along the edge each time you traverse it.\nAs usual in games, even if you traverse an edge once and collect the coins, the same number of coins will reappear next time you traverse that edge, which you can collect again.\nWhen you reach Vertex N, you can end the game by pressing the button. (You can also choose to leave Vertex N without pressing the button and continue traveling.)\nHowever, when you end the game, you will be asked to pay T \\times P coins, where T is the number of minutes elapsed since the start of the game. If you have less than T \\times P coins, you will have to pay all of your coins instead.\nYour score will be the number of coins you have after this payment.\nDetermine if there exists a maximum value of the score that can be obtained. If the answer is yes, find that maximum value.","submission_id":"s020544122","submission":"N,M,P = map(int,input().split())\nABC = [tuple(map(int,input().split())) for i in range(M)]\nes = [[] for _ in range(N)]\nrs = [[] for _ in range(N)]\nfor a,b,c in ABC:\n    a,b = a-1,b-1\n    es[a].append((b,P-c))\n    rs[b].append(a)\n\nstack = [0]\ngovisit = set([0])\nwhile stack:\n    v = stack.pop()\n    for to,_ in es[v]:\n        if to in govisit: continue\n        govisit.add(to)\n        stack.append(to)\n\nstack = [N-1]\nbackvisit = set([N-1])\nwhile stack:\n    v = stack.pop()\n    for to in rs[v]:\n        if to in backvisit: continue\n        backvisit.add(to)\n        stack.append(to)\nuse = govisit & backvisit\n\nINF = float('inf')\ndist = [INF] * N\ndist[0] = 0\nfor i in range(N):\n    for fr,e in enumerate(es):\n        if fr not in use: continue\n        for to,c in e:\n            if to not in use: continue\n            if dist[to] > dist[fr] + c:\n                dist[to] = dist[fr] + c\n                if i==N-1:\n                    print(-1)\n                    exit()\nprint(max(0,-dist[-1]))","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s453182732","submission":"n=int(input())\nans = 0\nfor i in range(n):\n    a,b=(int(x) for x in input().split())\n    c = b-a+1\n    ans += c\n\nprint(ans)","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s849061409","submission":"s = input()\n\nif s[-1] == \"s\":\n    ans = s + \"es\"\nelse:\n    ans = s + \"s\"\n\nprint(ans)\n","label":2}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s480750614","submission":"s = list(input())\nt = list(input())\nl = list()\nfor i in range(3):\n  l.append(1) if s[i] == t[i] else l.append(0)\nprint(sum(l))","label":2}
{"problem_id":"p02819","problem":"Find the minimum prime number greater than or equal to X.","submission_id":"s734380947","submission":"x = int(input())\nn = int(x**0.5)\n\nif x==2 or x==3:\n    print(x)\nelse:\n    while True:\n        for i in range(2,n+1,1):\n            if x%i==0:\n                break\n        else:\n            print(x)\n            break\n        x += 1","label":2}
{"problem_id":"p03378","problem":"There are N + 1 squares arranged in a row, numbered 0, 1, ..., N from left to right.\nInitially, you are in Square X.\nYou can freely travel between adjacent squares. Your goal is to reach Square 0 or Square N.\nHowever, for each i = 1, 2, ..., M, there is a toll gate in Square A_i, and traveling to Square A_i incurs a cost of 1.\nIt is guaranteed that there is no toll gate in Square 0, Square X and Square N.\nFind the minimum cost incurred before reaching the goal.","submission_id":"s333656594","submission":"N,M,X=map(int,input().split())\nA=list(map(int,input().split()))\n\nbox = [0]*(N+1)\n\nfor i in range(M):\n    box[A[i]] = 1\n\ncost_l = 0\nfor i in range(X+1):\n    cost_l += box[i]\ncost_r = 0\nfor i in range(X,N+1):\n    cost_r += box[i]\n\nprint(min(cost_l,cost_r))","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s629528275","submission":"n=input()\nif n[-1]==\"s\":\n  print(n+\"es\")\nelse:\n  print(n+\"s\")\n","label":2}
{"problem_id":"p02705","problem":"Print the circumference of a circle of radius R.","submission_id":"s675616079","submission":"from math import pi\nr = int(input())\nans = 2 * pi * r\nprint(ans)","label":2}
{"problem_id":"p02812","problem":"We have a string S of length N consisting of uppercase English letters.\nHow many times does ABC occur in S as contiguous subsequences (see Sample Inputs and Outputs)?","submission_id":"s606612709","submission":"n = int(input())\ns = input().strip()\nprint(s.count('ABC'))\n","label":2}
{"problem_id":"p03576","problem":"We have N points in a two-dimensional plane.\nThe coordinates of the i-th point (1 \\leq i \\leq N) are (x_i,y_i).\nLet us consider a rectangle whose sides are parallel to the coordinate axes that contains K or more of the N points in its interior.\nHere, points on the sides of the rectangle are considered to be in the interior.\nFind the minimum possible area of such a rectangle.","submission_id":"s560315984","submission":"import itertools\n\nN, K = map(int, input().split())\nP = [tuple(map(int, input().split())) for _ in range(N)]\n\nX = sorted([x for x, _ in P])\nY = sorted([y for _, y in P])\ndict_x = {v: k + 1 for k, v in enumerate(X)}\ndict_y = {v: k + 1 for k, v in enumerate(Y)}\n\ntable = [[0] * (N + 1) for _ in range(N + 1)]\nfor x, y in P:\n    table[dict_y[y]][dict_x[x]] = 1\n\nfor x in range(N + 1):\n    for y in range(N):\n        table[y + 1][x] += table[y][x]\nfor y in range(N + 1):\n    for x in range(N):\n        table[y][x + 1] += table[y][x]\n\nans = float('inf')\nfor x1, x2 in itertools.combinations(range(N), 2):\n    for y1, y2 in itertools.combinations(range(N), 2):\n        if table[y2 + 1][x2 + 1] - table[y2 + 1][x1] - table[y1][x2 + 1] + table[y1][x1] >= K:\n            ans = min(ans, (X[x2] - X[x1]) * (Y[y2] - Y[y1]))\nprint(ans)","label":2}
{"problem_id":"p02934","problem":"Given is a sequence of N integers A_1, \\ldots, A_N.\nFind the (multiplicative) inverse of the sum of the inverses of these numbers, \\frac{1}{\\frac{1}{A_1} + \\ldots + \\frac{1}{A_N}}.","submission_id":"s430154357","submission":"N = int(input())\nA = map(int,input().split())\nprint(1\/sum(1\/i for i in A))","label":2}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s753498675","submission":"def main():\n    n = input()\n\n    print([\"No\", \"Yes\"][\"7\" in n])\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p03779","problem":"There is a kangaroo at coordinate 0 on an infinite number line that runs from left to right, at time 0.\nDuring the period between time i-1 and time i, the kangaroo can either stay at his position, or perform a jump of length exactly i to the left or to the right.\nThat is, if his coordinate at time i-1 is x, he can be at coordinate x-i, x or x+i at time i.\nThe kangaroo's nest is at coordinate X, and he wants to travel to coordinate X as fast as possible.\nFind the earliest possible time to reach coordinate X.","submission_id":"s494249900","submission":"x = int(input())\nt = p = 0\nwhile p < x:\n    t += 1\n    p += t\nprint(t)","label":2}
{"problem_id":"p03208","problem":"In some other world, today is Christmas Eve.\nThere are N trees planted in Mr. Takaha's garden. The height of the i-th tree (1 \\leq i \\leq N) is h_i meters.\nHe decides to choose K trees from these trees and decorate them with electric lights. To make the scenery more beautiful, the heights of the decorated trees should be as close to each other as possible.\nMore specifically, let the height of the tallest decorated tree be h_{max} meters, and the height of the shortest decorated tree be h_{min} meters. The smaller the value h_{max} - h_{min} is, the better. What is the minimum possible value of h_{max} - h_{min}?","submission_id":"s100421335","submission":"n,k=map(int,input().split())\nH=[]\nfor i in range(n):\n    H.append(int(input()))\nH.sort()\nans = min( H[i+k-1]-H[i] for i in range( n-k+1 ) )\nprint(ans)","label":2}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s261077690","submission":"print('Yes' if '7' in input() else ('No'))","label":2}
{"problem_id":"p03852","problem":"Given a lowercase English letter c, determine whether it is a vowel. Here, there are five vowels in the English alphabet: a, e, i, o and u.","submission_id":"s170230975","submission":"c = (input())\nlist =['a','i','u','e','o']\nif c in list:\n    print('vowel')\nelse:\n    print('consonant')","label":2}
{"problem_id":"p03598","problem":"There are N balls in the xy-plane. The coordinates of the i-th of them is (x_i, i).\nThus, we have one ball on each of the N lines y = 1, y = 2, ..., y = N.\nIn order to collect these balls, Snuke prepared 2N robots, N of type A and N of type B.\nThen, he placed the i-th type-A robot at coordinates (0, i), and the i-th type-B robot at coordinates (K, i).\nThus, now we have one type-A robot and one type-B robot on each of the N lines y = 1, y = 2, ..., y = N.\nWhen activated, each type of robot will operate as follows.\n\n\nWhen a type-A robot is activated at coordinates (0, a), it will move to the position of the ball on the line y = a, collect the ball, move back to its original position (0, a) and deactivate itself. If there is no such ball, it will just deactivate itself without doing anything.\n\n\nWhen a type-B robot is activated at coordinates (K, b), it will move to the position of the ball on the line y = b, collect the ball, move back to its original position (K, b) and deactivate itself. If there is no such ball, it will just deactivate itself without doing anything.\n\n\nSnuke will activate some of the 2N robots to collect all of the balls. Find the minimum possible total distance covered by robots.","submission_id":"s317263659","submission":"n,k=int(input()),int(input());print(sum([min(i*2,(k-i)*2) for i in list(map(int,input().split()))]))","label":2}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s678734451","submission":"import sys\nfrom heapq import heappush,heappop\ninput=sys.stdin.readline\nn,q=map(int,input().split())\ne=[]\nfor i in range(n):\n  s,t,x=map(int,input().split())\n  e.append((s-x,1,x))\n  e.append((t-x,-1,x))\nfor i in range(q):\n  d=int(input())\n  e.append((d,2,0))\ne.sort()\ns=set()\na=[]\nfor time_,type_,x_ in e:\n  if type_==1:\n    s.add(x_)\n    heappush(a,x_)\n  elif type_==-1:\n    s.remove(x_)\n  else:\n    while a and a[0] not in s:\n      heappop(a)\n    if a:\n      print(a[0])\n    else:\n      print(-1)","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s840183008","submission":"S = input()\nif S[-1] == \"s\":\n  ans = S+\"es\"\nelse:\n  ans = S+\"s\"\n  \nprint(ans)","label":2}
{"problem_id":"p02573","problem":"There are N persons called Person 1 through Person N.\nYou are given M facts that \"Person A_i and Person B_i are friends.\" The same fact may be given multiple times.\nIf X and Y are friends, and Y and Z are friends, then X and Z are also friends. There is no friendship that cannot be derived from the M given facts.\nTakahashi the evil wants to divide the N persons into some number of groups so that every person has no friend in his\/her group.\nAt least how many groups does he need to make?","submission_id":"s303274082","submission":"N, M = map(int, input().split())\nAB = [list(map(lambda x : int(x) - 1, input().split())) for _ in range(M)]\n\nclass UnionFind():\n\tdef __init__(self, n):\n\t\tself.parents = [-1] * n\n\n\tdef find(self, x):\n\t\tif self.parents[x] < 0:\n\t\t\treturn x\n\t\telse:\n\t\t\tself.parents[x] = self.find(self.parents[x])\n\t\t\treturn self.parents[x]\n\n\tdef union(self, x, y):\n\t\tx = self.find(x)\n\t\ty = self.find(y)\n\n\t\tif x == y:\n\t\t\treturn\n\n\t\tif self.parents[x] > self.parents[y]:\n\t\t\tx, y = y, x\n\n\t\tself.parents[x] += self.parents[y]\n\t\tself.parents[y] = x\n\nuf = UnionFind(N)\nfor a, b in AB:\n\tuf.union(a, b)\n\nans = min(uf.parents)\nprint(-ans)\n","label":2}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s415061450","submission":"def main():\n    from string import ascii_lowercase\n\n    N = int(input())\n\n    ans = []\n\n    def dfs(s='a', ma='a'):\n        if len(s) == N:\n            ans.append(s)\n            return\n\n        for c in ascii_lowercase:\n            dfs(s + c, max(c, ma))\n            if c > ma: break\n\n    dfs()\n\n    print(*ans, sep='\\n')\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p03095","problem":"You are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.","submission_id":"s928282505","submission":"N=int(input())\nS=input()\ncount=1\nfor char in set(S):\n    count*=S.count(char)+1\nprint((count-1)%(10**9+7))","label":2}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s499825035","submission":"S = input()\nT = input()\n\nans = 0\nfor i in range(len(S)):\n    if S[i] == T[i]:\n        ans += 1\n\nprint(ans)","label":2}
{"problem_id":"p02631","problem":"There are N Snuke Cats numbered 1, 2, \\ldots, N, where N is even.\nEach Snuke Cat wears a red scarf, on which his favorite non-negative integer is written.\nRecently, they learned the operation called xor (exclusive OR).\n\nWhat is xor?\n\nFor n non-negative integers x_1, x_2, \\ldots, x_n, their xor, x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is defined as follows:\n\n When x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even. \n\nFor example, 3~\\textrm{xor}~5 = 6.\n\n\nThey wanted to use this operation quickly, so each of them calculated the xor of the integers written on their scarfs except his scarf.\nWe know that the xor calculated by Snuke Cat i, that is, the xor of the integers written on the scarfs except the scarf of Snuke Cat i is a_i.\nUsing this information, restore the integer written on the scarf of each Snuke Cat.","submission_id":"s116802330","submission":"N = int(input())\na = list(map(int, input().split()))\nx = 0\n\nfor r in a:\n\tx ^= r\na = [str(x^r) for r in a]\na = ' '.join(a)\nprint(a)","label":2}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s924887468","submission":"from heapq import *\n\nclass MultisetBIT:\n    \"\"\"\n    \u6700\u5927\u5024\u304c\u5c0f\u3055\u3044\u6570\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u91cd\u8907\u3092\u8a31\u3057\u305f\u96c6\u5408\u3092\u7ba1\u7406\u3059\u308b\u3002\n    \u6700\u5927\u5024 maxvalue \u3092\u53d7\u3051\u53d6\u308a\u3001[0, maxvalue] \u3092\u7ba1\u7406\u3059\u308b\u3002\n    counter \u306f\u8f9e\u66f8\u578b\u304b\u30ea\u30b9\u30c8\u578b\u3067\u3001counter[i] \u304c i \u306e\u500b\u6570\u3092\u6301\u3064\u3053\u3068\u3092\u4eee\u5b9a\u3059\u308b\u3002\n    counter \u304c\u4e0e\u3048\u3089\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u5168\u3066\u500b\u6570 0 \u3067\u521d\u671f\u5316\u3055\u308c\u308b\u3002\n    \u57fa\u672c\u7684\u306b\u9589\u533a\u9593\u3067\u7ba1\u7406\u3059\u308b\u3002\n    \u5185\u90e8\u3067\u306f\u53d7\u3051\u53d6\u3063\u305f\u6570\u3092 +1 \u3057\u305f\u3082\u306e\u3092index\u3068\u3057\u3066\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u3002\n    \"\"\"\n\n    __slots__ = [\"n\", \"k\", \"data\"]\n\n    def __init__(self, maxvalue, counter = None):\n        self.n = maxvalue + 1\n        self.k = 1 << ((self.n + 1).bit_length() - 1)\n        self.data = [0] * (self.n + 1)\n        if counter is not None:\n            self.update(counter)\n        \n    def update(self, counter):\n        \"\"\"\n        counter \u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u308c\u3092\u53cd\u6620\u3055\u305b\u308b\u3002\n        counter \u306f\u8f9e\u66f8\u578b\u304b\u30ea\u30b9\u30c8\u578b\u3067\u3001counter[i] \u304c i \u306e\u500b\u6570\u3092\u6301\u3064\u3053\u3068\u3092\u4eee\u5b9a\u3059\u308b\u3002\n        \u8a08\u7b97\u91cf\u306f\u3001n \u3092\u8981\u7d20\u306e\u6700\u5927\u5024\u3068\u3057\u3066\u3001 O(n) \u3068\u306a\u308b\u3002\n        \"\"\"\n        if isinstance(counter, list):\n            self.data = [0] + counter + [0] * (self.n - len(counter))\n        else:\n            self.data = [0] * (self.n + 1)\n            for k, v in counter.items():\n                self.data[k + 1] = v\n        for i in range(1, self.n + 1):\n            if i + (i & -i) <= self.n:\n                self.data[i + (i & -i)] += self.data[i]\n\n    def add(self, value):\n        \"\"\"\n        \u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u3092 Multiset \u306b\u52a0\u3048\u308b\u3002\n        \u8a08\u7b97\u91cf\u306f\u3001n \u3092\u8981\u7d20\u306e\u6700\u5927\u5024\u3068\u3057\u3066\u3001 O(log n) \u3068\u306a\u308b\u3002\n        \"\"\"\n        value += 1\n        while value <= self.n:\n            self.data[value] += 1\n            value += value & -value\n\n    def pop(self, value):\n        \"\"\"\n        Multiset \u304b\u3089\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u3092\u53d6\u308a\u9664\u304f\u3002\n        \u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u304c Multiset \u306b\u5165\u3063\u3066\u3044\u308b\u304b\u306e\u30c1\u30a7\u30c3\u30af\u306f\u884c\u308f\u306a\u305a\u3001\n        \u5358\u306b\u305d\u306e\u500b\u6570\u3092 1 \u6e1b\u3089\u3059\u3060\u3051\u306a\u306e\u3067\u6ce8\u610f\u3002\n        \u8a08\u7b97\u91cf\u306f\u3001n \u3092\u8981\u7d20\u306e\u6700\u5927\u5024\u3068\u3057\u3066\u3001 O(log n) \u3068\u306a\u308b\u3002\n        \"\"\"\n        value += 1\n        while value <= self.n:\n            self.data[value] -= 1\n            value += value & -value\n\n    def count_le(self, value):\n        \"\"\"\n        Multiset \u5185\u306e\u8981\u7d20 elem \u306e\u3046\u3061\u30010 <= elem <= value \u3092\u6e80\u305f\u3059\u3082\u306e\u3092\u6570\u3048\u308b\u3002\n        \u8a08\u7b97\u91cf\u306f\u3001n \u3092\u8981\u7d20\u306e\u6700\u5927\u5024\u3068\u3057\u3066\u3001 O(log n) \u3068\u306a\u308b\u3002\n        \"\"\"\n        value += 1\n        ret = 0\n        while value > 0:\n            ret += self.data[value]\n            value -= value & -value\n        return ret\n\n    def count(self, first, last):\n        \"\"\"\n        Multiset \u5185\u306e\u8981\u7d20 elem \u306e\u3046\u3061\u3001first <= elem <= last \u3092\u6e80\u305f\u3059\u3082\u306e\u3092\u6570\u3048\u308b\u3002\n        \u8a08\u7b97\u91cf\u306f\u3001n \u3092\u8981\u7d20\u306e\u6700\u5927\u5024\u3068\u3057\u3066\u3001 O(log n) \u3068\u306a\u308b\u3002\n        \"\"\"\n        last += 1\n        ret = 0\n        while first < last:\n            ret += self.data[last]\n            last -= last & -last\n        while last < first:\n            ret -= self.data[first]\n            first -= first & -first\n        return ret\n\n    def bisect(self, count):\n        \"\"\"\n        Multiset \u5185\u306e\u8981\u7d20 elem \u306e\u3046\u3061\u3001count <= count_le(elem) \u3092\u6e80\u305f\u3059\u6700\u5c0f\u306eelem\u3092\u8fd4\u3059\u3002\n        \u8a08\u7b97\u91cf\u306f\u3001n \u3092\u8981\u7d20\u306e\u6700\u5927\u5024\u3068\u3057\u3066\u3001 O(log n) \u3068\u306a\u308b\u3002\n        \"\"\"\n        ret = 0\n        k = self.k\n        while k > 0:\n            if ret + k <= self.n and self.data[ret + k] < count:\n                count -= self.data[ret + k]\n                ret += k\n            k \/\/= 2\n        return ret\n\n    def lower_bound(self, value):\n        \"\"\"\n        Multiset \u5185\u306e\u8981\u7d20 elem \u306e\u3046\u3061\u3001value <= elem \u3092\u6e80\u305f\u3059\u6700\u5c0f\u306eelem\u3092\u8fd4\u3059\u3002\n        \u8a08\u7b97\u91cf\u306f\u3001n \u3092\u8981\u7d20\u306e\u6700\u5927\u5024\u3068\u3057\u3066\u3001 O(log n) \u3068\u306a\u308b\u3002\n        \"\"\"\n        return self.bisect(self.count_le(value - 1) + 1)\n\n    def upper_bound(self, value):\n        \"\"\"\n        Multiset \u5185\u306e\u8981\u7d20 elem \u306e\u3046\u3061\u3001value < elem \u3092\u6e80\u305f\u3059\u6700\u5c0f\u306eelem\u3092\u8fd4\u3059\u3002\n        \u8a08\u7b97\u91cf\u306f\u3001n \u3092\u8981\u7d20\u306e\u6700\u5927\u5024\u3068\u3057\u3066\u3001 O(log n) \u3068\u306a\u308b\u3002\n        \"\"\"\n        return self.bisect(self.count_le(value) + 1)\n\n\nN, Q = map(int, input().split())\nSTXs = [tuple(map(int, input().split())) for _ in range(N)]\nDs = [int(input()) for _ in range(Q)]\n\ni2X = sorted(map(lambda t: t[2], STXs))\nX2i = {X:i for i, X in enumerate(i2X)}\nmax_i = len(i2X) - 1\nmbit = MultisetBIT(max_i)\n\nevents = []\nfor S, T, X in STXs:\n    events.append( ((S - X) << 32) + (X2i[X] << 1)     )\n    events.append( ((T - X) << 32) + (X2i[X] << 1) + 1 )\nheapify(events)\n\nmask = (1 << 32) - 1\nfor D in Ds:\n    while events:\n        if events[0] % 2 == 0:\n            if (events[0] >> 32) <= D:\n                e = heappop(events)\n                mbit.add((e & mask) >> 1)\n            else:\n                break\n        else:\n            if (events[0] >> 32) <= D:\n                e = heappop(events)\n                mbit.pop((e & mask) >> 1)\n            else:\n                break\n    # print([mbit.count(i, i) for i in range(max_i + 1)])\n    ans_i = mbit.lower_bound(0)\n    print(-1 if ans_i > max_i else i2X[ans_i])","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s223994002","submission":"if __name__ == '__main__':\n    try:\n        s = str(input())\n        s.lower()\n        if s[len(s)-1] != 's':\n            s += 's'\n            print(s)\n        else:\n            s += 'es'\n            print(s)\n    except Exception:\n        pass","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s106224378","submission":"#!\/usr\/bin\/env python\n\nn = int(input())\na = list(map(int, input().split()))\n\ns = []\ntmp = 1 \nfor i in range(n-1):\n    if a[i] == a[i+1]:\n        tmp += 1\n        if i == n-2:\n            s.append(tmp)\n    else:\n        if tmp != 1:\n            s.append(tmp)\n        tmp = 1 \n\nans = 0 \nfor i in s:\n    ans += i\/\/2\n\nprint(ans)\n","label":2}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s772505804","submission":"n, p = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(n):\n    a[i] %= 2\ncnt_zero = a.count(0)\ncnt_one = n - cnt_zero\nans = 0\ndef nCk(n, k):\n    if k > n - k:\n        return nCk(n, n - k)\n    ret = 1\n    for i in range(k):\n        ret *= n - i\n    for i in range(k):\n        ret \/\/= i + 1\n    return ret\nans = 0\nc = 0\nfor i in range(p, cnt_one + 1, 2):\n    c += nCk(cnt_one, i)\nans = (2 ** cnt_zero) * c\nprint(ans)","label":2}
{"problem_id":"p03135","problem":"In order to pass the entrance examination tomorrow, Taro has to study for T more hours.\nFortunately, he can leap to World B where time passes X times as fast as it does in our world (World A).\nWhile (X \\times t) hours pass in World B, t hours pass in World A.\nHow many hours will pass in World A while Taro studies for T hours in World B?","submission_id":"s724991627","submission":"print(eval(input().replace(\" \", \"\/\")))\n","label":2}
{"problem_id":"p03125","problem":"You are given positive integers A and B.\nIf A is a divisor of B, print A + B; otherwise, print B - A.","submission_id":"s972058230","submission":"a, b = map(int, input().split())\nprint((-1)**(b%a != 0)*a+b)","label":2}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s628876040","submission":"a = [int(x) for x in input().split()]\nprint(a[0]*(a[0] - 1) \/\/ 2 + a[1]*(a[1] - 1) \/\/ 2)","label":2}
{"problem_id":"p02838","problem":"We have N integers. The i-th integer is A_i.\nFind \\sum_{i=1}^{N-1}\\sum_{j=i+1}^{N} (A_i \\mbox{ XOR } A_j), modulo (10^9+7).\n\nWhat is \\mbox{ XOR }?\n\nThe XOR of integers A and B, A \\mbox{ XOR } B, is defined as follows:\n\nWhen A \\mbox{ XOR } B is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if either A or B, but not both, has 1 in the 2^k's place, and 0 otherwise.\n\nFor example, 3 \\mbox{ XOR } 5 = 6. (In base two: 011 \\mbox{ XOR } 101 = 110.)","submission_id":"s058710757","submission":"import numpy as np\n\nn = int(input())\na = list(map(int,input().split()))\na = np.array(a,dtype=np.int64)\npoint = 0\nmod = 10**9+7\n\nb = [((a>>i)&1).sum() for i in range(61)]\nc = [n-b[i] for i in range(61)]\nd = [c[i]*b[i]%mod for i in range(61)]\n\npoint = 0\nnow = 1\n\nfor i in range(61):\n    point += now*d[i]\n    point %= mod\n    now *= 2\n    now %= mod\n\nprint(point)","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s336692449","submission":"S = input()\nprint(S.replace(\"7\",\"8\",1))","label":2}
{"problem_id":"p03567","problem":"Snuke built an online judge to hold a programming contest.\nWhen a program is submitted to the judge, the judge returns a verdict, which is a two-character string that appears in the string S as a contiguous substring.\n(The judge can return any two-character substring of S.)\nDetermine whether the judge can return the string AC as the verdict to a program.","submission_id":"s561672022","submission":"s = input().rstrip()\nif 'AC' in s:\n  print('Yes')\nelse:\n  print('No')","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s310938676","submission":"N=int(input())\nl=[]\ntmp=0\nfor i in range(N):\n    l.append(list(map(int,input().split())))\nfor i in range(N):\n    tmp+=abs(l[i][0]-l[i][1])+1\nprint(tmp)\n","label":2}
{"problem_id":"p03128","problem":"Find the largest integer that can be formed with exactly N matchsticks, under the following conditions:\n\nEvery digit in the integer must be one of the digits A_1, A_2, ..., A_M (1 \\leq A_i \\leq 9).\nThe number of matchsticks used to form digits 1, 2, 3, 4, 5, 6, 7, 8, 9 should be 2, 5, 5, 4, 5, 6, 3, 7, 6, respectively.","submission_id":"s020209369","submission":"ma = lambda :map(int,input().split())\nlma = lambda :list(map(int,input().split()))\ntma = lambda :tuple(map(int,input().split()))\nni = lambda:int(input())\nyn = lambda fl:print(\"Yes\") if fl else print(\"No\")\nimport collections\nimport math\nimport itertools\nimport heapq as hq\ncnt = [-1,2,5,5,4,5,6,3,7,6]\nn,m = ma()\nA = lma()\nuse=[(cnt[a],a) for a in A]\nuse.sort(key=lambda x:x[1],reverse=True)\nINF=10**9\ndp = [0]+[-INF]*(n+10)\nfor i in range(n):\n    if dp[i]==-INF:continue\n    for c,a in use:\n        dp[i+c]=max(dp[i+c],dp[i]+1)\nl = dp[n]\nans = [\"0\"]*l\nnum = n\nfor i in range(l):\n    for c,a in use:\n        if dp[num-c]==dp[num]-1:\n            ans[i]=str(a)\n            num-=c\n            break\nprint(\"\".join(ans))\n","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s344990783","submission":"N = int(input())\nal = list(map(int,input().split()))\nbit = [0]*35\n\nfor i in range(N):\n  for j in range(35):\n    if (al[i]>>j)&1 == 1:\n      bit[j] += 1\n      \nfor j in range(35):\n  if bit[j] %2 == 1:\n    print(\"No\")\n    exit()\n    \nprint(\"Yes\")","label":2}
{"problem_id":"p03464","problem":"An adult game master and N children are playing a game on an ice rink.\nThe game consists of K rounds.\nIn the i-th round, the game master announces:\n\nForm groups consisting of A_i children each!\n\nThen the children who are still in the game form as many groups of A_i children as possible.\nOne child may belong to at most one group.\nThose who are left without a group leave the game. The others proceed to the next round.\nNote that it's possible that nobody leaves the game in some round.\nIn the end, after the K-th round, there are exactly two children left, and they are declared the winners.\nYou have heard the values of A_1, A_2, ..., A_K. You don't know N, but you want to estimate it.\nFind the smallest and the largest possible number of children in the game before the start, or determine that no valid values of N exist.","submission_id":"s505020192","submission":"import sys\nK=int(input())\nA=[int(i) for i in input().split()]\nB=A[::-1]\nif B[0]!=2:\n    print(-1)\n    sys.exit()\na=2\nb=3\nfor i in range(1,K):\n    x=B[i]\n    if a%x==0:\n        c=a\n    else:\n        c=((a\/\/x)+1)*x\n    if a<=c<=b:\n        a=c\n        b=((b\/\/x)+1)*x-1\n\n    else:\n        print(-1)\n        sys.exit()\n    #print(a,b,c,x)\nprint(a,b)","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s469542428","submission":"import math\n#import numpy as np\nimport queue\nfrom collections import deque,defaultdict\nimport heapq as hpq\nfrom sys import stdin,setrecursionlimit\n#from scipy.sparse.csgraph import dijkstra\n#from scipy.sparse import csr_matrix\nipt = stdin.readline\nsetrecursionlimit(10**7)\n\ndef main():\n    n = int(ipt())\n    sum = 0\n    for i in range(1,10**6):\n        if i**2 >= n:\n            break\n        if n%i == 0:\n            if i < n\/\/i-1:\n                sum += n\/\/i-1\n            else:\n                break\n    print(sum)\n    return None\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p02924","problem":"For an integer N, we will choose a permutation \\{P_1, P_2, ..., P_N\\} of \\{1, 2, ..., N\\}.\nThen, for each i=1,2,...,N, let M_i be the remainder when i is divided by P_i.\nFind the maximum possible value of M_1 + M_2 + \\cdots + M_N.","submission_id":"s584179051","submission":"def main():\n    n = int(input())\n    print((n - 1) * n \/\/ 2)\n\n\nmain()\n","label":2}
{"problem_id":"p03379","problem":"When l is an odd number, the median of l numbers a_1, a_2, ..., a_l is the (\\frac{l+1}{2})-th largest value among a_1, a_2, ..., a_l.\nYou are given N numbers X_1, X_2, ..., X_N, where N is an even number.\nFor each i = 1, 2, ..., N, let the median of X_1, X_2, ..., X_N excluding X_i, that is, the median of X_1, X_2, ..., X_{i-1}, X_{i+1}, ..., X_N be B_i.\nFind B_i for each i = 1, 2, ..., N.","submission_id":"s939128566","submission":"n = int(input())\nX = list(map(int, input().split()))\ns = sorted(X)\n\nmed_low = s[n\/\/2 - 1]\nmed_high = s[n\/\/2]\n\nfor x in X:\n    if x <= med_low: print(med_high)\n    else: print(med_low)","label":2}
{"problem_id":"p03910","problem":"The problem set at CODE FESTIVAL 20XX Finals consists of N problems.\nThe score allocated to the i-th (1\u2266i\u2266N) problem is i points.\nTakahashi, a contestant, is trying to score exactly N points. For that, he is deciding which problems to solve.\nAs problems with higher scores are harder, he wants to minimize the highest score of a problem among the ones solved by him.\nDetermine the set of problems that should be solved.","submission_id":"s002845943","submission":"from sys import *\nfrom itertools import *\nn=int(input())\nl=[i for i in range(1,10**4)]\nt=list(accumulate(l))\nfor i in range(len(t)):\n    if t[i]==n:\n        ans=l[0:i+1]\n        for i in ans:\n            print(i)\n        exit()\n    if t[i]>n:\n        m=t[i]-n\n        ans=l[0:i+1]\n        ans.remove(m)\n        for i in ans:\n            print(i)\n        exit()","label":2}
{"problem_id":"p03815","problem":"Snuke has decided to play with a six-sided die. Each of its six sides shows an integer 1 through 6, and two numbers on opposite sides always add up to 7.\nSnuke will first put the die on the table with an arbitrary side facing upward, then repeatedly perform the following operation:\n\nOperation: Rotate the die 90\u00b0 toward one of the following directions: left, right, front (the die will come closer) and back (the die will go farther). Then, obtain y points where y is the number written in the side facing upward.\n\nFor example, let us consider the situation where the side showing 1 faces upward, the near side shows 5 and the right side shows 4, as illustrated in the figure.\nIf the die is rotated toward the right as shown in the figure, the side showing 3 will face upward.\nBesides, the side showing 4 will face upward if the die is rotated toward the left, the side showing 2 will face upward if the die is rotated toward the front, and the side showing 5 will face upward if the die is rotated toward the back.\n\n\n\nFind the minimum number of operation Snuke needs to perform in order to score at least x points in total.","submission_id":"s233225341","submission":"x = int(input())\ny = x % 11\nz = x \/\/ 11\nif 0 <  y  <= 6:\n    print(2*z + 1)\nelif y == 0:\n    print(2*z)\nelif 7 <= y <= 11:\n    print(2*z +2 )","label":2}
{"problem_id":"p02795","problem":"We have a grid with H rows and W columns, where all the squares are initially white.\nYou will perform some number of painting operations on the grid.\nIn one operation, you can do one of the following two actions:\n\nChoose one row, then paint all the squares in that row black.\nChoose one column, then paint all the squares in that column black.\n\nAt least how many operations do you need in order to have N or more black squares in the grid?\nIt is guaranteed that, under the conditions in Constraints, having N or more black squares is always possible by performing some number of operations.","submission_id":"s994608872","submission":"h = int(input())\nw = int(input())\nn = int(input())\n\ni=1\nwhile n > max(h,w)*i:\n    i += 1\nelse: print(i)\n","label":2}
{"problem_id":"p03331","problem":"Takahashi has two positive integers A and B.\nIt is known that A plus B equals N.\nFind the minimum possible value of \"the sum of the digits of A\" plus \"the sum of the digits of B\" (in base 10).","submission_id":"s825114110","submission":"def getter(i):\n  res=0\n  while True:\n    res+=i%10\n    i\/\/=10\n    if i==0:\n      break\n  return res\nn=int(input())\ndigit=0\nhoge=n\nwhile True:\n  hoge\/\/=10\n  if hoge==0:\n  \tbreak\n  digit+=1\na=10**digit\nif n-a>0:\n  res=1+getter(n-a)\n  print(res)\n  exit()\nelse:\n  print(\"10\")\n\n","label":2}
{"problem_id":"p02912","problem":"Takahashi is going to buy N items one by one.\nThe price of the i-th item he buys is A_i yen (the currency of Japan).\nHe has M discount tickets, and he can use any number of them when buying an item.\nIf Y tickets are used when buying an item priced X yen, he can get the item for \\frac{X}{2^Y} (rounded down to the nearest integer) yen.\nWhat is the minimum amount of money required to buy all the items?","submission_id":"s498626849","submission":"#!usr\/bin\/env python3\nfrom collections import defaultdict, deque, Counter, OrderedDict\nimport collections, heapq, itertools, bisect\nimport math, fractions\nimport sys, copy\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LIM(): return [-int(x) for x in sys.stdin.readline().split()]\ndef LI1(): return [int(x) - 1 for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LS(): return [list(x) for x in sys.stdin.readline().split()]\ndef S(): return list(sys.stdin.readline().rstrip())\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\ndire = [[1, 0], [0, 1], [-1, 0], [0, -1]]\ndire8 = [[1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1], [1, -1]]\nMOD = 1000000007\n\ndef main():\n    N, M = LI()\n    A = LIM()\n    heapq.heapify(A)\n    for _ in range(M):\n        x = -heapq.heappop(A)\n        heapq.heappush(A, -(x \/\/ 2))\n    print(-sum(A))\n\nif __name__ == '__main__':\n    main()","label":2}
{"problem_id":"p02409","problem":"You manage 4 buildings, each of which has 3 floors, each of which consists of 10 rooms. Write a program which reads a sequence of tenant\/leaver notices, and reports the number of tenants for each room.","submission_id":"s849711935","submission":"import sys\n\nn = input()\na_uni = [[[0 for i in range(10)]for i in range(3)]for i in range(4)]\nfor i in range(n):\n\tb,f,r,v = map(int,raw_input().split())\n\ta_uni[b-1][f-1][r-1] += v\nfor i in range(4):\n\tfor j in range(3):\n\t\tfor k in range(10):\n\t\t\tif k==9:\n\t\t\t\tsys.stdout.write(' ')\n\t\t\t\tprint(a_uni[i][j][k])\n\t\t\telse :\n\t\t\t\tsys.stdout.write(' ')\n\t\t\t\tsys.stdout.write(str(a_uni[i][j][k]))\n\tif not i==3:\n\t\tprint '####################'","label":2}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s482767354","submission":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    S = readline().strip()\n    \n    odd = {'R', 'U', 'D'}\n    even = {'L', 'U', 'D'}\n    \n    ans = 'Yes'\n    for i, c in enumerate(S):\n        if not i % 2 and c not in odd:\n            ans = 'No'\n        elif i % 2 and c not in even:\n            ans = 'No'\n    \n    print(ans)\n    return\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p03103","problem":"Hearing that energy drinks increase rating in those sites, Takahashi decides to buy up M cans of energy drinks.\nThere are N stores that sell energy drinks. In the i-th store, he can buy at most B_i cans of energy drinks for A_i yen (the currency of Japan) each.\nWhat is the minimum amount of money with which he can buy M cans of energy drinks?\nIt is guaranteed that, in the given inputs, a sufficient amount of money can always buy M cans of energy drinks.","submission_id":"s351255372","submission":"n,m = map(int,input().split())\n\nlis = []\n\nfor _ in range(n):\n    a,b = map(int, input().split())\n    lis.append([a,b])\n    \nlis = sorted(lis)\n\ntotal = 0\ncash = 0\n\nfor i in range(n):\n    if total < m:\n        total += lis[i][1]\n        cash += lis[i][0] * lis[i][1]\n        if total >= m:\n            total -= lis[i][1]\n            cash -= lis[i][0] * lis[i][1]\n            for j in range(lis[i][1]):\n                while total < m:\n                    total += 1\n                    cash += lis[i][0]\n    else:\n        break\n\nprint(cash)","label":2}
{"problem_id":"p02879","problem":"Having learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together. He cannot do any other calculation.\nGiven are two integers A and B.\nIf Takahashi can calculate A \\times B, print the result; if he cannot, print -1 instead.","submission_id":"s053867222","submission":"A,B=map(int,input().split())\nif 10>A>0 and 10>B>0:\n    print(A*B)\nelse:\n    print(-1)\n","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s644256367","submission":"s = input()\n\nn = int(s)\n\nanswer = 0\n\nfor i in range(n):\n    p = input().split()\n    x = int(p[0])\n    y = int(p[1])\n    answer += (y - x) + 1\n\nprint(answer)","label":2}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s617544712","submission":"a = list(map(int,input().split()))\nprint('Yes') if a[0]==a[1] else print('No')","label":2}
{"problem_id":"p02766","problem":"Given is an integer N. Find the number of digits that N has in base K.","submission_id":"s259902599","submission":"N, K = map(int,input().split())\n\ndef abc(n,m):\n    a,b = divmod(n,m)\n    return a,b\n\ncount = 0 \na = 1\nwhile a !=0 :\n    a,b = abc(N,K)\n\n    N = a\n    count += 1\nprint(count)    ","label":2}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s444717216","submission":"import sys\n\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nread = sys.stdin.buffer.read\nsys.setrecursionlimit(10 ** 7)\nINF = float('inf')\n\nK = int(input())\n\n# index\u306f\u6841\u6570\nluns = [[]]\nluns.append(list(\"123456789\"))\nfor keta in range(2, 11):\n    keta_lun = []\n    for s in luns[-1]:\n        lst = int(s[-1])\n        if lst - 1 >= 0:\n            keta_lun.append(s + str(lst - 1))\n        keta_lun.append(s + str(lst))\n        if lst + 1 < 10:\n            keta_lun.append(s + str(lst + 1))\n    luns.append(keta_lun)\n\nindex = 0\nfor keta_luns in luns:\n    for lun in keta_luns:\n        index += 1\n        if index == K:\n            print(lun)\n            quit()","label":2}
{"problem_id":"p02691","problem":"You are the top spy of AtCoder Kingdom. To prevent the stolen secret from being handed to AlDebaran Kingdom, you have sneaked into the party where the transaction happens.\nThere are N attendees in the party, and they are given attendee numbers from 1 through N. The height of Attendee i is A_i.\nAccording to an examination beforehand, you know that a pair of attendees satisfying the condition below will make the transaction.\n\nThe absolute difference of their attendee numbers is equal to the sum of their heights.\n\nThere are \\frac{N(N-1)}{2} ways to choose two from the N attendees and make a pair. Among them, how many satisfy the condition above?\nP.S.: We cannot let you know the secret.","submission_id":"s399625096","submission":"#!\/usr\/bin\/env python3\nimport collections\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\n# 2\u4eba\u306e\u6301\u3064\u756a\u53f7\u306e\u5dee\u306e\u7d76\u5bfe\u5024\u304c\u30012\u4eba\u306e\u8eab\u9577\u306e\u548c\u306b\u7b49\u3057\u3044\u3002\n# j - i = Ai + Aj\n# j - Aj = Ai + i\nl = [j - aj for j, aj in enumerate(a, 1)]\nr = [i + ai for i, ai in enumerate(a, 1)]\ncnt = collections.Counter(r)\nans = 0\nfor i in l:\n    ans += cnt[i]\nprint(ans)\n","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s127218067","submission":"from math import sqrt, floor, ceil\nn = int(input())\ncnt = 0\ndiv = 1\nwhile div < (n - div) \/\/ div:\n    if (n - div) % div == 0:\n        cnt += (n - div) \/\/ div\n    div += 1\nprint(cnt)","label":2}
{"problem_id":"p02957","problem":"We have two distinct integers A and B.\nPrint the integer K such that |A - K| = |B - K|.\nIf such an integer does not exist, print IMPOSSIBLE instead.","submission_id":"s864398195","submission":"a,b = map(int,input().split())\nk = (a+b)\/2\n\nif k.is_integer():\n    print(int(k))\nelse:\n    print('IMPOSSIBLE')","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s687803644","submission":"n=int(input())\na=[int(i) for i in input().split()]\ncnt=0\nflag=False\nfor i in range(1,n):\n    if a[i]==a[i-1]:\n        if flag:\n            flag=False\n        else:\n            cnt+=1\n            flag=True\n    else:\n        flag=False\nprint(cnt)","label":2}
{"problem_id":"p03486","problem":"You are given strings s and t, consisting of lowercase English letters.\nYou will create a string s' by freely rearranging the characters in s.\nYou will also create a string t' by freely rearranging the characters in t.\nDetermine whether it is possible to satisfy s' < t' for the lexicographic order.","submission_id":"s123058372","submission":"# abc082_b.py\nS = input()\nT = input()\n\nS = sorted(S, reverse=False)\nT = sorted(T, reverse=True)\nif S >= T:\n    print('No')\nelse:\n    print('Yes')\n","label":2}
{"problem_id":"p03624","problem":"You are given a string S consisting of lowercase English letters.\nFind the lexicographically (alphabetically) smallest lowercase English letter that does not occur in S.\nIf every lowercase English letter occurs in S, print None instead.","submission_id":"s129234156","submission":"#k = int(input())\n#s = input()\n#a, b = map(int, input().split())\n#s, t = map(str, input().split())\n#l = list(map(int, input().split()))\n#l = [list(map(int,input().split())) for i in range(n)]\n#a = [list(input()) for _ in range(n)]\n#a = [int(input()) for _ in range(n)]\n\n\n\ns = input()\n\nh = {}\n\nalp = \"abcdefghijklmnopqrstuvwxyz\"\n\nfor i in alp:\n    h[i] = 0\n\nfor i in s:\n    h[i] += 1\n\n#print(h)\nfor k,v in h.items():\n    if (v == 0):\n        print(k)\n        exit()\n\nprint(\"None\")\n\n","label":2}
{"problem_id":"p03292","problem":"You have three tasks, all of which need to be completed.\nFirst, you can complete any one task at cost 0.\nThen, just after completing the i-th task, you can complete the j-th task at cost |A_j - A_i|.\nHere, |x| denotes the absolute value of x.\nFind the minimum total cost required to complete all the task.","submission_id":"s332955444","submission":"a,b,c = map(int,input().split())\nprint(max(a,b,c)-min(a,b,c))","label":2}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s971255729","submission":"N,A = [int(input().rstrip()) for i in range(2)]\nif N-int(N\/500)*500 <= A:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":2}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s658848629","submission":"N,Q=map(int,input().split())\nimport sys\ndef input(): return sys.stdin.readline().strip()\nSTX=[list(map(int,input().split())) for i in range(N)]\nD=[int(input()) for i in range(Q)]\nX=[]\nfor s,t,x in STX:\n    X.append((s-x,1,x))\n    X.append((t-x,-1,x))\nX.sort(key=lambda x:x[0])\na=0\nk=[]\nfrom heapq import heappop,heappush\nkd={}\nfor x in X:\n    while a<Q and D[a]<x[0]:\n        if len(k)>0:\n            print(k[0])\n        else:\n            print(-1)\n        a+=1\n    if x[1]==1:\n        heappush(k,x[2])\n        if x[2] in kd:\n            kd[x[2]]=0\n    else:\n        kd[x[2]]=1\n        while len(k)>0 and k[0] in kd and kd[k[0]]==1:\n            heappop(k)\nwhile a<Q:\n    print(-1)\n    a+=1","label":2}
{"problem_id":"p03475","problem":"A railroad running from west to east in Atcoder Kingdom is now complete.\nThere are N stations on the railroad, numbered 1 through N from west to east.\nTomorrow, the opening ceremony of the railroad will take place.\nOn this railroad, for each integer i such that 1\u2264i\u2264N-1, there will be trains that run from Station i to Station i+1 in C_i seconds. No other trains will be operated.\nThe first train from Station i to Station i+1 will depart Station i S_i seconds after the ceremony begins. Thereafter, there will be a train that departs Station i every F_i seconds.\nHere, it is guaranteed that F_i divides S_i.\nThat is, for each Time t satisfying S_i\u2264t and t\uff05F_i=0, there will be a train that departs Station i t seconds after the ceremony begins and arrives at Station i+1 t+C_i seconds after the ceremony begins, where A\uff05B denotes A modulo B, and there will be no other trains.\nFor each i, find the earliest possible time we can reach Station N if we are at Station i when the ceremony begins, ignoring the time needed to change trains.","submission_id":"s443509499","submission":"n = int(input())\nans = [0] * n\n\nfor i in range(1, n):\n    c, s, f = list(map(int, input().split()))\n\n    for j in range(i):\n        ans[j] = max(ans[j], s)\n        ans[j] = ((ans[j]+f-1)\/\/f) * f\n        ans[j] += c\n\nfor a in ans:\n    print(a)","label":2}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s486059735","submission":"# coding: utf-8\nN = int(input())\nA = int(input())\n\nB = N \/\/ 500\nif N - B * 500 <= A :\n    print('Yes')\nelse:\n    print('No')","label":2}
{"problem_id":"p03959","problem":"Mountaineers Mr. Takahashi and Mr. Aoki recently trekked across a certain famous mountain range.\nThe mountain range consists of N mountains, extending from west to east in a straight line as Mt. 1, Mt. 2, ..., Mt. N.\nMr. Takahashi traversed the range from the west and Mr. Aoki from the east.  \nThe height of Mt. i is h_i, but they have forgotten the value of each h_i.\nInstead, for each i (1 \u2264 i \u2264 N), they recorded the maximum height of the mountains climbed up to the time they reached the peak of Mt. i (including Mt. i).\nMr. Takahashi's record is T_i and Mr. Aoki's record is A_i.  \nWe know that the height of each mountain h_i is a positive integer.\nCompute the number of the possible sequences of the mountains' heights, modulo 10^9 + 7.\nNote that the records may be incorrect and thus there may be no possible sequence of the mountains' heights.\nIn such a case, output 0.","submission_id":"s162557320","submission":"n = int(input())\n\nal = list(map(int,input().split()))\ntl = list(map(int,input().split()))\n\n\nfor i in range(n-1):\n    if al[i] > al[i+1]:\n        print(0)\n        exit()\n    if tl[i] < tl[i+1]:\n        print(0)\n        exit()\n\nans = 1\nfor i in range(n):\n    a = False\n    t = False\n    if i != 0:\n        if al[i] != al[i-1]:\n            a = True\n    else:\n        a = True\n    if i != n-1:\n        if tl[i] != tl[i+1]:\n            t = True\n    else:\n        t = True\n    if a and t:\n        if al[i] != tl[i]:\n            print(0)\n            exit()\n    elif a:\n        if al[i] > tl[i]:\n            print(0)\n            exit()\n    elif t:\n        if al[i] < tl[i]:\n            print(0)\n            exit()\n    else:\n        ans *= min(al[i], tl[i])\n        ans %= 10**9 + 7\n\nprint(ans)\n\n\n\n\n","label":2}
{"problem_id":"p03733","problem":"In a public bath, there is a shower which emits water for T seconds when the switch is pushed.\nIf the switch is pushed when the shower is already emitting water, from that moment it will be emitting water for T seconds.\nNote that it does not mean that the shower emits water for T additional seconds.\nN people will push the switch while passing by the shower.\nThe i-th person will push the switch t_i seconds after the first person pushes it.\nHow long will the shower emit water in total?","submission_id":"s245506833","submission":"N, T = map(int, input().split())\nt = list(map(int, input().split()))\nans = T*N\nfor i in range(N-1):\n    ans -= max(T-(t[i+1]-t[i]), 0)\nprint(ans)","label":2}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s732283329","submission":"s=input()\nn=len(s)\nmod=10**9+7\ndp=[[0]*4 for _ in range(n+1)]\ndp[n][3]=1\nfor i in reversed(range(n)):\n    for j in reversed(range(4)):\n        if j==3:\n            if s[i]==\"?\":\n                m=3\n            else:\n                m=1\n            dp[i][j]+=m*dp[i+1][j]\n        else:\n            if s[i]==\"?\":\n                m1=3\n            else:\n                m1=1\n            if j==0:\n                if s[i]==\"A\" or s[i]==\"?\":\n                    m2=1\n                else:\n                    m2=0\n            elif j==1:\n                if s[i]==\"B\" or s[i]==\"?\":\n                    m2=1\n                else:\n                    m2=0\n            else:\n                if s[i]==\"C\" or s[i]==\"?\":\n                    m2=1\n                else:\n                    m2=0\n            dp[i][j]+=m1*dp[i+1][j]+m2*dp[i+1][j+1]\n        dp[i][j]%=mod\nprint(dp[0][0]%mod)\n#print(dp)","label":2}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s014227283","submission":"n = int(input())\na = list(map(int, input().split()))\ncount = 0\nfor i in a:\n    if i%2 != 0:\n        count += 1\nif count%2 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s273243910","submission":"def solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    cost = 0\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            cost += 1\n            a[i+1] = -1\n    print(cost)\n    return 0\n\nif __name__ == \"__main__\":\n    solve()","label":2}
{"problem_id":"p02854","problem":"Takahashi, who works at DISCO, is standing before an iron bar.\nThe bar has N-1 notches, which divide the bar into N sections. The i-th section from the left has a length of A_i millimeters.\nTakahashi wanted to choose a notch and cut the bar at that point into two parts with the same length.\nHowever, this may not be possible as is, so he will do the following operations some number of times before he does the cut:\n\nChoose one section and expand it, increasing its length by 1 millimeter. Doing this operation once costs 1 yen (the currency of Japan).\nChoose one section of length at least 2 millimeters and shrink it, decreasing its length by 1 millimeter. Doing this operation once costs 1 yen.\n\nFind the minimum amount of money needed before cutting the bar into two parts with the same length.","submission_id":"s232019126","submission":"# import string\nimport sys\n\nsys.setrecursionlimit(10 ** 5 + 10)\n\n\ndef input(): return sys.stdin.readline().strip()\n\n\ndef resolve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    from itertools import accumulate\n\n\n    B = [0] + A\n    B = list(accumulate(B))  # \u7d2f\u7a4d\u548c\u3092\u683c\u7d0d\u3057\u305f\u30ea\u30b9\u30c8\u4f5c\u6210\n\n    # \u3053\u306e\u554f\u984c\u306f\u9577\u3055\u304c1-N\u306e\u9023\u7d9a\u90e8\u5206\u306e\u548c\u306e\u6700\u5927\u5024\u3092\u51fa\u305b\u3068\u3044\u3046\u3082\u306e\u306a\u306e\u3067\u4ee5\u4e0b\u306e\u901a\u308a\n\n    S=B[-1]\n    minans = 10 ** 20\n    for i in range(1,N):\n        val=abs(B[i]-(S-B[i]))\n        minans=min(minans,val)\n    print(minans)\n\n\nresolve()","label":2}
{"problem_id":"p02658","problem":"Given N integers A_1, ..., A_N, compute A_1 \\times ... \\times A_N.\nHowever, if the result exceeds 10^{18}, print -1 instead.","submission_id":"s238237540","submission":"import sys\n\nn = int(input())\na = list(map(int, input().split()))\n\na = sorted(a, reverse=True)\n\nmulti = 1\n\nif 0 in a:\n  print('0')\n  sys.exit()\n\nfor i in a:\n  multi *= i\n  if multi > 10**18:\n    print('-1')\n    sys.exit()\n\nprint(multi)","label":2}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s187251086","submission":"n = int(input())\nl = sorted(map(int, input().split()))\nprint(sum(l[::2]))","label":2}
{"problem_id":"p03805","problem":"You are given an undirected unweighted graph with N vertices and M edges that contains neither self-loops nor double edges.\nHere, a self-loop is an edge where a_i = b_i (1\u2264i\u2264M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1\u2264i<j\u2264M).\nHow many different paths start from vertex 1 and visit all the vertices exactly once?\nHere, the endpoints of a path are considered visited.  \nFor example, let us assume that the following undirected graph shown in Figure 1 is given.\n\n\nFigure 1: an example of an undirected graph\n\nThe following path shown in Figure 2 satisfies the condition.\n\n\nFigure 2: an example of a path that satisfies the condition\n\nHowever, the following path shown in Figure 3 does not satisfy the condition, because it does not visit all the vertices.\n\n\nFigure 3: an example of a path that does not satisfy the condition\n\nNeither the following path shown in Figure 4, because it does not start from vertex 1.\n\n\nFigure 4: another example of a path that does not satisfy the condition","submission_id":"s320684624","submission":"N,M = map(int,input().split())\n\npath = [[0]*(N+1) for _ in range(N+1)]\n\nfor i in range(M):\n    a,b = map(int,input().split())\n    path[a][b] = 1\n    path[b][a] = 1\n\nvisited = [0]*(N+1)\n\ndef dfs(now,depth):\n    if visited[now]:\n        return 0\n    if depth == N:\n        return 1 # \u6700\u5f8c\u307e\u3067\u63a2\u7d22\u3057\u305f\u3089\u306f\u3058\u3081\u3066+1\n    \n    visited[now] = 1\n    \n    total_paths = 0\n    \n    for i in range(1,N+1):\n        if path[now][i]:\n            total_paths += dfs(i, depth + 1)\n            \n    visited[now] = 0\n    \n    return total_paths\n\nprint(dfs(1,1))","label":2}
{"problem_id":"p02925","problem":"N players will participate in a tennis tournament. We will call them Player 1, Player 2, \\ldots, Player N.\nThe tournament is round-robin format, and there will be N(N-1)\/2 matches in total.\nIs it possible to schedule these matches so that all of the following conditions are satisfied? If the answer is yes, also find the minimum number of days required.\n\nEach player plays at most one matches in a day.\nEach player i (1 \\leq i \\leq N) plays one match against Player A_{i, 1}, A_{i, 2}, \\ldots, A_{i, N-1} in this order.","submission_id":"s119654156","submission":"import sys\ninput = sys.stdin.buffer.readline\nfrom collections import deque\n\n\ndef main():\n\tn = int(input())\n\n\tdef label(a, b):\n\t\tif a > b:\n\t\t\ta, b = b, a\n\t\treturn (a - 1) * (2 * n - a) \/\/ 2 + b - a - 1\n\n\tm = n * (n - 1) \/\/ 2\n\tg = [[] for _ in range(m)]\n\tdeg = [0] * m\n\tfor i in range(1, n + 1):\n\t\tl = list(map(int, input().split()))\n\t\tfor x, y in zip(l, l[1:]):\n\t\t\tt = label(i, y)\n\t\t\tg[label(i, x)].append(t)\n\t\t\tdeg[t] += 1\n\n\tdepth = [None] * m\n\tq = deque()\n\tans = 1\n\tfor i, d in enumerate(deg):\n\t\tif not d:\n\t\t\tdepth[i] = 1\n\t\t\tq.append(i)\n\twhile q:\n\t\tcur = q.popleft()\n\t\tfor nxt in g[cur]:\n\t\t\tdeg[nxt] -= 1\n\t\t\tif not deg[nxt]:\n\t\t\t\tdepth[nxt] = depth[cur] + 1\n\t\t\t\tif ans < depth[nxt]:\n\t\t\t\t\tans = depth[nxt]\n\t\t\t\tq.append(nxt)\n\tprint(ans if all(depth) else -1)\n\nif __name__ == \"__main__\":\n\tmain()","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s817121926","submission":"s = input()\n\nif s[-1] != 's':\n    s = s + 's'\n\nelif s[-1] == 's':\n    s = s + 'es'\n\nprint(s)","label":2}
{"problem_id":"p03260","problem":"You are given integers A and B, each between 1 and 3 (inclusive).\nDetermine if there is an integer C between 1 and 3 (inclusive) such that A \\times B \\times C is an odd number.","submission_id":"s852772103","submission":"a,b = map(int,input().split())\nck = 0\nfor c in range(1,4):\n  if a*b*c % 2:\n    ck = 1\n    break\nprint('Yes' if ck else 'No')","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s042747221","submission":"S = input()\nprint('{}s'.format(S)) if S[-1] != 's' else print('{}es'.format(S))","label":2}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s602230661","submission":"n = int(input())\nm = list(map(int, input().split()))\nans = m[0] * 2\nfor i in range(n-2):\n    if m[i] > m[i+1]:\n        ans += 2 * m[i+1]\n        ans -= m[i]\n        continue\n    ans += max(m[i], m[i+1])\nprint(ans)","label":2}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s709901279","submission":"N = int(input())\nT = []\nX = []\nY = []\nfor _ in range(N):\n    t,x,y = map(int, input().split())\n    T.append(t)\n    X.append(x)\n    Y.append(y)\n\nbefore_t = before_x = before_y = 0\n\nfor t,x,y in zip(T,X,Y):\n\n    if before_t == 0:\n        if t != x + y:\n            print('No')\n            exit()\n\n    d = abs(x + y - before_x - before_y)\n\n    if t - before_t >= d:\n        if (t - before_t) % 2 == 0 and d % 2 == 0:\n            pass\n        elif (t - before_t) % 2 != 0 and d % 2 != 0:\n            pass\n        else:\n            print('No')\n            exit()\n    else:\n        print('No')\n        exit()\n\n    before_t = t\n    before_x = x\n    before_y = y\n\nelse:\n    print('Yes')","label":2}
{"problem_id":"p03636","problem":"The word internationalization is sometimes abbreviated to i18n.\nThis comes from the fact that there are 18 letters between the first i and the last n.\nYou are given a string s of length at least 3 consisting of lowercase English letters.\nAbbreviate s in the same way.","submission_id":"s254710295","submission":"import sys\nimport itertools\nsys.setrecursionlimit(1000000000)\nfrom heapq import heapify,heappop,heappush,heappushpop\nimport math\nimport collections\n\n\ns = input()\nn = len(s)-2\nans = s[0] + str(n) + s[-1]\nprint(ans)","label":2}
{"problem_id":"p03353","problem":"You are given a string s.\nAmong the different substrings of s, print the K-th lexicographically smallest one.\nA substring of s is a string obtained by taking out a non-empty contiguous part in s.\nFor example, if s = ababc, a, bab and ababc are substrings of s, while ac, z and an empty string are not.\nAlso, we say that substrings are different when they are different as strings.\nLet X = x_{1}x_{2}...x_{n} and Y = y_{1}y_{2}...y_{m} be two distinct strings. X is lexicographically larger than Y if and only if Y is a prefix of X or x_{j} > y_{j} where j is the smallest integer such that x_{j} \\neq y_{j}.","submission_id":"s631526090","submission":"def abc097_c():\n    S = str(input())\n    K = int(input())\n    subs = set()\n\n    for l in range(1, K+1):\n        for i in range(len(S)):\n            subs.add(S[i: i+l])\n            # \u30b9\u30e9\u30a4\u30b9\u306e\u30b9\u30c8\u30c3\u30d7\u6761\u4ef6\u306f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5916\u3067\u3082\u3088\u3044\n\n    subs_asc = sorted(list(subs))\n    ans = subs_asc[K-1]\n    print(ans)\n\nabc097_c()","label":2}
{"problem_id":"p02995","problem":"You are given four integers A, B, C, and D. Find the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D.","submission_id":"s738521994","submission":"from math import gcd\ndef lcm(a, b):\n    return a*b\/\/gcd(a, b) \n\nA, B, C, D = map(int,input().split())\nAs = [(A-1)\/\/C, (A-1)\/\/D, (A-1)\/\/lcm(C,D)]\nBs = [B\/\/C, B\/\/D, B\/\/lcm(C,D)]\n\naa = (A-1) - (As[0]+As[1]-As[2])\nbb = B - (Bs[0]+Bs[1]-Bs[2])\n\nprint(bb-aa)","label":2}
{"problem_id":"p02769","problem":"There is a building with n rooms, numbered 1 to n.\nWe can move from any room to any other room in the building.\nLet us call the following event a move: a person in some room i goes to another room j~ (i \\neq j).\nInitially, there was one person in each room in the building.\nAfter that, we know that there were exactly k moves happened up to now.\nWe are interested in the number of people in each of the n rooms now. How many combinations of numbers of people in the n rooms are possible?\nFind the count modulo (10^9 + 7).","submission_id":"s972942782","submission":"n,k=map(int,input().split())\nmod=10**9+7\n\nMAX_N=10**6\nfact=[1]\nfact_inv=[0]*(MAX_N+4)\nfor i in range(MAX_N+3):\n  fact.append(fact[-1]*(i+1)%mod)\n\nfact_inv[-1]=pow(fact[-1],mod-2,mod)\nfor i in range(MAX_N+2,-1,-1):\n  fact_inv[i]=fact_inv[i+1]*(i+1)%mod\n\ndef f(n,k,mod):\n  return fact[n]*fact_inv[k]%mod*fact_inv[n-k] %mod\n\nans=0\n#0\u4eba\u306e\u90e8\u5c4b\u306fmax\u3044\u304f\u3064\u3067\u304d\u308b\u304b\na=min(k,n-1)\nans=0\nfor i in range(a+1):\n  d=f(n,i,mod)*f(n-1,i,mod)\n  #print(i,d)\n  ans+=d%mod\n  ans%=mod\n\nprint(ans)","label":2}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s607712322","submission":"x,n,t = map(int,input().split(\" \"))\ncnt =0\nwhile x > 0:\n    x -= n\n    cnt += 1\nprint(cnt * t)","label":2}
{"problem_id":"p02726","problem":"We have an undirected graph G with N vertices numbered 1 to N and N edges as follows:\n\nFor each i=1,2,...,N-1, there is an edge between Vertex i and Vertex i+1.\nThere is an edge between Vertex X and Vertex Y.\n\nFor each k=1,2,...,N-1, solve the problem below:\n\nFind the number of pairs of integers (i,j) (1 \\leq i < j \\leq N) such that the shortest distance between Vertex i and Vertex j in G is k.","submission_id":"s074325881","submission":"# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n\n\ndef solve(N, X, Y):\n    ans = [0] * (N)\n\n    for i in range(1, N):\n        for j in range(i + 1, N + 1):\n            k = min(abs(j - i), abs(X - i) + 1 + abs(Y - j))\n            ans[k] += 1\n\n    for i in ans[1:]:\n        print(i)\n\n\nif __name__ == '__main__':\n    N, X, Y = map(int, input().split())\n    solve(N, X, Y)\n","label":2}
{"problem_id":"p02623","problem":"We have two desks: A and B. Desk A has a vertical stack of N books on it, and Desk B similarly has M books on it.\nIt takes us A_i minutes to read the i-th book from the top on Desk A (1 \\leq i \\leq N), and B_i minutes to read the i-th book from the top on Desk B (1 \\leq i \\leq M).\nConsider the following action:\n\nChoose a desk with a book remaining, read the topmost book on that desk, and remove it from the desk.\n\nHow many books can we read at most by repeating this action so that it takes us at most K minutes in total? We ignore the time it takes to do anything other than reading.","submission_id":"s250892238","submission":"import itertools\nimport bisect\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na_acc = [0] + list(itertools.accumulate(a))\nb_acc = [0] + list(itertools.accumulate(b))\nans = 0\n\nfor i in range(n+1):\n    if k - a_acc[i] >= 0:\n        ans = max(ans, i + bisect.bisect(b_acc, k - a_acc[i])-1)\nprint(ans)\n","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s252354658","submission":"N = int(input())\nA = list(map(int, input().split()))\nA += [100000]\n\ncnt = 0\nfor i in range(N-1):\n    if A[i+1] == A[i]:\n        A[i+1] = 100000\n        cnt += 1\n\nprint(cnt)","label":2}
{"problem_id":"p03036","problem":"The development of algae in a pond is as follows.\nLet the total weight of the algae at the beginning of the year i be x_i gram. For i\u22652000, the following formula holds:\n\nx_{i+1} = rx_i - D\n\nYou are given r, D and x_{2000}. Calculate x_{2001}, ..., x_{2010} and print them in order.","submission_id":"s646942668","submission":"r, D, x = list(map(int, input().split()))\nX = [x]\nfor i in range(11):\n  X.append(r*X[i]-D)\n\nfor j in range(1,11):\n  print(X[j])","label":2}
{"problem_id":"p02833","problem":"For an integer n not less than 0, let us define f(n) as follows:\n\nf(n) = 1 (if n < 2)\nf(n) = n f(n-2) (if n \\geq 2)\n\nGiven is an integer N. Find the number of trailing zeros in the decimal notation of f(N).","submission_id":"s623553340","submission":"n = int(input())\nif n&1:\n  print(0)\nelse:\n  i = 1\n  c = 0\n  n=n\/\/2\n  while True:\n    t = n\/\/(5**i)\n    if t==0:\n      break\n    c+=t\n    i+=1\n  print(c)","label":2}
{"problem_id":"p02417","problem":"Write a program which counts and reports the number of each alphabetical letter. Ignore the case of characters.","submission_id":"s398365852","submission":"a = []\ntry:\n    while True:\n        a.append(input())\nexcept EOFError:\n    pass\n\nfor i in range(len(a)):\n    a[i] = a[i].lower()\n\nb=\" \".join(a)\n\nfor j in \"abcdefghijklmnopqrstuvwxyz\":\n    print(j,\":\",b.count(j))\n","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s276310048","submission":"N=int(input())\na=list(map(int,input().split()))\nb=[1]\nc=1\nfor i in range(1,len(a)):\n    if a[i-1]==a[i]:\n        c+=1\n        b.append(c)\n    if a[i-1]!=a[i]:\n        c=1\n        b.append(c)\nd=[]\nfor i in range(len(b)-1):\n    if b[i]>=b[i+1]:\n        d.append(b[i])\nd.append(b[len(b)-1])\ne=0\nfor i in range(len(d)):\n    e+=d[i]\/\/2\nprint(e)","label":2}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s655047005","submission":"\nurl = \"https:\/\/atcoder.jp\/\/contests\/abc049\/tasks\/abc049_b\"\n\ndef main():\n    h, w = list(map(int, input().split()))\n    ss = [input() for _ in range(h)]\n    for s in ss:\n        print(s)\n        print(s)\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p02756","problem":"Takahashi has a string S consisting of lowercase English letters.\nStarting with this string, he will produce a new one in the procedure given as follows.\nThe procedure consists of Q operations. In Operation i (1 \\leq i \\leq Q), an integer T_i is provided, which means the following:\n\n\nIf T_i = 1: reverse the string S.\n\n\nIf T_i = 2: An integer F_i and a lowercase English letter C_i are additionally provided.\n\nIf F_i = 1 : Add C_i to the beginning of the string S.\nIf F_i = 2 : Add C_i to the end of the string S.\n\n\n\nHelp Takahashi by finding the final string that results from the procedure.","submission_id":"s876516037","submission":"from collections import deque\n\nS = list(input())\nQ = int(input())\n\nS = deque(S)\nrev = 1\nfor _ in range(Q):\n    query = input()\n    if len(query) == 1:\n        rev *= -1\n    else:\n        T, F, C = query.split()\n        if rev == 1:\n            if F == \"1\":\n                S.appendleft(C)\n            else:\n                S.append(C)\n        else:\n            if F == \"1\":\n                S.append(C)\n            else:\n                S.appendleft(C)\n\nif rev == -1:\n    S = reversed(S)\n\nprint(\"\".join(S))\n","label":2}
{"problem_id":"p02602","problem":"M-kun is a student in Aoki High School, where a year is divided into N terms.\nThere is an exam at the end of each term. According to the scores in those exams, a student is given a grade for each term, as follows:\n\nFor the first through (K-1)-th terms: not given.\nFor each of the K-th through N-th terms: the multiplication of the scores in the last K exams, including the exam in the graded term.\n\nM-kun scored A_i in the exam at the end of the i-th term.\nFor each i such that K+1 \\leq i \\leq N, determine whether his grade for the i-th term is strictly greater than the grade for the (i-1)-th term.","submission_id":"s914967778","submission":"N,K = map(int, input().split())\nA = list(map(int,input().split()))\n\nidx = K-1\n\nwhile(idx < N-1):\n  idx += 1\n  if A[idx] \/ A[idx-K] > 1:\n    print(\"Yes\")\n  else:\n    print(\"No\")","label":2}
{"problem_id":"p03401","problem":"There are N sightseeing spots on the x-axis, numbered 1, 2, ..., N.\nSpot i is at the point with coordinate A_i.\nIt costs |a - b| yen (the currency of Japan) to travel from a point with coordinate a to another point with coordinate b along the axis.\nYou planned a trip along the axis.\nIn this plan, you first depart from the point with coordinate 0, then visit the N spots in the order they are numbered, and finally return to the point with coordinate 0.\nHowever, something came up just before the trip, and you no longer have enough time to visit all the N spots, so you decided to choose some i and cancel the visit to Spot i.\nYou will visit the remaining spots as planned in the order they are numbered.\nYou will also depart from and return to the point with coordinate 0 at the beginning and the end, as planned.\nFor each i = 1, 2, ..., N, find the total cost of travel during the trip when the visit to Spot i is canceled.","submission_id":"s359881441","submission":"N = int(input())\nA = [int(x) for x in input().split()]\nA = [0] + A + [0]\n\nS = 0\nfor i in range(len(A) - 1):\n    S += abs(A[i] - A[i+1])\nfor i in range(1, len(A)-1):\n    reg = S - abs(A[i-1] - A[i]) - abs(A[i] - A[i+1]) + abs(A[i-1] - A[i+1])\n    print(reg)","label":2}
{"problem_id":"p02600","problem":"M-kun is a competitor in AtCoder, whose highest rating is X.\nIn this site, a competitor is given a kyu (class) according to his\/her highest rating. For ratings from 400 through 1999, the following kyus are given:\n\nFrom 400 through 599: 8-kyu\nFrom 600 through 799: 7-kyu\nFrom 800 through 999: 6-kyu\nFrom 1000 through 1199: 5-kyu\nFrom 1200 through 1399: 4-kyu\nFrom 1400 through 1599: 3-kyu\nFrom 1600 through 1799: 2-kyu\nFrom 1800 through 1999: 1-kyu\n\nWhat kyu does M-kun have?","submission_id":"s498142537","submission":"X = int(input())\n\nn = 0\nif X <= 599:\n    n = 8\nelif X <= 799:\n    n = 7\nelif X <= 999:\n    n = 6\nelif X <= 1199:\n    n = 5\nelif X <= 1399:\n    n = 4\nelif X <= 1599:\n    n = 3\nelif X <= 1799:\n    n = 2\nelif X <= 1999:\n    n = 1\n\nprint(n)","label":2}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s502219557","submission":"N = int(input())\n\nfrom collections import Counter\n\nA = []\nfor _ in range(N):\n    A.append(input())\n\nB = Counter(A)\nMaxC = max(B.values())\nArg = list(B.values()).count(MaxC)\nC = sorted(B.items(),key=lambda x:(x[1],x[0]))[::-1]\nfor i in range(Arg):\n    print(C[Arg-i-1][0])","label":2}
{"problem_id":"p02801","problem":"Given is a lowercase English letter C that is not z. Print the letter that follows C in alphabetical order.","submission_id":"s537024908","submission":"ALPHA = \"abcdefghijklmnopqrstuvwxyz\"\nC = input()\nprint(ALPHA[ALPHA.index(C) + 1])\n","label":2}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s270002042","submission":"n = int(input())\na = list(map(int, input().split()))\na.sort(reverse=True)\nalice = sum(a[::2])\nbob = sum(a[1::2])\nprint(alice-bob)","label":2}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s773848674","submission":"#0:09\n\"\"\"\nABC\u6570\n\u9077\u79fb\u3092\u8003\u3048\u308b\u554f\u984c\ndp[\u3069\u3053\u307e\u3067\u307f\u305f\u304b][\u305d\u306e\u6642\u306e\u72b6\u614b] = \u306b\u306a\u308a\u3046\u308b\u5834\u5408\u306e\u6570\n\"\"\"\nS = input()\nn = len(S)\n\ndp = [[0]*3 for i in range(n+1)]\ncnt = 0 #\u306f\u3066\u306a\u306e\u6570\n#\u521d\u671f\u306f\u5f8c\u3067\u69cb\u7bc9\nmod = 10**9 + 7 \n\nX = 1\nfor i in range(n):\n    if S[i] == \"A\":\n        dp[i+1][0] = dp[i][0] + X\n        dp[i+1][1] = dp[i][1]\n        dp[i+1][2] = dp[i][2]\n    elif S[i] == \"B\":\n        dp[i+1][0] = dp[i][0]\n        dp[i+1][1] = (dp[i][0] + dp[i][1]) % mod\n        dp[i+1][2] = dp[i][2]\n    elif S[i] == \"C\":\n        dp[i+1][0] = dp[i][0]\n        dp[i+1][1] = dp[i][1]\n        dp[i+1][2] = (dp[i][1] + dp[i][2]) % mod\n    elif S[i] == \"?\":\n        dp[i+1][0] = (dp[i][0] * 3 + X) % mod\n        dp[i+1][1] = (dp[i][1] * 3)%mod + (dp[i][0]) % mod\n        dp[i+1][2] = (dp[i][2] * 3)%mod + (dp[i][1]) % mod        \n        X = (X*3)%mod\nprint(dp[n][2]%mod)","label":2}
{"problem_id":"p02632","problem":"How many strings can be obtained by applying the following operation on a string S exactly K times: \"choose one lowercase English letter and insert it somewhere\"?\nThe answer can be enormous, so print it modulo (10^9+7).","submission_id":"s865926057","submission":"## https:\/\/atcoder.jp\/contests\/abc171\/submissions\/14626518\n## \u30d1\u30af\u3063\u305f\n\nk=int(input())\ns=input()\nlen_s=len(s)\n\np = 10 ** 9 + 7\n\npow26=pow(26,k,p)\npow25=pow(26,p-1-1,p)*25%p \nans=0\nfor i in range(k+1): ## i:\u672b\u5c3e\u4ee5\u5916\u306b\u5165\u308b\u6587\u5b57\u6570\n  ans+=pow26\n  ans%=p\n  pow26=(pow26*pow25)%p * (len_s+i)%p * pow(i+1,p-2,p)%p\nprint(ans)","label":2}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s107234515","submission":"h, w = map(int, input().split())\n\nfor i in range(h):\n    c = input()\n    for i in range(2):\n        print(c)\n","label":2}
{"problem_id":"p03569","problem":"We have a string s consisting of lowercase English letters.\nSnuke can perform the following operation repeatedly:\n\nInsert a letter x to any position in s of his choice, including the beginning and end of s.\n\nSnuke's objective is to turn s into a palindrome.\nDetermine whether the objective is achievable. If it is achievable, find the minimum number of operations required.","submission_id":"s619361681","submission":"from collections import deque\n\ns = deque(input())\nans = 0\nwhile s:\n    L = s[0]\n    R = s[-1]\n    if L == R:\n        if 1 == len(s):\n            break\n        L = s.popleft()\n        R = s.pop()\n        continue\n    elif L == 'x' and R != 'x':\n        ans += 1\n        s.append('x')\n    elif L != 'x' and R == 'x':\n        ans += 1\n        s.appendleft('x')\n    elif L != 'x' and R != 'x':\n        ans = -1\n        break\nprint(ans)","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s437748037","submission":"N = int(input())\nrem = []\n\nfor i in range(1, N):\n    if i * i > N:\n        break\n    elif i * i == N:\n        rem.append(i)\n    elif N % i == 0:\n        rem.extend([i, N \/\/ i])\n\nans = 0\nfor r in rem:\n    if (r - 1) > N \/\/ r:\n        ans += r - 1\nprint(ans)","label":2}
{"problem_id":"p03206","problem":"In some other world, today is December D-th.\nWrite a program that prints Christmas if D = 25, Christmas Eve if D = 24, Christmas Eve Eve if D = 23 and Christmas Eve Eve Eve if D = 22.","submission_id":"s067515053","submission":"d = int(input())\nprint(\"Christmas{}\".format(\" Eve\" * (25 - d)))","label":2}
{"problem_id":"p02973","problem":"You are given a sequence with N integers: A = \\{ A_1, A_2, \\cdots, A_N \\}.\nFor each of these N integers, we will choose a color and paint the integer with that color. Here the following condition must be satisfied:\n\nIf A_i and A_j (i < j) are painted with the same color, A_i < A_j.\n\nFind the minimum number of colors required to satisfy the condition.","submission_id":"s171250150","submission":"from bisect import bisect\n\nn=int(input())\na=[0]*n\nfor i in range(n):\n    a[i]=-int(input())\n\ndef loopa():\n\n    n=len(a)\n    dp = [10**10]*(n+1)\n    dp[0] = -10**10\n    \n    for i in range(n):\n        idx = bisect(dp, a[i])\n        dp[idx] = min(a[i], dp[idx])\n\n    return dp\n\ndp=loopa()        \n\nprint(bisect(dp, 10**10-1)-1)    \n\n","label":2}
{"problem_id":"p03147","problem":"In a flower bed, there are N flowers, numbered 1,2,......,N. Initially, the heights of all flowers are 0.\nYou are given a sequence h=\\{h_1,h_2,h_3,......\\} as input. You would like to change the height of Flower k to h_k for all k (1 \\leq  k \\leq N), by repeating the following \"watering\" operation:\n\nSpecify integers l and r. Increase the height of Flower x by 1 for all x such that l \\leq x \\leq r.\n\nFind the minimum number of watering operations required to satisfy the condition.","submission_id":"s525638161","submission":"n = int(input())\nh = list(map(int, input().split()))\ncnt=0\nfor i in range(n):\n    while h[i] != 0:\n        cnt+=1\n        for j in range(i, n):\n            if h[j] != 0:\n                h[j] = h[j] - 1\n            elif h[j] == 0:\n                break\nprint(cnt)\n","label":2}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s151166720","submission":"S = input()\n#dp[i][four] =: i + 1\u756a\u76ee\u307e\u3067\u898b\u305f\u3068\u304d,\u7167\u5408\u3057\u305f\u30b1\u30c4\u304cfour\u3068\u306a\u308b\u3082\u306e\u306e\u7dcf\u6570\ndp = [[0 for _ in range(4)] for _ in range(len(S)+1 )]\ndp[0][0] = 1\nmod = 10**9 + 7\nfor i in range(len(S)):\n    if S[i] == 'A' or S[i] == '?':\n        dp[i+1][1] += dp[i][0] \n        for k in range(4): dp[i+1][k] += dp[i][k]\n    if S[i] == 'B' or S[i] == '?':\n        dp[i+1][2] += dp[i][1]\n        for k in range(4): dp[i+1][k] += dp[i][k]\n    if S[i] == 'C' or S[i] == '?':\n        dp[i+1][3] += dp[i][2]\n        for k in range(4): dp[i+1][k] += dp[i][k]\n    for k in range(4): dp[i+1][k] %= mod\nprint(dp[len(S)][3])\n","label":2}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s912905632","submission":"n = int(input())\ndata = list(map(int,input().split()))\ndata.sort(reverse = True)\nprint(sum(data[::2]) - sum(data[1::2]))","label":2}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s400473028","submission":"n=int(input())\nprint(sum(sorted([int(i) for i in input().split()])[-2::-2]))","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s452987146","submission":"print (input().replace('2017\/','2018\/'))\n","label":2}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s319498698","submission":"n,k = map(int,input().split())\np = [int(i)-1 for i in input().split()]\nc = [int(i) for i in input().split()]\n\nans = -10**100\n\nfor i in range(n):\n    chk = [0]*n\n    chk[p[i]] = 1\n    now = p[i]\n    cnt = 1\n    val = [-10**100]*n\n    val[0] = c[p[i]]\n    while 1 == 1:\n        if cnt >= k:\n            break\n        #print(p[now])\n        if chk[p[now]] == 1:\n            break\n        else:\n            chk[p[now]] = 1\n            val[cnt] = val[cnt-1]+c[p[now]]\n            now = p[now]\n            cnt += 1\n    \n    cnt -= 1\n    \n    #print(val)\n    \n    if val[cnt] <= 0:\n        ans = max(ans,max(val))\n    else:\n        num = k \/\/ (cnt+1)\n        amari = k % (cnt+1)\n        #print(cnt,k)\n        for j in range(cnt+1):\n            if j < amari:\n                tmp = num*val[cnt]\n            else:\n                tmp = (num-1)*val[cnt]\n            ans = max(ans,tmp+val[j])\n            #print(ans,tmp,val[j],j,cnt,num)\n    \n    #ans = max(ans,max(val))\n    \nprint(ans)","label":2}
{"problem_id":"p02623","problem":"We have two desks: A and B. Desk A has a vertical stack of N books on it, and Desk B similarly has M books on it.\nIt takes us A_i minutes to read the i-th book from the top on Desk A (1 \\leq i \\leq N), and B_i minutes to read the i-th book from the top on Desk B (1 \\leq i \\leq M).\nConsider the following action:\n\nChoose a desk with a book remaining, read the topmost book on that desk, and remove it from the desk.\n\nHow many books can we read at most by repeating this action so that it takes us at most K minutes in total? We ignore the time it takes to do anything other than reading.","submission_id":"s305843964","submission":"# Tsundoku\nimport numpy as np\nN, M, K = map(int,input().split())\nA = np.array([0] + list(map(int, input().split())))\nB = np.array([0] + list(map(int, input().split())))\na = np.cumsum(A)\nb = np.cumsum(B)\n\nans = 0\nj = M\n\nfor i in range(N+1):\n    if a[i] > K:\n        break\n    while b[j] > K - a[i]:\n        j -= 1\n    ans = max(ans, i+j)\n    \nprint(ans)","label":2}
{"problem_id":"p03324","problem":"Today, the memorable AtCoder Beginner Contest 100 takes place. On this occasion, Takahashi would like to give an integer to Ringo.\nAs the name of the contest is AtCoder Beginner Contest 100, Ringo would be happy if he is given a positive integer that can be divided by 100 exactly D times.\nFind the N-th smallest integer that would make Ringo happy.","submission_id":"s511915535","submission":"D, N = list(map(lambda x : int(x), input().split(\" \")))\nprint((N + int(N\/100)) * (100 ** D))","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s152499277","submission":"N = int(input())\nA_LIST = list(map(int, input().split()))\nA_SET = set(A_LIST)\nif len(A_SET) == 1:\n    if sum(A_SET) == 0:\n        print('Yes')\n    else:\n        print('No')\nelif len(A_SET) == 2:\n    a1, a2 = sorted(A_SET)\n    if a1 == 0 and A_LIST.count(a1) * 3 == N:\n        print('Yes')\n    else:\n        print('No')\nelif len(A_SET) == 3:\n    a1, a2, a3 = A_SET\n    if a1 ^ a2 == a3 and A_LIST.count(a1) ==  A_LIST.count(a2) and A_LIST.count(a2) == A_LIST.count(a3):\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')\n","label":2}
{"problem_id":"p02854","problem":"Takahashi, who works at DISCO, is standing before an iron bar.\nThe bar has N-1 notches, which divide the bar into N sections. The i-th section from the left has a length of A_i millimeters.\nTakahashi wanted to choose a notch and cut the bar at that point into two parts with the same length.\nHowever, this may not be possible as is, so he will do the following operations some number of times before he does the cut:\n\nChoose one section and expand it, increasing its length by 1 millimeter. Doing this operation once costs 1 yen (the currency of Japan).\nChoose one section of length at least 2 millimeters and shrink it, decreasing its length by 1 millimeter. Doing this operation once costs 1 yen.\n\nFind the minimum amount of money needed before cutting the bar into two parts with the same length.","submission_id":"s909556250","submission":"import sys\ninput = sys.stdin.readline\n\nN = int(input())\nA = list(map(int, input().split()))\nL = [0]\nfor i in range(N):\n    L.append(L[i]+A[i])\nTotalLen = L[-1]\nCenter = TotalLen\/2\n\ntemp = TotalLen\nleft = 0\nright = 0\nfor i in range(N + 1):\n    if abs(L[i] - Center) < temp:\n        temp = abs(L[i] - Center)\n        left = L[i]\n        right = TotalLen - left\nprint(abs(left - right))\n","label":2}
{"problem_id":"p02580","problem":"We have a two-dimensional grid with H \\times W squares. There are M targets to destroy in this grid - the position of the i-th target is \\left(h_i, w_i \\right).\nTakahashi will choose one square in this grid, place a bomb there, and ignite it. The bomb will destroy all targets that are in the row or the column where the bomb is placed. It is possible to place the bomb at a square with a target.\nTakahashi is trying to maximize the number of targets to destroy. Find the maximum number of targets that can be destroyed.","submission_id":"s330640655","submission":"import collections\nh, w, m = map(int, input().split())\nh = [None]*m\nw = [None]*m\nfor i in range(m):\n    u, v = map(int, input().split())\n    h[i] = u\n    w[i] = v\nhc = collections.Counter(h)\nwc = collections.Counter(w)\nhm = hc.most_common()[0][1]\nhs = set([])\nfor hi, ci in hc.most_common():\n    if ci == hm:\n        hs.add(hi)\n    else:\n        break\nwm = wc.most_common()[0][1]\nws = set([])\nfor wi, ci in wc.most_common():\n    if ci == wm:\n        ws.add(wi)\n    else:\n        break\ncnt = 0\nfor i in range(m):\n    if h[i] in hs and w[i] in ws:\n        cnt += 1\nif cnt == len(hs)*len(ws):\n    print(hm + wm -1)\nelse:\n    print(hm + wm)","label":2}
{"problem_id":"p03463","problem":"A game is played on a strip consisting of N cells consecutively numbered from 1 to N. \nAlice has her token on cell A. Borys has his token on a different cell B.\nPlayers take turns, Alice moves first.\nThe moving player must shift his or her token from its current cell X to the neighboring cell on the left, cell X-1, or on the right, cell X+1.\nNote that it's disallowed to move the token outside the strip or to the cell with the other player's token.\nIn one turn, the token of the moving player must be shifted exactly once.\nThe player who can't make a move loses, and the other player wins.\nBoth players want to win. Who wins if they play optimally?","submission_id":"s874135876","submission":"N,A,B=map(int,input().split())\nprint('Alice' if (B-A-1)%2 else 'Borys')","label":2}
{"problem_id":"p02406","problem":"In programming languages like C\/C++, a goto statement provides an unconditional jump from the \"goto\" to a labeled statement. For example, a statement \"goto CHECK_NUM;\" is executed, control of the program jumps to CHECK_NUM. Using these constructs, you can implement, for example, loops.","submission_id":"s185456522","submission":"num = input()\nprint \"\",\nfor x in xrange(1,num+1):\n    if x%3==0:\n        print x,\n    elif \"3\" in str(x):\n        print x,\n    else:\n        pass","label":2}
{"problem_id":"p03371","problem":"\"Pizza At\", a fast food chain, offers three kinds of pizza: \"A-pizza\", \"B-pizza\" and \"AB-pizza\". A-pizza and B-pizza are completely different pizzas, and AB-pizza is one half of A-pizza and one half of B-pizza combined together. The prices of one A-pizza, B-pizza and AB-pizza are A yen, B yen and C yen (yen is the currency of Japan), respectively.\nNakahashi needs to prepare X A-pizzas and Y B-pizzas for a party tonight. He can only obtain these pizzas by directly buying A-pizzas and B-pizzas, or buying two AB-pizzas and then rearrange them into one A-pizza and one B-pizza. At least how much money does he need for this? It is fine to have more pizzas than necessary by rearranging pizzas.","submission_id":"s062027630","submission":"A,B,C,X,Y = map(int,input().split())\n\nres = A*X +B*Y\n\nfor i in range(0,max(X,Y)+1):\n  cand = 2*i*C + max(0,X-i)*A + max(0,Y-i)*B\n  res = min(res,cand)\nprint(res)\n\n\n\n\n","label":2}
{"problem_id":"p02985","problem":"You are given a tree with N vertices and N-1 edges. The vertices are numbered 1 to N, and the i-th edge connects Vertex a_i and b_i.\nYou have coloring materials of K colors.\nFor each vertex in the tree, you will choose one of the K colors to paint it, so that the following condition is satisfied:\n\nIf the distance between two different vertices x and y is less than or equal to two, x and y have different colors.\n\nHow many ways are there to paint the tree? Find the count modulo 1\\ 000\\ 000\\ 007.\n\nWhat is tree?\nA tree is a kind of graph. For detail, please see: Wikipedia \"Tree (graph theory)\"","submission_id":"s655831631","submission":"import queue\nn,k = map(int,input().split())\n\nab = [[] for j in range(n+1)]\nmod = 10**9 + 7\n\nfor i in range(n-1):\n    a,b = map(int,input().split())\n    ab[a].append(b)\n    ab[b].append(a)\n    \ncheck = [False] * (n+1)\nkazu = [0] * (n+1)\n\ncheck[0] = True\n\nq = queue.Queue()\nq.put(1)\n\nans = k\n#print(ab)\n\nwhile not q.empty():\n    tmp = q.get()\n    check[tmp] = True\n    kake = 0\n    for i in range(len(ab[tmp])):\n        if check[ab[tmp][i]] == True:\n            continue\n        kazu[ab[tmp][i]] += 1\n        q.put(ab[tmp][i])\n        ans *= k - kake - kazu[tmp] - 1\n        ans %= mod\n        #print(i,k,ans,tmp,kazu[tmp])\n        kake += 1\n    \nprint(ans)","label":2}
{"problem_id":"p02633","problem":"Takahashi is standing on a two-dimensional plane, facing north. Find the minimum positive integer K such that Takahashi will be at the starting position again after he does the following action K times:\n\nGo one meter in the direction he is facing. Then, turn X degrees counter-clockwise.","submission_id":"s520476322","submission":"import sys\nimport math\ndef input(): return sys.stdin.readline().rstrip()\ndef main():\n    x = int(input())\n    xx = x\n    ans = 1\n    while xx%360 != 0:\n        xx += x\n        ans += 1\n    print(ans )\n\nif __name__=='__main__':\n    main()","label":2}
{"problem_id":"p03803","problem":"Alice and Bob are playing One Card Poker.\nOne Card Poker is a two-player game using playing cards.  \nEach card in this game shows an integer between 1 and 13, inclusive.\nThe strength of a card is determined by the number written on it, as follows:  \nWeak 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < 11 < 12 < 13 < 1 Strong  \nOne Card Poker is played as follows:  \n\nEach player picks one card from the deck. The chosen card becomes the player's hand.\nThe players reveal their hands to each other. The player with the stronger card wins the game.\nIf their cards are equally strong, the game is drawn.  \n\nYou are watching Alice and Bob playing the game, and can see their hands.\nThe number written on Alice's card is A, and the number written on Bob's card is B.\nWrite a program to determine the outcome of the game.","submission_id":"s686294267","submission":"a,b =map(int,input().split())\nA,B,C =(\"Alice\",\"Bob\",\"Draw\")\nif max(a,b) ==13 and min(a,b) ==1:\n  print(A) if a < b else print(B)\nelse:\n  if a > b:\n    print(A)  \n  elif a < b:\n    print(B)  \n  else:\n    print(C)","label":2}
{"problem_id":"p03326","problem":"Takahashi became a pastry chef and opened a shop La Confiserie d'ABC to celebrate AtCoder Beginner Contest 100.\nThe shop sells N kinds of cakes.\nEach kind of cake has three parameters \"beauty\", \"tastiness\" and \"popularity\". The i-th kind of cake has the beauty of x_i, the tastiness of y_i and the popularity of z_i.\nThese values may be zero or negative.\nRingo has decided to have M pieces of cakes here. He will choose the set of cakes as follows:\n\nDo not have two or more pieces of the same kind of cake.\nUnder the condition above, choose the set of cakes to maximize (the absolute value of the total beauty) + (the absolute value of the total tastiness)  + (the absolute value of the total popularity).\n\nFind the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.","submission_id":"s487040633","submission":"n, m = map(int, input().split())\ncakes = [list(map(int, input().split())) for _ in range(n)]\n\nans = 0\nfor i in range(8):\n    a = []\n    for x, y, z in cakes:\n        if i & 1 << 0: x *= -1\n        if i & 1 << 1: y *= -1\n        if i & 1 << 2: z *= -1\n        a.append(x + y + z)\n    a.sort(reverse=True)\n    ans = max(ans, sum(a[:m]))\n\nprint(ans)\n","label":2}
{"problem_id":"p03426","problem":"We have a grid with H rows and W columns. The square at the i-th row and the j-th column will be called Square (i,j).\nThe integers from 1 through H\u00d7W are written throughout the grid, and the integer written in Square (i,j) is A_{i,j}.\nYou, a magical girl, can teleport a piece placed on Square (i,j) to Square (x,y) by consuming |x-i|+|y-j| magic points.\nYou now have to take Q practical tests of your ability as a magical girl.\nThe i-th test will be conducted as follows:\n\n\nInitially, a piece is placed on the square where the integer L_i is written.\n\n\nLet x be the integer written in the square occupied by the piece. Repeatedly move the piece to the square where the integer x+D is written, as long as x is not R_i. The test ends when x=R_i.\n\n\nHere, it is guaranteed that R_i-L_i is a multiple of D.\n\n\nFor each test, find the sum of magic points consumed during that test.","submission_id":"s407475849","submission":"import sys\n\nH, W, D = map(int, sys.stdin.readline().split())\nnum = {}\nfor j in range(H):\n    tmp = map(int, sys.stdin.readline().split())\n    for i, n in enumerate(tmp):\n        num[n] = (i, j)\n\n# D\u3067\u5206\u985e\u3057\u305f\u7d2f\u7a4d\u548c\n# S[initial % D][j], n = r + D*j\nS = [0 for _ in range(H*W+D)]\nfor i in range(D+1, H*W+1):\n    x, y = num[i]\n    a, b = num[i-D]\n    S[i] = S[i-D] + abs(x - a) + abs(y - b)\n# print(S)\nQ = int(sys.stdin.readline())\nfor _ in range(Q):\n    L, R = map(int, sys.stdin.readline().split())\n    r = L % D\n    print(S[R] - S[L])","label":2}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s120807981","submission":"with open(0) as f:\n    N, S = f.read().split()\nN = int(N)\nS += '_'\nleft = 0\nright = 0\ncnt = 0\nfor i in range(N):\n    cnt += {'(':1, ')':-1}[S[i]]\n    if S[i] == ')' and S[i+1] != ')':\n        if cnt < 0:\n            left += -cnt\n            cnt = 0\n    if i == N-1 and cnt > 0:\n        right += cnt\nans = '(' * left + S[:N] + ')' * right\nprint(ans)","label":2}
{"problem_id":"p02713","problem":"Find \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\nHere \\gcd(a,b,c) denotes the greatest common divisor of a, b, and c.","submission_id":"s322277669","submission":"import math\nfrom functools import reduce\nINT = lambda: int(input())\nINTM = lambda: map(int,input().split())\nSTRM = lambda: map(str,input().split())\nSTR = lambda: str(input())\nLIST = lambda: list(map(int,input().split()))\nLISTS = lambda: list(map(str,input().split()))\n\ndef do():\n    k=INT()\n    ans=0\n    for i in range(1,k+1):\n        for j in range(1,k+1):\n            for h in range(1,k+1):\n                ans+=math.gcd(math.gcd(i,j),h)\n                #print(ans,i,j,h)\n    print(ans)\nif __name__ == '__main__':\n    do()","label":2}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s249861530","submission":"N=str(input())\nif \"7\" in N:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":2}
{"problem_id":"p02682","problem":"We have A cards, each of which has an integer 1 written on it. Similarly, we also have B cards with 0s and C cards with -1s.\nWe will pick up K among these cards. What is the maximum possible sum of the numbers written on the cards chosen?","submission_id":"s669656225","submission":"# coding: utf-8\n# Your code here!\nimport math\n\ndef main():\n    a, b, c, k = map(int, input().split())\n    if k >= a:\n        ans = a\n        k = k - a\n    else:\n        print(k)\n        return 0\n    if k >= b:\n        k = k - b\n    else:\n        print(ans)\n        return 0\n    if k >= c:\n        ans -= c\n    else:\n        ans -= k\n    print(ans)\n    \n    \nmain()","label":2}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s673100711","submission":"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\nimport time,random\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 \/ 10**10\nmod = 10**9+7\nmod2 = 998244353\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\ndef pe(s): return print(str(s), file=sys.stderr)\ndef JA(a, sep): return sep.join(map(str, a))\ndef JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)\n\n\ndef main():\n    x,y,a,b,c = LI()\n    p = sorted(LI()) + [inf]\n    q = sorted(LI()) + [inf]\n    r = [-1] + sorted(LI())\n    pi = a - x\n    qi = b - y\n    ri = c\n    while True:\n        if p[pi] < q[qi]:\n            if p[pi] >= r[ri]:\n                break\n            pi += 1\n            ri -= 1\n        else:\n            if q[qi] >= r[ri]:\n                break\n            qi += 1\n            ri -= 1\n\n    return sum(p[pi:-1] + q[qi:-1] + r[ri+1:])\n\nprint(main())\n\n\n\n","label":2}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s395827910","submission":"def comb(n,k):\n    res = 1\n    for i in range(1,k+1):\n        res *= (n+1-i)\n        res \/\/= i\n    return res\n\n\nn,p = map(int, input().split())\na = list(map(int, input().split()))\na = [ai % 2 for ai in a]\nodd, even = a.count(1), a.count(0)\n\nans = 0\nfor i in range(p,odd+1,2):\n    ans += comb(odd, i) * pow(2, even)\nprint(ans)","label":2}
{"problem_id":"p03150","problem":"A string is called a KEYENCE string when it can be changed to keyence by removing its contiguous substring (possibly empty) only once.\nGiven a string S consisting of lowercase English letters, determine if S is a KEYENCE string.","submission_id":"s769534233","submission":"S=input()\nif S==\"keyence\":\n  print(\"YES\")\n  exit()\nfor i in range(7):\n  T=S[:i]+S[len(S)-7+i:]\n  if T==\"keyence\":\n    print(\"YES\")\n    exit()\nprint(\"NO\")","label":2}
{"problem_id":"p03317","problem":"There is a sequence of length N: A_1, A_2, ..., A_N. Initially, this sequence is a permutation of 1, 2, ..., N.\nOn this sequence, Snuke can perform the following operation:\n\nChoose K consecutive elements in the sequence. Then, replace the value of each chosen element with the minimum value among the chosen elements.\n\nSnuke would like to make all the elements in this sequence equal by repeating the operation above some number of times.\nFind the minimum number of operations required.\nIt can be proved that, Under the constraints of this problem, this objective is always achievable.","submission_id":"s206469445","submission":"from math import ceil\na,b = map(int,input().split())\nc = input()\nprint(ceil((a-1)\/(b-1)))","label":2}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s127360020","submission":"from scipy.special import comb\nimport numpy as np\n\nN, P = map(int, input().split())\nA = np.array(list(map(int, input().split())))\n\nA = A % 2 != 0\nodd = np.sum(A)\neven = N - odd\n# print(A, odd, even)\n\nans = 0\nodd_num = 0\neven_num = 0\nif P == 1:\n    for i in range(1, odd + 1, 2):\n        odd_num += comb(odd, i, exact=True)\n    even_num = pow(2, even)\n    ans = odd_num * even_num\nelse:\n    for i in range(0, odd + 1, 2):\n        odd_num += comb(odd, i, exact=True)\n    even_num = pow(2, even)\n    ans = odd_num * even_num\n    # print(odd_num, even_num)\nprint(ans)\n","label":2}
{"problem_id":"p02580","problem":"We have a two-dimensional grid with H \\times W squares. There are M targets to destroy in this grid - the position of the i-th target is \\left(h_i, w_i \\right).\nTakahashi will choose one square in this grid, place a bomb there, and ignite it. The bomb will destroy all targets that are in the row or the column where the bomb is placed. It is possible to place the bomb at a square with a target.\nTakahashi is trying to maximize the number of targets to destroy. Find the maximum number of targets that can be destroyed.","submission_id":"s661514268","submission":"import sys\nsys.setrecursionlimit(10**7)\n\nreadline = sys.stdin.buffer.readline\ndef readstr():return readline().rstrip().decode()\ndef readstrs():return list(readline().decode().split())\ndef readint():return int(readline())\ndef readints():return list(map(int,readline().split()))\ndef printrows(x):print('\\n'.join(map(str,x)))\ndef printline(x):print(' '.join(map(str,x)))\n\nh,w,m = readints()\n\nr = [0]*h\nc = [0]*w\n\nd = [set() for i in range(h)]\nfor i in range(m):\n    a,b = (x-1 for x in readints())\n    r[a] += 1\n    c[b] += 1\n    d[a].add(b)\n\nmr = max(r)\nmc = max(c)\nR = [i for i,x in enumerate(r) if x==mr]\nC = [i for i,x in enumerate(c) if x==mc]\n\nflag = 1\nif len(R)*len(C)>m:\n    flag = 0\nelse:\n    for x in R:\n        for y in C:\n            if y not in d[x]:\n                flag = 0\n                break\n\nprint(max(r)+max(c)-flag)\n\n\n\n\n","label":2}
{"problem_id":"p02662","problem":"Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N and another positive integer S.\nFor a non-empty subset T of the set \\{1, 2, \\ldots , N \\}, let us define f(T) as follows:\n\nf(T) is the number of different non-empty subsets \\{x_1, x_2, \\ldots , x_k \\} of T such that A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S.\n\nFind the sum of f(T) over all 2^N-1 subsets T of \\{1, 2, \\ldots , N \\}. Since the sum can be enormous, print it modulo 998244353.","submission_id":"s893414287","submission":"from collections import defaultdict\nMOD = 998244353\nn, s = map(int, input().split())\na = list(map(int, input().split()))\n\n# dp[i][j] = i\u756a\u76ee\u307e\u3067\u898b\u3066\u548c\u304cj\u3068\u306a\u308b\u3088\u3046\u306a\u5834\u5408\u306e\u6570\ndp = [[0] * (s + 1) for _ in range(n + 1)]\ndp[0][0] = 1\nfor i, ai in enumerate(a):\n    for j in range(s + 1):\n        if j - ai >= 0:\n            dp[i + 1][j] = (dp[i][j] * 2 + dp[i][j - ai]) % MOD\n        else:\n            dp[i + 1][j] = dp[i][j] * 2 % MOD\n\n# print(*dp, sep='\\n')\nprint(dp[n][s])\n","label":2}
{"problem_id":"p03359","problem":"In AtCoder Kingdom, Gregorian calendar is used, and dates are written in the \"year-month-day\" order, or the \"month-day\" order without the year.\nFor example, May 3, 2018 is written as 2018-5-3, or 5-3 without the year.  \nIn this country, a date is called Takahashi when the month and the day are equal as numbers. For example, 5-5 is Takahashi.\nHow many days from 2018-1-1 through 2018-a-b are Takahashi?","submission_id":"s401582873","submission":"x=list(map(int,input().split()))\na=x[0]\nb=x[1]\nif a<=b:\n  print(a)\nelse:\n  print(a-1)","label":2}
{"problem_id":"p03543","problem":"We call a 4-digit integer with three or more consecutive same digits, such as 1118, good.\nYou are given a 4-digit integer N. Answer the question: Is N good?","submission_id":"s330870361","submission":"n = input()\nif len(set(n[:3])) == 1 or len(set(n[1:4])) == 1:\n    print('Yes')\nelse:\n    print('No')","label":2}
{"problem_id":"p03380","problem":"Let {\\rm comb}(n,r) be the number of ways to choose r objects from among n objects, disregarding order.\nFrom n non-negative integers a_1, a_2, ..., a_n, select two numbers a_i > a_j so that {\\rm comb}(a_i,a_j) is maximized.\nIf there are multiple pairs that maximize the value, any of them is accepted.","submission_id":"s318870736","submission":"n = int(input())\na = list(map(int, input().split()))\na.sort()\nx = a[-1]\ny1 = x\/\/2\ny2 = x\/\/2 + 1\nsa1, sa2 = float(\"inf\"), float(\"inf\")\nz1, z2 = 0, 0\nfor i in range(n-1):\n    if sa1 > abs(y1 - a[i]):\n        sa1 = abs(y1-a[i])\n        z1 = a[i]\n    if sa2 > abs(y2 - a[i]):\n        sa2 = abs(y2 - a[i])\n        z2 = a[i]\n\nif sa1 > sa2:\n    print(x, z2)\nelse:\n    print(x, z1)\n\n\n","label":2}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s456985906","submission":"import sys\nread = sys.stdin.read\n#readlines = sys.stdin.readlines\nfrom math import ceil\ndef main():\n    n, x, t = map(int, input().split())\n    print(ceil(n \/ x) * t)\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p03495","problem":"Takahashi has N balls. Initially, an integer A_i is written on the i-th ball.\nHe would like to rewrite the integer on some balls so that there are at most K different integers written on the N balls.\nFind the minimum number of balls that Takahashi needs to rewrite the integers on them.","submission_id":"s639120338","submission":"from collections import Counter\n\nN, K = [int(x) for x in input().split()]\nA = [int(x) for x in input().split()]\n\ncntA = Counter(A)\ncntvalA = sorted(list(cntA.values()))\nans = sum(cntvalA[i] for i in range(len(cntvalA) - K))\nprint(ans)","label":2}
{"problem_id":"p03328","problem":"In some village, there are 999 towers that are 1,(1+2),(1+2+3),...,(1+2+3+...+999) meters high from west to east, at intervals of 1 meter.\nIt had been snowing for a while before it finally stopped. For some two adjacent towers located 1 meter apart, we measured the lengths of the parts of those towers that are not covered with snow, and the results are a meters for the west tower, and b meters for the east tower.\nAssuming that the depth of snow cover and the altitude are the same everywhere in the village, find the amount of the snow cover.\nAssume also that the depth of the snow cover is always at least 1 meter.","submission_id":"s390438632","submission":"def resolve():\n    a, b = list(map(int, input().split(\" \")))\n    diff = b - a\n    b_height = 0\n    for i in range(1, diff+1):\n        b_height += i\n    print(b_height - b)    \n\nif '__main__' == __name__:\n    resolve()","label":2}
{"problem_id":"p02690","problem":"Give a pair of integers (A, B) such that A^5-B^5 = X.\nIt is guaranteed that there exists such a pair for the given integer X.","submission_id":"s586966093","submission":"# +\u306e\u5834\u5408\ni = 0\nans = 0\nwhile ans <= 1000000000:\n   i += 1\n   ans = i**5 - (i-1)**5\n# i: 120\n\n# -\u306e\u5834\u5408\ni = 0\nans = 0\nwhile ans <= 1000000000:\n   i -= 1\n   ans = i**5 - (i-1)**5 \n# i: -119\n\nn = int(input())\nl = [_**5 for _ in range(120)]\n\nfor i in range(1,120):\n    for j in range(120):\n        if l[i] - l[j] == n:\n            print(int(l[i]**0.2), int(l[j]**0.2))\n            exit()\n        if l[i] + l[j] == n:\n            print(int(l[i]**0.2), int(-1*l[j]**0.2))\n            exit()","label":2}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s805840290","submission":"import sys\ninput=sys.stdin.readline\nimport heapq\nn,q=map(int,input().split())\nl=[list(map(int,input().split())) for i in range(n)]\nL1=[]\nfor i in range(n):\n  L1.append((l[i][0]-l[i][2],1,l[i][2]))\n  L1.append((l[i][1]-l[i][2],-1,l[i][2]))\nfor i in range(q):\n  L1.append((int(input()),2,0))\nL1.sort()\nL2=[]\nheapq.heapify(L2)\nL3=[]\nL3=set(L3)\nfor i in range(len(L1)):\n  if L1[i][1]==1:\n    heapq.heappush(L2,L1[i][2])\n    L3.add(L1[i][2])\n  elif L1[i][1]==-1:\n    L3.remove(L1[i][2])\n  else:\n    while L2 and L2[0] not in L3:\n      heapq.heappop(L2)\n    if L2:\n      print(L2[0])\n    else:\n      print(-1)","label":2}
{"problem_id":"p02835","problem":"Given are three integers A_1, A_2, and A_3.\nIf A_1+A_2+A_3 is greater than or equal to 22, print bust; otherwise, print win.","submission_id":"s535779564","submission":"# -*- coding: utf-8 -*-\n\ndef main():\n\n    A = list(map(int, input().split()))\n\n    sumA = sum(A)\n\n    if sumA >= 22:\n        ans = 'bust'\n\n    else:\n        ans = 'win'\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","label":2}
{"problem_id":"p02714","problem":"We have a string S of length N consisting of R, G, and B.\nFind the number of triples (i,~j,~k)~(1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nS_i \\neq S_j, S_i \\neq S_k, and S_j \\neq S_k.\nj - i \\neq k - j.","submission_id":"s899371992","submission":"N = int(input())\nS = input()\n\ncount = 0\nfor d in range(1, N\/\/2+2):\n    for i in range(N-2*d):\n        if S[i] != S[i+d] and S[i+2*d] != S[i+d] and S[i+2*d] != S[i]:\n            count += 1\n\n\ncntR = cntG = cntB = 0\nfor i in range(N):\n    if S[i] == 'R':\n        cntR += 1\n    elif S[i] == 'G':\n        cntG += 1\n    else:\n        cntB += 1\n\nans = cntR*cntG*cntB - count\nprint(ans)\n","label":2}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s775109993","submission":"import math\na,b,t=map(int,input().split())\nprint(b*(math.floor(t\/a)))","label":2}
{"problem_id":"p03170","problem":"There is a set A = \\{ a_1, a_2, \\ldots, a_N \\} consisting of N positive integers.\nTaro and Jiro will play the following game against each other.\nInitially, we have a pile consisting of K stones.\nThe two players perform the following operation alternately, starting from Taro:\n\nChoose an element x in A, and remove exactly x stones from the pile.\n\nA player loses when he becomes unable to play.\nAssuming that both players play optimally, determine the winner.","submission_id":"s355971275","submission":"from bisect import bisect_left as bl\nfrom bisect import bisect_right as br\nfrom heapq import heappush,heappop,heapify\nimport math\nfrom collections import *\nfrom functools import reduce,cmp_to_key\nimport sys\ninput = sys.stdin.readline\n\nfrom itertools import accumulate\nfrom functools import lru_cache\n\nM = mod = 998244353\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n\/\/i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\ndef inv_mod(n):return pow(n, mod - 2, mod)\n \ndef li():return [int(i) for i in input().rstrip('\\n').split()]\ndef st():return input().rstrip('\\n')\ndef val():return int(input().rstrip('\\n'))\ndef li2():return [i for i in input().rstrip('\\n')]\ndef li3():return [int(i) for i in input().rstrip('\\n')]\n\n\n\nn, k = li()\nl = li()\n\ndp = [False] * (k + 1)\n\n\nfor j in range(k + 1):\n    for i in l:\n        if j >= i and not dp[j - i]:dp[j] = True\n\nprint('First' if dp[k] else 'Second')","label":2}
{"problem_id":"p03846","problem":"There are N people, conveniently numbered 1 through N.\nThey were standing in a row yesterday, but now they are unsure of the order in which they were standing.\nHowever, each person remembered the following fact: the absolute difference of the number of the people who were standing to the left of that person, and the number of the people who were standing to the right of that person.\nAccording to their reports, the difference above for person i is A_i.\nBased on these reports, find the number of the possible orders in which they were standing.\nSince it can be extremely large, print the answer modulo 10^9+7.\nNote that the reports may be incorrect and thus there may be no consistent order.\nIn such a case, print 0.","submission_id":"s944125822","submission":"N=int(input())\nA=list(map(int,input().split()))\nmod = 10**9+7\n\nA=tuple(sorted(A))\n\nif N % 2 == 1:\n  nums=[0]\n  for i in range(2,N+1,2):\n    nums.append(i)\n    nums.append(i)\nelse:\n  nums=[]\n  for i in range(1,N+1,2):\n    nums.append(i)\n    nums.append(i)\n    \nnums = tuple(nums)\nif A != nums:\n  print(0)\n  exit()\n  \nprint(2**(N\/\/2) % mod)","label":2}
{"problem_id":"p02415","problem":"Write a program which converts uppercase\/lowercase letters to lowercase\/uppercase for a given string.","submission_id":"s804400298","submission":"c_dif = ord('A')-ord('a')\ns = input()\nfor c in s:\n    if ord('a')<= ord(c) and ord(c) <= ord('z'): \n        print(chr(ord(c)+c_dif) ,end='')\n    elif ord('A')<= ord(c) and ord(c) <= ord('Z'): \n        print(chr(ord(c)-c_dif) ,end='')\n    else:\n        print(c, end='')\nprint()","label":2}
{"problem_id":"p02266","problem":"Your task is to simulate a flood damage.","submission_id":"s927357701","submission":"def areas(updown: str):\n    stack1, stack2 = [], []\n\n    for i, c in enumerate(updown):\n        if c == \"\\\\\":\n            stack1.append(i)\n        elif c == \"\/\":\n            if len(stack1) == 0:\n                continue\n\n            match = stack1.pop()\n\n            # ToDo\n            total = 0\n            while stack2 and match < stack2[-1][0]:\n                _, x = stack2.pop()\n                total += x\n\n            total += i - match\n            stack2.append((match, total))\n\n        elif c == \"_\":\n            # \u4f55\u3082\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\n            pass\n        else:\n            raise Exception(\"Invalid Input\")\n\n    print(sum(x for _, x in stack2))\n    print(\"{} {}\".format(len(stack2), \" \".join([str(x) for _, x in stack2])).strip())\n\n\n# in1 = r\"\\\\\/\/\"\n# in2 = r\"\\\\\/\/\/\\_\/\\\/\\\\\\\\\/_\/\\\\\/\/\/__\\\\\\_\\\\\/_\\\/_\/\" + \"\\\\\"\n\ns = input().strip()\nareas(s)\n\n","label":2}
{"problem_id":"p03785","problem":"Every day, N passengers arrive at Takahashi Airport.\nThe i-th passenger arrives at time T_i.\nEvery passenger arrived at Takahashi airport travels to the city by bus. Each bus can accommodate up to C passengers.\nNaturally, a passenger cannot take a bus that departs earlier than the airplane arrives at the airport.\nAlso, a passenger will get angry if he\/she is still unable to take a bus K units of time after the arrival of the airplane.\nFor that reason, it is necessary to arrange buses so that the i-th passenger can take a bus departing at time between T_i and T_i + K (inclusive).\nWhen setting the departure times for buses under this condition, find the minimum required number of buses.\nHere, the departure time for each bus does not need to be an integer, and there may be multiple buses that depart at the same time.","submission_id":"s152921378","submission":"import sys\ninput = sys.stdin.readline\n\nN, C, K = map(int, input().split())\nT = [int(input()) for _ in range(N)]\nT.sort()\nans = 0\ni = 0\n\nwhile i<N:\n    lim = T[i]+K\n    ans += 1\n    cnt = 0\n    \n    while i<N and cnt<C and T[i]<=lim:\n        i += 1\n        cnt += 1\n        \nprint(ans)","label":2}
{"problem_id":"p04029","problem":"There are N children in AtCoder Kindergarten. Mr. Evi will arrange the children in a line, then give 1 candy to the first child in the line, 2 candies to the second child, ..., N candies to the N-th child. How many candies will be necessary in total?","submission_id":"s439018723","submission":"# solution\n\nnancy = int(input())\n\nprint(nancy*(nancy+1)\/\/2)","label":2}
{"problem_id":"p03039","problem":"We have a grid of squares with N rows and M columns. Let (i, j) denote the square at the i-th row from the top and j-th column from the left. We will choose K of the squares and put a piece on each of them.\nIf we place the K pieces on squares (x_1, y_1), (x_2, y_2), ..., and (x_K, y_K), the cost of this arrangement is computed as:\n\\sum_{i=1}^{K-1} \\sum_{j=i+1}^K (|x_i - x_j| + |y_i - y_j|)\nFind the sum of the costs of all possible arrangements of the pieces. Since this value can be tremendous, print it modulo 10^9+7.\nWe consider two arrangements of the pieces different if and only if there is a square that contains a piece in one of the arrangements but not in the other.","submission_id":"s194380257","submission":"import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda:sys.stdin.readline().rstrip()\n\nclass modfact(object):\n    def __init__(self,n):\n        fact=[1]*(n+1); invfact=[1]*(n+1)\n        for i in range(1,n+1): fact[i]=i*fact[i-1]%MOD\n        invfact[n]=pow(fact[n],MOD-2,MOD)\n        for i in range(n-1,-1,-1): invfact[i]=invfact[i+1]*(i+1)%MOD\n        self.__fact=fact; self.__invfact=invfact\n\n    def inv(self,n):\n        assert(n>0)\n        return self.__fact[n-1]*self.__invfact[n]%MOD\n\n    def fact(self,n):\n        return self.__fact[n]\n\n    def invfact(self,n):\n        return self.__invfact[n]\n\n    def comb(self,n,k):\n        if(k<0 or n<k): return 0\n        return self.__fact[n]*self.__invfact[k]*self.__invfact[n-k]%MOD\n\n    def perm(self,n,k):\n        if(k<0 or n<k): return 0\n        return self.__fact[n]*self.__invfact[n-k]%MOD\n\ndef resolve():\n    n,m,k=map(int,input().split())\n    N=n*m\n    ans=0\n    mf=modfact(N)\n    for d in range(1,n):\n        ans+=d*(m**2)*(n-d)*mf.comb(N-2,k-2)\n        ans%=MOD\n    for d in range(1,m):\n        ans+=d*(n**2)*(m-d)*mf.comb(N-2,k-2)\n        ans%=MOD\n    print(ans)\nresolve()","label":2}
{"problem_id":"p02767","problem":"There are N people living on a number line.\nThe i-th person lives at coordinate X_i.\nYou are going to hold a meeting that all N people have to attend.\nThe meeting can be held at any integer coordinate. If you choose to hold the meeting at coordinate P, the i-th person will spend (X_i - P)^2 points of stamina to attend the meeting.\nFind the minimum total points of stamina the N people have to spend.","submission_id":"s561898762","submission":"n=int(input())\nx=[int(i)for i in input().split()]\np=[0 for i in range(101)]\nfor i in range(101):\n    p[i]=sum([(j-i)**2 for j in x])\nprint(min(p))","label":2}
{"problem_id":"p03605","problem":"It is September 9 in Japan now.\nYou are given a two-digit integer N. Answer the question: Is 9 contained in the decimal notation of N?","submission_id":"s417408237","submission":"x = input()\nif \"9\" in x:\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":2}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s867969566","submission":"# coding: utf-8\nimport sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nA, B, T = lr()\nanswer = B * (T\/\/A)\nprint(answer)\n","label":2}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s153485947","submission":"n,k=map(int,input().split())\nP=list(map(int,input().split()))\nfor i in range(n):\n\tP[i]-=1\nC=list(map(int,input().split()))\nANS=-float('inf')\nfor i in range(n):\n    snp=P[i]\n    r=C[snp]\n    L=[r]\n    c=0\n    np=P[snp]\n    while True:\n        if c==k-1:\n            ANS=max(max(L),ANS)\n            break\n        if np==snp:\n            y=k%(c+1)\n            m=k\/\/(c+1)\n            if y==0:\n                ANS=max(max(L),max(L)+(m-1)*L[-1],ANS)\n                break\n            else:\n                #print(m,y)\n                #print(L)\n                ANS=max(max(L),max(max(L[:y]),0)+m*L[-1],ANS)\n                break\n        r+=C[np]\n        L.append(r)\n        np=P[np]\n        c+=1\nprint(ANS)","label":2}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s094013059","submission":"import sys\nfrom collections import deque\ninput = sys.stdin.readline\n\nn=int(input())\nL=deque([i for i in range(1,10)])\nif n<=9:\n    ans = L[n-1]\nelse:\n    cnt = 9\n    for i in range(1,n):\n        c=L.popleft()\n        \n        if c%10!=0:\n            L.append(c*10+(c%10)-1)\n            cnt+=1\n            if cnt>=n:\n                break\n        L.append(c*10+(c%10))\n        cnt+=1\n        if cnt>=n:\n            break\n        \n        if c%10!=9:\n            L.append(c*10+(c%10)+1)\n            cnt+=1\n            if cnt>=n:\n                break\n    ans = L[-1]\nprint(ans)\n","label":2}
{"problem_id":"p03212","problem":"You are given an integer N. Among the integers between 1 and N (inclusive), how many Shichi-Go-San numbers (literally \"Seven-Five-Three numbers\") are there?\nHere, a Shichi-Go-San number is a positive integer that satisfies the following condition:\n\nWhen the number is written in base ten, each of the digits 7, 5 and 3 appears at least once, and the other digits never appear.","submission_id":"s186838275","submission":"n = int(input())\n\ndef dfs(s):\n    if int(s) > n:\n        return 0\n    if all(s.count(c) for c in \"753\"):\n        cnt =1\n    else:\n        cnt =0\n    for t in \"753\":\n        cnt +=dfs(s+t) \n    return cnt\n    \nprint(dfs(\"0\"))","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s792823937","submission":"t=input()\nif t[-1]=='s':\n  ans=t+\"es\"\nelse:\n  ans=t+\"s\"\nprint(ans)","label":2}
{"problem_id":"p03240","problem":"In the Ancient Kingdom of Snuke, there was a pyramid to strengthen the authority of Takahashi, the president of AtCoder Inc.\nThe pyramid had center coordinates (C_X, C_Y) and height H. The altitude of coordinates (X, Y) is max(H - |X - C_X| - |Y - C_Y|, 0).  \nAoki, an explorer, conducted a survey to identify the center coordinates and height of this pyramid. As a result, he obtained the following information:  \n\nC_X, C_Y was integers between 0 and 100 (inclusive), and H was an integer not less than 1.  \nAdditionally, he obtained N pieces of information. The i-th of them is: \"the altitude of point (x_i, y_i) is h_i.\"  \n\nThis was enough to identify the center coordinates and the height of the pyramid. Find these values with the clues above.","submission_id":"s201862091","submission":"n = int(input())\nhist = [tuple(map(int,input().split())) for _ in range(n)]\nhist.sort(key=lambda x: x[2], reverse=1)\n\ncands = []\nx0,y0,h0 = hist[0]\n\nfor i in range(0,101):\n  for j in range(0,101):\n    if h0 == 0:\n      cands.append((i,j,1))\n    else:\n      cands.append((i,j, h0+abs(i-x0)+abs(j-y0)))\n    \nfor X,Y,H in cands:\n  for x,y,h in hist:\n    if max(H-abs(X-x)-abs(Y-y),0) == h:\n      continue\n    else:\n      break\n  else:\n    print(X,Y,H)\n    break\n    \n\n","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s210900699","submission":"n = int(input())\nmemo = []\nfor i in range(n):\n   tmp = [int(x) for x in input().split()]\n   memo.append(tmp)\n\nseat = [a[1] - a[0] + 1 for a in memo]\nprint(sum(seat))\n","label":2}
{"problem_id":"p03970","problem":"CODE FESTIVAL 2016 is going to be held. For the occasion, Mr. Takahashi decided to make a signboard.\nHe intended to write CODEFESTIVAL2016 on it, but he mistakenly wrote a different string S. Fortunately, the string he wrote was the correct length.\nSo Mr. Takahashi decided to perform an operation that replaces a certain character with another in the minimum number of iterations, changing the string to CODEFESTIVAL2016.\nFind the minimum number of iterations for the rewrite operation.","submission_id":"s882409414","submission":"S = input()\ntarget = \"CODEFESTIVAL2016\"\n\nans = 0\nfor s, t in zip(S, target):\n    if s != t:\n        ans += 1\nprint(ans)\n","label":2}
{"problem_id":"p02923","problem":"There are N squares arranged in a row from left to right.\nThe height of the i-th square from the left is H_i.\nYou will land on a square of your choice, then repeat moving to the adjacent square on the right as long as the height of the next square is not greater than that of the current square.\nFind the maximum number of times you can move.","submission_id":"s307479598","submission":"n = int(input())\nh = list(map(int,input().split()))\ncount = 0\nans = 0\n\nfor i in range(n):\n  if i == n-1 :\n    ans = max(ans,count)\n    count = 0\n  elif h[i] >= h[i+1]:\n    count += 1\n  else:\n    ans = max(ans,count)\n    count = 0\n\nprint(ans)","label":2}
{"problem_id":"p03128","problem":"Find the largest integer that can be formed with exactly N matchsticks, under the following conditions:\n\nEvery digit in the integer must be one of the digits A_1, A_2, ..., A_M (1 \\leq A_i \\leq 9).\nThe number of matchsticks used to form digits 1, 2, 3, 4, 5, 6, 7, 8, 9 should be 2, 5, 5, 4, 5, 6, 3, 7, 6, respectively.","submission_id":"s794426101","submission":"n, m = map(int, input().split())\na = list(map(int, input().split()))\n\nmatch = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6]\nd = dict()\nfor e in a:\n    d[e] = match[e]\n\ndp = [-1] * (n + 1)\ndp[0] = 0\nfor i in range(1, n + 1):\n    for k, v in d.items():\n        if i - v >= 0 and dp[i-v] != -1:\n            dp[i] = max(dp[i], dp[i-v] * 10 + k)\n\nprint(dp[n])\n","label":2}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s880296625","submission":"n=str(input())\nprint(\"YNeos\"[not \"7\" in n::2])","label":2}
{"problem_id":"p02947","problem":"We will call a string obtained by arranging the characters contained in a string a in some order, an anagram of a.\nFor example, greenbin is an anagram of beginner. As seen here, when the same character occurs multiple times, that character must be used that number of times.\nGiven are N strings s_1, s_2, \\ldots, s_N. Each of these strings has a length of 10 and consists of lowercase English characters. Additionally, all of these strings are distinct. Find the number of pairs of integers i, j (1 \\leq i < j \\leq N) such that s_i is an anagram of s_j.","submission_id":"s628952791","submission":"from collections import Counter\n\n# \u5165\u529b (\u5404\u6587\u5b57\u5217\u3092\u30bd\u30fc\u30c8\u3057\u3066\u304a\u304f)\nN = int(input())\nS = [''.join(sorted(input())) for _ in range(N)]\n\n# Counter \u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\nnum = Counter(S)\n\n# \u5404\u6587\u5b57\u5217\u3054\u3068\u306b\u500b\u6570 x \u3092\u6271\u3046\nresult = sum(x * (x - 1) \/\/ 2 for x in num.values())\nprint(result)","label":2}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s216662009","submission":"#!\/usr\/bin\/env python3\nimport sys\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**6)\nINF = 10 ** 9 + 1  # sys.maxsize # float(\"inf\")\nMOD = 10 ** 9 + 7\n\n\ndef debug(*x):\n    print(*x, file=sys.stderr)\n\n\ndef solve(N, K, PS, CS):\n    PS = [x - 1 for x in PS]\n    CS = [CS[PS[i]] for i in range(N)]\n    visited = {}\n    loops = []\n    loopScore = []\n    for i in range(N):\n        loop = []\n        c = 0\n        while i not in visited:\n            visited[i] = True\n            c += CS[i]\n            i = PS[i]\n            loop.append(i)\n        if loop:\n            loops.append(loop)\n            loopScore.append(c)\n\n    pos = list(range(N))\n    ret = -INF\n    for i, loop in enumerate(loops):\n        if loopScore[i] > 0:\n            baseScore = loopScore[i] * (K \/\/ len(loop))\n            r = K % len(loop)\n            if r == 0:\n                r = len(loop)\n                baseScore -= loopScore[i]\n            maxscore = 0\n            scores = defaultdict(int)\n            for i in range(r):\n                for x in loop:\n                    scores[x] += CS[pos[x]]\n                    pos[x] = PS[pos[x]]\n                maxscore = max(maxscore, max(scores.values()))\n            ret = max(maxscore + baseScore, ret)\n        else:\n            r = len(loop)\n            maxscore = -INF\n            scores = defaultdict(int)\n            for i in range(r):\n                for x in loop:\n                    scores[x] += CS[pos[x]]\n                    pos[x] = PS[pos[x]]\n                maxscore = max(maxscore, max(scores.values()))\n            ret = max(maxscore, ret)\n\n    return ret\n\n\ndef main():\n    # parse input\n    N, K = map(int, input().split())\n    PS = list(map(int, input().split()))\n    CS = list(map(int, input().split()))\n    print(solve(N, K, PS, CS))\n\n\n# tests\nT1 = \"\"\"\n5 2\n2 4 5 1 3\n3 4 -10 -8 8\n\"\"\"\nTEST_T1 = \"\"\"\n>>> as_input(T1)\n>>> main()\n8\n\"\"\"\n\nT2 = \"\"\"\n2 3\n2 1\n10 -7\n\"\"\"\nTEST_T2 = \"\"\"\n>>> as_input(T2)\n>>> main()\n13\n\"\"\"\n\nT3 = \"\"\"\n3 3\n3 1 2\n-1000 -2000 -3000\n\"\"\"\nTEST_T3 = \"\"\"\n>>> as_input(T3)\n>>> main()\n-1000\n\"\"\"\n\nT4 = \"\"\"\n10 58\n9 1 6 7 8 4 3 2 10 5\n695279662 988782657 -119067776 382975538 -151885171 -177220596 -169777795 37619092 389386780 980092719\n\"\"\"\nTEST_T4 = \"\"\"\n>>> as_input(T4)\n>>> main()\n29507023469\n\"\"\"\n\nT5 = \"\"\"\n3 1000\n2 3 1\n1 0 2\n\"\"\"\nTEST_T5 = \"\"\"\n>>> as_input(T5)\n>>> main()\n1001\n\"\"\"\n\nT6 = \"\"\"\n3 1000\n2 3 1\n1 1 -3\n\"\"\"\nTEST_T6 = \"\"\"\n>>> as_input(T6)\n>>> main()\n2\n\"\"\"\n\nT7 = \"\"\"\n4 1000\n2 1 4 3\n1 1 -10000 10000\n\"\"\"\nTEST_T7 = \"\"\"\n>>> as_input(T7)\n>>> main()\n10000\n\"\"\"\n\nT8 = \"\"\"\n4 1000\n2 1 4 3\n1 1 -10000 10001\n\"\"\"\nTEST_T8 = \"\"\"\n>>> as_input(T8)\n>>> main()\n10500\n\"\"\"\n\n\ndef _test():\n    import doctest\n    doctest.testmod()\n    g = globals()\n    for k in sorted(g):\n        if k.startswith(\"TEST_\"):\n            doctest.run_docstring_examples(g[k], g, name=k)\n\n\ndef as_input(s):\n    \"use in test, use given string as input file\"\n    import io\n    f = io.StringIO(s.strip())\n    g = globals()\n    g[\"input\"] = lambda: bytes(f.readline(), \"ascii\")\n    g[\"read\"] = lambda: bytes(f.read(), \"ascii\")\n\n\ninput = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\n\nif sys.argv[-1] == \"-t\":\n    print(\"testing\")\n    _test()\n    sys.exit()\n\nmain()\n","label":2}
{"problem_id":"p03408","problem":"Takahashi has N blue cards and M red cards.\nA string is written on each card. The string written on the i-th blue card is s_i, and the string written on the i-th red card is t_i.\nTakahashi will now announce a string, and then check every card. Each time he finds a blue card with the string announced by him, he will earn 1 yen (the currency of Japan); each time he finds a red card with that string, he will lose 1 yen.\nHere, we only consider the case where the string announced by Takahashi and the string on the card are exactly the same. For example, if he announces atcoder, he will not earn money even if there are blue cards with atcoderr, atcode, btcoder, and so on. (On the other hand, he will not lose money even if there are red cards with such strings, either.)\nAt most how much can he earn on balance?\nNote that the same string may be written on multiple cards.","submission_id":"s757497850","submission":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom math import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nINF = float('inf')\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\nn = I()\ns = Counter([input() for _ in range(n)])\nm = I()\nt = Counter([input() for _ in range(m)])\nans = 0\nfor k,v in s.items():\n    ans = max(ans, max(0, v-t[k]))\nprint(ans)\n","label":2}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s111578179","submission":"import sys\n\na, b, t = map(int, sys.stdin.readline().split())\n\ndef main():\n    res = b * (t \/\/ a)\n    print(res)\n\nif __name__ ==  '__main__':\n    main()","label":2}
{"problem_id":"p02552","problem":"Given is an integer x that is greater than or equal to 0, and less than or equal to 1.\nOutput 1 if x is equal to 0, or 0 if x is equal to 1.","submission_id":"s822875505","submission":"num = int(input())\nprint(1-num)\n","label":2}
{"problem_id":"p03145","problem":"There is a right triangle ABC with \u2220ABC=90\u00b0.\nGiven the lengths of the three sides, |AB|,|BC| and |CA|, find the area of the right triangle ABC.\nIt is guaranteed that the area of the triangle ABC is an integer.","submission_id":"s335085744","submission":"A, B, C = map(int, input().split())\nlst=sorted([A,B,C])\nprint(lst[0]*lst[1]\/\/2)\n","label":2}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s841179516","submission":"import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    n = int(readline())\n    l = list(map(int, readline().split()))\n    l.sort()\n\n    print(sum(l[::2]))\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p02865","problem":"How many ways are there to choose two distinct positive integers totaling N, disregarding the order?","submission_id":"s008374038","submission":"print(int((int(input())+1)\/2-1))","label":2}
{"problem_id":"p03944","problem":"There is a rectangle in the xy-plane, with its lower left corner at (0, 0) and its upper right corner at (W, H). Each of its sides is parallel to the x-axis or y-axis. Initially, the whole region within the rectangle is painted white.\nSnuke plotted N points into the rectangle. The coordinate of the i-th (1 \u2266 i \u2266 N) point was (x_i, y_i).\nThen, he created an integer sequence a of length N, and for each 1 \u2266 i \u2266 N, he painted some region within the rectangle black, as follows:\n\nIf a_i = 1, he painted the region satisfying x < x_i within the rectangle.\nIf a_i = 2, he painted the region satisfying x > x_i within the rectangle.\nIf a_i = 3, he painted the region satisfying y < y_i within the rectangle.\nIf a_i = 4, he painted the region satisfying y > y_i within the rectangle.\n\nFind the area of the white region within the rectangle after he finished painting.","submission_id":"s267307539","submission":"W, H, N=map(int, input().split())\nhen=[0,W,0,H]\nfor _ in range(N):\n  x, y, a=map(int, input().split())\n  if a==1:\n    hen[a-1]=max(hen[a-1], x)\n  elif a==2:\n    hen[a-1]=min(hen[a-1], x)\n  elif a==3:\n    hen[a-1]=max(hen[a-1], y)\n  elif a==4:\n    hen[a-1]=min(hen[a-1], y)\nyoko=hen[1]-hen[0]\ntate=hen[3]-hen[2]\nif yoko<0 or tate<0:\n  ans=0\nelse:\n  ans=yoko*tate\nprint(ans)","label":2}
{"problem_id":"p02771","problem":"A triple of numbers is said to be poor when two of those numbers are equal but the other number is different from those two numbers.\nYou will be given three integers A, B, and C. If this triple is poor, print Yes; otherwise, print No.","submission_id":"s065717707","submission":"a, b, c = [int(i) for i in input().split()]\nprint('Yes' if len(set([a, b, c])) == 2 else 'No') ","label":2}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s388529276","submission":"def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\nn, x = map(int, input().split())\nxxx = list(map(lambda xn: abs(int(xn) - x), input().split()))\nans = xxx[0]\nfor i in range(1, n):\n    ans = gcd(ans, xxx[i])\nprint(ans)","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s960226728","submission":"import sys\n\nsys.setrecursionlimit(10 ** 7)\nrl = sys.stdin.readline\n\n\ndef solve():\n    S = rl().rstrip()\n    if S[-1] == 's':\n        print(S + 'es')\n    else:\n        print(S + 's')\n\n\nif __name__ == '__main__':\n    solve()\n","label":2}
{"problem_id":"p03544","problem":"It is November 18 now in Japan. By the way, 11 and 18 are adjacent Lucas numbers.\nYou are given an integer N. Find the N-th Lucas number.\nHere, the i-th Lucas number L_i is defined as follows:\n\nL_0=2\nL_1=1\nL_i=L_{i-1}+L_{i-2} (i\u22652)","submission_id":"s675697212","submission":"N = int(input())\nl2 = 2\nl1 = 1\nif N == 1:\n  ans = 1\nelse:\n  for i in range(N-1):\n    l = l2 + l1\n    l2 = l1\n    l1 = l\n  ans = l\nprint(ans)","label":2}
{"problem_id":"p03293","problem":"You are given string S and T consisting of lowercase English letters.\nDetermine if S equals T after rotation.\nThat is, determine if S equals T after the following operation is performed some number of times:\nOperation: Let S = S_1 S_2 ... S_{|S|}. Change S to S_{|S|} S_1 S_2 ... S_{|S|-1}.\nHere, |X| denotes the length of the string X.","submission_id":"s753373307","submission":"S = input()\nT = input()\nN = len(S)\nV = [\"\" for i in range(N)]\nfor i in range(N):\n  for j in range(N):\n    V[i] = V[i][:] + S[(i+j)%N]\nflg = False\nfor i in range(N):\n  if V[i] == T:\n    flg = True\nif flg:\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":2}
{"problem_id":"p03623","problem":"Snuke lives at position x on a number line.\nOn this line, there are two stores A and B, respectively at position a and b, that offer food for delivery.\nSnuke decided to get food delivery from the closer of stores A and B.\nFind out which store is closer to Snuke's residence.\nHere, the distance between two points s and t on a number line is represented by |s-t|.","submission_id":"s898025371","submission":"import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import Counter, deque\nfrom collections import defaultdict\nfrom itertools import combinations, permutations, accumulate, groupby, product\nfrom bisect import bisect_left,bisect_right\nfrom heapq import heapify, heappop, heappush\nfrom math import floor, ceil\nfrom operator import itemgetter\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef LI2(): return [int(input()) for i in range(n)]\ndef MXI(): return [[LI()]for i in range(n)]\ninf = 10**17\nmod = 10**9 + 7\n\nx,a,b=MI()\nl1=abs(x-a)\nl2=abs(x-b)\nif l1<l2:\n    print(\"A\")\nelse:\n    print(\"B\")","label":2}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s039144534","submission":"x=int(input())\nprint(int(x*x*x))\n","label":2}
{"problem_id":"p03401","problem":"There are N sightseeing spots on the x-axis, numbered 1, 2, ..., N.\nSpot i is at the point with coordinate A_i.\nIt costs |a - b| yen (the currency of Japan) to travel from a point with coordinate a to another point with coordinate b along the axis.\nYou planned a trip along the axis.\nIn this plan, you first depart from the point with coordinate 0, then visit the N spots in the order they are numbered, and finally return to the point with coordinate 0.\nHowever, something came up just before the trip, and you no longer have enough time to visit all the N spots, so you decided to choose some i and cancel the visit to Spot i.\nYou will visit the remaining spots as planned in the order they are numbered.\nYou will also depart from and return to the point with coordinate 0 at the beginning and the end, as planned.\nFor each i = 1, 2, ..., N, find the total cost of travel during the trip when the visit to Spot i is canceled.","submission_id":"s860798272","submission":"def solve():\n    N = int(input())\n    A = [0] + list(map(int, input().split())) + [0]\n    \n    sum_cost = 0\n    for i in range(1, N + 2):\n        sum_cost += abs(A[i - 1] - A[i])\n    \n    for i in range(1, N + 1):\n        ans = sum_cost - abs(A[i - 1] - A[i]) - abs(A[i] - A[i + 1]) + abs(A[i - 1] - A[i + 1])\n        print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n","label":2}
{"problem_id":"p03149","problem":"You are given four digits N_1, N_2, N_3 and N_4. Determine if these can be arranged into the sequence of digits \"1974\".","submission_id":"s220539028","submission":"def slove():\n    import sys\n    input = sys.stdin.readline\n    a = list(map(str, str(input().rstrip('\\n')).split()))\n    a.sort()\n    print(\"YES\" if \"\".join(a) == \"1479\" else \"NO\")\n\n\nif __name__ == '__main__':\n    slove()\n","label":2}
{"problem_id":"p03045","problem":"There are N cards placed face down in a row. On each card, an integer 1 or 2 is written.\nLet A_i be the integer written on the i-th card.\nYour objective is to guess A_1, A_2, ..., A_N correctly.\nYou know the following facts:\n\nFor each i = 1, 2, ..., M, the value A_{X_i} + A_{Y_i} + Z_i is an even number.\n\nYou are a magician and can use the following magic any number of times:\nMagic: Choose one card and know the integer A_i written on it. The cost of using this magic is 1.\nWhat is the minimum cost required to determine all of A_1, A_2, ..., A_N?\nIt is guaranteed that there is no contradiction in given input.","submission_id":"s129610810","submission":"n,m=map(int,input().split())\nclass UnionFind:\n    #def   -> foo=UnionFind(n,1)  <- 1-based index, default is 0\n    #method -> foo.hoge(huga)\n    __slots__ = [\"_size\", \"_first_idx\", \"_parents\"]\n    def __init__(self, size: int, first_index: int = 0) -> None:\n        self._size = size\n        self._first_idx = first_index\n        self._parents = [-1] * (size + first_index)\n    def find(self, x: int) -> int:\n        if self._parents[x] < 0:\n            return x\n        self._parents[x] = self.find(self._parents[x])\n        return self._parents[x]\n    def same(self, x: int, y: int) -> bool:\n        return self.find(x) == self.find(y)\n    def unite(self, x: int, y: int) -> bool:\n        x, y = self.find(x), self.find(y)\n        if x == y:\n            return False\n        if self._parents[x] > self._parents[y]:\n            x, y = y, x\n        self._parents[x] += self._parents[y]\n        self._parents[y] = x\n        return True\n    def size(self, x: int) -> int:\n        return -self._parents[self.find(x)]\n    def group_count(self) ->int:\n        return sum([1 for i in  self._parents if i<0])-self._first_idx\n    def connected(self) ->bool:\n        return self._parents[self.find(self._first_idx)]==-self._size\n\nuf=UnionFind(n,1)\nfor i in range(m):\n    x,y,z=map(int,input().split())\n    uf.unite(x,y)\nprint(uf.group_count())","label":2}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s615761560","submission":"s = list(input())\nt = list(input())\n\nprint(len([i for i in range(len(s)) if s[i] ==t[i]]))","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s807509093","submission":"s = input()\nif s[-1] == 's':\n    print(s+'es')\nelse:\n    print(s+'s')\n","label":2}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s467278053","submission":"n = int(input())\na = list(map(int, input().split()))\n\na.sort()\nans = 0\nfor i in range(2*n):\n\tif not i&1:\n\t\tans += a[i]\n\nprint(ans)\n","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s832016614","submission":"from collections import Counter\ndef main():\n    n = int(input())\n    A = list(map(int, input().split()))\n    c = Counter(A)\n    if c[0] == n:\n        print('Yes')\n    elif n % 3 == 0 and c[0] == n \/\/ 3 and len(set(A)) == 2:\n        print('Yes')\n    elif n % 3 == 0 and len(set(A)) == 3:\n        x, y, z = list(set(A))\n        if x ^ y ^ z == 0 and c[x] == c[y] == c[z]:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s828121750","submission":"def resolve():\n    s = input()\n    print(s + ('s' if s[-1] != 's' else 'es'))\nresolve()","label":2}
{"problem_id":"p03323","problem":"E869120's and square1001's 16-th birthday is coming soon.\nTakahashi from AtCoder Kingdom gave them a round cake cut into 16 equal fan-shaped pieces.\nE869120 and square1001 were just about to eat A and B of those pieces, respectively,\nwhen they found a note attached to the cake saying that \"the same person should not take two adjacent pieces of cake\".\nCan both of them obey the instruction in the note and take desired numbers of pieces of cake?","submission_id":"s594568353","submission":"import sys\n\na, b = map(int, sys.stdin.readline().split())\nif a < b: a, b = b, a\n\ndef main():\n    r, c = 16 - b * 2, a - b\n    ans = 'Yay!' if c <= r \/\/ 2 else ':('\n    print(ans)\n\nif __name__ ==  '__main__':\n    main()","label":2}
{"problem_id":"p02685","problem":"There are N blocks arranged in a row. Let us paint these blocks.\nWe will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.\nFind the number of ways to paint the blocks under the following conditions:\n\nFor each block, use one of the M colors, Color 1 through Color M, to paint it. It is not mandatory to use all the colors.\nThere may be at most K pairs of adjacent blocks that are painted in the same color.\n\nSince the count may be enormous, print it modulo 998244353.","submission_id":"s558676527","submission":"def main():\n    n, m, k = map(int, input().split())\n    mod = 998244353\n    ans = 0\n    m1 = [None]*(n+1)\n    kaizyo = [None]*(n+1)\n    nm1 = 1\n    kai = 1\n    for i in range(n+1):\n        m1[i] = nm1\n        nm1 *= m-1\n        nm1 %= mod\n        kaizyo[i] = kai\n        kai *= i+1\n        kai %= mod\n    \n    def comb(a, b):\n        return (kaizyo[a]*fermat(kaizyo[a-b]*kaizyo[b], mod))%mod\n\n    for i in range(k+1):\n        ans += m*m1[n-i-1]*comb(n-1, i)\n        ans %= mod\n    \n    print(ans)\n\ndef fermat(x, p):\n    \"\"\"\n    1\/x (mod p) \u3092\u8fd4\u3059\n        x**(p-1) \u2261 1    [if gcd(x, p) == 1]\n        x**(p-2) \u2261 1\/x\n        \u7e70\u8fd4\u3057\u4e8c\u4e57\u6cd5 \n            ex: x**50  = (x**25)**2\n                x**25  = (x**12)**2 * x\n                x**12  = (x**6)**2\n                x**6   = (x**3)**2\n    \"\"\"\n    times = []\n    mod = p\n    p -= 2\n    while p > 1:\n        times.append(p%2)\n        p \/\/= 2\n    x %= mod\n    out = x\n    for i in times[::-1]:\n        if i:\n            out = (x*pow(out, 2, mod))%mod\n        else:\n            out = pow(out, 2, mod)\n    return out\n\n\n\nif __name__ == \"__main__\":\n    main()","label":2}
{"problem_id":"p03583","problem":"You are given an integer N.\nFind a triple of positive integers h, n and w such that 4\/N = 1\/h + 1\/n + 1\/w.\nIf there are multiple solutions, any of them will be accepted.","submission_id":"s760914518","submission":"N=int(input())\nw=0\nfor h in range(1,3501):\n    for n in range(h,3501):\n        if 4*h*n>N*(h+n) and N*h*n%(4*h*n-N*(h+n))==0:\n            w=N*h*n\/\/(4*h*n-N*(h+n))\n            break\n    if w>0:\n        break\n\nprint(h,n,w)","label":2}
{"problem_id":"p03263","problem":"There is a grid of square cells with H horizontal rows and W vertical columns. The cell at the i-th row and the j-th column will be denoted as Cell (i, j).\nIn Cell (i, j), a_{ij} coins are placed.\nYou can perform the following operation any number of times:\nOperation: Choose a cell that was not chosen before and contains one or more coins, then move one of those coins to a vertically or horizontally adjacent cell.\nMaximize the number of cells containing an even number of coins.","submission_id":"s399890199","submission":"h, w = map(int, input().split())\nmat = []\nfor i in range(h):\n  mat.append(list(map(int, input().split())))\nsousa = []\nfor y in range(h):\n  if y % 2 == 0:\n    x = -1\n    for x in range(w-1):\n      if mat[y][x] % 2 == 1:\n        mat[y][x] -= 1\n        mat[y][x+1] += 1\n        sousa.append((y+1, x+1, y+1, x+1+1))\n    x += 1\n    if mat[y][x] % 2 == 1 and y < h-1:\n        mat[y][x] -= 1\n        mat[y+1][x] += 1\n        sousa.append((y+1, x+1, y+1+1, x+1))\n  if y % 2 == 1:\n    x = w\n    for x in range(w-1, 0, -1):\n      if mat[y][x] % 2 == 1:\n        mat[y][x] -= 1\n        mat[y][x-1] += 1\n        sousa.append((y+1, x+1, y+1, x+1-1))\n    x -= 1\n    if mat[y][x] % 2 == 1 and y < h-1:\n        mat[y][x] -= 1\n        mat[y+1][x] += 1\n        sousa.append((y+1, x+1, y+1+1, x+1))\n\nprint(len(sousa))\nfor y,x,y1,x1 in sousa:\n  print(y,x,y1,x1)\n","label":2}
{"problem_id":"p02882","problem":"Takahashi has a water bottle with the shape of a rectangular prism whose base is a square of side a~\\mathrm{cm} and whose height is b~\\mathrm{cm}. (The thickness of the bottle can be ignored.)\nWe will pour x~\\mathrm{cm}^3 of water into the bottle, and gradually tilt the bottle around one of the sides of the base.\nWhen will the water be spilled? More formally, find the maximum angle in which we can tilt the bottle without spilling any water.","submission_id":"s472051569","submission":"#!\/usr\/bin\/env python3\n\n#import\nimport math\n#import numpy as np\n#= int(input())\n#= input()\na, b, x= map(int, input().split())\n#= list(map(int, input().split()))\n#= [input(), input()]\n#= [list(map(int, input().split())) for _ in range(N)]\n#= [int(input()) for _ in range(N)]\n#= {i:[] for i in range(N)}\n\nd = a * a * b\n\n# \u534a\u5206\u3088\u308a\u591a\u3044\nif x * 2 > d:\n    x = d - x\n    xx = 2 * x \/ (a * a * a)\n    theta = math.atan(xx)\n    print(theta * 180 \/ math.pi)\n\nelse:\n    xx = 2 * x \/ (a * b * b)\n    theta = math.atan(xx)\n    print(90 - theta * 180 \/ math.pi)\n\n","label":2}
{"problem_id":"p03729","problem":"You are given three strings A, B and C. Check whether they form a word chain.\nMore formally, determine whether both of the following are true:\n\nThe last character in A and the initial character in B are the same.\nThe last character in B and the initial character in C are the same.\n\nIf both are true, print YES. Otherwise, print NO.","submission_id":"s784741556","submission":"a, b, c = input().split()\nif a[-1] == b[0] and b[-1] == c[0]:\n    ans = \"YES\"\nelse:\n    ans = \"NO\"\nprint(ans)\n","label":2}
{"problem_id":"p03651","problem":"There is a box containing N balls. The i-th ball has the integer A_i written on it.\nSnuke can perform the following operation any number of times:\n\nTake out two balls from the box. Then, return them to the box along with a new ball, on which the absolute difference of the integers written on the two balls is written.\n\nDetermine whether it is possible for Snuke to reach the state where the box contains a ball on which the integer K is written.","submission_id":"s107767324","submission":"def gcd(x, y):\n  if y == 0:\n    return x\n  else:\n    return gcd(y, x % y)\n\ndef resolve():\n  n, k = map(int, input().split())\n  a = list(map(int, input().split()))\n  if k in a:\n    print('POSSIBLE')\n    return\n\n  if k > max(a):\n    print('IMPOSSIBLE')\n    return\n\n  g = a[0]\n  for x in a:\n    g = gcd(x, g)\n\n  for x in a:\n    if x < k:\n      continue\n    if (x - k) % g == 0:\n      print('POSSIBLE')\n      return\n\n  print('IMPOSSIBLE')\n  return\n\nif __name__ == \"__main__\":\n  resolve()\n","label":2}
{"problem_id":"p02640","problem":"There are some animals in a garden. Each of them is a crane with two legs or a turtle with four legs.\nTakahashi says: \"there are X animals in total in the garden, and they have Y legs in total.\" Determine whether there is a combination of numbers of cranes and turtles in which this statement is correct.","submission_id":"s663259871","submission":"n,m=map(int,input().split())\nif(m%2==1):\n    print(\"No\")\nelif(2*n<=m and m<=4*n):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":2}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s516412620","submission":"h,w = map(int,input().split())\ntmp=[]\nfor _ in range(h):\n    tmp.append(input())\nfor t in tmp:\n    print(t)\n    print(t)","label":2}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s844371030","submission":"input_ = input()\nsum_ = 0\nfor i in input_:\n  sum_ += int(i)\nif sum_ % 9 == 0:\n  print('Yes')\nelse:\n  print('No')","label":2}
{"problem_id":"p02988","problem":"We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.","submission_id":"s058505024","submission":"n = int(input())\nL = list(map(int,input().split()))\ncnt = 0\nfor i in range(n-2):\n    if (L[i+1]>L[i]) and (L[i+1] < L[i+2]):\n        cnt += 1\n    if (L[i+1]<L[i]) and (L[i+1] > L[i+2]):\n        cnt += 1\nprint(cnt)","label":2}
{"problem_id":"p03657","problem":"Snuke is giving cookies to his three goats.\nHe has two cookie tins. One contains A cookies, and the other contains B cookies. He can thus give A cookies, B cookies or A+B cookies to his goats (he cannot open the tins).\nYour task is to determine whether Snuke can give cookies to his three goats so that each of them can have the same number of cookies.","submission_id":"s538670874","submission":"a = list(map(int, input().split()))\nif a[0] % 3 == 0 or a[1] % 3 == 0 or sum(a[:2]) % 3 == 0:\n    print(\"Possible\")\nelse:\n    print(\"Impossible\")\n","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s940883338","submission":"N = int(input())\nA = list(map(int,input().split()))\nans = \"Yes\"\nif N % 3 != 0:\n  if len(set(A)) != 1 or list(set(A))[0] != 0:\n    ans = \"No\"\n  print(ans)\nelse:\n  if len(set(A)) == 1:\n    if list(set(A))[0] != 0:\n      ans = \"No\"\n  elif len(set(A)) == 2:\n    if A.count(0) != N \/\/ 3:\n      ans = \"No\"\n  elif len(set(A)) == 3:\n    A_s = list(set(A))\n    for a in A_s:\n      if A.count(a) != N \/\/ 3:\n        ans = \"No\"\n      elif A_s[0] ^ A_s[1] ^ A_s[2] != 0:\n        ans = \"No\"\n  else:\n    ans = \"No\"\n  print(ans)","label":2}
{"problem_id":"p02412","problem":"Write a program which identifies the number of combinations of three integers which satisfy the following conditions:","submission_id":"s742178874","submission":"import itertools\nwhile(True):\n    n, x = [int(i) for i in input().split()]\n    if n == 0 and x == 0: break\n    cnt = 0\n    for li in itertools.combinations(range(1, n + 1),3):\n        if sum(li) == x: cnt += 1\n    print(cnt)","label":2}
{"problem_id":"p03671","problem":"Snuke is buying a bicycle.\nThe bicycle of his choice does not come with a bell, so he has to buy one separately.\nHe has very high awareness of safety, and decides to buy two bells, one for each hand.\nThe store sells three kinds of bells for the price of a, b and c yen (the currency of Japan), respectively.\nFind the minimum total price of two different bells.","submission_id":"s982771271","submission":"A = [int(i) for i in input().split()]\nprint(sum(A) - max(A))","label":2}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s550696294","submission":"import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 9)\nMOD = 10 ** 9 + 7\n\nsx, sy, tx, ty = map(int, input().split())\n\ntx -= sx\nty -= sy\n\ns = str()\ns += 'R' * tx\ns += 'U' * ty\ns += 'L' * tx\ns += 'D' * (ty + 1)\ns += 'R' * (tx + 1)\ns += 'U' * (ty + 1)\ns += 'L'\ns += 'U'\ns += 'L' * (tx + 1)\ns += 'D' * (ty + 1)\ns += 'R'\n\nprint (s)","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s584010500","submission":"S=input()\nN=len(S)\nif S[N-1]=='s':\n    print(S+'es')\nelse:\n    print(S+'s')","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s043032826","submission":"n=int(input())\na=list(map(int,input().split()))\nans=0\ncnt=-1\nfor i in range(1,n):\n  if a[i-1]==a[i]:\n    a[i]=cnt\n    cnt-=1\n    ans+=1\nprint(ans)\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s344641990","submission":"S = input().rstrip()\nif S[-1] == 's':\n    print(S + 'es')\nelse:\n    print(S + 's')","label":2}
{"problem_id":"p03101","problem":"There are H rows and W columns of white square cells.\nYou will choose h of the rows and w of the columns, and paint all of the cells contained in those rows or columns.\nHow many white cells will remain?\nIt can be proved that this count does not depend on what rows and columns are chosen.","submission_id":"s192248145","submission":"def solve():\n    H, W = map(int, input().split())\n    h, w = map(int, input().split())\n\n    ans = H*W - (((h*W)+(w*H)) - (h*w))\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n","label":2}
{"problem_id":"p02663","problem":"In this problem, we use the 24-hour clock.\nTakahashi gets up exactly at the time H_1 : M_1 and goes to bed exactly at the time H_2 : M_2. (See Sample Inputs below for clarity.)\nHe has decided to study for K consecutive minutes while he is up.\nWhat is the length of the period in which he can start studying?","submission_id":"s247890082","submission":"import math\n\nS = list(map(int, input().split()))\na = (S[2]-S[0])*60+(S[3]-S[1])\nb = a - S[4]\nif(b>0):\n  print(b)\nelse:\n  print(0)","label":2}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s192056860","submission":"N = int(input())\na = list(map(int, input().split()))\na = sorted(a, reverse=True)\nalice = 0\nbob = 0\nfor i, el in enumerate(a):\n    if i % 2 == 0:\n        alice += el\n    else:\n        bob += el\nprint(alice - bob)","label":2}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s955689796","submission":"import math\nfrom functools import reduce\nfrom sys import setrecursionlimit\nsetrecursionlimit(10**6)\n\ndef gcd(*numbers):\n  return reduce(math.gcd, numbers)\n\nn,x = map(int,input().split())\nxl = list(map(int,input().split()))\nxl = list(map(lambda y: abs(y-x), xl))\n\nans = -1\nif len(xl) == 1:\n    ans = xl[0]\nelse:\n    ans = gcd(*xl)\n\nprint(ans)","label":2}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s902872149","submission":"N=int(input())\nA=list(map(int,input().split()))\nodd=0\nfor a in A:\n    if a%2==1:\n        odd+=1\nprint(\"YES\" if odd%2==0 else \"NO\")","label":2}
{"problem_id":"p02852","problem":"Takahashi is playing a board game called Sugoroku.\nOn the board, there are N + 1 squares numbered 0 to N. Takahashi starts at Square 0, and he has to stop exactly at Square N to win the game.\nThe game uses a roulette with the M numbers from 1 to M. In each turn, Takahashi spins the roulette. If the number x comes up when he is at Square s, he moves to Square s+x. If this makes him go beyond Square N, he loses the game.\nAdditionally, some of the squares are Game Over Squares. He also loses the game if he stops at one of those squares. You are given a string S of length N + 1, representing which squares are Game Over Squares. For each i (0 \\leq i \\leq N), Square i is a Game Over Square if S[i] = 1 and not if S[i] = 0.\nFind the sequence of numbers coming up in the roulette in which Takahashi can win the game in the fewest number of turns possible. If there are multiple such sequences, find the lexicographically smallest such sequence. If Takahashi cannot win the game, print -1.","submission_id":"s023629470","submission":"from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    n,m=map(int,readline().split())\n    s=readline().strip()\n\n    ans=[]\n    flag=False\n    i=n\n    while True:\n        max_i=i\n        for sa in range(1,m+1):\n            if i-sa==0:\n                ans.append(sa)\n                flag=True\n                break\n            else:\n                if s[i-sa]==\"0\":\n                    max_i=i-sa\n        if flag: break\n        else:\n            if max_i!=i:\n                ans.append(i-max_i)\n                i=max_i\n            else:\n                break\n\n    if flag:\n        ans.reverse()\n        print(*ans)\n    else:\n        print(-1)\n\nif __name__==\"__main__\":\n    main()","label":2}
{"problem_id":"p02389","problem":"Write a program which calculates the area and perimeter of a given rectangle.","submission_id":"s804492034","submission":"i = raw_input().strip().split()\n\na = int(i[0])\nb = int(i[1])\n\nprint a*b, (a+b)*2","label":2}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s239750676","submission":"n = int(input())\npoints = []\npoints.append([0, 0, 0])\ncan = True\nfor i in range(n):\n    points.append([i for i in map(int, input().split())])\n    move_n = points[i+1][0] - points[i][0]\n    dist = abs(points[i+1][1] - points[i][1]) + abs(points[i+1][2] - points[i][2])\n    if move_n < dist or dist % 2 != move_n % 2:\n        can = False \n        break\n# print(points)\n# can = True\n# for i in range(len(points)-1):\n#     move_n = points[i+1][0] - points[i][0]\n#     dist = abs(points[i+1][1] - points[i][1]) + abs(points[i+1][2] - points[i][2])\n#     if move_n < dist or dist % 2 != move_n % 2:\n#         can = False \n#         break\n\nif can:\n    print('Yes')\nelse:\n    print('No')","label":2}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s863553339","submission":"#!\/usr\/bin\/env python3\nfrom math import gcd\n\nn, m = map(int, input().split())\ns, t = input(), input()\ng = n * m \/\/ gcd(n, m)\nif all(s[i * g \/\/ m] == t[i * g \/\/ n] for i in range(gcd(n, m))):\n    print(g)\nelse:\n    print(-1)\n","label":2}
{"problem_id":"p03095","problem":"You are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.","submission_id":"s893428849","submission":"#!\/usr\/bin\/env python3\nfrom collections import*\nMOD = 10**9+7\ninput();i = 1\nfor c in Counter(input()).values():i *= c+1\nprint(~-i % MOD)","label":2}
{"problem_id":"p02844","problem":"AtCoder Inc. has decided to lock the door of its office with a 3-digit PIN code.\nThe company has an N-digit lucky number, S. Takahashi, the president, will erase N-3 digits from S and concatenate the remaining 3 digits without changing the order to set the PIN code.\nHow many different PIN codes can he set this way?\nBoth the lucky number and the PIN code may begin with a 0.","submission_id":"s123901226","submission":"from itertools import product\n\nn = int(input())\ns = input()\nans = 0\nfor a, b, c in product(map(str, range(10)), repeat=3):\n    ai = s.find(a)\n    bi = s.find(b, ai + 1)\n    ci = s.find(c, bi + 1)\n    if ai != -1 and bi != -1 and ci != -1:\n        ans += 1\nprint(ans)\n","label":2}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s918428180","submission":"n = int(input())\ns = str(input())\nc = 0\nfrom collections import deque\nres = deque([])\nfor i in range(n):\n    if s[i] =='(':\n        c += 1\n    else:\n        c -= 1\n    if c < 0:\n        res.appendleft('(')\n        c = 0\n    res.append(s[i])\nif c > 0:\n    res.append(')'*c)\nprint(''.join(list(res)))\n","label":2}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s353302893","submission":"N = int(input())\nx = list(map(int,input().split()))\n\nx = sorted(x,reverse = True)\n\nans = 0\nfor i in range(len(x)):\n  if i % 2 == 0:\n    ans += min(x[i],x[i+1])\n\nprint(ans)\n","label":2}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s201714294","submission":"from collections import deque\n\nK = int(input())\nqueue = deque([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\nlunlun = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n\nwhile len(queue) < 10 ** 5:\n    n_str = queue.popleft()\n    last_c = n_str[len(n_str) - 1]\n    if last_c == \"0\":\n        queue.append(n_str + \"0\")\n        queue.append(n_str + \"1\")\n\n        lunlun.append(n_str + \"0\")\n        lunlun.append(n_str + \"1\")\n    elif last_c == \"1\":\n        queue.append(n_str + \"0\")\n        queue.append(n_str + \"1\")\n        queue.append(n_str + \"2\")\n\n        lunlun.append(n_str + \"0\")\n        lunlun.append(n_str + \"1\")\n        lunlun.append(n_str + \"2\")\n    elif last_c == \"2\":\n        queue.append(n_str + \"1\")\n        queue.append(n_str + \"2\")\n        queue.append(n_str + \"3\")\n\n        lunlun.append(n_str + \"1\")\n        lunlun.append(n_str + \"2\")\n        lunlun.append(n_str + \"3\")\n    elif last_c == \"3\":\n        queue.append(n_str + \"2\")\n        queue.append(n_str + \"3\")\n        queue.append(n_str + \"4\")\n\n        lunlun.append(n_str + \"2\")\n        lunlun.append(n_str + \"3\")\n        lunlun.append(n_str + \"4\")\n    elif last_c == \"4\":\n        queue.append(n_str + \"3\")\n        queue.append(n_str + \"4\")\n        queue.append(n_str + \"5\")\n\n        lunlun.append(n_str + \"3\")\n        lunlun.append(n_str + \"4\")\n        lunlun.append(n_str + \"5\")\n    elif last_c == \"5\":\n        queue.append(n_str + \"4\")\n        queue.append(n_str + \"5\")\n        queue.append(n_str + \"6\")\n\n        lunlun.append(n_str + \"4\")\n        lunlun.append(n_str + \"5\")\n        lunlun.append(n_str + \"6\")\n    elif last_c == \"6\":\n        queue.append(n_str + \"5\")\n        queue.append(n_str + \"6\")\n        queue.append(n_str + \"7\")\n\n        lunlun.append(n_str + \"5\")\n        lunlun.append(n_str + \"6\")\n        lunlun.append(n_str + \"7\")\n    elif last_c == \"7\":\n        queue.append(n_str + \"6\")\n        queue.append(n_str + \"7\")\n        queue.append(n_str + \"8\")\n\n        lunlun.append(n_str + \"6\")\n        lunlun.append(n_str + \"7\")\n        lunlun.append(n_str + \"8\")\n    elif last_c == \"8\":\n        queue.append(n_str + \"7\")\n        queue.append(n_str + \"8\")\n        queue.append(n_str + \"9\")\n\n        lunlun.append(n_str + \"7\")\n        lunlun.append(n_str + \"8\")\n        lunlun.append(n_str + \"9\")\n    elif last_c == \"9\":\n        queue.append(n_str + \"8\")\n        queue.append(n_str + \"9\")\n\n        lunlun.append(n_str + \"8\")\n        lunlun.append(n_str + \"9\")\n\nprint(lunlun[K-1])\n","label":2}
{"problem_id":"p03487","problem":"You are given a sequence of positive integers of length N, a = (a_1, a_2, ..., a_N).\nYour objective is to remove some of the elements in a so that a will be a good sequence.\nHere, an sequence b is a good sequence when the following condition holds true:\n\nFor each element x in b, the value x occurs exactly x times in b.\n\nFor example, (3, 3, 3), (4, 2, 4, 1, 4, 2, 4) and () (an empty sequence) are good sequences, while (3, 3, 3, 3) and (2, 4, 1, 4, 2) are not.\nFind the minimum number of elements that needs to be removed so that a will be a good sequence.","submission_id":"s111907317","submission":"import bisect,copy,heapq,string\nfrom collections import *\nfrom math import *\nfrom itertools import *\nimport sys\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\nn = INT()\na = LIST()\nb = [0]*100010\nans = 0\n\nfor x in a:\n        if (x<=1e5):\n                b[x] += 1\n        else:\n                ans += 1\nfor i in range(100010):\n        if (b[i]>=i):\n                ans += b[i] - i\n        else:\n                ans += b[i]\n\nprint(ans)","label":2}
{"problem_id":"p03711","problem":"Based on some criterion, Snuke divided the integers from 1 through 12 into three groups as shown in the figure below.\nGiven two integers x and y (1 \u2264 x < y \u2264 12), determine whether they belong to the same group.","submission_id":"s148585282","submission":"a = [1,3,5,7,8,10,12]\nb = [4,6,9,11]\nc = [2]\nx, y = map(int, input().split())\nif a.count(x) == 1 and a.count(y) == 1:\n  print('Yes')\n  exit()\nelif b.count(x) == 1 and b.count(y) == 1:\n  print('Yes')\n  exit()\nelif c.count(x) == 1 and c.count(y) == 1:\n  print('Yes')\n  exit()\nelse:\n  print('No')\n","label":2}
{"problem_id":"p02988","problem":"We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.","submission_id":"s947154555","submission":"n = int(input())\np = list(map(int,input().split()))\ncount = 0\nfor i in range(1, n-1):\n    if p[i - 1] < p[i] < p[i + 1]:\n        count += 1\n    elif p[i] < p[i - 1] == p[i + 1]:\n        count += 1\n    elif p[i - 1] > p[i] > p[i + 1]:\n        count += 1\nprint(count)\n\n","label":2}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s511926812","submission":"n = int(input())\na = int(input())\nb = n % 500\nif a >= b:\n    print('Yes')\nelse:\n    print('No')","label":2}
{"problem_id":"p03250","problem":"You have decided to give an allowance to your child depending on the outcome of the game that he will play now.\nThe game is played as follows:\n\nThere are three \"integer panels\", each with a digit between 1 and 9 (inclusive) printed on it, and one \"operator panel\" with a + printed on it.\nThe player should construct a formula of the form X + Y, by arranging the four panels from left to right. (The operator panel should not be placed at either end of the formula.)\nThen, the amount of the allowance will be equal to the resulting value of the formula.\n\nGiven the values A, B and C printed on the integer panels used in the game, find the maximum possible amount of the allowance.","submission_id":"s521644600","submission":"a,b,c=map(int,input().split())\n\nl=[a,b,c]\n\nl.sort()\n\nprint(int(str(l[2])+str(l[1]))+l[0])","label":2}
{"problem_id":"p02831","problem":"Takahashi is organizing a party.\nAt the party, each guest will receive one or more snack pieces.\nTakahashi predicts that the number of guests at this party will be A or B.\nFind the minimum number of pieces that can be evenly distributed to the guests in both of the cases predicted.\nWe assume that a piece cannot be divided and distributed to multiple guests.","submission_id":"s179647262","submission":"def solve():\n    from math import gcd\n    n, k = map(int, input().split())\n    print(n * k \/\/ gcd(n, k))\n\n\nsolve()\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s863479366","submission":"\ndef resolve():\n    S = input()\n    ans = S + \"es\" if S[-1] == \"s\" else S + \"s\"\n    \n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()","label":2}
{"problem_id":"p03545","problem":"Sitting in a station waiting room, Joisino is gazing at her train ticket.\nThe ticket is numbered with four digits A, B, C and D in this order, each between 0 and 9 (inclusive).\nIn the formula A op1 B op2 C op3 D = 7, replace each of the symbols op1, op2 and op3 with + or - so that the formula holds.\nThe given input guarantees that there is a solution. If there are multiple solutions, any of them will be accepted.","submission_id":"s073657627","submission":"n = input()\nl = len(n) - 1\n\nfor i in range(2 ** l):\n    ans: int = int(n[0])\n    num = n[0]\n    for j in range(l):\n        if (i >> j) & 1:\n            num += \"+\"\n            num += n[j + 1]\n        else:\n            num += \"-\"\n            num += n[j + 1]\n    for k in range(1, len(num), 2):\n        if num[k] == \"-\":\n            ans -= int(num[k+1])\n        else:\n            ans += int(num[k+1])\n    if ans == 7:\n        print(num + \"=7\")\n        break\n","label":2}
{"problem_id":"p03861","problem":"You are given nonnegative integers a and b (a \u2264 b), and a positive integer x.\nAmong the integers between a and b, inclusive, how many are divisible by x?","submission_id":"s756388270","submission":"import sys\ndef input(): return sys.stdin.readline().strip()\n\ndef resolve():\n    a,b,x=map(int, input().split())\n    amade=(a-1)\/\/x\n    bmade=b\/\/x\n    print(bmade-amade)\nresolve()","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s090668439","submission":"n = input().split('\/')\nprint('2018\/' + n[1] +'\/'+n[2])\n","label":2}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s517054406","submission":"n = int(input())\nl = [int(i) for i in input().split()]\nl.sort()\nprint(sum([l[i] for i in range(len(l)) if i%2 == 0]))\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s963242615","submission":"def i_input(): return input()\n\n\ns = i_input()\nif s[-1] == 's':\n    s = s + 'es'\nelse:\n    s = s + 's'\n\nprint(s)\n","label":2}
{"problem_id":"p03284","problem":"Takahashi has decided to distribute N AtCoder Crackers to K users of as evenly as possible.\nWhen all the crackers are distributed, find the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.","submission_id":"s701895979","submission":"n, k = map(int, input().split())\nif n%k != 0:\n  print((n\/\/k)+1 - (n\/\/k))\nelse:\n  print(0)","label":2}
{"problem_id":"p02641","problem":"Given are an integer X and an integer sequence of length N: p_1, \\ldots, p_N.\nAmong the integers not contained in the sequence p_1, \\ldots, p_N (not necessarily positive), find the integer nearest to X, that is, find the integer whose absolute difference with X is the minimum. If there are multiple such integers, report the smallest such integer.","submission_id":"s477709328","submission":"x, n = map(int, input().split())\nif n > 0:\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if not (x - i) in l:\n            ans = x - i\n            break\n        elif not x + i in l:\n            ans = x + i\n            break\n    print(ans)\nelse:\n    print(x)","label":2}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s339358756","submission":"N = input()\n\nflag = False\nfor i in range(len(N)):\n  if N[i] ==\"7\":\n    flag =True\nif flag:\n  print (\"Yes\")\nelse :\n  print (\"No\")","label":2}
{"problem_id":"p03141","problem":"There are N dishes of cuisine placed in front of Takahashi and Aoki.\nFor convenience, we call these dishes Dish 1, Dish 2, ..., Dish N.\nWhen Takahashi eats Dish i, he earns A_i points of happiness; when Aoki eats Dish i, she earns B_i points of happiness.\nStarting from Takahashi, they alternately choose one dish and eat it, until there is no more dish to eat.\nHere, both of them choose dishes so that the following value is maximized: \"the sum of the happiness he\/she will earn in the end\" minus \"the sum of the happiness the other person will earn in the end\".\nFind the value: \"the sum of the happiness Takahashi earns in the end\" minus \"the sum of the happiness Aoki earns in the end\".","submission_id":"s916028474","submission":"import sys\ninput = sys.stdin.buffer.readline\n\ndef main():\n    N = int(input())\n    food = []\n    sc = 0\n    for _ in range(N):\n        a,b = map(int,input().split())\n        sc -= b\n        food.append(a+b)\n    \n    food.sort(reverse= True)\n    tf = sum(food[::2])\n    print(tf+sc)\n\nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s329984182","submission":"import numpy as np\n \nN=int(input())\nA=np.array(list(map(int,input().split())))\n \nodd=np.count_nonzero(A%2!=0)\nfour=np.count_nonzero(A%4==0)\nans='No'\n\nif odd==1 and four>=1:\n  ans='Yes'\nelif odd==2 and four>=2:\n  ans='Yes'\nelse:\n  if odd+four==N and odd-1<=four:\n    ans='Yes'\n  elif odd<=four:\n    ans='Yes'\nprint(ans)","label":2}
{"problem_id":"p03148","problem":"There are N pieces of sushi. Each piece has two parameters: \"kind of topping\" t_i and \"deliciousness\" d_i.\nYou are choosing K among these N pieces to eat.\nYour \"satisfaction\" here will be calculated as follows:\n\nThe satisfaction is the sum of the \"base total deliciousness\" and the \"variety bonus\".\nThe base total deliciousness is the sum of the deliciousness of the pieces you eat.\nThe variety bonus is x*x, where x is the number of different kinds of toppings of the pieces you eat.\n\nYou want to have as much satisfaction as possible.\nFind this maximum satisfaction.","submission_id":"s566686234","submission":"from collections import defaultdict\n\nN, K = map(int, input().split())\nTD = [tuple(map(int, input().split())) for _ in range(N)]\nTD.sort(key=lambda A: A[1], reverse=True)\n\nA = TD[:K][:: -1]\ncnt = defaultdict(int)\nV = set()\ndSum = 0\nfor t, d in A:\n    dSum += d\n    cnt[t] += 1\n    V.add(t)\n\ni = 0\nans = dSum + len(V)**2\nfor t, d in TD[K:]:\n    if not t in V:\n        while i < K and cnt[A[i][0]] <= 1:\n            i += 1\n        if i == K:\n            break\n\n        dSum = dSum - A[i][1] + d\n        V.add(t)\n        cnt[A[i][0]] -= 1\n        i += 1\n        ans = max(ans, dSum + len(V)**2)\n\nprint(ans)\n","label":2}
{"problem_id":"p03062","problem":"There are N integers, A_1, A_2, ..., A_N, arranged in a row in this order.\nYou can perform the following operation on this integer sequence any number of times:\nOperation: Choose an integer i satisfying 1 \\leq i \\leq N-1. Multiply both A_i and A_{i+1} by -1.\nLet B_1, B_2, ..., B_N be the integer sequence after your operations.\nFind the maximum possible value of B_1 + B_2 + ... + B_N.","submission_id":"s029362571","submission":"N = int(input())\nA = list(map(int,input().split()))\n\nminus_cnt = 0\nabs_sum = 0\nmin_abs_val = 1000000000\nfor i in range(N):\n    abs_val = abs(A[i])\n    abs_sum = abs_sum + abs_val\n    if abs_val < min_abs_val:\n        min_abs_val = abs_val\n    if A[i] < 0:\n        minus_cnt = minus_cnt + 1\n\nB_max_sum = 0\nif (minus_cnt % 2 == 0) or (min_abs_val == 0):\n    B_max_sum = abs_sum\nelse:\n    B_max_sum = abs_sum - min_abs_val * 2\n\nprint(B_max_sum)\n","label":2}
{"problem_id":"p03345","problem":"Takahashi, Nakahashi and Hikuhashi have integers A, B and C, respectively.\nAfter repeating the following operation K times, find the integer Takahashi will get minus the integer Nakahashi will get:\n\nEach of them simultaneously calculate the sum of the integers that the other two people have, then replace his own integer with the result.\n\nHowever, if the absolute value of the answer exceeds 10^{18}, print Unfair instead.","submission_id":"s598562984","submission":"A, B, C, K = map(int, input().split())\n\nif K % 2 == 1:\n    print(B-A)\nelif K % 2 == 0:\n    print(A-B)\nelse:\n    print('Unfair')","label":2}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s618801991","submission":"# \u89e3\u7b54\n\nN, K = map(int, input().split())\nP = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nfor i in range(N):\n  P[i] -= 1  \n\nvisit = [False for _ in range(N)]\nloops = []\n\nfor i in range(N):\n  if visit[i]:\n    continue\n  now = i\n  loop = [C[now]]\n  visit[now] = True\n  while not visit[P[now]]:\n    now = P[now]\n    loop.append(C[now])\n    visit[now] = True\n  loops.append(loop)\n\nans = -float(\"inf\")\nfor loop in loops:\n  n = len(loop)\n  r = K%n\n  m = K\/\/n\n  if r==0:\n    r = n\n    m -= 1\n  suml = sum(loop)\n  if K > n and suml <= 0:\n    r = n\n    m = 0\n  cumsum = [0] + loop + loop[:r-1]\n  for i in range(n+r-1):\n    cumsum[i+1] = cumsum[i] + cumsum[i+1]\n  maxC = -float(\"inf\")\n  for i in range(n):\n    for j in range(i+1, i+r+1):\n      maxC = max(maxC, cumsum[j]-cumsum[i])\n  ans = max(ans, maxC + suml*m)\nprint(ans)","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s733623091","submission":"S = input()\nif S[len(S)-1] == 's':\n    answer = S + 'es'\nelse:\n    answer = S + 's'\nprint(answer)\n","label":2}
{"problem_id":"p03576","problem":"We have N points in a two-dimensional plane.\nThe coordinates of the i-th point (1 \\leq i \\leq N) are (x_i,y_i).\nLet us consider a rectangle whose sides are parallel to the coordinate axes that contains K or more of the N points in its interior.\nHere, points on the sides of the rectangle are considered to be in the interior.\nFind the minimum possible area of such a rectangle.","submission_id":"s523520804","submission":"from itertools import accumulate\ndef compress(arr):\n    *XS, = set(arr)\n    XS.sort()\n    return {e: i for i, e in enumerate(XS)}\nn, k = map(int, input().split())\nXY = [list(map(int, input().split())) for _ in range(n)]\nX, Y = zip(*XY)\ncomp_X = compress(X)\ncomp_Y = compress(Y)\nlen_X = len(comp_X)\nlen_Y = len(comp_Y)\nrev_X = {j:i for i, j in comp_X.items()}\nrev_Y = {j:i for i, j in comp_Y.items()}\nC = [[0]*(len_Y+1) for _ in range(len_X+1)]\nfor x, y in XY:\n  C[comp_X[x]+1][comp_Y[y]+1] = 1\nfor i in range(1, len_X+1):\n  C[i] = list(accumulate(C[i]))\nC = list(zip(*C))\nfor j in range(1, len_Y+1):\n  C[j] = list(accumulate(C[j]))\nC = list(zip(*C))\ndef test(x1, x2, y1, y2):\n  cnt = C[x2][y2] - C[x1][y2] - C[x2][y1] + C[x1][y1]\n  if cnt >= k:\n    temp = (rev_X[x2-1] - rev_X[x1]) * (rev_Y[y2-1] - rev_Y[y1])\n    return temp\n  return float(\"inf\")\nans = float(\"inf\")\nfor x1 in range(len_X):\n  for x2 in range(x1+1, len_X+1):\n    for y1 in range(len_Y):\n      for y2 in range(y1+1, len_Y+1):\n        ans = min(ans, test(x1, x2, y1, y2))\nprint(ans)","label":2}
{"problem_id":"p04019","problem":"Snuke lives on an infinite two-dimensional plane. He is going on an N-day trip.\nAt the beginning of Day 1, he is at home. His plan is described in a string S of length N.\nOn Day i(1 \u2266 i \u2266 N), he will travel a positive distance in the following direction:\n\nNorth if the i-th letter of S is N\nWest if the i-th letter of S is W\nSouth if the i-th letter of S is S\nEast if the i-th letter of S is E\n\nHe has not decided each day's travel distance. Determine whether it is possible to set each day's travel distance so that he will be back at home at the end of Day N.","submission_id":"s767553340","submission":"import collections\ns = list(input())\nans = \"Yes\"\nc = collections.Counter(s)\n\nif c[\"N\"] * c[\"S\"] == 0:\n    if c[\"N\"] != c[\"S\"]:\n        ans = \"No\"\nif c[\"W\"] * c[\"E\"] == 0:\n    if c[\"W\"] != c[\"E\"]:\n        ans = \"No\"\n\nprint(ans)","label":2}
{"problem_id":"p02664","problem":"For a string S consisting of the uppercase English letters P and D, let the doctoral and postdoctoral quotient of S be the total number of occurrences of D and PD in S as contiguous substrings. For example, if S = PPDDP, it contains two occurrences of D and one occurrence of PD as contiguous substrings, so the doctoral and postdoctoral quotient of S is 3.\nWe have a string T consisting of P, D, and ?.\nAmong the strings that can be obtained by replacing each ? in T with P or D, find one with the maximum possible doctoral and postdoctoral quotient.","submission_id":"s335698688","submission":"\nfrom collections import Counter \nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import reduce\nimport math\nimport itertools\nimport heapq\nimport numpy as np\nimport bisect\nimport sys\nsys.setrecursionlimit(10**6)\n\n\ndef bfs(s,n,node):\n    #\u9802\u70b9\u304c\u63a2\u7d22\u6e08\u307f\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u914d\u5217\n    check=[False for _ in range(n)]\n    check[s]=True\n    #\u6b21\u898b\u308b\u9802\u70b9\u3092\u683c\u7d0d\u3059\u308b\u30ad\u30e5\u30fc\n    queue=deque([s])\n    visited_num=1\n\n    #\u554f\u984c\u56fa\u6709\u306e\u914d\u5217\n    #color_check=[[True for _ in range(l)] for _ in range(n)]\n    color=[-1 for _ in range(n)]\n    color[s]=0\n    \n    while visited_num<n:\n        #\u30b0\u30e9\u30d5\u304c\u5168\u9023\u7d50\u3067\u306f\u306a\u3044\u5834\u5408\n        if len(queue)==0:\n            #\u7a7a\u914d\u5217\u3092\u8fd4\u3059\n            #\u73fe\u72b6\u307e\u3067\u306e\u8a08\u7b97\u6e08\u307f\u914d\u5217\u3092\u8fd4\u3057\u3066\u3082\u3044\u3044\u3068\u601d\u3046\n            return color\n\n        now_vertex=queue.popleft()\n        #\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u306a\u3044\u5834\u5408\u306f\n        for next_vertex in node[now_vertex]:\n\n\n            if check[next_vertex]==True:\n                continue\n\n            queue.append(next_vertex)\n            check[next_vertex]=True\n\n            #\u554f\u984c\u56fa\u6709\u306e\u8a08\u7b97\n            color[next_vertex]=color[now_vertex]+1\n            visited_num+=1\n\n    return color\n\n#n=int(input())z\n#n,m=list(map(int,input().split()))\n#a=list(map(int,input().split()))\nceil=lambda x,y: (x+y-1)\/\/y\ninput_list = lambda : list(map(int,input().split()))\n\n\n\n#n=int(input())\n#n,m=input_list()\n#a=input_list()\n\ns=input()\nans=0\ns=[i if i!=\"?\" else \"D\" for i in s]\nprint(\"\".join(s))","label":2}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s574118395","submission":"import sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LS2(): return list(sys.stdin.readline().rstrip())  #\u7a7a\u767d\u306a\u3057\n\nN = I()\nS = LS2()\n\na,b = 0,0\nleft = []\nfor i in range(N):\n    if S[i] == '(':\n        a += 1\n    else:\n        b += 1\n    if a < b:\n        a,b = 0,0\n        left.append('(')\n\nANS = left + S + [')']*(a-b)\n\nprint(''.join(ANS))","label":2}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s086531446","submission":"K = int(input())\nL = [i for i in range(1, 10)]\ncnt = 9\ni = 0\n\nwhile K > cnt:\n  x = L[i]\n  r = x % 10\n  if r != 0:\n    L.append(10*x + r - 1)\n    cnt += 1\n  L.append(10*x + r)\n  cnt += 1\n  if r != 9:\n    L.append(10*x + r + 1)\n    cnt += 1\n  i += 1\n\nprint(L[K-1])","label":2}
{"problem_id":"p03161","problem":"There are N stones, numbered 1, 2, \\ldots, N.\nFor each i (1 \\leq i \\leq N), the height of Stone i is h_i.\nThere is a frog who is initially on Stone 1.\nHe will repeat the following action some number of times to reach Stone N:\n\nIf the frog is currently on Stone i, jump to one of the following: Stone i + 1, i + 2, \\ldots, i + K. Here, a cost of |h_i - h_j| is incurred, where j is the stone to land on.\n\nFind the minimum possible total cost incurred before the frog reaches Stone N.","submission_id":"s289331403","submission":"def resolve():\n    import sys\n    import numpy as np\n\n    read = sys.stdin.read\n    readline = sys.stdin.readline\n\n    N, K = map(int, readline().split())\n    h = np.array(read().split(), np.int32)\n\n    # \u8cb0\u3046DP\n    inf = 10 ** 9\n    dp = np.full(N, inf, np.int64)\n    dp[0] = 0\n\n\n    for i, e in enumerate(h[1:], 1):\n        lb = max(0, i - K)\n        dp[i] = np.min(dp[lb:i] + np.abs(h[lb:i] - e))\n\n    print(dp[-1])\n\n    \nresolve()\n","label":2}
{"problem_id":"p02785","problem":"Fennec is fighting with N monsters.\nThe health of the i-th monster is H_i.\nFennec can do the following two actions:\n\nAttack: Fennec chooses one monster. That monster's health will decrease by 1.\nSpecial Move: Fennec chooses one monster. That monster's health will become 0.\n\nThere is no way other than Attack and Special Move to decrease the monsters' health.\nFennec wins when all the monsters' healths become 0 or below.\nFind the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning when she can use Special Move at most K times.","submission_id":"s898649742","submission":"n, k = [int(i) for i in input().split()]\na = sorted([int(i) for i in input().split()])\nif k <= 0:\n  print(sum(a))\nelse:\n  print(sum(a[:-k]))","label":2}
{"problem_id":"p02841","problem":"In this problem, a date is written as Y-M-D. For example, 2019-11-30 means November 30, 2019.\nIntegers M_1, D_1, M_2, and D_2 will be given as input.\nIt is known that the date 2019-M_2-D_2 follows 2019-M_1-D_1.\nDetermine whether the date 2019-M_1-D_1 is the last day of a month.","submission_id":"s443966890","submission":"m1, d1 = map(int, input().split())\nm2, d2 = map(int, input().split())\nif m1 == m2:\n    print('0')\nelse:print('1')","label":2}
{"problem_id":"p03362","problem":"Print a sequence a_1, a_2, ..., a_N whose length is N that satisfies the following conditions:\n\na_i (1 \\leq i \\leq N) is a prime number at most 55 555.\nThe values of a_1, a_2, ..., a_N are all different.\nIn every choice of five different integers from a_1, a_2, ..., a_N, the sum of those integers is a composite number.\n\nIf there are multiple such sequences, printing any of them is accepted.","submission_id":"s823435645","submission":"#096_D\nn = int(input())\nprime_5 = []\nfor i in range(2, 55556):\n    flg = (i % 5 == 1)\n    if flg:\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                flg = False\n                break\n    if flg:\n        prime_5.append(i)\nprint(*prime_5[:n])","label":2}
{"problem_id":"p02994","problem":"You have N apples, called Apple 1, Apple 2, Apple 3, ..., Apple N. The flavor of Apple i is L+i-1, which can be negative.\nYou can make an apple pie using one or more of the apples. The flavor of the apple pie will be the sum of the flavors of the apples used.\nYou planned to make an apple pie using all of the apples, but being hungry tempts you to eat one of them, which can no longer be used to make the apple pie.\nYou want to make an apple pie that is as similar as possible to the one that you planned to make. Thus, you will choose the apple to eat so that the flavor of the apple pie made of the remaining N-1 apples will have the smallest possible absolute difference from the flavor of the apple pie made of all the N apples.\nFind the flavor of the apple pie made of the remaining N-1 apples when you choose the apple to eat as above.\nWe can prove that this value is uniquely determined.","submission_id":"s944401444","submission":"n,l = map(int,input().split())\n\nD=[]\nfor i in range(n):\n    d = l+i\n    D.append(d)\n\nif l+1>0 :\n    mind = min(D)\nelif l+n<=0:\n    mind = max(D)\nelse:\n    mind = 0\n\n\nans = sum(D)-mind\nprint(ans)\n\n","label":2}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s637596659","submission":"N,K=map(int,input().split())\nP=list(map(int,input().split()))\nC=list(map(int,input().split()))\nA=[]\nS=[]\np=2**N-1\nfor i in range(N):\n  if p>>i&1:\n    s=i+1\n    tmp=[C[i]]\n    while s!=P[i]:\n      i=P[i]-1\n      tmp.append(C[i])\n      p^=1<<i\n    A.append(tmp)\n    S.append(sum(tmp))\nans=-1*(10**9)-1\nfor i in range(len(A)):\n  a=A[i]\n  n=len(a)\n  s=S[i]\n  for j in range(n):\n    t=0\n    k=n\n    if K>n:\n      if s > 0:\n        k=K%n\n        if k==0:\n          k=n\n          t=s*(K\/\/n-1)\n        else:\n          k=K%n\n          t=s*(K\/\/n)\n    else:\n      k=K\n    for jj in range(j,k+j):\n      if jj>=n:\n        jj-=n\n      t+=a[jj]\n      ans=max(ans,t)\n    ans=max(ans,t)\nprint(ans)","label":2}
{"problem_id":"p02947","problem":"We will call a string obtained by arranging the characters contained in a string a in some order, an anagram of a.\nFor example, greenbin is an anagram of beginner. As seen here, when the same character occurs multiple times, that character must be used that number of times.\nGiven are N strings s_1, s_2, \\ldots, s_N. Each of these strings has a length of 10 and consists of lowercase English characters. Additionally, all of these strings are distinct. Find the number of pairs of integers i, j (1 \\leq i < j \\leq N) such that s_i is an anagram of s_j.","submission_id":"s177543599","submission":"from collections import Counter \nN = int(input())\ns = [input() for _ in range(N)]\n \n# N=10^5\u3088\u308a\u3001O(N)\u3067\u89e3\u304f\nfor i in range(N):\n  s[i] = sorted(s[i])\n  s[i] = ''.join(s[i])\n\ns = Counter(s).most_common()\nans = 0\nfor t in s:\n  ans += t[1]*(t[1]-1)\/\/2\n  \nprint(ans)","label":2}
{"problem_id":"p02802","problem":"Takahashi participated in a contest on AtCoder.\nThe contest had N problems.\nTakahashi made M submissions during the contest.\nThe i-th submission was made for the p_i-th problem and received the verdict S_i (AC or WA).\nThe number of Takahashi's correct answers is the number of problems on which he received an AC once or more.\nThe number of Takahashi's penalties is the sum of the following count for the problems on which he received an AC once or more: the number of WAs received before receiving an AC for the first time on that problem.\nFind the numbers of Takahashi's correct answers and penalties.","submission_id":"s788562968","submission":"import numpy as np\nN,M=map(int,input().split())\nflag=[False]*(N+1)\nac=0\nwa=[0]*(N+1)\nfor _ in range(M):\n    p,s=input().split()\n    p=int(p)\n    if flag[p]==False:\n        if s=='AC':\n            flag[p]=True\n        else:\n            wa[p]+=1\nprint(sum(np.array(flag)),sum(np.array(wa)*np.array(flag)))","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s342597597","submission":"import math\nn = int(input())\nans = 0\nfor i in range(1,math.ceil(math.sqrt(n))):\n    if n % i == 0:\n        div = (n - i) \/\/ i\n        if div > i:\n            ans += div\nprint(ans)\n","label":2}
{"problem_id":"p02261","problem":"Let's arrange a deck of cards. There are totally 36 cards of 4 suits(S, H, C, D) and 9 values (1, 2, ... 9). For example, 'eight of heart' is represented by H8 and 'one of diamonds' is represented by D1.","submission_id":"s087191675","submission":"#http:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=ALDS1_2_C&lang=jp\n#??????????????????\n#??????????????????????\u00b0???????????????\u00a3?????\u00b4???????????\u00b4?????\u00a8??\\?????????????????????????????????????????\u00b4????????????\n#??????????????????????????????????\u00b0????????????????????????\u00b4???????????????????????????????????????????????\u00a8??????\n\ndef bubble_sort(origin_list):\n    list_length = len(origin_list)\n    target_list = [i for i in origin_list]#??\u00b0????????????????????????\n    flag = True\n    change_count = 0\n    top_index = 1\n    while flag:\n        flag = False\n        for i in range(top_index, list_length)[::-1]:\n            if target_list[i][1] < target_list[i - 1][1]:\n                tmp = target_list[i]\n                target_list[i] = target_list[i - 1]\n                target_list[i - 1] = tmp\n                change_count += 1\n                flag = True\n        top_index += 1       \n    return target_list\n\ndef selection_sort(origin_list):\n    list_length = len(origin_list)\n    target_list = [i for i in origin_list]#??\u00b0????????????????????????\n    change_count = 0\n    for i in range(list_length):\n        min_index = i\n        for j in range(i, list_length):\n            if target_list[j][1] < target_list[min_index][1]:\n                min_index = j\n        else:\n            if not i == min_index:\n                tmp = target_list[i]\n                target_list[i] = target_list[min_index]\n                target_list[min_index] = tmp\n                change_count += 1\n    return target_list\n\ndef check_stable(origin_list, target_list):\n    for i, origin_v in enumerate(origin_list):\n        for origin_v2 in origin_list[i+1:]:\n            if origin_v[1] == origin_v2[1]:\n                for j, target_v in enumerate(target_list):\n                    for target_v2 in target_list[j+1:]:\n                        if origin_v == target_v2 and origin_v2 == target_v:\n                            return \"Not stable\"\n    return \"Stable\"\n\ndef stable_sort(target_list):\n    print(*bubble_sort(target_list))\n    print(check_stable(target_list, bubble_sort(target_list)))\n    print(*selection_sort(target_list))\n    print(check_stable(target_list, selection_sort(target_list)))\n    \ndef main():\n    n_list = int(input())\n    target_list = [a for a in input().split()]\n    stable_sort(target_list)\n    \nif __name__ == \"__main__\":\n    main()","label":2}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s257417194","submission":"n = input()\n\nfor i in range(len(n)):\n    if n[i] == '7':\n        print('Yes')\n        exit()\n\nprint('No')\n","label":2}
{"problem_id":"p03127","problem":"There are N monsters, numbered 1, 2, ..., N.\nInitially, the health of Monster i is A_i.\nBelow, a monster with at least 1 health is called alive.\nUntil there is only one alive monster, the following is repeated:\n\nA random alive monster attacks another random alive monster.\nAs a result, the health of the monster attacked is reduced by the amount equal to the current health of the monster attacking.\n\nFind the minimum possible final health of the last monster alive.","submission_id":"s735272524","submission":"from math import *\nn=int(input())\nl=list(map(int,input().split()))\ng=l[0]\nfor i in range(1,n):\n    g=gcd(g,l[i])\nprint(g)","label":2}
{"problem_id":"p02993","problem":"The door of Snuke's laboratory is locked with a security code.\nThe security code is a 4-digit number. We say the security code is hard to enter when it contains two consecutive digits that are the same.\nYou are given the current security code S. If S is hard to enter, print Bad; otherwise, print Good.","submission_id":"s094686317","submission":"s = input()\nif s[0] == s[1] or s[1] == s[2] or s[2] == s[3]:\n    print('Bad')\nelse:\n    print('Good')\n","label":2}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s720972309","submission":"n,m=map(int,input().split())\nif n>=13:\n  print(m)\nelif n>=6:\n  print(m\/\/2)\nelse:\n  print(0)","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s855226471","submission":"import sys\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    s = input()\n    print(\"2018\" + s[4:])\n\n\nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p03861","problem":"You are given nonnegative integers a and b (a \u2264 b), and a positive integer x.\nAmong the integers between a and b, inclusive, how many are divisible by x?","submission_id":"s601682539","submission":"#!\/usr\/bin\/env python3\na, b, x = map(int, input().split())\nprint(b\/\/x - (a-1)\/\/x)\n","label":2}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s217565572","submission":"N = int(input())\nT = [[0, 0]]\nfor _ in range(N):\n    t, x, y = map(int, input().split())\n    T.append((t, x + y))\n\nfor i in range(N):\n    dt = T[i+1][0] - T[i][0]\n    dxy = abs(T[i+1][1] - T[i][1])\n\n    if dt < dxy or dt % 2 != dxy % 2:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s735815019","submission":"n = input()\n\nif n[len(n) - 1] == 's':\n    print(n + 'es')\nelse:\n    print(n + 's')","label":2}
{"problem_id":"p03112","problem":"Along a road running in an east-west direction, there are A shrines and B temples.\nThe i-th shrine from the west is located at a distance of s_i meters from the west end of the road, and the i-th temple from the west is located at a distance of t_i meters from the west end of the road.\nAnswer the following Q queries:\n\nQuery i (1 \\leq i \\leq Q): If we start from a point at a distance of x_i meters from the west end of the road and freely travel along the road, what is the minimum distance that needs to be traveled in order to visit one shrine and one temple? (It is allowed to pass by more shrines and temples than required.)","submission_id":"s981895170","submission":"import sys\ndef input(): return sys.stdin.readline().strip()\ndef mapint(): return map(int, input().split())\nsys.setrecursionlimit(10**9)\n\nA, B, Q = mapint()\nSs = [-10**18]+[int(input()) for _ in range(A)]+[10**18]\nTs = [-10**18]+[int(input()) for _ in range(B)]+[10**18]\nfrom bisect import bisect_left\n\nfor q in range(Q):\n    x = int(input())\n    ls = Ss[bisect_left(Ss, x)-1]\n    lt = Ts[bisect_left(Ts, x)-1]\n    rs = Ss[bisect_left(Ss, x)]\n    rt = Ts[bisect_left(Ts, x)]\n    print(min((rs-lt)+min(rs-x, x-lt), (rt-ls)+min(rt-x, x-ls), max(x-ls, x-lt), max(rs-x, rt-x)))","label":2}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s520105719","submission":"a, b = map(int, input().split())\nans = \"No\"\nif a == b:\n  ans = \"Yes\"\nprint(ans)\n\n","label":2}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s435333376","submission":"K = int(input())\n\nC = [[0]*10 for _ in range(10)]\nC[0] = [1]*10\nD = {0: [0, 1], 1: [0, 1, 2], 2: [1, 2, 3], 3: [2, 3, 4], 4: [3, 4, 5], 5: [4, 5, 6], 6: [5, 6, 7], 7: [6, 7, 8], 8: [7, 8, 9], 9: [8, 9]}\n\nfor i in range(1, 10):\n  for j in range(10):\n    if j == 0:\n      C[i][j] = C[i-1][j] + C[i-1][j+1]\n    elif j == 9:\n      C[i][j] = C[i-1][j-1] + C[i-1][j]\n    else:\n      C[i][j] = C[i-1][j-1] + C[i-1][j] + C[i-1][j+1]\n\nans = []\ntemp = K\nFlag = True\n\nfor i in range(10):\n  if Flag:\n    for j in range(1, 10):\n      temp -= C[i][j]\n      if temp <= 0:\n        temp += C[i][j]\n        r = i\n        ans.append(j)\n        Flag = False\n        break\n  else:\n    break\n\ndef f(x, r):\n  temp = x\n  r -= 1\n  for j in D[ans[-1]]:\n    temp -= C[r][j]\n    if temp <= 0:\n      temp += C[r][j]\n      ans.append(j)\n      break\n  return temp, r\n\nwhile r >= 1:\n  temp, r = f(temp, r)\n\nprint(\"\".join([str(i) for i in ans]))","label":2}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s409795563","submission":"s = list(input())\n\ndays = 0\nif s[1] == \"R\":\n  days += 1\n  if s[0] == \"R\":\n    days += 1\n  if s[2] == \"R\":\n    days += 1\n    \nelse:\n  if s[0] == \"R\" or s[2] == \"R\":\n    days = 1\n    \nprint(days)","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s583213019","submission":"import sys\nreadline = sys.stdin.buffer.readline\ndef even(n): return 1 if n%2==0 else 0\n\nn = int(readline())\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n\/\/i)\n    return divisors\n\ndiv = make_divisors(n)\nans = 0\nfor i in div:\n    res = n\/\/i-1\n    if res <= 0:continue\n    if n%res==i:\n        ans += res\n\nprint(ans)","label":2}
{"problem_id":"p02690","problem":"Give a pair of integers (A, B) such that A^5-B^5 = X.\nIt is guaranteed that there exists such a pair for the given integer X.","submission_id":"s034764050","submission":"X=int(input())\na=True\nwhile a==True:\n    for i in range(-1000,1001):\n        for j in range(i,1001):\n            if j**5-i**5==X:\n                print(j,i)\n                exit()\n","label":2}
{"problem_id":"p02885","problem":"The window of Takahashi's room has a width of A. There are two curtains hung over the window, each of which has a horizontal length of B. (Vertically, the curtains are long enough to cover the whole window.)\nWe will close the window so as to minimize the total horizontal length of the uncovered part of the window.\nFind the total horizontal length of the uncovered parts of the window then.","submission_id":"s762003106","submission":"def main():\n a,b = map(int,input().split())\n if a <= b * 2:\n     print(0)\n else:\n     print(a - 2 * b)\nmain()","label":2}
{"problem_id":"p03101","problem":"There are H rows and W columns of white square cells.\nYou will choose h of the rows and w of the columns, and paint all of the cells contained in those rows or columns.\nHow many white cells will remain?\nIt can be proved that this count does not depend on what rows and columns are chosen.","submission_id":"s347347406","submission":"h1,w1=map(int,input().split())\nh2,w2=map(int,input().split())\n\nprint(h1*w1-(w1*h2+h1*w2-h2*w2))\n\n","label":2}
{"problem_id":"p02899","problem":"Takahashi is a teacher responsible for a class of N students.\nThe students are given distinct student numbers from 1 to N.\nToday, all the students entered the classroom at different times.\nAccording to Takahashi's record, there were A_i students in the classroom when student number i entered the classroom (including student number i).\nFrom these records, reconstruct the order in which the students entered the classroom.","submission_id":"s631029164","submission":"N=int(input())\nList = list(map(int, input().split()))\nresList = [0]*N\nfor i in range(N):\n  resList[List[i]-1] = i+1\nprint(*resList)","label":2}
{"problem_id":"p03631","problem":"You are given a three-digit positive integer N.\nDetermine whether N is a palindromic number.\nHere, a palindromic number is an integer that reads the same backward as forward in decimal notation.","submission_id":"s727059203","submission":"#!\/usr\/bin\/env python3\n# encoding:utf-8\nimport copy\nimport random\nimport bisect #bisect_left\u3000\u3053\u308c\u3067\u4e8c\u90e8\u63a2\u7d22\u306e\u5927\u5c0f\u691c\u7d22\u304c\u884c\u3048\u308b\nimport fractions #\u6700\u5c0f\u516c\u500d\u6570\u306a\u3069\u306f\u3053\u3063\u3061\nimport math\nimport sys\nimport collections\nfrom decimal import Decimal # 10\u9032\u6570\u3067\u8003\u616e\u3067\u304d\u308b\n\nmod = 10**9+7\nsys.setrecursionlimit(mod) # \u518d\u5e30\u56de\u6570\u4e0a\u9650\u306f\u3067default1000\n\nd = collections.deque()\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\n\n\nN = str(input())\nif N[0] == N[2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":2}
{"problem_id":"p02400","problem":"Write a program which calculates the area and circumference of a circle for given radius r.","submission_id":"s625921761","submission":"import math\n\nr = float(input())\n\nprint(f'{math.pi * r ** 2} {2 * math.pi * r}')\n","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s119341563","submission":"N = int(input())\na = list(map(int, input().split()))\nmax_a = max(a)\nif max_a == 0:\n    print('Yes')\n    exit()\n\nif N % 3 != 0:\n    print('No')\n    exit()\n\nif a.count(max_a) == 2 * N \/\/ 3 and a.count(0) == N \/\/ 3:\n    print('Yes')\n    exit()\n\nset_a = list(set(a))\nif len(set_a) == 3 and set_a[0] ^ set_a[1] ^ set_a[2] == 0:\n    if a.count(set_a[0]) == a.count(set_a[1]) == a.count(set_a[2]):\n        print('Yes')\n        exit()\n\nprint('No')\n","label":2}
{"problem_id":"p02632","problem":"How many strings can be obtained by applying the following operation on a string S exactly K times: \"choose one lowercase English letter and insert it somewhere\"?\nThe answer can be enormous, so print it modulo (10^9+7).","submission_id":"s657951623","submission":"from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nimport math\nimport bisect\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor, gcd\nfrom operator import mul\nfrom functools import reduce\nfrom operator import mul\nimport pprint\n\n\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 20\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef I(): return int(sys.stdin.buffer.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 1000000007\n\nk = I()\ns = S()\nl = len(s)\nn = k + l + 1\nfac = [1] * (n + 1)\ninv = [1] * (n + 1)\ntwentyFive = [1] * (n + 1)\ntwentySix = [1] * (n + 1)\nfor j in range(1, n + 1):\n    fac[j] = fac[j-1] * j % mod\n    twentyFive[j] = twentyFive[j - 1] * 25 % mod\n    twentySix[j] = twentySix[j - 1] * 26 % mod\n\n\ninv[n] = pow(fac[n], mod-2, mod)\nfor j in range(n-1, -1, -1):\n    inv[j] = inv[j+1] * (j+1) % mod\n\n\ndef comb(n, r):\n    if r > n or n < 0 or r < 0:\n        return 0\n    return fac[n] * inv[n - r] * inv[r] % mod\n\n\n\n\nans = 0\nfor i in range(k + 1):\n    ans += comb(l - 1 + i, i) * twentyFive[i] % mod * twentySix[k - i] % mod\n    ans %= mod\n\nprint(ans)\n\n","label":2}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s303963433","submission":"\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\n\nline = sum(A)\/(4*M)\ncnt = 0\nfor a in A:\n    if a >= line:\n        cnt += 1\nif cnt >= M:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":2}
{"problem_id":"p03773","problem":"Dolphin loves programming contests. Today, he will take part in a contest in AtCoder.\nIn this country, 24-hour clock is used. For example, 9:00 p.m. is referred to as \"21 o'clock\".\nThe current time is A o'clock, and a contest will begin in exactly B hours.\nWhen will the contest begin? Answer in 24-hour time.","submission_id":"s212151019","submission":"A,B=map(int,input().split());print((A+B)%24)","label":2}
{"problem_id":"p02988","problem":"We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.","submission_id":"s781120918","submission":"N = int(input())\nP = list(map(int, input().split()))\ncnt = 0\nfor i in range(1, N-1):\n  if (P[i-1] - P[i]) * (P[i + 1] - P[i]) < 0:\n    cnt += 1\nprint(cnt)","label":2}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s211147725","submission":"def main():\n\n    N, M = map(int, input().split())\n    if N == M:\n        return \"Yes\"\n    return \"No\"\n\n\nif __name__ == '__main__':\n    print(main())\n","label":2}
{"problem_id":"p03775","problem":"You are given an integer N.\nFor two positive integers A and B, we will define F(A,B) as the larger of the following: the number of digits in the decimal notation of A, and the number of digits in the decimal notation of B.\nFor example, F(3,11) = 2 since 3 has one digit and 11 has two digits.\nFind the minimum value of F(A,B) as (A,B) ranges over all pairs of positive integers such that N = A \\times B.","submission_id":"s747563537","submission":"import math\ndef ten(p):\n    if p == 0:\n        return 0\n    else:\n        return ten(p \/\/ 10) + 1\nN = int(input())\nx = int(math.sqrt(N))\nwhile N % x != 0:\n    x -= 1\ny = int(N \/ x)\n\nprint(ten(y))\n\n\n","label":2}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s336714136","submission":"#https:\/\/note.nkmk.me\/python-gcd-lcm\/\nimport math\nfrom functools import reduce\n\ndef gcd_list(numbers):\n    return reduce(math.gcd, numbers)\n\nn,x = map(int,input().split())\na = list(map(int,input().split()))\ntmp = []\nfor i in range(n):\n    tmp.append(abs(a[i]-x))\n    \nprint(gcd_list(tmp))","label":2}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s647061806","submission":"if __name__ == '__main__':\n\n\tn,m = map(int,input().split())\n\tif n == m:\n\t\tprint(\"Yes\")\n\telse:\n\t\tprint(\"No\")\n","label":2}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s701736045","submission":"s=input()\nl=len(s)\ndp=[4*[0]for _ in range(l+1)]\ndp[0][0]=1\nfor i in range(1,l+1):\n  si=s[i-1]\n  for j in range(4):dp[i][j]=dp[i-1][j]*((si==\"?\")*2+1)\n  if si==\"A\":dp[i][1]+=dp[i-1][0]\n  if si==\"B\":dp[i][2]+=dp[i-1][1]\n  if si==\"C\":dp[i][3]+=dp[i-1][2]\n  if si==\"?\":\n    dp[i][1]+=dp[i-1][0]\n    dp[i][2]+=dp[i-1][1]\n    dp[i][3]+=dp[i-1][2]\n  for j in range(4):dp[i][j]%=10**9+7\nprint(dp[-1][-1])","label":2}
{"problem_id":"p02379","problem":"Write a program which calculates the distance between two points P1(x1, y1) and P2(x2, y2).","submission_id":"s936197872","submission":"import math\n\ndef main():\n    X1, Y1, X2, Y2 = map(float, input().split())\n\n    dist = math.sqrt((X2 - X1) ** 2 + (Y2 - Y1) ** 2)\n    print(dist)\n\nmain()","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s478221933","submission":"s = input()\nprint(s+'es') if s.endswith('s') else print(s+'s')\n","label":2}
{"problem_id":"p03971","problem":"There are N participants in the CODE FESTIVAL 2016 Qualification contests. The participants are either students in Japan, students from overseas, or neither of these.\nOnly Japanese students or overseas students can pass the Qualification contests. The students pass when they satisfy the conditions listed below, from the top rank down. Participants who are not students cannot pass the Qualification contests.\n\nA Japanese student passes the Qualification contests if the number of the participants who have already definitively passed is currently fewer than A+B.\nAn overseas student passes the Qualification contests if the number of the participants who have already definitively passed is currently fewer than A+B and the student ranks B-th or above among all overseas students.\n\nA string S is assigned indicating attributes of all participants. If the i-th character of string S is a, this means the participant ranked i-th in the Qualification contests is a Japanese student; b means the participant ranked i-th is an overseas student; and c means the participant ranked i-th is neither of these.\nWrite a program that outputs for all the participants in descending rank either Yes if they passed the Qualification contests or No if they did not pass.","submission_id":"s737167964","submission":"n, a, b = map(int, input().split())\nst = str(input())\nbor = a + b\n\nans = []\n\npa = 1\nfore = 1\n\nfor i in st:\n    if i == 'a':\n        if pa <= bor:\n            print('Yes')\n            pa += 1\n        else:\n            print('No')\n    elif i == 'b':\n        if pa <= bor:\n            if fore <= b:\n                print('Yes')\n                pa += 1\n                fore +=1\n            else:\n                print('No')\n        else:\n            print('No')\n    else:\n        print('No')\n\n","label":2}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s396702537","submission":"import sys; input = sys.stdin.readline\nfrom math import ceil\nd, t, s = map(int, input().split())\nu, l = ceil(d\/t), d\/\/t\nif u == l:\n    if u <= s: print(\"Yes\")\n    else: print(\"No\")\nelse:\n    if d\/t <= s: print(\"Yes\")\n    else:print(\"No\")","label":2}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s668968669","submission":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.buffer.readline\nsys.setrecursionlimit(10 ** 8)\nINF = float('inf')\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N = int(readline())\n    A = int(readline())\n    if N % 500 <= A:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s615506789","submission":"#!\/usr\/bin\/env python3\n\nN = int(input())\nS = input()\n\nleft = [] \n\nfor i, s in enumerate(S):\n    if s == \"(\":\n        left.append(\"(\")\n    else:\n        if len(left) > 0:\n            left.pop()\n        else:\n            S = \"(\" + S\n\nfor _ in range(len(left)):\n    S += \")\"\n\nprint(S)","label":2}
{"problem_id":"p03697","problem":"You are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.","submission_id":"s798892852","submission":"a, b = map(int, input().split())\ns = a + b\nif s >= 10: print('error')\nelse: print(s)","label":2}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s541523060","submission":"N = int(input())\nA = int(input())\n\nnokori = N %500\nif nokori>A:\n    print('No')\nelse:\n    print('Yes')","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s871660781","submission":"def actual(s: str) -> str:\n    tail = s[-1]\n\n    if tail == 's':\n        return s + 'es'\n    else:\n        return s + 's'\n\ns = input()\nprint(actual(s))","label":1}
{"problem_id":"p02578","problem":"N persons are standing in a row. The height of the i-th person from the front is A_i.\nWe want to have each person stand on a stool of some heights - at least zero - so that the following condition is satisfied for every person:\nCondition: Nobody in front of the person is taller than the person. Here, the height of a person includes the stool.\nFind the minimum total height of the stools needed to meet this goal.","submission_id":"s602222892","submission":"n = int(input())\ntall = input().split(\" \")\n\nstep = 0\nfor i in range(n-1):\n  c = int(tall[i+1]) - int(tall[i])\n  if c < 0:\n    step -= c\n    tall[i+1] = int(tall[i+1]) - c\nprint(step)","label":1}
{"problem_id":"p02756","problem":"Takahashi has a string S consisting of lowercase English letters.\nStarting with this string, he will produce a new one in the procedure given as follows.\nThe procedure consists of Q operations. In Operation i (1 \\leq i \\leq Q), an integer T_i is provided, which means the following:\n\n\nIf T_i = 1: reverse the string S.\n\n\nIf T_i = 2: An integer F_i and a lowercase English letter C_i are additionally provided.\n\nIf F_i = 1 : Add C_i to the beginning of the string S.\nIf F_i = 2 : Add C_i to the end of the string S.\n\n\n\nHelp Takahashi by finding the final string that results from the procedure.","submission_id":"s133179643","submission":"from collections import deque\n\nS = input()\nQ = int(input())\n\nd = deque(S)\nflg = 1 #True\u304c\u524d\u304b\u3089,\nfor i in range(Q):\n    t, *a = input().split()\n    if t == \"1\":\n        flg = 1 - flg\n    else:\n        if flg:\n            if a[0] == \"1\":\n                d.appendleft(a[1])\n            else:\n                d.append(a[1])\n        else:\n            if a[0] == \"2\":\n                d.appendleft(a[1])\n            else:\n                d.append(a[1])\nd = list(d)\nif flg:\n    print(''.join(d))\nelse:\n    print(''.join(d[::-1]))\n","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s489431996","submission":"SX,SY,TX,TY=map(int,input().split())\nvx=TX-SX\nvy=TY-SY\nprint('U'*vy+'R'*vx+'D'*vy+'L'*vx+'L'+'U'*(vy+1)+'R'*(vx+1)+'D'+ 'R'+'D'*(vy+1)+'L'*(vx+1)+'U')","label":1}
{"problem_id":"p02860","problem":"Given are a positive integer N and a string S of length N consisting of lowercase English letters.\nDetermine whether the string is a concatenation of two copies of some string.\nThat is, determine whether there is a string T such that S = T + T.","submission_id":"s397861080","submission":"N = int(input())\nS = input().rstrip()\nif S[N\/\/2:] == S[:N\/\/2]:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s935913209","submission":"x = input().split()\nT = int(x[0])\/int(x[2])\nif T <= int(x[1]):\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p03607","problem":"You are playing the following game with Joisino.\n\nInitially, you have a blank sheet of paper.\nJoisino announces a number. If that number is written on the sheet, erase the number from the sheet; if not, write the number on the sheet. This process is repeated N times.\nThen, you are asked a question: How many numbers are written on the sheet now?\n\nThe numbers announced by Joisino are given as A_1, ... ,A_N in the order she announces them. How many numbers will be written on the sheet at the end of the game?","submission_id":"s993757177","submission":"def main():\n    n = int(input())\n    ans = set()\n    for _ in range(n):\n        a = int(input())\n        if a in ans:\n            ans.discard(a)\n        else:\n            ans.add(a)\n\n    print(len(ans))\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p03372","problem":"\"Teishi-zushi\", a Japanese restaurant, is a plain restaurant with only one round counter. The outer circumference of the counter is C meters. Customers cannot go inside the counter.\nNakahashi entered Teishi-zushi, and he was guided to the counter. Now, there are N pieces of sushi (vinegared rice with seafood and so on) on the counter. The distance measured clockwise from the point where Nakahashi is standing to the point where the i-th sushi is placed, is x_i meters. Also, the i-th sushi has a nutritive value of v_i kilocalories.\nNakahashi can freely walk around the circumference of the counter. When he reach a point where a sushi is placed, he can eat that sushi and take in its nutrition (naturally, the sushi disappears). However, while walking, he consumes 1 kilocalories per meter.\nWhenever he is satisfied, he can leave the restaurant from any place (he does not have to return to the initial place). On balance, at most how much nutrition can he take in before he leaves? That is, what is the maximum possible value of the total nutrition taken in minus the total energy consumed? Assume that there are no other customers, and no new sushi will be added to the counter. Also, since Nakahashi has plenty of nutrition in his body, assume that no matter how much he walks and consumes energy, he never dies from hunger.","submission_id":"s843633504","submission":"import numpy as np\nN, C = map(int, input().split())\nXV = [list(map(int, input().split())) for i in range(N)]\n\n\nV_minus_X = [XV[i][1]-(XV[i][0]-XV[i-1][0])\n             for i in range(1, N)]  # i==0\u306a\u3089\u898b\u306a\u3044 \u305d\u308c\u4ee5\u5916\u306a\u3089XV[i-1][0]\u8db3\u3057\u3066\u4e0a\u3052\u308b\nV_minus_X.insert(0, XV[0][1]-XV[0][0])\ncum_ = np.cumsum(V_minus_X)\n\n\nV_minus_X_reverse = [XV[i][1]-(XV[i+1][0]-XV[i][0])\n                     for i in range(0, N-1)]\nV_minus_X_reverse.append(XV[-1][1]-(C-XV[-1][0]))\nV_minus_X_reverse.reverse()\ncum_reverse = np.cumsum(V_minus_X_reverse)\n\nm_ = []\nm_reverse = []\nmaxim = 0\nmaxim_reverse = 0\nmaxim_where = 0\nmaxim_reverse_where = 0\n# print(\"print\")\nfor i in range(N-1):\n    if maxim < cum_[i]:\n        maxim = cum_[i]\n        maxim_where = XV[i][0]\n    if maxim_reverse < cum_reverse[i]:\n        maxim_reverse = cum_reverse[i]\n        maxim_reverse_where = C - XV[-i - 1][0]\n    m_.append((maxim, maxim_where))\n    m_reverse.append((maxim_reverse, maxim_reverse_where))\n\nans = 0\n\nfor i in range(N - 1):\n    next = m_[i][0] + m_reverse[-i - 1][0] - \\\n        min(m_[i][1], m_reverse[-i - 1][1])\n    ans = max(next, ans)\n\nprint(max(ans, max(cum_), max(cum_reverse)))\n","label":1}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s222865043","submission":"d,t,s = map(int,input().split())\nprint(\"Yes\" if d <= t*s else \"No\")","label":1}
{"problem_id":"p03284","problem":"Takahashi has decided to distribute N AtCoder Crackers to K users of as evenly as possible.\nWhen all the crackers are distributed, find the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.","submission_id":"s759428758","submission":"N,K=map(int,input().split())\nprint(int(bool(N%K)))\n","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s837051188","submission":"N = int(input())\nli = list(map(int,input().split()))\ncount = 0\nwhile 1:\n    if all([x%2==0 for x in li]):\n        li = [int(x\/2) for x in li]\n        count+=1\n    else:break\nprint(count)","label":1}
{"problem_id":"p03005","problem":"Takahashi is distributing N balls to K persons.\nIf each person has to receive at least one ball, what is the maximum possible difference in the number of balls received between the person with the most balls and the person with the fewest balls?","submission_id":"s592299849","submission":"import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n, k = map(int, input().split())\n    res = n - k\n    print(res if k != 1 else 0)\n\n\nif __name__ == '__main__':\n    resolve()\n","label":1}
{"problem_id":"p02382","problem":"Your task is to calculate the distance between two $n$ dimensional vectors $x = \\{x_1, x_2, ..., x_n\\}$ and $y = \\{y_1, y_2, ..., y_n\\}$.","submission_id":"s617842855","submission":"n = int(input())\nx = list(map(float, input().split()))\ny = list(map(float, input().split()))\n\nd1 = 0\nfor i in range(n):\n    d1 += abs(x[i] - y[i])\nprint('{:.8f}'.format(d1))\n\nd2 = 0\nfor i in range(n):\n    d2 += abs(x[i] - y[i])**2\nprint('{:.8f}'.format(d2**(1\/2)))\n\nd3 = 0\nfor i in range(n):\n    d3 += abs(x[i] - y[i])**3\nprint('{:.8f}'.format(d3**(1\/3)))\n\nd = []\np = float('inf')\nfor i in range(n):\n    d.append(abs(x[i] - y[i]))\nprint('{:.8f}'.format(max(d)))\n","label":1}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s811068102","submission":"n = int(input())\ns = list(int(input()) for _ in range(n))\ns.sort()\n\nif all(num % 10 == 0 for num in s):\n    print(0)\nelse:\n    if sum(s) % 10 == 0:\n        for num in s:\n            if num % 10 != 0:\n                print(sum(s) - num)\n                break\n    else:\n        print(sum(s))","label":1}
{"problem_id":"p03967","problem":"AtCoDeer the deer and his friend TopCoDeer is playing a game.\nThe game consists of N turns.\nIn each turn, each player plays one of the two gestures, Rock and Paper, as in Rock-paper-scissors, under the following condition:\n(\u203b) After each turn, (the number of times the player has played Paper)\u2266(the number of times the player has played Rock).\nEach player's score is calculated by (the number of turns where the player wins) - (the number of turns where the player loses), where the outcome of each turn is determined by the rules of Rock-paper-scissors.\n(For those who are not familiar with Rock-paper-scissors: If one player plays Rock and the other plays Paper, the latter player will win and the former player will lose. If both players play the same gesture, the round is a tie and neither player will win nor lose.)\nWith his supernatural power, AtCoDeer was able to foresee the gesture that TopCoDeer will play in each of the N turns, before the game starts.\nPlan AtCoDeer's gesture in each turn to maximize AtCoDeer's score.\nThe gesture that TopCoDeer will play in each turn is given by a string s. If the i-th (1\u2266i\u2266N) character in s is g, TopCoDeer will play Rock in the i-th turn. Similarly, if the i-th (1\u2266i\u2266N) character of s in p, TopCoDeer will play Paper in the i-th turn.","submission_id":"s899924556","submission":"S = input()\np_count = 0\ng_count = 0\nwin, lose = 0, 0\nfor s in S:\n    if s == \"g\":\n        if p_count < g_count:\n            p_count += 1\n            win += 1\n        else:\n            g_count += 1\n    else:\n        if p_count < g_count:\n            p_count += 1\n        else:\n            g_count += 1\n            lose += 1\nprint(win - lose)\n","label":1}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s328516001","submission":"n = int(input())\na = int(input())\n\nfor i in range(a+1):\n    if (n-i)%500 == 0:\n        print('Yes')\n        exit()\nprint('No')","label":1}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s003692862","submission":"h,w = map(int,input().split())\na = h*w\nif h ==1 or w ==1:\n  print(1)\nelif a%2 == 1:\n  print(round(a\/\/2+1))\nelse:\n  print(round(a\/2))","label":1}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s868012322","submission":"import sys\nH, W = list(map(int, input().split()))\nif H == 1 or W == 1:\n    print('1')\n    sys.exit()\na = (W + 1) \/\/ 2\nres = W * (H \/\/ 2) + (H % 2) * a\nprint(res)\n","label":1}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s387172902","submission":"n=int(input())\n\ndef make_divisors(n):\n    lower_divisors , upper_divisors = [], []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            lower_divisors.append(i)\n            if i != n \/\/ i:\n                upper_divisors.append(n\/\/i)\n        i += 1\n    return lower_divisors + upper_divisors[::-1]\n\narr = make_divisors(n)\ntotal=0\nfor m in arr:\n    r = n\/\/m\n\n    if r<m-1:\n        total +=m-1\n\n\nprint(total)\n","label":1}
{"problem_id":"p03547","problem":"In programming, hexadecimal notation is often used.\nIn hexadecimal notation, besides the ten digits 0, 1, ..., 9, the six letters A, B, C, D, E and F are used to represent the values 10, 11, 12, 13, 14 and 15, respectively.\nIn this problem, you are given two letters X and Y. Each X and Y is A, B, C, D, E or F.\nWhen X and Y are seen as hexadecimal numbers, which is larger?","submission_id":"s963672144","submission":"import sys\ndef input(): return sys.stdin.readline().strip()\n\ndef resolve():\n    a,b=input().split()\n    if a<b:\n        print('<')\n    elif a>b:\n        print('>')\n    else:\n        print('=')\nresolve()","label":1}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s105883041","submission":"import numpy as np\ns = input()\nns = np.array(list(s))\nn1 = ns[::2]\nn2 = ns[1::2]\nif not 'L' in n1 and not 'R' in n2:\n    print('Yes')\nelse:\n    print('No')","label":1}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s074168451","submission":"S = input()\nzenzitsu = False\n\nans = 0\nfor i in range(len(S)):\n    if S[i] == \"R\":\n        if zenzitsu:\n            ans += 1\n            zenzitsu = True\n        else:\n            ans = 1\n            zenzitsu = True\n    else:\n        zenzitsu = False\nprint(ans)","label":1}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s186266064","submission":"s = input()\nt = input()\nsl = len(s)\ntl = len(t)\nans = 1001\n\nfor i in range(sl-tl+1):\n    cnt = 0\n    for sv, tv in zip(s[i:i+tl], t):\n        if sv != tv:\n            cnt += 1\n    ans = min(cnt, ans)\n\nprint(ans)\n","label":1}
{"problem_id":"p03264","problem":"Find the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive). The order does not matter.","submission_id":"s367299362","submission":"n = int(input())\nprint((n\/\/2)*(n-(n\/\/2)))","label":1}
{"problem_id":"p02748","problem":"You are visiting a large electronics store to buy a refrigerator and a microwave.\nThe store sells A kinds of refrigerators and B kinds of microwaves. The i-th refrigerator ( 1 \\le i \\le A ) is sold at a_i yen (the currency of Japan), and the j-th microwave ( 1 \\le j \\le B ) is sold at b_j yen.\nYou have M discount tickets. With the i-th ticket ( 1 \\le i \\le M ), you can get a discount of c_i yen from the total price when buying the x_i-th refrigerator and the y_i-th microwave together. Only one ticket can be used at a time.\nYou are planning to buy one refrigerator and one microwave. Find the minimum amount of money required.","submission_id":"s099027138","submission":"A, B, M = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nmin_price = min(a) + min(b)\nfor _ in range(M):\n    x, y, c = map(int, input().split())\n    discount_price = a[x-1] + b[y-1] - c\n    if min_price > discount_price:\n        min_price = discount_price\n        \nprint(min_price)\n","label":1}
{"problem_id":"p02985","problem":"You are given a tree with N vertices and N-1 edges. The vertices are numbered 1 to N, and the i-th edge connects Vertex a_i and b_i.\nYou have coloring materials of K colors.\nFor each vertex in the tree, you will choose one of the K colors to paint it, so that the following condition is satisfied:\n\nIf the distance between two different vertices x and y is less than or equal to two, x and y have different colors.\n\nHow many ways are there to paint the tree? Find the count modulo 1\\ 000\\ 000\\ 007.\n\nWhat is tree?\nA tree is a kind of graph. For detail, please see: Wikipedia \"Tree (graph theory)\"","submission_id":"s809851333","submission":"from collections import deque\n\nn,k = map(int, input().split())\nab = [list(map(int, input().split())) for i in range(n-1)]\ntree = [list() for i in range(n+1)]\nvisited = [0] * (n+1)\nfor a,b in ab:\n  tree[a].append(b)\n  tree[b].append(a)\nvisited[1] = 1\nqueue = deque([(1,0)])\nans = k\nmod = 10 ** 9 + 7\nwhile queue:\n  vertex, depth = queue.popleft()\n  res = k - min(depth+1,2)\n  for NEXT in tree[vertex]:\n    if not visited[NEXT]:\n      visited[NEXT] = 1\n      ans *= res\n      ans %= mod\n      res -= 1\n      queue.append((NEXT,depth+1))\nprint(ans)","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s970685595","submission":"S = input()\nsuf = 'es' if S[-1] == 's' else 's'\nprint(S + suf)\n","label":1}
{"problem_id":"p03372","problem":"\"Teishi-zushi\", a Japanese restaurant, is a plain restaurant with only one round counter. The outer circumference of the counter is C meters. Customers cannot go inside the counter.\nNakahashi entered Teishi-zushi, and he was guided to the counter. Now, there are N pieces of sushi (vinegared rice with seafood and so on) on the counter. The distance measured clockwise from the point where Nakahashi is standing to the point where the i-th sushi is placed, is x_i meters. Also, the i-th sushi has a nutritive value of v_i kilocalories.\nNakahashi can freely walk around the circumference of the counter. When he reach a point where a sushi is placed, he can eat that sushi and take in its nutrition (naturally, the sushi disappears). However, while walking, he consumes 1 kilocalories per meter.\nWhenever he is satisfied, he can leave the restaurant from any place (he does not have to return to the initial place). On balance, at most how much nutrition can he take in before he leaves? That is, what is the maximum possible value of the total nutrition taken in minus the total energy consumed? Assume that there are no other customers, and no new sushi will be added to the counter. Also, since Nakahashi has plenty of nutrition in his body, assume that no matter how much he walks and consumes energy, he never dies from hunger.","submission_id":"s679313585","submission":"import bisect\nfrom collections import OrderedDict\ndef resolve():\n    N, C = list(map(int, input().split()))\n    P = []\n    cal = [0]\n    for i in range(N):\n        x, v = list(map(int, input().split()))\n        P.append(x)\n        cal.append(cal[i]+v)\n    \n    to_right = [0]\n    for i in range(N):\n        to_right.append(max(to_right[i], cal[i+1]-P[i]))\n    to_left = [0]\n    for i in range(N):\n        to_left.append(max(to_left[i], cal[N]-cal[N-i-1]-(C-P[-i-1])))\n    right_left = 0\n    for i in range(N-1):\n        right_left = max(right_left, cal[i+1]+to_left[N-i-1]-2*P[i])\n    left_right = 0\n    for i in range(N-1):\n        left_right = max(left_right, cal[N]-cal[N-i-1]+to_right[N-i-1]-2*(C-P[-i-1]))\n    print(max(to_right+to_left+[right_left, left_right]))\n\n    \nif '__main__' == __name__:\n    resolve()\n","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s872044778","submission":"import sys\ninput=sys.stdin.buffer.readline\nfrom math import*\n\nn=int(input())\narr=list(map(int,input().split()))\nbrr=list(map(int,input().split()))\ncrr=list(map(int,input().split()))\n\nans=0\nfor i in range(n):\n\tif i!=0 and arr[i]==arr[i-1]+1:\n\t\t\tans+=brr[arr[i]-1]+crr[arr[i-1]-1]\n\telse:\n\t\tans+=brr[arr[i]-1]\nprint(ans)","label":1}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s278861130","submission":"N,K = map(int,input().split())\nP = list(map(int,input().split()))\nA = [0 for _ in range(N)]\nfor i in range(N):\n    A[i] = (P[i]+1)\/2\ncmax = sum(A[:K])\na = cmax\nfor i in range(1,N-K+1):\n    a = a+A[i+K-1]-A[i-1]\n    cmax = max(cmax,a)\nprint(cmax)","label":1}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s125567377","submission":"\ndef resolve():\n    import sys\n    input = sys.stdin.readline\n    # row = [int(x) for x in input().rstrip().split(\" \")]\n    # n = int(input().rstrip())\n    x1, y1, x2, y2 = [int(x) for x in input().rstrip().split(\" \")]\n    x = x2 - x1\n    y = y2 - y1\n    print(x2 - y, y2 + x, x1 - y, y1 + x)\n\n\nif __name__ == \"__main__\":\n    resolve()\n","label":1}
{"problem_id":"p02988","problem":"We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.","submission_id":"s851657956","submission":"import sys\nfrom collections import defaultdict\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    n = int(input())\n    p = list(map(int,input().split()))\n    ans = 0\n    for i in range(1,n-1):\n        if p[i-1]>p[i] and p[i] > p[i+1]:\n            ans +=1\n        if p[i-1]<p[i] and p[i] < p[i+1]:\n            ans +=1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p03852","problem":"Given a lowercase English letter c, determine whether it is a vowel. Here, there are five vowels in the English alphabet: a, e, i, o and u.","submission_id":"s519177781","submission":"c = str(input())\nw = ['a','e','i','o','u']\nx = 'consonant'\nfor i in w:\n    if i == c:\n        x = 'vowel'\nprint(x)","label":1}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s666131785","submission":"import sys\nsys.setrecursionlimit(10 ** 6)\n# input = sys.stdin.readline    ####\nint1 = lambda x: int(x) - 1\ndef II(): return int(input())\n\ndef MI(): return map(int, input().split())\ndef MI1(): return map(int1, input().split())\n\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef printlist(lst, k='\\n'): print(k.join(list(map(str, lst))))\nINF = float('inf')\n\ndef solve():\n    n = II()\n    A = LI()\n\n    B = [-1] * n\n    for i in range(n, 0, -1):\n        # print(i)\n        s = 0\n        for j in range(i+i, n+1, i):\n            # print(f' {j}')\n            s ^= B[j-1]\n        B[i-1] = A[i-1] ^ s\n    # print(B)\n\n    print(sum(B))\n    for idx, b in enumerate(B):\n        if b: print(idx+1)\n\n\nif __name__ == '__main__':\n    solve()\n","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s413993029","submission":"a = int(input())\nprint(a*a*a)\n","label":1}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s035126846","submission":"x=int(input())\nif x==1:\n\tprint('Hello World')\nelse:\n\ty=int(input())\n\tz=int(input())\n\tprint(y+z)","label":1}
{"problem_id":"p02726","problem":"We have an undirected graph G with N vertices numbered 1 to N and N edges as follows:\n\nFor each i=1,2,...,N-1, there is an edge between Vertex i and Vertex i+1.\nThere is an edge between Vertex X and Vertex Y.\n\nFor each k=1,2,...,N-1, solve the problem below:\n\nFind the number of pairs of integers (i,j) (1 \\leq i < j \\leq N) such that the shortest distance between Vertex i and Vertex j in G is k.","submission_id":"s439467454","submission":"n,x,y=map(int,input().split())\nx-=1\ny-=1\nhalf=(x+y)\/\/2\nans=[0]*n\nfor i in range(n):\n    for j in range(i,n):\n        if i<=x:\n            if j<=half:\n                ans[j-i]+=1\n            else:\n                ans[x-i+1+abs(y-j)]+=1\n        elif x<i and i<=y:\n            ans[min(j-i,i-x+1+abs(y-j))]+=1\n        else:\n            ans[j-i]+=1\nfor i in range(1,n):\n    print(ans[i])\n","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s256073472","submission":"s = input()\nprint(\"{}\".format(s+\"es\" if s[-1] == \"s\" else s+\"s\"))","label":1}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s491107689","submission":"#\u8f38\u5165\u5b57\u4e32\u4e26\u5206\u9694\uff0c\u4ee5list\u5132\u5b58\nstr_in = input()\nnum = [int(n) for n in str_in.split()]\nnum =list(map(int, str_in.strip().split()))  \n#print(num) #D,T,S\n\n#\u82e5T<(D\/S)->\u9072\u5230\nif num[1] >= (num[0]\/num[2]):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\n","label":1}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s463759859","submission":"h, _ = map(int, input().split())\nfor _ in range(h):\n    s = input()\n    print(s+'\\n'+s)\n","label":1}
{"problem_id":"p03360","problem":"There are three positive integers A, B and C written on a blackboard. E869120 performs the following operation K times:\n\nChoose one integer written on the blackboard and let the chosen integer be n. Replace the chosen integer with 2n.\n\nWhat is the largest possible sum of the integers written on the blackboard after K operations?","submission_id":"s887323406","submission":"s = list(map(int, input().split()))\nk = int(input())\ns.sort(reverse=True)\nprint(s[0]*(2**k)+s[1]+s[2])","label":1}
{"problem_id":"p02775","problem":"In the Kingdom of AtCoder, only banknotes are used as currency. There are 10^{100}+1 kinds of banknotes, with the values of 1, 10, 10^2, 10^3, \\dots, 10^{(10^{100})}. You have come shopping at a mall and are now buying a takoyaki machine with a value of N. (Takoyaki is the name of a Japanese snack.)\nTo make the payment, you will choose some amount of money which is at least N and give it to the clerk. Then, the clerk gives you back the change, which is the amount of money you give minus N.\nWhat will be the minimum possible number of total banknotes used by you and the clerk, when both choose the combination of banknotes to minimize this count?\nAssume that you have sufficient numbers of banknotes, and so does the clerk.","submission_id":"s302640186","submission":"N = input()\nn = len(N)\na = int(N[0])\nb = 11-int(N[0])\nfor i in range(n-1):\n    a1 = min(a+int(N[i+1]), b+int(N[i+1]))\n    b1 = min(a+11-int(N[i+1]), b+9-int(N[i+1]))\n    a = a1\n    b = b1\nprint(min(a,b))","label":1}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s866857659","submission":"\nN,X,T = map(int, input().split())\n\nans = int(N \/ X) * T\nans += T if N % X != 0 else 0\n\nprint(ans)\n","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s787861064","submission":"N = int(input())\nM = 0\nP = 0\nfor i in range(N):\n    A = int(input())\n    P += A\n    M = max(M,A)\n\nprint(P - M\/\/2)","label":1}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s838476318","submission":"import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    n, x = list(map(int, readline().split()))\n    l = [0] * (n + 1)\n    b = [0] * (n + 1)\n\n    l[0] = 1\n    b[0] = 1\n\n    for i in range(1, n + 1):\n        l[i] = 2 * l[i - 1] + 3\n        b[i] = 2 * b[i - 1] + 1\n\n    ans = 0\n    rem = x\n    level = n\n\n    while rem and level > 0:\n        if rem >= l[level - 1] + 2:\n            ans += b[level - 1] + 1\n            rem -= (l[level - 1] + 2)\n            level -= 1\n        elif rem == l[level - 1] + 1:\n            rem -= (l[level - 1] + 1)\n            ans += b[level - 1]\n        else:\n            rem -= 1\n            level -= 1\n\n    if level == 0 and rem:\n        ans += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s614508183","submission":"S=input()\nif S[-1]==\"s\":\n    print(S+\"es\")\nelif S[-1]!=\"s\":\n    print (S+\"s\")\n  ","label":1}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s876804749","submission":"def resolve():\n    from math import ceil\n    h, w = map(int, input().split())\n    if h <= 1 or w <= 1:\n        print(1)\n    elif h * w % 2 == 0:\n        print(int(h * w \/ 2))\n    else:\n        print(int(ceil(h * w \/ 2)))\n\n\nresolve()","label":1}
{"problem_id":"p03060","problem":"There are N gems. The value of the i-th gem is V_i.\nYou will choose some of these gems, possibly all or none, and get them.\nHowever, you need to pay a cost of C_i to get the i-th gem.\nLet X be the sum of the values of the gems obtained, and Y be the sum of the costs paid.\nFind the maximum possible value of X-Y.","submission_id":"s344919578","submission":"import itertools\n\nn=int(input())\nlis=[list(map(int,input().split())) for _ in range(2)]\nans=0\n\nfor li in itertools.product([0,1], repeat=n):\n  v=0\n  for id,l in enumerate(li):\n    if l:\n      v += lis[0][id] - lis[1][id]\n      \n  if v > ans:\n    ans=v\n    \nprint(ans)","label":1}
{"problem_id":"p03295","problem":"There are N islands lining up from west to east, connected by N-1 bridges.\nThe i-th bridge connects the i-th island from the west and the (i+1)-th island from the west.\nOne day, disputes took place between some islands, and there were M requests from the inhabitants of the islands:\nRequest i: A dispute took place between the a_i-th island from the west and the b_i-th island from the west. Please make traveling between these islands with bridges impossible.\nYou decided to remove some bridges to meet all these M requests.\nFind the minimum number of bridges that must be removed.","submission_id":"s593775191","submission":"import sys\n\nsys.setrecursionlimit(10 ** 6)\nINF = float(\"inf\")\nMOD = 10 ** 9 + 7\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef main():\n    N, M = map(int, input().split())\n    AB = []\n    for _ in range(M):\n        a, b = map(int, input().split())\n        a -= 1\n        b -= 1\n        AB.append((a, b))\n    AB.sort(key=lambda x: x[0])\n\n    cnt = 0\n    end = INF\n    for a, b in AB:\n        if a >= end:\n            cnt += 1\n            end = b\n        else:\n            end = min(b, end)\n\n    cnt += 1\n    print(cnt)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p03951","problem":"Snuke is interested in strings that satisfy the following conditions:\n\nThe length of the string is at least N.\nThe first N characters equal to the string s.\nThe last N characters equal to the string t.\n\nFind the length of the shortest string that satisfies the conditions.","submission_id":"s666480058","submission":"n = int(input())\ns = input()\nt = input()\n\nu = n\nfor i in range(n):\n    if s[i:] == t[:(n-i)]:\n        u = i\n        break\n\nprint(u+n)","label":1}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s588602077","submission":"S = input()\n'''\ndp[i]\u306fS\u306ei\u6587\u5b57\u76ee\uff081~S\u306e\u9577\u3055)\u307e\u3067\u3092\u8868\u305b\u308b\u304b\u3069\u3046\u304b\n'''\ndp = [0] * (len(S) + 1)\ndp[0] = 1\ncheck = \"NO\"\n\nwords = [\"dream\", \"dreamer\", \"erase\", \"eraser\"]\n\nfor i in range(len(S)):\n    if dp[i] == 0:\n        continue\n    for w in words:\n        if S[i:i+len(w)] == w:\n            dp[i+len(w)] = 1\n    if dp[len(S)] == 1:\n        check = \"YES\"\n        break\n\nprint(check)\n","label":1}
{"problem_id":"p03795","problem":"Snuke has a favorite restaurant.\nThe price of any meal served at the restaurant is 800 yen (the currency of Japan), and each time a customer orders 15 meals, the restaurant pays 200 yen back to the customer.\nSo far, Snuke has ordered N meals at the restaurant.\nLet the amount of money Snuke has paid to the restaurant be x yen, and let the amount of money the restaurant has paid back to Snuke be y yen.\nFind x-y.","submission_id":"s467126796","submission":"n = int(input())\n\nsum = n * 800\nminus = (n\/\/15) * 200\n\nprint(sum-minus)","label":1}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s037179294","submission":"N, X, T = map(int, input().split())\n\nprint((N \/\/ X  + bool(N % X))* T)\n","label":1}
{"problem_id":"p03944","problem":"There is a rectangle in the xy-plane, with its lower left corner at (0, 0) and its upper right corner at (W, H). Each of its sides is parallel to the x-axis or y-axis. Initially, the whole region within the rectangle is painted white.\nSnuke plotted N points into the rectangle. The coordinate of the i-th (1 \u2266 i \u2266 N) point was (x_i, y_i).\nThen, he created an integer sequence a of length N, and for each 1 \u2266 i \u2266 N, he painted some region within the rectangle black, as follows:\n\nIf a_i = 1, he painted the region satisfying x < x_i within the rectangle.\nIf a_i = 2, he painted the region satisfying x > x_i within the rectangle.\nIf a_i = 3, he painted the region satisfying y < y_i within the rectangle.\nIf a_i = 4, he painted the region satisfying y > y_i within the rectangle.\n\nFind the area of the white region within the rectangle after he finished painting.","submission_id":"s808916499","submission":"W,H,N=map(int,input().split())\nW0=0\nH0=0\nfor i in range(N):\n    x1,y1,a1=map(int,input().split())\n    if a1 ==1 and W0<x1:\n        W0=x1\n    elif a1==2 and W>x1:\n        W=x1\n    elif a1==3 and H0<y1:\n        H0=y1\n    elif a1==4 and H>y1:\n        H=y1\n\nif W-W0>0 and H-H0>0:\n    print((W-W0)*(H-H0))\nelse:\n    print(0)","label":1}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s378795032","submission":"s=input()\nt=input()\n\ncount_min = 1000\n\nfor i in range(len(s)-len(t)+1):\n  count = 0\n  for j in range(len(t)):\n    if s[i+j] != t[j]:\n      count+=1 \n  if count < count_min:\n    count_min = count\n\nprint(count_min)","label":1}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s748876677","submission":"n=int(input());ans=n\nfor i in range(n):\n    l,r=map(int,input().split())\n    ans+=r-l\nprint(ans)","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s914300427","submission":"S = input()\nif(S[-1] == \"s\"):\n    S += \"es\"\nelse:\n    S += \"s\"\nprint(S)","label":1}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s551842322","submission":"n = int(input()) - 1\nlst = [n \/\/ k for k in range(1, int(n**0.5+1))]\nprint(2 * sum(lst) - int(n**0.5)**2)\n","label":1}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s578560378","submission":"import sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\nS = sr()[::-1]\nMOD = 10 ** 9 + 7\nanswer = 0\ndp = [0, 0, 1] #C\u306e\u6570, BC\u6570, \u7dcf\u6570\nfor i in range(len(S)):\n    s = S[i]\n    if s == 'A':\n        answer += dp[1]\n    elif s == 'B':\n        dp[1] += dp[0]\n    elif s == 'C':\n        dp[0] += dp[2]\n    elif s == '?':\n        answer *= 3\n        answer += dp[1]\n        dp[1] *= 3\n        dp[1] += dp[0]\n        dp[0] *= 3\n        dp[0] += dp[2]\n        dp[2] *= 3\n    answer %= MOD\n    dp[0] %= MOD; dp[1] %= MOD; dp[2] %= MOD\nprint(answer)\n","label":1}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s637097694","submission":"import sys\n# sys.setrecursionlimit(100000)\nfrom functools import lru_cache\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef input_int():\n    return int(input())\n\n\ndef input_int_list():\n    return [int(i) for i in input().split()]\n\n\ndef main():\n    n, x = input_int_list()\n    layer_size = [1]\n    p_cnt = [1]\n\n    for _ in range(50):\n        layer_size.append(layer_size[-1] * 2 + 3)\n        p_cnt.append(p_cnt[-1] * 2 + 1)\n\n    @lru_cache(None)\n    def L(level, x):\n        if x == 1:\n            if level == 0:\n                return 1\n            else:\n                return 0\n        l = layer_size[level - 1]\n        p = p_cnt[level - 1]\n        if x <= l + 1:\n            return L(level - 1, x - 1)\n        elif x == l + 2:\n            return p + 1\n        elif x <= 2 + l * 2:\n            return p + 1 + L(level - 1, x - l - 2)\n        else:\n            return 2 * p + 1\n    print(L(n, x))\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s569971426","submission":"A,B=map(int,input().split())\n\ng=[[\"#\"]*100 for _ in range(50)] +[['.']*100 for _ in range(50)]\n\n\nfor i in range(A-1):\n    x=(i%50)*2\n    y=(i\/\/50)*2\n    g[y][x]=\".\"\n\nfor i in range(B-1):\n    x=(i%50)*2\n    y=51+(i\/\/50)*2\n    g[y][x]=\"#\"\n\nprint(100,100)\nfor n in g:\n    print(\"\".join(n))","label":1}
{"problem_id":"p02618","problem":"AtCoder currently hosts three types of contests: ABC, ARC, and AGC. As the number of users has grown, in order to meet the needs of more users, AtCoder has decided to increase the number of contests to 26 types, from AAC to AZC. For convenience, we number these 26 types as type 1 through type 26. AtCoder wants to schedule contests for D days so that user satisfaction is as high as possible. For every day, AtCoder will hold exactly one contest, and each contest will end on that day. The satisfaction is calculated as follows.\n\nThe satisfaction at the beginning of day 1 is 0. Satisfaction can be negative.\nHolding contests increases satisfaction. The amount of increase will vary depending on a variety of factors. Specifically, we know in advance that holding a contest of type i on day d will increase the satisfaction by s_{d,i}.\nIf a particular type of contest is not held for a while, the satisfaction decreases. Each contest type i has an integer c_i, and at the end of each day d=1,2,...,D, the satisfaction decreases as follows. Let \\mathrm{last}(d,i) be the last day before day d (including d) on which a contest of type i was held. If contests of type i have never been held yet, we define \\mathrm{last}(d,i)=0. At the end of day d, the satisfaction decreases by \\sum _{i=1}^{26}c_i \\times (d-\\mathrm{last}(d,i)).\n\nPlease schedule contests on behalf of AtCoder.\nIf the satisfaction at the end of day D is S, you will get a score of \\max(10^6 + S, 0).\nThere are 50 test cases, and the score of a submission is the total scores for each test case.\nYou can make submissions multiple times, and the highest score among your submissions will be your score.","submission_id":"s339210753","submission":"import sys\ninput = sys.stdin.readline\nimport numpy as np\nfrom numba import njit\n\n\ndef read():\n    D = int(input().strip())\n    C = np.fromstring(input().strip(), dtype=np.int32, sep=\" \")\n    S = np.empty((D, 26), dtype=np.int32)\n    for i in range(D):\n        s = np.fromstring(input().strip(), dtype=np.int32, sep=\" \")\n        S[i, :] = s[:]\n    M = 10000\n    RD = np.random.randint(D, size=(M, ), dtype=np.int32)\n    RQ = np.random.randint(26, size=(M, ), dtype=np.int32)\n    DQ = np.stack([RD, RQ]).T\n    return D, C, S, M, DQ\n\n\n@njit\ndef diff_satisfaction(C, S, d, p, last):\n    \"\"\"d\u65e5\u76ee\u306b\u30b3\u30f3\u30c6\u30b9\u30c8p\u3092\u958b\u50ac\u3059\u308b\u3068\u304d\u306e\u3001\u6e80\u8db3\u5ea6\u306e\u66f4\u65b0\u91cf\u3092\u6c42\u3081\u308b\n    \"\"\"\n    v = 0\n    for i in range(26):\n        v -= C[i] * (d - last[i])\n    v += C[p] * (d - last[p])\n    v += S[d, p]\n    return v\n\n\n@njit\ndef change_schedule(D, C, S, T, d, q, cumsat):\n    \"\"\"d\u65e5\u76ee\u306e\u30b3\u30f3\u30c6\u30b9\u30c8\u3092q\u306b\u5909\u66f4\u3059\u308b\n    \"\"\"\n    p = T[d]\n    dp1, dq1 = -1, -1\n    dp3, dq3 = D, D\n    for i in range(0, d):\n        if T[i] == p: \n            dp1 = i\n        if T[i] == q:\n            dq1 = i\n    for i in range(D-1, d, -1):\n        if T[i] == p:\n            dp3 = i\n        if T[i] == q:\n            dq3 = i\n    cumsat = cumsat - S[d, p] + S[d, q] - C[p] * (dp3-d) * (d-dp1) + C[q] * (dq3-d) * (d-dq1)\n    return cumsat\n\n\n@njit\ndef greedy(D, C, S):\n    T = np.zeros(D, dtype=np.int32)\n    last = -np.ones(26, dtype=np.int32)\n    cumsat = 0\n    for d in range(D):\n        max_p = 0\n        max_diff = -999999999\n\n        # select contest greedily\n        for p in range(26):\n            diff = diff_satisfaction(C, S, d, p, last)\n            if diff > max_diff:\n                max_p = p\n                max_diff = diff\n        \n        # update schedule\n        cumsat += max_diff\n        T[d] = max_p\n        last[max_p] = d\n    return cumsat, T\n\n\n@njit\ndef solve(D, C, S, M, DQ):\n    cumsat, T = greedy(D, C, S)\n    for i in range(M):\n        d, q = DQ[i, :]\n        newsat = change_schedule(D, C, S, T, d, q, cumsat)\n        if newsat > cumsat:\n            cumsat = newsat\n            T[d] = q\n    for t in T:\n        print(t+1)\n\n\nif __name__ == '__main__':\n    inputs = read()\n    outputs = solve(*inputs)\n    if outputs is not None:\n        print(\"%s\" % str(outputs))\n","label":1}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s048475760","submission":"from itertools import permutations\nimport sys\ninput = sys.stdin.readline\nN, M, R = map(int, input().split())\nr = [int(i)-1 for i in input().split()]\nD = [[float(\"inf\")] * N for _ in range(N)]\nfor a, b, c in [[int(i) for i in input().split()] for _ in range(M)]:\n    a -= 1\n    b -= 1\n    D[a][b] = c\n    D[b][a] = c\nfor i in range(N):\n    D[i][i] = 0\n\nfor k in range(N):\n    for i in range(N):\n        for j in range(N):\n            D[i][j] = min(D[i][j], D[i][k] + D[k][j])\n\nans = float(\"inf\")\nfor l in permutations(range(R)):\n    l = list(l)\n    c = 0\n    for i in range(R - 1):\n        c += D[r[l[i]]][r[l[i + 1]]]\n    ans = min(ans, c)\nprint(ans)","label":1}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s541071756","submission":"#!\/usr\/bin\/env python3\nimport collections as cl\nimport sys\n\n\ndef II():\n    return int(sys.stdin.readline())\n\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef main():\n    n, m = MI()\n\n    print(\"Yes\" if n == m else \"No\")\n\n\nmain()\n","label":1}
{"problem_id":"p02862","problem":"There is a knight - the chess piece - at the origin (0, 0) of a two-dimensional grid.\nWhen the knight is at the square (i, j), it can be moved to either (i+1,j+2) or (i+2, j+1).\nIn how many ways can the knight reach the square (X, Y)?\nFind the number of ways modulo 10^9 + 7.","submission_id":"s481582144","submission":"import sys\nfrom math import factorial\ninput = sys.stdin.readline\n\n\ndef log(*args):\n    print(*args, file=sys.stderr)\n\n\ndef main():\n    x, y = map(int, input().rstrip().split())\n    # \u5168\u90e8 i + 1, j + 2\u304c\u6700\u521d\u3060\u3063\u305f\u3068\u3059\u308b\n    # a + 2b = x, 2a + b = y\n    # =>\n    # a = x - 2b\n    # b = y - 2a\n    # =>\n    # b = y - 2x + 4b\n    # 3b = 2x - y\n    # b = (2x - y) \/ 3\n    # a = (2y - x) \/ 3\n    if (2 * x - y) % 3 != 0 or (2 * y - x) % 3 != 0:\n        print(0)\n        return\n    a = (2 * x - y) \/\/ 3\n    b = (2 * y - x) \/\/ 3\n    if a < 0 or b < 0:\n        print(0)\n        return\n    # (a + b) C min(a, b)\n    # => (a + b)! \/ (min(a, b) ! * (a + b - min(a, b)) !\n    mod = 10**9 + 7\n    ans = (factorial_mod(a + b, mod) * pow(factorial_mod(min(a, b), mod), mod - 2, mod)\n           * pow(factorial_mod(a + b - min(a, b), mod), mod - 2, mod)) % mod\n    print(ans)\n\n\ndef factorial_mod(a, mod):\n    ans = 1\n    for v in range(1, a + 1):\n        ans *= v\n        ans %= mod\n    return ans\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s515739975","submission":"N = int(input())\nA = list(map(int, input().split()))\ntmp = [0] * N\nans = []\nans_m = 0\nfor i in range(N, 0, -1):\n    x = 0\n    for j in range(i, N+1, i):\n        x += tmp[j-1]\n    if x % 2 != A[i-1]:\n        tmp[i-1] = 1\n        ans_m += 1\n        ans.append(str(i))\nprint(ans_m)\nif ans:\n    print(\" \".join(ans))\n\n\n","label":1}
{"problem_id":"p03597","problem":"We have an N \\times N square grid.\nWe will paint each square in the grid either black or white.\nIf we paint exactly A squares white, how many squares will be painted black?","submission_id":"s442348415","submission":"n = int(input())\na = int(input())\n\nmenseki = n**2\nprint(int(menseki-a))","label":1}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s046401128","submission":"N = int(input())\nT = []\nXY = []\nans = \"Yes\"\n\nfor i in range(N):\n  t,x,y = map(int,input().split())\n  T.append(t)\n  XY.append([x,y])\n\nif T[0]>=abs(XY[0][0])+abs(XY[0][1]) and T[0]%2==(abs(XY[0][0])+abs(XY[0][1]))%2:\n  None\nelse:\n  ans = \"No\"\n\nfor i in range(1,N):\n  dT=T[i]-T[i-1]\n  dX=abs(XY[i][0]-XY[i-1][0])\n  dY=abs(XY[i][1]-XY[i-1][1])\n  if dT >= dX+dY and dT%2 == (dX+dY)%2:\n    None\n  else:\n    ans = \"No\"\n\nprint(ans)","label":1}
{"problem_id":"p03239","problem":"When Mr. X is away from home, he has decided to use his smartwatch to search the best route to go back home, to participate in ABC.\nYou, the smartwatch, has found N routes to his home.\nIf Mr. X uses the i-th of these routes, he will get home in time t_i at cost c_i.\nFind the smallest cost of a route that takes not longer than time T.","submission_id":"s909728776","submission":"import bisect,collections,copy,heapq,itertools,math,string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef M(): return map(int,sys.stdin.readline().rstrip().split())\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\nN, T = M()\nans = 100000\nfor _ in range(N):\n    c, t = M()\n    if t <= T:\n        ans = min(ans, c)\nif ans == 100000:\n    print('TLE')\nelse:\n    print(ans)","label":1}
{"problem_id":"p02380","problem":"For given two sides of a triangle a and b and the angle C between them, calculate the following properties:","submission_id":"s909390362","submission":"import math\n\n\ndef main():\n    a, b, c = map(int, input().split())\n    angle = math.radians(c)\n    s = (1\/2) * math.sin(angle) * a * b\n    L = a + b + (a**2 + b**2 - 2*a*b*math.cos(angle))**(1\/2)\n    h = math.sin(angle) * b\n    print('{0:.5f}\\n{1:.5f}\\n{2:.5f}'.format(s, L, h))\n\n\nif __name__ == '__main__':\n    main()\n\n","label":1}
{"problem_id":"p02814","problem":"Given are a sequence A= {a_1,a_2,......a_N} of N positive even numbers, and an integer M.\nLet a semi-common multiple of A be a positive integer X that satisfies the following condition for every k (1 \\leq k \\leq N):\n\nThere exists a non-negative integer p such that X= a_k \\times (p+0.5).\n\nFind the number of semi-common multiples of A among the integers between 1 and M (inclusive).","submission_id":"s448354486","submission":"n,m=map(int,input().split())\na=list(map(int,input().split()))\n\nimport math\ndef lcm(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\nx=1\nfor i in range(n):\n  x=lcm(x,a[i]\/\/2)\n\npower=[0]*n\nfor i in range(n):\n  while a[i]%2==0:\n    a[i]\/\/=2\n    power[i]+=1\n    \nif power.count(power[0])==n:  \n  print((m+x)\/\/(2*x))\nelse:\n  print(0)","label":1}
{"problem_id":"p02988","problem":"We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.","submission_id":"s764668343","submission":"import sys\n\nN = int(sys.stdin.readline())\nP = list(map(int, sys.stdin.readline().split()))\n\nans = 0\nfor i in range(1, N-1):\n    if P[i-1] < P[i] < P[i+1] or P[i-1] > P[i] > P[i+1]:\n        ans += 1\n\nprint(ans)","label":1}
{"problem_id":"p02676","problem":"We have a string S consisting of lowercase English letters.\nIf the length of S is at most K, print S without change.\nIf the length of S exceeds K, extract the first K characters in S, append ... to the end of them, and print the result.","submission_id":"s847921471","submission":"k = int(input())\ns = input()\n\nif len(s) <= k:\n    print(s)\nelif len(s) > k:\n    s_k = s[0:k]\n    print(s_k + \"...\")","label":1}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s581527899","submission":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(str, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n#import numpy as np\nfrom decimal import *\n        \n#\u975e\u518d\u5e30\u30d0\u30fc\u30b8\u30e7\u30f3\nN = INT()\n\nw = [\"a\"]\n\nwhile  w:\n    s = w.pop()\n    if len(s) == N:\n        print(s)\n        continue\n    else:\n        for j in range(len(set(s)), -1, -1):\n            t = s+ascii_lowercase[j]\n            w.append(t)","label":1}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s299311409","submission":"import heapq\nt = 1\ndef max(a,b):\n\tif a > b:\n\t\treturn a\n\treturn b\nwhile t > 0:\n\tt -= 1\n\t# n = map(int,input().split())\n\tn = int(input())\n\t# a = list(map(int,input().strip().split()))[0:n]\n\t# b = list(map(int,input().strip().split()))[0:n]\n\tc = list(map(int,input().strip().split()))[0:n-1]\n\tb = []\n\tfor i in range(n):\n\t\tb.append(0)\n\tb[0] = c[0]\n\tb[n-1] = c[n-2]\n\tfor i in range(1,n-1):\n\t\tb[i] = min(c[i],c[i-1])\n\tans = 0\n\tfor i in range(n):\n\t\tans += b[i]\n\tprint(ans)\n\t# print(n*n*n)\n\t# m = 1000\n\t# i = 0\n\t# while i < n:\n\t# \tj = i\n\t# \twhile j+1 < n and v[j+1] >= v[j]:\n\t# \t\tj += 1\n\t# \tx = m\/\/v[i]\n\t# \tm = m%v[i]\n\t# \ttemp = x*v[j]\n\t# \tm += temp\n\t# \ti = j+1\n\t# print(m)\n","label":1}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s087834811","submission":"x,y,z,w = map(int,input().split())\nX,Y = (z-x),(w-y)\na,b = (z - Y),(w + X)\nc,d = (a - X),(b - Y)\nprint(a,b,c,d)\n","label":1}
{"problem_id":"p02988","problem":"We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.","submission_id":"s438449419","submission":"n = int(input())\nl = list(map(int,input().split()))\ncount = 0\n\nfor i in range(n-2):\n    if l[i] < l[i+1] < l[i+2] or l[i+2] < l[i+1] < l[i]:\n        count += 1\n\nprint(count)","label":1}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s449218036","submission":"a = input()\nb = input()\nans = 0\nfor i in range (0,3):\n    if a[i] == b[i]:\n        ans = ans + 1\nprint(ans)","label":1}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s639741700","submission":"n = int(input())\nn_s = str(n)\nm = 0\nfor i in range(len(n_s)):\n    m += int(n_s[i])\n    m = m % 9\n\nif m == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":1}
{"problem_id":"p02578","problem":"N persons are standing in a row. The height of the i-th person from the front is A_i.\nWe want to have each person stand on a stool of some heights - at least zero - so that the following condition is satisfied for every person:\nCondition: Nobody in front of the person is taller than the person. Here, the height of a person includes the stool.\nFind the minimum total height of the stools needed to meet this goal.","submission_id":"s709434864","submission":"n = int(input())\ns = list(map(int, input().split()))\n\nrate = 0\ncount = 0\nfor i, v in enumerate(s):\n    if i == 0:\n        rate = v\n        continue\n\n    if rate > v:\n        tmp = rate - v\n        count += tmp\n    else:\n        rate = v\n\nprint(count)\n","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s278268436","submission":"# B - Christmas Eve Eve\n\nN = int(input())\nP = []\nfor _ in range(N):\n    P.append(int(input()))\n    \nP.sort(reverse=True)\n\nprint(P[0]\/\/2 + sum(P[1:]))","label":1}
{"problem_id":"p03697","problem":"You are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.","submission_id":"s143693340","submission":"A,B = input().split(' ')\nA = int(A)\nB = int(B)\nif A+B < 10:\n  print(A+B)\nelse:\n  print('error')","label":1}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s750798193","submission":"N = int(input())\n\ni = 1\nrlt = 0\nwhile N > i**2 + i:\n  if (N-i)%i == 0:\n    rlt += (N-i)\/\/i\n  i += 1\n    \nprint(rlt)","label":1}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s720132554","submission":"from collections import defaultdict\nN = int(input())\ndic = defaultdict(lambda:0)\nfor _ in range(N):\n    key = input()\n    dic[key] += 1\n\nmaxnum = max(dic.values())\ncollection = []\nfor key, value in dic.items():\n    if value == maxnum:\n        collection.append(key)\n\ncollection.sort()\nfor word in collection:\n    print(word)","label":1}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s694441108","submission":"h, n = map(int, input().split())\nab = []\nfor _ in range(n):\n    ab.append(list(map(int, input().split())))\ninf = 1001001001\nlis = [inf] * (2*10**4+5)\nlis[0] = 0\nfor i in range(len(lis)):\n    for j in range(n):\n        a = ab[j][0]\n        b = ab[j][1]\n        if i+a < len(lis):\n            lis[i+a] = min(lis[i]+b, lis[i+a])\nprint(min(lis[h:]))","label":1}
{"problem_id":"p03436","problem":"We have an H \\times W grid whose squares are painted black or white. The square at the i-th row from the top and the j-th column from the left is denoted as (i, j).\nSnuke would like to play the following game on this grid. At the beginning of the game, there is a character called Kenus at square (1, 1). The player repeatedly moves Kenus up, down, left or right by one square. The game is completed when Kenus reaches square (H, W) passing only white squares.\nBefore Snuke starts the game, he can change the color of some of the white squares to black. However, he cannot change the color of square (1, 1) and (H, W). Also, changes of color must all be carried out before the beginning of the game.\nWhen the game is completed, Snuke's score will be the number of times he changed the color of a square before the beginning of the game. Find the maximum possible score that Snuke can achieve, or print -1 if the game cannot be completed, that is, Kenus can never reach square (H, W) regardless of how Snuke changes the color of the squares.  \nThe color of the squares are given to you as characters s_{i, j}. If square (i, j) is initially painted by white, s_{i, j} is .; if square (i, j) is initially painted by black, s_{i, j} is #.","submission_id":"s980764791","submission":"from collections import deque\n\nh, w = map(int, input().split())\ns = [input() for _ in range(h)]\n\ncnt = 0\nfor i in s:\n    cnt += i.count('.')\n\nqueue = deque([[0, 0]])\nvisited = [[1] * w for _ in range(h)]\nvisited[0][0] = 0\n\ndef bfs():\n    while len(queue) > 0:\n        h1, w1 = queue.popleft()\n        if h1 == h - 1 and w1 == w - 1:\n            return visited[h1][w1]\n        for k, l in ([1, 0], [-1, 0], [0, 1], [0, -1]):\n            n_h, n_w = h1 + k, w1 + l\n            if n_h < 0 or n_w < 0 or n_h >= h or n_w >= w:\n                continue\n            if visited[n_h][n_w] == 1 and s[n_h][n_w] == '.':\n                queue.append([n_h, n_w])\n                visited[n_h][n_w] += visited[h1][w1]\n    return -1\n    \nbfs = bfs()\nans = 0\nif bfs == -1:\n    ans = -1\nelse:\n    ans = cnt - bfs - 1\nprint(ans)\n","label":1}
{"problem_id":"p03361","problem":"We have a canvas divided into a grid with H rows and W columns. The square at the i-th row from the top and the j-th column from the left is represented as (i, j).\nInitially, all the squares are white. square1001 wants to draw a picture with black paint. His specific objective is to make Square (i, j) black when s_{i, j}= #, and to make Square (i, j) white when s_{i, j}= ..\nHowever, since he is not a good painter, he can only choose two squares that are horizontally or vertically adjacent and paint those squares black, for some number of times (possibly zero). He may choose squares that are already painted black, in which case the color of those squares remain black.\nDetermine if square1001 can achieve his objective.","submission_id":"s630883815","submission":"H,W = map(int,input().split())\nS = [input() for _ in range(H)]\nA = [(1,0),(0,1),(-1,0),(0,-1)]\nfor i in range(H):\n    for j in range(W):\n        if S[i][j] == \"#\":\n            bol = 0\n            for dx,dy in A:\n                if 0<=j+dx<=W-1 and 0<=i+dy<=H-1:\n                    if S[i+dy][j+dx] == \"#\":\n                        bol = 1\n            if bol == 0:\n                print(\"No\")\n                exit()\nprint(\"Yes\")","label":1}
{"problem_id":"p04043","problem":"Iroha loves Haiku. Haiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\nTo create a Haiku, Iroha has come up with three different phrases. These phrases have A, B and C syllables, respectively. Determine whether she can construct a Haiku by using each of the phrases once, in some order.","submission_id":"s921857502","submission":"a=list(map(int,input().split()))\n\nb=a[0]+a[1]+a[2]\nc=a[2]-a[1]-a[0]\n\nif b==17 and (c==-7 or c==-3):\n  \n  print('YES')\n\nelse:\n  print('NO')\n","label":1}
{"problem_id":"p02853","problem":"We held two competitions: Coding Contest and Robot Maneuver.\nIn each competition, the contestants taking the 3-rd, 2-nd, and 1-st places receive 100000, 200000, and 300000 yen (the currency of Japan), respectively. Furthermore, a contestant taking the first place in both competitions receives an additional 400000 yen.\nDISCO-Kun took the X-th place in Coding Contest and the Y-th place in Robot Maneuver.\nFind the total amount of money he earned.","submission_id":"s036769193","submission":"# -*- coding: utf-8 -*-\n \nimport math\nimport itertools\nimport sys\nimport copy\n \n# \u5165\u529b\n#A, B, C, D = map(int, input().split())\n#L = list(map(int, input().split()))\n#S = list(str(input()))\n#N = int(input())\nX, Y = map(int, input().split())\n\nsum = 0\nif X == 1 :\n  sum += 300000\nelif X == 2 :\n  sum += 200000\nelif X == 3 :\n  sum += 100000\n\nif Y == 1 :\n  sum += 300000\nelif Y == 2 :\n  sum += 200000\nelif Y == 3 :\n  sum += 100000\n\nif X == 1 and Y == 1 :\n  sum += 400000\n  \nprint (sum)\n","label":1}
{"problem_id":"p02865","problem":"How many ways are there to choose two distinct positive integers totaling N, disregarding the order?","submission_id":"s702404720","submission":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\nn = I()\nif n%2 == 0:\n    print(n\/\/2 - 1)\nelse:\n    print((n+1)\/\/2 - 1)\n","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s872006412","submission":"N = int(input())\nList = list(map(int,input().split()))\n\nl = 10**6\n\nfor i in List:\n  k=0\n  while i%2 == 0:\n    i\/=2\n    if i==0: break\n    k+=1\n    \n  l = min(k,l)\n\nprint(l)","label":1}
{"problem_id":"p02717","problem":"We have three boxes A, B, and C, each of which contains an integer.\nCurrently, the boxes A, B, and C contain the integers X, Y, and Z, respectively.\nWe will now do the operations below in order. Find the content of each box afterward.  \n\nSwap the contents of the boxes A and B\nSwap the contents of the boxes A and C","submission_id":"s774985081","submission":"x,y,z = map(int, input().split())\nx,y = y,x\nx,z = z,x\nprint(\"{} {} {}\".format(x,y,z))","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s192023623","submission":"word = input()\nif (word.endswith('s')):\n    print(word + 'es')\nelse:\n    print(word + 's')","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s372324650","submission":"S = input()\n\nif(S.endswith('s')):\n        print(S+'es')\nelse:\n        print(S+'s')","label":1}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s731615978","submission":"S=input()\nyear=int(S[:4])\nyear+=1\nprint(str(year)+\"\/\"+S[5:])","label":1}
{"problem_id":"p03474","problem":"The postal code in Atcoder Kingdom is A+B+1 characters long, its (A+1)-th character is a hyphen -, and the other characters are digits from 0 through 9.\nYou are given a string S. Determine whether it follows the postal code format in Atcoder Kingdom.","submission_id":"s416450975","submission":"A, B = map(int, input().split())\nS = list(input())\nx = len(S)\nif len(S) != A + B + 1:\n  print('No')\nif S[A] == '-' :\n  if S.count('-') == 1:\n  \n    print('Yes')\n  else:\n    print('No')\nelse:\n  print('No')","label":1}
{"problem_id":"p03573","problem":"You are given three integers, A, B and C.\nAmong them, two are the same, but the remaining one is different from the rest.\nFor example, when A=5,B=7,C=5, A and C are the same, but B is different.\nFind the one that is different from the rest among the given three integers.","submission_id":"s611426762","submission":"import math\nimport itertools\nimport statistics\n#n = int(input())\n#n, d = list(input().split())\na, b , c = list(map(int, input().split()))\n\nif a==b:\n    print(c)\nelif b==c:\n    print(a)\nelse:\n    print(b)","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s562874916","submission":"def solve():\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(int(input()))\n    s.sort()\n    res = 0\n    for i, x in enumerate(s):\n        res += x\n        if i == n - 1:\n            res -= x \/\/ 2\n    print(res)\n\nsolve()","label":1}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s281181444","submission":"#!\/usr\/bin\/env python\n# coding: utf-8\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(input().split())\n\ndef rli():\n    return list(map(int, input().split()))\n\nH, W = 100, 100\n\ndef main():\n    a, b = rli()\n    grid = [['#' if j < H\/\/2 else '.' for _ in range(W)] for j in range(H)]\n    for i in range(a-1):\n        x = i*2 % W\n        y = (i*2 \/\/ W)*2\n        grid[y][x] = '.'\n    for i in range(b-1):\n        x = i*2 % W\n        y = 2*(i*2 \/\/ W)+H\/\/2+1\n        grid[y][x] = '#'\n    print(H, W)\n    for col in grid:\n        print(\"\".join(col))\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p03139","problem":"We conducted a survey on newspaper subscriptions.\nMore specifically, we asked each of the N respondents the following two questions:\n\nQuestion 1: Are you subscribing to Newspaper X?\nQuestion 2: Are you subscribing to Newspaper Y?\n\nAs the result, A respondents answered \"yes\" to Question 1, and B respondents answered \"yes\" to Question 2.\nWhat are the maximum possible number and the minimum possible number of respondents subscribing to both newspapers X and Y?\nWrite a program to answer this question.","submission_id":"s557313231","submission":"n, a, b = map(int, input().split())\nv_max = min(n,a,b)\nv_min = max(a+b-n, 0)\nprint(v_max, v_min)","label":1}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s247394491","submission":"X, K, D = map(int, input().split())\n\nX = abs(X)\n\nif K - (X \/\/ D) < 0:\n        X -= K * D\n        print(X)\nelse:\n        K = K - (X \/\/ D)\n        X -= D * (X \/\/ D)\n        if K % 2 == 0:\n                print(abs(X))\n        else:\n                print(abs(X-D))","label":1}
{"problem_id":"p03254","problem":"There are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he\/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.","submission_id":"s595561098","submission":"# AGC 027: A \u2013 Candy Distribution Again\nn, x = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\n\na.sort()\n\nanswer = 0\nfor i in range(n - 1):\n    if x - a[i] < 0:\n        break\n    answer += 1\n    x -= a[i]\n\nif x == a[n - 1]:\n    answer += 1\n\nprint(answer)","label":1}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s738946184","submission":"n = int(input())\n\nif n == 1:\n    print('Hello World')\n\nif n == 2:\n    a = [int(input()) for _ in range(2)]\n\n    print(sum(a))","label":1}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s735926236","submission":"# AtCoder Beginner Contest 140\n# C - Maximal Value\n\nN=int(input())\nBfirst=[10**5+3]\nB=list(map(int,input().split()))\nBlast=[10**5+3]\nBL=Bfirst+B+Blast\n\nans=0\n\nfor i in range (N):\n    ans+= min(BL[i],BL[i+1])\n\nprint(ans)","label":1}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s573542577","submission":"X, Y, A, B, C = map(int, input().split())\np = sorted(list(map(int, input().split())), reverse=True)\nq = sorted(list(map(int, input().split())), reverse=True)\nr = sorted(list(map(int, input().split())), reverse=True)\n\nred = p[:X]\ngreen = q[:Y]\n\nred_no_eat = 0\ngreen_no_eat = 0\nfor no in r:\n    red_worst = red[-red_no_eat - 1] if red_no_eat < X else 10 ** 10\n    green_worst = green[-green_no_eat - 1] if green_no_eat < Y else 10 ** 10\n    if no > red_worst or no > green_worst:\n        if red_worst < green_worst:\n            red_no_eat += 1\n        else:\n            green_no_eat += 1\nprint(sum(p[:X-red_no_eat]) + sum(q[:Y-green_no_eat]) + sum(r[:red_no_eat+green_no_eat]))\n","label":1}
{"problem_id":"p03369","problem":"In \"Takahashi-ya\", a ramen restaurant, a bowl of ramen costs 700 yen (the currency of Japan), plus 100 yen for each kind of topping (boiled egg, sliced pork, green onions).\nA customer ordered a bowl of ramen and told which toppings to put on his ramen to a clerk. The clerk took a memo of the order as a string S. S is three characters long, and if the first character in S is o, it means the ramen should be topped with boiled egg; if that character is x, it means the ramen should not be topped with boiled egg. Similarly, the second and third characters in S mean the presence or absence of sliced pork and green onions on top of the ramen.\nWrite a program that, when S is given, prints the price of the corresponding bowl of ramen.","submission_id":"s121820911","submission":"s = input()\nans = 700\nfor i in s:\n    if (i==\"o\"):\n        ans += 100\nprint(ans)","label":1}
{"problem_id":"p03108","problem":"There are N islands and M bridges.\nThe i-th bridge connects the A_i-th and B_i-th islands bidirectionally.\nInitially, we can travel between any two islands using some of these bridges.\nHowever, the results of a survey show that these bridges will all collapse because of aging, in the order from the first bridge to the M-th bridge.\nLet the inconvenience be the number of pairs of islands (a, b) (a < b) such that we are no longer able to travel between the a-th and b-th islands using some of the bridges remaining.\nFor each i (1 \\leq i \\leq M), find the inconvenience just after the i-th bridge collapses.","submission_id":"s810746297","submission":"import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\nsys.setrecursionlimit(20000000)\n\n\nclass UnionFind:\n    def __init__(self, n_nodes):\n        self.n_nodes = n_nodes\n        self.parent = [i for i in range(n_nodes)]\n        self.rank = [1] * n_nodes\n        self.size = [1] * n_nodes\n\n    def find(self, x):\n        if self.parent[x] == x:\n            return x\n        else:\n            self.parent[x] = self.find(self.parent[x])\n            return self.parent[x]\n\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.rank[x] > self.rank[y]:\n            self.parent[y] = x\n            self.size[x] += self.size[y]\n        else:\n            self.parent[x] = y\n            self.size[y] += self.size[x]\n            if self.rank[x] == self.rank[y]:\n                self.rank[y] += 1\n\n    def check(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def get_parent_list(self):\n        return [i for i in range(self.n_nodes) if self.find(i) == i]\n\n    def get_n_groups(self):\n        return len(self.get_parent_list())\n\n    def get_members(self, x):\n        parent = self.find(x)\n        return [i for i in range(self.n_nodes) if self.find(i) == parent]\n\n    def get_members_dict(self):\n        return {par: self.get_members(par) for par in self.get_parent_list()}\n\n\ndef main():\n    N, M = map(int, input().split())\n    Bridge = [list(map(int, input().split())) for _ in range(M)]\n    answer = [N * (N - 1) \/\/ 2]\n    UF = UnionFind(N)\n    for i in range(M):\n        AB = Bridge[M - i - 1]\n        A = AB[0] - 1\n        B = AB[1] - 1\n        if UF.check(A, B):\n            last = answer[-1]\n            answer.append(last)\n            continue\n        else:\n            before = UF.size[UF.find(A)]\n            UF.unite(AB[0] - 1, AB[1] - 1)\n            after = UF.size[UF.find(A)]\n            last = answer[-1]\n            if before == after:\n                answer.append(last)\n            else:\n                answer.append(last - (after - before) * before)\n\n    answer = answer[::-1]\n    print(*answer[1:], sep=\"\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s368543913","submission":"input();a=list(map(int,input().split()));c=0\nwhile all(i%2==0 for i in a):\n  a=[i\/2 for i in a];c+=1\nprint(c)","label":1}
{"problem_id":"p02615","problem":"Quickly after finishing the tutorial of the online game ATChat, you have decided to visit a particular place with N-1 players who happen to be there. These N players, including you, are numbered 1 through N, and the friendliness of Player i is A_i.\nThe N players will arrive at the place one by one in some order. To make sure nobody gets lost, you have set the following rule: players who have already arrived there should form a circle, and a player who has just arrived there should cut into the circle somewhere.\nWhen each player, except the first one to arrive, arrives at the place, the player gets comfort equal to the smaller of the friendliness of the clockwise adjacent player and that of the counter-clockwise adjacent player. The first player to arrive there gets the comfort of 0.\nWhat is the maximum total comfort the N players can get by optimally choosing the order of arrivals and the positions in the circle to cut into?","submission_id":"s812156472","submission":"#!\/usr\/bin\/env python3\nimport sys\nsys.setrecursionlimit(10**7)\nimport bisect\nimport heapq\nimport itertools\nimport math\nfrom collections import Counter, defaultdict, deque\nfrom copy import deepcopy\nfrom decimal import Decimal\nfrom math import gcd\nfrom operator import add, itemgetter, mul, xor\ndef cmb(n,r,mod):\n  bunshi=1\n  bunbo=1\n  for i in range(r):\n    bunbo = bunbo*(i+1)%mod\n    bunshi = bunshi*(n-i)%mod\n  return (bunshi*pow(bunbo,mod-2,mod))%mod\nmod = 10**9+7\ndef I(): return int(input())\ndef LI(): return list(map(int,input().split()))\ndef MI(): return map(int,input().split())\ndef LLI(n): return [list(map(int, input().split())) for _ in range(n)]\n\n#bisect.bisect_left(list,key)\u306flist\u306e\u306a\u304b\u3067key\u672a\u6e80\u306e\u6570\u5b57\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u8fd4\u3059\n#bisect.bisect_right(list, key)\u306flist\u306e\u306a\u304b\u3067key\u4ee5\u4e0b\u306e\u6570\u5b57\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u8fd4\u3059\n#\u3053\u308c\u3092\u5fdc\u7528\u3059\u308b\u3053\u3068\u3067\n#len(list) - bisect.bisect_left(list,key)\u306flist\u306e\u306a\u304b\u3067key\u4ee5\u4e0a\u306e\u6570\u5b57\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u8fd4\u3059\n#len(list) - bisect.bisect_right(list,key)\u306flist\u306e\u306a\u304b\u3067key\u3088\u308a\u5927\u304d\u3044\u6570\u5b57\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u8fd4\u3059\n#\u3053\u308c\u3089\u3092\u4f7f\u3046\u3068\u304d\u306f\u3042\u3089\u304b\u3058\u3081list\u3092\u30bd\u30fc\u30c8\u3057\u3066\u304a\u304f\u3053\u3068\uff01\nn = I()\na =LI()\na.sort(reverse=True)\nans = 0\nfor i in range(n):\n  ans += a[i\/\/2]\nprint(ans - a[0])","label":1}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s902030545","submission":"import sys\ninput = sys.stdin.readline\n\nx, y, a, b, c = map(int, input().split())\np = sorted(list(map(int, input().split())))\nq = sorted(list(map(int, input().split())))\nr = sorted(list(map(int, input().split())))\n\nn = 0\nnp = 0\nnq = 0\nans = 0\nwhile n < x + y:\n    cs = []\n    if p and np < x:\n        cs.append(p[-1])\n    if q and nq < y:\n        cs.append(q[-1])\n    if r:\n        cs.append(r[-1])\n    m = max(cs)\n    if r and m == r[-1]:\n        ans += r.pop()\n    elif p and m == p[-1]:\n        ans += p.pop()\n        np += 1\n    else:\n        ans += q.pop()\n        nq += 1\n    n += 1\n\nprint(ans)\n","label":1}
{"problem_id":"p02264","problem":"There are n processes in a queue. Each process has namei and timei.  The round-robin scheduling handles the processes in order. A round-robin scheduler gives each process a quantum (a time slot) and interrupts the process if it is not completed by then. The process is resumed and moved to the end of the queue, then the scheduler handles the next process in the queue.","submission_id":"s461670836","submission":"class Queue:\n    queue_list = []\n    start = 0\n    def enqueue(self, a):\n        self.queue_list.append(a)\n    def dequeue(self):\n        assert self.start != len(self.queue_list), \"\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\"\n        self.start += 1\n        return self.queue_list[self.start - 1]\n    def isEmpty(self):\n        return self.start == len(self.queue_list)\n\nn, q = list(map(lambda x: int(x), input().strip().split()))\n\nqueue = Queue()\n\nfor i in range(n):\n    queue.enqueue(input().strip().split())\n\n\nsum_time = 0\nwhile not queue.isEmpty():\n    name, time = queue.dequeue()\n    if int(time) <= q:\n        sum_time += int(time)\n        print(name + ' ' + str(sum_time))\n    else:\n        queue.enqueue([name, str(int(time) - q)])\n        sum_time += q\n","label":1}
{"problem_id":"p02759","problem":"Takahashi wants to print a document with N pages double-sided, where two pages of data can be printed on one sheet of paper.\nAt least how many sheets of paper does he need?","submission_id":"s123578973","submission":"N = int(input())\n\nprint(N\/\/2 + N % 2)","label":1}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s171397414","submission":"from collections import deque\nimport math\n\nN, D, A = map(int, input().split())\nmonster = [list(map(int, input().split())) for _ in range(N)]\nmonster.sort(key=lambda x:x[0])\n\nbomb = deque()\ns = 0\nans = 0\nfor i in range(N):\n    x, h = monster[i]\n    while len(bomb) > 0 and bomb[0][1] < x:\n        s -= bomb.popleft()[2]\n    h -= s\n    if h > 0:\n        cnt = math.ceil(h\/A)\n        damage = cnt*A\n        bomb.append([x, x+2*D, damage])\n        s += damage\n        ans += cnt\nprint(ans)","label":1}
{"problem_id":"p02850","problem":"Given is a tree G with N vertices.\nThe vertices are numbered 1 through N, and the i-th edge connects Vertex a_i and Vertex b_i.\nConsider painting the edges in G with some number of colors.\nWe want to paint them so that, for each vertex, the colors of the edges incident to that vertex are all different.\nAmong the colorings satisfying the condition above, construct one that uses the minimum number of colors.","submission_id":"s179363617","submission":"# -*- coding: utf-8 -*-\n\n#############\n# Libraries #\n#############\n\nimport sys\ninput = sys.stdin.readline\n\nimport math\nfrom collections import deque\nfrom fractions import gcd\nfrom functools import lru_cache\n\n\n#############\n# Constants #\n#############\n\nMOD = 10**9+7\nINF = float('inf')\n\n#############\n# Functions #\n#############\n\n######INPUT######\ndef inputI(): return int(input().strip())\ndef inputS(): return input().strip()\ndef inputIL(): return list(map(int,input().split()))\ndef inputSL(): return list(map(str,input().split()))\ndef inputILs(n): return list(int(input()) for _ in range(n))\ndef inputSLs(n): return list(input().strip() for _ in range(n))\ndef inputILL(n): return [list(map(int, input().split())) for _ in range(n)]\ndef inputSLL(n): return [list(map(str, input().split())) for _ in range(n)]\n\n#####Inverse#####\ndef inv(n): return pow(n, MOD-2, MOD)\n\n######Combination######\nkaijo_memo = []\ndef kaijo(n):\n  if(len(kaijo_memo) > n):\n    return kaijo_memo[n]\n  if(len(kaijo_memo) == 0):\n    kaijo_memo.append(1)\n  while(len(kaijo_memo) <= n):\n    kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\n  return kaijo_memo[n]\n\ngyaku_kaijo_memo = []\ndef gyaku_kaijo(n):\n  if(len(gyaku_kaijo_memo) > n):\n    return gyaku_kaijo_memo[n]\n  if(len(gyaku_kaijo_memo) == 0):\n    gyaku_kaijo_memo.append(1)\n  while(len(gyaku_kaijo_memo) <= n):\n    gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\n  return gyaku_kaijo_memo[n]\n\ndef nCr(n,r):\n  if(n == r):\n    return 1\n  if(n < r or r < 0):\n    return 0\n  ret = 1\n  ret = ret * kaijo(n) % MOD\n  ret = ret * gyaku_kaijo(r) % MOD\n  ret = ret * gyaku_kaijo(n-r) % MOD\n  return ret\n\n######Factorization######\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\n\n#####LCM#####\ndef lcm(a, b):\n    return a * b \/\/ gcd (a, b)\n\n#############\n# Main Code #\n#############\n\nN = inputI()\n\ngraph = [[] for _ in range(N)]\nedges = []\n \nfor _ in range(N - 1):\n  a, b = inputIL()\n  edges.append((a-1, b-1))\n  \nfor a, b in edges:\n  graph[a].append(b)\n  graph[b].append(a)\n  \nk = max(len(edges) for edges in graph)\n\ncolors = [color for color in range(1, k + 1)]\nusedcolor = [ None for _ in range(N) ]\ncolored = {}\n\ndef youcanusethiscolor(u):\n  for c in colors:\n    if c == usedcolor[u]:\n      continue\n    yield c\n    \nfor u in range(N):\n  color = youcanusethiscolor(u)\n  for v in graph[u]:\n    if (u,v) not in colored and (v,u) not in colored:\n      now = next(color)\n      colored[(u,v)] = colored[(v,u)] = now\n      usedcolor[v] = now\n  \nprint(k)\nfor a,b in edges:\n  print(colored[(a,b)])","label":1}
{"problem_id":"p03607","problem":"You are playing the following game with Joisino.\n\nInitially, you have a blank sheet of paper.\nJoisino announces a number. If that number is written on the sheet, erase the number from the sheet; if not, write the number on the sheet. This process is repeated N times.\nThen, you are asked a question: How many numbers are written on the sheet now?\n\nThe numbers announced by Joisino are given as A_1, ... ,A_N in the order she announces them. How many numbers will be written on the sheet at the end of the game?","submission_id":"s197299707","submission":"import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\nn = int(input())\nans = set()\nfor _ in range(n):\n    a = int(input())\n    if a in ans:\n        ans.remove(a)\n    else:\n        ans.add(a)\nprint(len(ans))\n","label":1}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s758603108","submission":"s = input()\nm = 0\ntemp = 0\nfor i in range(3):\n    if s[i] == 'R':\n        temp += 1\n        if temp > m:\n            m = temp\n    else:\n        if temp > m:\n            m = temp\n        temp = 0\nprint(m)","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s627328944","submission":"N = int(input())\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\nC = [int(i) for i in input().split()]\nans = 0\nfor i in range(N):\n    ans += B[A[i]-1]\n    if(A[i] == A[i-1]+1 and i != 0):\n        ans += C[A[i]-2]\nprint(ans)","label":1}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s155950635","submission":"import sys\nfrom bisect import bisect_left\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, D, A, *XH = map(int, read().split())\n    monster = [0] * N\n    for i, (x, h) in enumerate(zip(*[iter(XH)] * 2)):\n        monster[i] = (x, (h + A - 1) \/\/ A)\n\n    monster.sort()\n\n    pos = []\n    damage = []\n    idx = 0\n    cur_damage = 0\n\n    for x, h in monster:\n        while idx < len(pos) and pos[idx] < x:\n            cur_damage -= damage[idx]\n            idx += 1\n\n        if h > cur_damage:\n            pos.append(x + 2 * D)\n            damage.append(h - cur_damage)\n            cur_damage += h - cur_damage\n\n    print(sum(damage))\n    return\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p03549","problem":"Takahashi is now competing in a programming contest, but he received TLE in a problem where the answer is YES or NO.\nWhen he checked the detailed status of the submission, there were N test cases in the problem, and the code received TLE in M of those cases.\nThen, he rewrote the code to correctly solve each of those M cases with 1\/2 probability in 1900 milliseconds, and correctly solve each of the other N-M cases without fail in 100 milliseconds.\nNow, he goes through the following process:\n\nSubmit the code.\nWait until the code finishes execution on all the cases.\nIf the code fails to correctly solve some of the M cases, submit it again.\nRepeat until the code correctly solve all the cases in one submission.\n\nLet the expected value of the total execution time of the code be X milliseconds. Print X (as an integer).","submission_id":"s291991915","submission":"# coding: utf-8\n# Your code here!\nN,M=map(int,input().split())\ntmp=M*1900+(N-M)*100\ncnt=1\nfor i in range(M):\n    cnt*=2\n#print(cnt)\nprint(tmp*cnt)","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s037412567","submission":"n = int(input())\nA = list(map(int, input().split()))\nans = 10**18\nfor a in A:\n    cnt = 0\n    while a%2 == 0:\n        a \/\/= 2\n        cnt += 1\n    ans = min(cnt, ans)\nprint(ans)\n","label":1}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s124578684","submission":"import os\nimport sys\nimport math\nif os.environ.get(\"DEBUG\") is not None:\n    sys.stdin = open(\"in.txt\", \"r\")\nrl = sys.stdin.readline\nrls = sys.stdin.readline().rstrip(\"\\n\")\n\nx1, y1, x2, y2 = map(int, rls.split())\ndx, dy = x2 - x1, y2 - y1\nx3, y3 = x2 - dy, y2 + dx\nx4, y4 = x1 - dy, y1 + dx\nprint(x3, y3, x4, y4)","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s729901439","submission":"s = input()\n\nif s[len(s)-1] == 's':\n    print(s,'es',sep = '')\nelse:\n    print(s,'s',sep = '')","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s909831277","submission":"import sys\n\ndef main():\n    val = int(sys.stdin.readline().rstrip(\"\\n\"))\n    print val*val*val\n\nmain()","label":1}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s708550673","submission":"from itertools import permutations\nINFTY = 10**8\nN,M,R = map(int,input().split())\nr = list(map(int,input().split()))\nG = {i:[] for i in range(1,N+1)}\nfor _ in range(M):\n    a,b,c = map(int,input().split())\n    G[a].append((b,c))\n    G[b].append((a,c))\ndist = [[INFTY for _ in range(N+1)] for _ in range(N+1)]\nfor i in range(1,N+1):\n    dist[i][i] = 0\nfor i in range(1,N+1):\n    for j,d in G[i]:\n        dist[i][j] = d\nfor k in range(1,N+1):\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            dist[i][j] = min(dist[i][j],dist[i][k]+dist[k][j])\ndmin = 10**8\nfor x in permutations(range(R),R):\n    d = 0\n    for k in range(1,R):\n        d += dist[r[x[k]]][r[x[k-1]]]\n    dmin = min(dmin,d)\nprint(dmin)","label":1}
{"problem_id":"p03011","problem":"There are three airports A, B and C, and flights between each pair of airports in both directions.\nA one-way flight between airports A and B takes P hours, a one-way flight between airports B and C takes Q hours, and a one-way flight between airports C and A takes R hours.\nConsider a route where we start at one of the airports, fly to another airport and then fly to the other airport.\nWhat is the minimum possible sum of the flight times?","submission_id":"s543085609","submission":"S_list = list(map(int,input().split()))\nsum_1 = sum(S_list)\nS_list_1 = [sum_1 - i for i in S_list] \nprint(min(S_list_1))  ","label":1}
{"problem_id":"p02834","problem":"We have a tree with N vertices. The i-th edge connects Vertex A_i and B_i bidirectionally.\nTakahashi is standing at Vertex u, and Aoki is standing at Vertex v.\nNow, they will play a game of tag as follows:\n\n\n1. If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Takahashi moves to a vertex of his choice that is adjacent to his current vertex.\n\n\n2. If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Aoki moves to a vertex of his choice that is adjacent to his current vertex.\n\n\n3. Go back to step 1.\n\n\nTakahashi performs his moves so that the game ends as late as possible, while Aoki performs his moves so that the game ends as early as possible.\nFind the number of moves Aoki will perform before the end of the game if both Takahashi and Aoki know each other's position and strategy.\nIt can be proved that the game is bound to end.","submission_id":"s101516575","submission":"from collections import deque\n\nN,u,v = map(int,input().split())\nu -= 1\nv -= 1\nadj = [ [] for _ in range(N) ]\nfor _ in range(N-1):\n  a,b = map(int,input().split())\n  a -= 1\n  b -= 1\n  adj[a].append(b)\n  adj[b].append(a)\n\n\ndef bfs(v):\n  visited = [False] * N\n  q = deque([v])\n  span = [-1] * N\n\n  s = 0\n  while q:\n    l = len(q)\n    newq = deque([])\n\n    for _ in range(l):\n      node = q.popleft()\n      visited[node] = True\n      span[node] = s\n\n      for nei in adj[node]:\n        if not visited[nei]:\n          newq.append(nei)\n\n    q = newq\n    s += 1\n\n  return span\n\nt = bfs(u)\na = bfs(v)\n\nans = 0\nfor i in range(N):\n  if t[i] <= a[i]:\n    ans = max(ans, a[i]-1)\n\nprint(ans)","label":1}
{"problem_id":"p02696","problem":"Given are integers A, B, and N.\nFind the maximum possible value of floor(Ax\/B) - A \u00d7 floor(x\/B) for a non-negative integer x not greater than N.\nHere floor(t) denotes the greatest integer not greater than the real number t.","submission_id":"s657618860","submission":"import math\nA,B,N = map(int,input().split())\nif B>N:\n    x = N\nelse:\n    x = B-1\n\nval = math.floor(A*x\/B)\nprint(val)\n","label":1}
{"problem_id":"p02407","problem":"Write a program which reads a sequence and prints it in the reverse order.","submission_id":"s759267685","submission":"n = int(input())\nn_list = [int(i) for i in input().split(\" \")]\nn_list.reverse()\nprint(' '.join(map(str, n_list)))","label":1}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s361658932","submission":"input()\ns = input()\nn = int(input())\nprint(*[i if i==s[n-1] else \"*\" for i in s], sep='')","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s759394021","submission":"N, M = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort()\nA.reverse()\nif A[M - 1] * 4 * M < sum(A):\n    print(\"No\")\nelse:\n    print(\"Yes\")","label":1}
{"problem_id":"p02547","problem":"Tak performed the following action N times: rolling two dice.\nThe result of the i-th roll is D_{i,1} and D_{i,2}.\nCheck if doublets occurred at least three times in a row.\nSpecifically, check if there exists at lease one i such that D_{i,1}=D_{i,2}, D_{i+1,1}=D_{i+1,2} and D_{i+2,1}=D_{i+2,2} hold.","submission_id":"s919778278","submission":"N = int(input())\nD = [list(map(int, input().split())) for _ in range(N)]\n\nflag = False\ncnt = 0\n\nfor i in range(len(D)):\n    if D[i][0] == D[i][1]:\n        cnt += 1\n        if cnt == 3:\n            flag = True\n    else:\n        cnt = 0\n\nprint('Yes' if flag else 'No')","label":1}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s623059251","submission":"n = int(input())\n\ndef dfs(s, mx):\n    if len(s) == n:\n        print(s)\n    else:\n        for i in range(0, mx +1):\n            c = chr(ord('a')+i)\n            dfs(s+c, mx +1) if i == mx else dfs(s+c, mx)\n\ndfs('', 0)","label":1}
{"problem_id":"p02262","problem":"Shell Sort is a generalization of Insertion Sort to arrange a list of $n$ elements $A$.","submission_id":"s502946177","submission":"import sys\ninput = lambda: sys.stdin.readline().rstrip() \nsys.setrecursionlimit(10**7)\nINF = 10**10\ndef I(): return int(input())\ndef F(): return float(input())\ndef SS(): return input()\ndef LI(): return [int(x) for x in input().split()]\ndef LI_(): return [int(x)-1 for x in input().split()]\ndef LF(): return [float(x) for x in input().split()]\ndef LSS(): return input().split()\n\ndef resolve():\n    n = I()\n    A = [I() for _ in range(n)]\n\n    def insertionSort(A, n, g):\n        cnt = 0\n        for i in range(g, n):\n            v = A[i]\n            j = i-g\n            while j>=0 and A[j]>v:\n                A[j+g] = A[j]\n                j -= g\n                cnt += 1\n            A[j+g] = v\n        return cnt\n\n    # shellSort(A, n)\n    cnt = [0]\n\n    G = []\n    h = 1\n    while h<=n:\n        G.append(h)\n        h = 3*h+1\n    G = list(reversed(G))\n    m = len(G)\n\n    for i in range(m):\n        cnt[0] += insertionSort(A, n, G[i])\n\n    print(m)\n    print(*G)\n    print(cnt[0])\n    for i in A:\n        print(i)\n\nif __name__ == '__main__':\n    resolve()\n","label":1}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s312456508","submission":"from sys import stdin\nn = int(stdin.readline().rstrip())\na = [int(x) for x in stdin.readline().rstrip().split()]\nans = 0\n\na.sort(reverse = True)\n\nfor x in range(n):\n   if x % 2 == 0:\n      ans += a[x]\n   else:\n      ans -= a[x]\n\nprint(ans)","label":1}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s628425296","submission":"import sys\nfrom itertools import permutations\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n, m, r = map(int, input().split())\n    R = list(map(int, input().split()))\n    C = [[f_inf for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        C[i][i] = 0\n\n    for i in range(m):\n        a, b, c = map(int, input().split())\n        C[a - 1][b - 1] = c\n        C[b - 1][a - 1] = c\n\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                C[i][j] = min(C[i][j], C[i][k] + C[k][j])\n\n    res = f_inf\n    for pattern in permutations(R):\n        cost = 0\n        for k in range(r - 1):\n            i, j = pattern[k], pattern[k + 1]\n            cost += C[i - 1][j - 1]\n        res = min(res, cost)\n\n    print(res)\n\n\nif __name__ == '__main__':\n    resolve()\n","label":1}
{"problem_id":"p03591","problem":"Ringo is giving a present to Snuke.\nRingo has found out that Snuke loves yakiniku (a Japanese term meaning grilled meat. yaki: grilled, niku: meat). He supposes that Snuke likes grilled things starting with YAKI in Japanese, and does not like other things.\nYou are given a string S representing the Japanese name of Ringo's present to Snuke. Determine whether S starts with YAKI.","submission_id":"s680317803","submission":"import re\ns = input()\nif re.match(\"YAKI\", s):\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s598470352","submission":"n = int(input())\np = [int(input()) for i in range(n)]\n\nmaxkun = max(p)\/\/2\np.remove(max(p))\nprint(maxkun + sum(p))","label":1}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s199006540","submission":"from heapq import heappop,heappush\n\n\ndef main():\n    N,K=map(int,input().split())\n    Juwels=list(map(int,input().split()))\n\n\n    res=0\n\n    for l in range(min(N,K)+1):\n        for r in range(min(N,K)-l+1):\n            hands=[]\n            for juwel in Juwels[:l]:\n                heappush(hands,juwel)\n            for juwel in Juwels[N-r:]:\n                heappush(hands,juwel)\n\n            step=l+r\n            while len(hands)>0 and step<K:\n                value=heappop(hands)\n                if value>=0:\n                    heappush(hands,value)\n                    break\n                step+=1\n\n            res=max(res,sum(hands))\n\n    print(res)\n\nif __name__==\"__main__\":\n    main()\n\n\n","label":1}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s286299815","submission":"line = input()\nline2 = input()\ncount = 0\nif line[0] == line2[0]:\n  count += 1\nif line[1] == line2[1]:\n  count += 1\nif line[2] == line2[2]:\n  count += 1\nprint(count)\n","label":1}
{"problem_id":"p02606","problem":"How many multiples of d are there among the integers between L and R (inclusive)?","submission_id":"s405227494","submission":"def main():\n    L, R, d = map(int, input().split())\n    ans = 0\n    for i in range(L, R + 1):\n        if i % d == 0:\n            ans += 1\n    print(ans)\nif __name__ == \"__main__\":\n    main()","label":1}
{"problem_id":"p03130","problem":"There are four towns, numbered 1,2,3 and 4.\nAlso, there are three roads. The i-th road connects different towns a_i and b_i bidirectionally.\nNo two roads connect the same pair of towns. Other than these roads, there is no way to travel between these towns, but any town can be reached from any other town using these roads.\nDetermine if we can visit all the towns by traversing each of the roads exactly once.","submission_id":"s786334085","submission":"def main():\n    path_list = [0] * 4\n\n    for _ in range(3):\n        a, b = map(int, input().split())\n        path_list[a - 1] += 1\n        path_list[b - 1] += 1\n\n    odd, even = 0, 0\n    for path in path_list:\n        if path % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    if even == 4 or odd == 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s580202277","submission":"n = int(input())\nli = [int(x) for x in input().split()]\na = 10**6\nans = 0\nfor i in range(n-1):\n    if li[i]==li[i+1]:\n        li[i+1] = a\n        a += 1\n        ans += 1\nprint(ans)","label":1}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s990093871","submission":"N = int(input())\nA = []\nfor i in range(N):\n\tA.append(int(input()))\nm = 100\nsum = 0\nfor i in range(N):\n\tif A[i] % 10 != 0 and m > A[i]:\n\t\tm = A[i]\n\tsum += A[i]\nif m == 100:\n\tprint(0)\nelse:\n\tif sum % 10 == 0:\n\t\tprint(sum-m)\n\telse:\n\t\tprint(sum)","label":1}
{"problem_id":"p02411","problem":"Write a program which reads a list of student test scores and evaluates the performance for each student.","submission_id":"s134022640","submission":"m = []\nf = []\nr = []\nwhile(1):\n    a,b,c = map(int,raw_input().split())\n    if a == -1 and b == -1 and c == -1:\n        break\n    else:\n        m.append(a)\n        f.append(b)\n        r.append(c)\n\nfor i in range(len(m)):\n    if m[i] == -1 or f[i] == -1:\n        print \"F\"\n    elif m[i] + f[i] >= 80:\n        print \"A\"\n    elif m[i] + f[i] >= 65:\n        print \"B\"\n    elif m[i] + f[i] >= 50 or r[i] >= 50:\n        print \"C\"\n    elif m[i] + f[i] >= 30:\n        print \"D\"\n    else:\n        print \"F\"\n","label":1}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s116277058","submission":"n = int(input())\na = list(map(int, input().split()))\n\nfour = 0\ntwo = 0\nother = 0\nfor i in a:\n    if i % 4 == 0:\n        four += 1\n    elif i % 2 == 0:\n        two += 1\n    else:\n        other += 1\n\nans = 'No'\nother += two % 2\nif four + 1 >= other:\n    ans = 'Yes'\n\nprint(ans)","label":1}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s860798017","submission":"import sys\n\n\ninint = lambda: int(sys.stdin.readline())\ninintm = lambda: map(int, sys.stdin.readline().split())\ninintl = lambda: list(inintm())\ninstrm = lambda: map(str, sys.stdin.readline().split())\ninstrl = lambda: list(instrm())\n\nh, w = inintm()\nC = []\n\nfor _ in range(h):\n    C.append(input())\n\nfor c in C:\n    print(c)\n    print(c)\n","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s932509589","submission":"N, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\n\nA = sorted(A, reverse=True)\nS = sum(A)\nans = \"No\"\nfor i in range(M):\n    if A[i] >= S \/ (4 * M):\n        ans = \"Yes\"\n    else:\n        ans = \"No\"\n        break\nprint(ans)","label":1}
{"problem_id":"p03241","problem":"You are given integers N and M.\nConsider a sequence a of length N consisting of positive integers such that a_1 + a_2 + ... + a_N = M. Find the maximum possible value of the greatest common divisor of a_1, a_2, ..., a_N.","submission_id":"s275336003","submission":"N, M = map(int, input().split())\n\nif M%N == 0:\n\tprint(M\/\/N)\n\texit()\n\nA = []\nfor i in range (1, M\/\/N+1):\n\tif M%i == 0:\n\t\tA.append(i)\n\nprint(A[-1])","label":1}
{"problem_id":"p03697","problem":"You are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.","submission_id":"s410202219","submission":"a, b = map(int, input().split())\n\nans = a+b\nif ans >= 10:\n  ans = 'error'\n\nprint(ans)","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s064884311","submission":"sx, sy, tx, ty = map(int,input().split())\nS = ''\nS += (tx-sx)*'R'\nS += (ty-sy)*'U'\nS += (tx-sx)*'L'\nS += (ty-sy)*'D'\nS += 'D'\nS += (tx-sx+1)*'R'\nS += (ty-sy+1)*'U'\nS += 'L'\nS += 'U'\nS += (tx-sx+1)*'L'\nS += (ty-sy+1)*'D'\nS += 'R'\nprint(S)","label":1}
{"problem_id":"p02812","problem":"We have a string S of length N consisting of uppercase English letters.\nHow many times does ABC occur in S as contiguous subsequences (see Sample Inputs and Outputs)?","submission_id":"s933711926","submission":"N = int(input())\nS = str(input())\n\nans = 0\nfor i in range(N-2):\n  if (S[i]=='A') and (S[i+1]=='B') and (S[i+2]=='C'):\n    ans += 1\n    \nprint(ans)","label":1}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s855613288","submission":"N = int(input())\na = list(map(int, input().split()))\na_sorted = sorted(a, reverse = True)\n\nA, B = 0, 0\n\nfor i in range(N):\n    if i % 2 == 0:\n        A += a_sorted[i]\n    else:\n        B += a_sorted[i]\n\nprint(A-B)","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s271522879","submission":"N, M = map(int, input().split())\nA = list(map(int, input().split()))\nA.sort(reverse=True)\nsum_A = sum(A)\nfor i in range(M):\n    if A[i] < sum_A \/ (4 * M):\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s216049215","submission":"N = int(input())\nL = list(map(int, input().split()))\nl = []\nfor i in L:\n  l.append(format(i, 'b')[::-1].find('1'))\nprint(min(l))","label":1}
{"problem_id":"p02259","problem":"Write a program of the Bubble Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:","submission_id":"s781189641","submission":"#\n# coding: utf-8\n \ndef bubbleSort(arr, n):\n \n    flag = True\n    swap_num = 0\n \n    while flag:\n        flag = False\n        for j in xrange(n-1, 0, -1):\n            if arr[j] < arr[j-1]:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n                swap_num += 1\n                flag = True\n        pass\n    return swap_num\n \n \nn = int(raw_input())\narr = map(int, raw_input().split())\n \nnum = bubbleSort(arr, n)\nprint \" \".join(map(str, arr))\nprint num","label":1}
{"problem_id":"p02260","problem":"Write a program of the Selection Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:","submission_id":"s507941849","submission":"def sort(a):\n    n = len(a)\n    nswaps = 0\n    for i in range(n):\n        minv = None\n        minp = -1\n        for j in range(i, n):\n            if minv == None or minv > a[j]:\n                minv = a[j]\n                minp = j\n        a[minp], a[i] = a[i], a[minp]\n        if i != minp:\n            nswaps += 1\n    return nswaps\n\nn = int(raw_input())\na = map(int, raw_input().split(' '))\nnswaps = sort(a)\nprint ' '.join(map(str, a))\nprint nswaps","label":1}
{"problem_id":"p03813","problem":"Smeke has decided to participate in AtCoder Beginner Contest (ABC) if his current rating is less than 1200, and participate in AtCoder Regular Contest (ARC) otherwise.\nYou are given Smeke's current rating, x. Print ABC if Smeke will participate in ABC, and print ARC otherwise.","submission_id":"s622123274","submission":"print(\"AARBCC\"[int(input())<1200::2])","label":1}
{"problem_id":"p02806","problem":"Niwango created a playlist of N songs.\nThe title and the duration of the i-th song are s_i and t_i seconds, respectively.\nIt is guaranteed that s_1,\\ldots,s_N are all distinct.\nNiwango was doing some work while playing this playlist. (That is, all the songs were played once, in the order they appear in the playlist, without any pause in between.)\nHowever, he fell asleep during his work, and he woke up after all the songs were played.\nAccording to his record, it turned out that he fell asleep at the very end of the song titled X.\nFind the duration of time when some song was played while Niwango was asleep.","submission_id":"s547089308","submission":"import sys\nimport itertools\n# import numpy as np\nimport time\nimport math\nimport heapq\nfrom collections import defaultdict\nfrom collections import Counter\nsys.setrecursionlimit(10 ** 7)\n \nINF = 10 ** 18\nMOD = 10 ** 9 + 7\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n# map(int, input().split())\n\nN = int(input())\nS = [0] * N\nfor i in range(N):\n    s, t = input().split()\n    S[i] = (s, int(t))\nX = input()\n\ncnt = False\nans = 0\nfor s, t in S:\n    if s == X:\n        cnt = True\n    elif cnt:\n        ans += t\n\nprint(ans)","label":1}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s897743313","submission":"def main():\n    from queue import deque\n\n    K = int(input())\n    q = deque()\n    for i in range(1, 10):\n        q.append(i)\n    for i in range(K - 1):\n        s = q.popleft()\n        for j in range(-1, 2):\n            add = (s % 10) + j\n            if add >= 0 and add <= 9:\n                q.append(s * 10 + add)\n    print(q.popleft())\n\n\nmain()\n","label":1}
{"problem_id":"p03555","problem":"You are given a grid with 2 rows and 3 columns of squares.\nThe color of the square at the i-th row and j-th column is represented by the character C_{ij}.\nWrite a program that prints YES if this grid remains the same when rotated 180 degrees, and prints NO otherwise.","submission_id":"s422951040","submission":"A = str(input())\nA = list(A)\nB = str(input())\nB = list(B)\n\nif A[0] == B[2] and A[1] == B[1] and A[2] == B[0]:\n  print(\"YES\")\nelse:\n  print(\"NO\")","label":1}
{"problem_id":"p03697","problem":"You are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.","submission_id":"s064220407","submission":"a=eval(input().replace(*' +'))\nprint('error'if a>=10 else a)","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s510727627","submission":"import sys\ninput = sys.stdin.buffer.readline\n\n#sys.setrecursionlimit(10**9)\n#from functools import lru_cache\n\ndef RD(): return sys.stdin.read()\ndef II(): return int(input())\ndef MI(): return map(int,input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int,input().split()))\ndef LF(): return list(map(float,input().split()))\ndef TI(): return tuple(map(int,input().split()))\n# rstrip().decode()\n\ndef main():\n\tn,m=MI()\n\tA=LI()\n\tA.sort(reverse=True)\n\tS=sum(A)\n\n\n\tans=\"Yes\"\n\n\tfor i in range(m):\n\t\tif A[i]*4*m<S:\n\t\t\tans=\"No\"\n\t\t\tbreak\n\n\tprint(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\tmain()\n","label":1}
{"problem_id":"p03635","problem":"In K-city, there are n streets running east-west, and m streets running north-south. Each street running east-west and each street running north-south cross each other. We will call the smallest area that is surrounded by four streets a block. How many blocks there are in K-city?","submission_id":"s255998386","submission":"# -*- coding: utf-8 -*-\nimport sys\nimport copy\nimport collections\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\nimport math\nimport itertools\n \n# NO, PAY-PAY\n#import numpy as np\n#import statistics\n#from statistics import mean, median,variance,stdev\n \ndef inputInt(): return int(input())\ndef inputMap(): return map(int, input().split())\ndef inputList(): return list(map(int, input().split()))\n \ndef main():\n    n,m = inputMap()\n    \n    print((n-1) * (m-1))\n    \n    \nif __name__ == \"__main__\":\n\tmain()\n","label":1}
{"problem_id":"p03456","problem":"AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.","submission_id":"s333277572","submission":"a,b=map(str,input().split())\nab=int(a+b)\n\nans=\"No\"\nfor i in range(1010):\n    x=i**2\n    if x==ab:\n        ans=\"Yes\"\n        break\n\nprint(ans)","label":1}
{"problem_id":"p03290","problem":"A programming competition site AtCode provides algorithmic problems.\nEach problem is allocated a score based on its difficulty.\nCurrently, for each integer i between 1 and D (inclusive), there are p_i problems with a score of 100i points.\nThese p_1 + \u2026 + p_D problems are all of the problems available on AtCode.\nA user of AtCode has a value called total score.\nThe total score of a user is the sum of the following two elements:\n\nBase score: the sum of the scores of all problems solved by the user.\nPerfect bonuses: when a user solves all problems with a score of 100i points, he\/she earns the perfect bonus of c_i points, aside from the base score (1 \u2264 i \u2264 D).\n\nTakahashi, who is the new user of AtCode, has not solved any problem.\nHis objective is to have a total score of G or more points.\nAt least how many problems does he need to solve for this objective?","submission_id":"s093203471","submission":"# complete\u3059\u308bset\u3092\u6c7a\u3081\u6253\u3063\u3066\u8003\u3048\u308b\u3002\n\nfrom itertools import product\n\nd, g = map(int, input().split())\nans = 10 ** 10\nPC = [list(map(int, input().split())) for _ in range(d)]\nkumiawase = list(product([1, 0], repeat=d))\nfor kumi in kumiawase:\n    cnt = 0\n    temp = 0\n    unused = []\n    for i in range(d):\n        p, c = PC[i]\n        if kumi[i] == 1:\n            temp += (i + 1) * 100 * p\n            temp += c\n            cnt += p\n        else:\n            unused.append(((i + 1) * 100, p))\n    if temp >= g:\n        ans = min(ans, cnt)\n    else:\n        if not unused:\n            continue\n        remain = g - temp\n        unused.sort(reverse=True)\n        saidai, kaisu = unused[0]\n        if remain <= (kaisu - 1) * saidai:\n            cnt += (remain + saidai - 1) \/\/ (saidai)\n            ans = min(ans, cnt)\n\nprint(ans)\n","label":1}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s146207800","submission":"#62\nh,w = map(int,input().split())\nc = []\nfor i in range(h):\n    a = list(map(str,input().split()))\n    c.append(a)\n    c.append(a)\n    \nfor i in range(2*h):\n    print(\"\".join(c[i]))\n    \n","label":1}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s127042858","submission":"s = input()\nt = input()\ns_l = len(s)\nt_l = len(t)\ns_l -= (t_l-1)\nif(t in s):\n    print(0)\n    exit()\n\nma = 0\nfor si in range(s_l):\n    cnt = 0\n    for ti in range(t_l):\n        if(s[si+ti]==t[ti]):\n            cnt += 1\n    ma = max(ma,cnt)\n\nprint(t_l - ma)\n","label":1}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s313108893","submission":"H, W = map(int, input().split())\n\nif H == 1 or W == 1:\n    print(1)\nelse:\n    if H % 2 == 1 and W % 2 == 1:\n        print(int(H * (W + 1) \/ 2) - H \/\/ 2)\n    else:\n        print(int(H * W \/ 2))\n","label":1}
{"problem_id":"p03045","problem":"There are N cards placed face down in a row. On each card, an integer 1 or 2 is written.\nLet A_i be the integer written on the i-th card.\nYour objective is to guess A_1, A_2, ..., A_N correctly.\nYou know the following facts:\n\nFor each i = 1, 2, ..., M, the value A_{X_i} + A_{Y_i} + Z_i is an even number.\n\nYou are a magician and can use the following magic any number of times:\nMagic: Choose one card and know the integer A_i written on it. The cost of using this magic is 1.\nWhat is the minimum cost required to determine all of A_1, A_2, ..., A_N?\nIt is guaranteed that there is no contradiction in given input.","submission_id":"s703851186","submission":"#Union Find\n#x\u306e\u6839\u3092\u6c42\u3081\u308b\ndef find(x):\n    if par[x] < 0:\n        return x\n    else:\n        par[x] = find(par[x])\n        return par[x]\n#x\u3068y\u306e\u5c5e\u3059\u308b\u96c6\u5408\u306e\u4f75\u5408\ndef unite(x,y):\n    x = find(x)\n    y = find(y)\n    \n    if x == y:\n        return False\n    else:\n        #size\u306e\u5927\u304d\u3044\u307b\u3046\u304cx\n        if par[x] > par[y]:\n            x,y = y,x\n        par[x] += par[y]\n        par[y] = x\n        return True\n\n#x\u3068y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u306e\u5224\u5b9a\ndef same(x,y):\n    return find(x) == find(y)\n\n#x\u304c\u5c5e\u3059\u308b\u96c6\u5408\u306e\u500b\u6570\ndef size(x):\n    return -par[find(x)]\n\n\nN,M = map(int,input().split())\n#\u521d\u671f\u5316\n#\u6839\u306a\u3089-size,\u5b50\u306a\u3089\u89aa\u306e\u9802\u70b9\npar = [-1]*(N+1)\n\nfor i in range(0,M,1):\n    x,y,z = map(int,input().split())\n    unite(x,y)\n\nans = 0\nfor i in range(1,N+1,1):\n    if par[i] < 0:\n        ans +=1\nprint(ans)\n","label":1}
{"problem_id":"p02898","problem":"N friends of Takahashi has come to a theme park.\nTo ride the most popular roller coaster in the park, you must be at least K centimeters tall.\nThe i-th friend is h_i centimeters tall.\nHow many of the Takahashi's friends can ride the roller coaster?","submission_id":"s002646958","submission":"n, k = map(int, input().split())\nH = list(map(int, input().split()))\n\nL = [h for h in H if h >= k]\nprint(len(L))","label":1}
{"problem_id":"p03634","problem":"You are given a tree with N vertices.\nHere, a tree is a kind of graph, and more specifically, a connected undirected graph with N-1 edges, where N is the number of its vertices.\nThe i-th edge (1\u2264i\u2264N-1) connects Vertices a_i and b_i, and has a length of c_i.\nYou are also given Q queries and an integer K. In the j-th query (1\u2264j\u2264Q):\n\nfind the length of the shortest path from Vertex x_j and Vertex y_j via Vertex K.","submission_id":"s972446011","submission":"import sys\nsys.setrecursionlimit(10**9)\n\nN=int(input())\ngraph=[[] for _ in range(N)]\nfor i in range(N-1):\n    a,b,c=map(int,input().split())\n    a-=1\n    b-=1\n    graph[a].append([b,c])\n    graph[b].append([a,c])\n\ndef dfs(start):\n    for x,cost in graph[start]:\n        if d[x]==-1:\n            d[x]=d[start]+cost\n            dfs(x)\n\nQ,K=map(int,input().split())\nK-=1\nd=[-1]*N\nd[K]=0\ndfs(K)\nfor i in range(Q):\n    x,y=map(int,input().split())\n    x-=1\n    y-=1\n    print(d[x]+d[y])","label":1}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s826096043","submission":"s = input()\nmod = 10 ** 9 + 7\n\nl = len(s)\ndp = [[0] * 4 for _ in range(l + 1)]\ndp[0][0] = 1\n\nfor i, e in enumerate(s, 1):\n\t# do not use in ABC\n\tfor j in range(4):\n\t\tif e == \"?\":\n\t\t\tdp[i][j] += dp[i-1][j] * 3\n\t\telse:\n\t\t\tdp[i][j] += dp[i-1][j]\n\n\t# use in ABC\n\tif e == \"A\" or e == \"?\":\n\t\tdp[i][1] += dp[i-1][0]\n\tif e == \"B\" or e == \"?\":\n\t\tdp[i][2] += dp[i-1][1]\n\tif e == \"C\" or e == \"?\":\n\t\tdp[i][3] += dp[i-1][2]\n\n\tfor j in range(4):\n\t\tdp[i][j] %= mod\n\n\nans = dp[l][3]\nprint(ans)\n","label":1}
{"problem_id":"p02982","problem":"There are N points in a D-dimensional space.\nThe coordinates of the i-th point are (X_{i1}, X_{i2}, ..., X_{iD}).\nThe distance between two points with coordinates (y_1, y_2, ..., y_D) and (z_1, z_2, ..., z_D) is \\sqrt{(y_1 - z_1)^2 + (y_2 - z_2)^2 + ... + (y_D - z_D)^2}.\nHow many pairs (i, j) (i < j) are there such that the distance between the i-th point and the j-th point is an integer?","submission_id":"s336415152","submission":"n, d = map(int, input().split())\np = [list(map(int, input().split())) for i in range(n)]\ncnt = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        dist = 0\n        for k in range(d):\n            dist += (p[i][k] - p[j][k])**2\n        if int(dist**0.5) == dist**0.5:\n            cnt += 1\nprint(cnt)","label":1}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s649930989","submission":"import sys\ninput = sys.stdin.readline\n\nn = int(input())\n\nbt, bx, by = 0, 0, 0\ncond = True\nfor i in range(n):\n    t, x, y = [int(w) for w in input().split()]\n    dt = t-bt\n    dist = abs(bx-x)+abs(by-y)\n    if dt >= dist and (dt-dist) % 2 == 0:\n        bt, bx, by = t, x, y\n        continue\n    cond = False\n\n\nprint(\"Yes\" if cond else \"No\")\n","label":1}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s127301931","submission":"n = int(input())\n\nlist = [list(map(int, input().split())) for x in range(n)]\n\nt = 0\nx = 0\ny = 0\nflag = 0\n\nfor i in range(n):\n    if i>0:\n        t = list[i][0] - list[i-1][0]\n        d = abs(list[i][1] - list[i-1][1] + list[i][2] - list[i-1][2])\n    else:\n        t = list[i][0]\n        d = abs(list[i][1] + list[i][2])\n    if (t-d) >= 0 and (d-t)%2 == 0:\n        continue\n    else:\n        flag = 1\n        print('No')\n        break\nif flag ==0:\n    print('Yes')\n","label":1}
{"problem_id":"p02691","problem":"You are the top spy of AtCoder Kingdom. To prevent the stolen secret from being handed to AlDebaran Kingdom, you have sneaked into the party where the transaction happens.\nThere are N attendees in the party, and they are given attendee numbers from 1 through N. The height of Attendee i is A_i.\nAccording to an examination beforehand, you know that a pair of attendees satisfying the condition below will make the transaction.\n\nThe absolute difference of their attendee numbers is equal to the sum of their heights.\n\nThere are \\frac{N(N-1)}{2} ways to choose two from the N attendees and make a pair. Among them, how many satisfy the condition above?\nP.S.: We cannot let you know the secret.","submission_id":"s990327756","submission":"from collections import Counter\n\nn=int(input())\nA=list(map(int,input().split()) )\n\nleft = [i+A[i] for i in range(n)]\nright = [i-A[i] for i in range(n)]\n\nr_counter = Counter(right)\n\nans = 0\n\nfor l in left:\n    ans += r_counter[l]\n\nprint(ans)","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s950473533","submission":"x= str(input())\na=list(x)\nl=len(a)\nif a[l-1]=='s':\n    print(x+'es')\nelse:\n    print(x+'s')","label":1}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s242620896","submission":"# https:\/\/atcoder.jp\/contests\/panasonic2020\/submissions\/12881278\n# D - String Equivalence\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n = int(input())\n\n    def dfs(S, available):\n        if len(S) == n:\n            print(\"\".join(S))\n            return\n\n        for i in range(available + 1):\n            S.append(chr(97 + i))\n            dfs(S, max(available, i + 1))\n            S.pop()\n\n    dfs([], 0)\n\n\nif __name__ == '__main__':\n    resolve()\n","label":1}
{"problem_id":"p03230","problem":"You are given an integer N. Determine if there exists a tuple of subsets of \\{1,2,...N\\}, (S_1,S_2,...,S_k), that satisfies the following conditions:\n\nEach of the integers 1,2,...,N is contained in exactly two of the sets S_1,S_2,...,S_k.\nAny two of the sets S_1,S_2,...,S_k have exactly one element in common.\n\nIf such a tuple exists, construct one such tuple.","submission_id":"s235241920","submission":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\n\n\ndef isqrt(n):\n    if n > 0:\n        x = 1 << (n.bit_length() + 1) \/\/ 2\n        y = (x + n \/\/ x) \/\/ 2\n        while y < x:\n            x = y\n            y = (x + n \/\/ x) \/\/ 2\n        return x\n    elif n == 0:\n        return 0\n    else:\n        raise ValueError(\"isqrt() argument must be nonnegative\")\n\n\ndef main():\n    N = int(readline())\n    n = (isqrt(8 * N + 1) - 1) \/\/ 2\n    if N != n * (n + 1) \/\/ 2:\n        print('No')\n        return\n\n    it = iter(range(1, N + 1))\n    G = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1):\n            G[i][j] = G[j][i] = next(it)\n\n    print('Yes')\n    print(n + 1)\n    for row in G:\n        print(n, end=' ')\n        print(*row)\n    print(n, end=' ')\n    print(*(G[i][i] for i in range(n)))\n    return\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s357139326","submission":"#!\/usr\/bin\/env python\n\nclass PrimeFactor():\n    def __init__(self, n):\n        '''\n            Note:\n                make the table of Eratosthenes' sieve\n                and minFactor[] for fast_factorization.\n        '''\n        self.n = n\n        self.table = [True for _ in range(n+1)]\n        self.table[0] = self.table[1] = False\n        self.minFactor = [-1 for _ in range(n+1)]\n\n        for i in range(2, n+1):\n            if not self.table[i]: continue\n            self.minFactor[i] = i \n            for j in range(i*i, n+1, i): \n                self.table[j] = False\n                self.minFactor[j] = i \n    \n    def fast_factorization(self, n):\n        '''\n            Note:\n                factorization\n                return the form of {factor: num}.\n        '''\n        data = {}\n        while n > 1:\n            if self.minFactor[n] not in data:\n                data[self.minFactor[n]] = 1 \n            else:\n                data[self.minFactor[n]] += 1\n            n \/\/= self.minFactor[n]\n        return data\n\n    def count_divisors(self, n):\n        '''\n            Note:\n                return the number of divisors of n.\n        '''\n        ret = 1 \n        for v in self.fast_factorization(n).values():\n            ret *= (v+1)\n        return ret \n\nn = int(input())\nans = 0\na = PrimeFactor(n)\nfor i in range(1, n): \n    ans += a.count_divisors(i)\nprint(ans)\n","label":1}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s905504590","submission":"x, y, a, b, c = map(int, input().split())\nP = list(map(int, input().split()))\nQ = list(map(int, input().split()))\nR = list(map(int, input().split()))\nP.sort(reverse=True); Q.sort(reverse=True)\nprint(sum(sorted(P[:x]+Q[:y]+R, reverse=True)[:x+y]))","label":1}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s991799233","submission":"n = input()\n\nfor i in range(3):\n  if int(n[i]) == 7:\n    print('Yes')\n    exit()\n\nprint('No')","label":1}
{"problem_id":"p03353","problem":"You are given a string s.\nAmong the different substrings of s, print the K-th lexicographically smallest one.\nA substring of s is a string obtained by taking out a non-empty contiguous part in s.\nFor example, if s = ababc, a, bab and ababc are substrings of s, while ac, z and an empty string are not.\nAlso, we say that substrings are different when they are different as strings.\nLet X = x_{1}x_{2}...x_{n} and Y = y_{1}y_{2}...y_{m} be two distinct strings. X is lexicographically larger than Y if and only if Y is a prefix of X or x_{j} > y_{j} where j is the smallest integer such that x_{j} \\neq y_{j}.","submission_id":"s575958625","submission":"s=list(input())\nK=int(input())\nsubstring=set()\nalphabet=list('abcdefghijklmnopqrstuvwxyz')\nl=0\nwhile len(substring)<K:\n    x=alphabet[l]\n    l+=1\n    for i in range(len(s)):\n        if s[i]==x:\n            string=s[i]\n            substring.add(string)\n            for k in range(1,5):\n                try:\n                    string+=s[i+k]\n                    substring.add(string)\n                except:\n                    pass\nans=sorted(list(substring))\nprint(ans[K-1])","label":1}
{"problem_id":"p03283","problem":"In Takahashi Kingdom, there is a east-west railroad and N cities along it, numbered 1, 2, 3, ..., N from west to east.\nA company called AtCoder Express possesses M trains, and the train i runs from City L_i to City R_i (it is possible that L_i = R_i).\nTakahashi the king is interested in the following Q matters:\n\nThe number of the trains that runs strictly within the section from City p_i to City q_i, that is, the number of trains j such that p_i \\leq L_j and R_j \\leq q_i.\n\nAlthough he is genius, this is too much data to process by himself. Find the answer for each of these Q queries to help him.","submission_id":"s652297196","submission":"import bisect\nN,M,Q=map(int,input().split())\nLR = []\nfor _ in range(M):\n    LR.append(list(map(int,input().split())))\nLR.sort()\nL = [x for x,_ in LR]\nR = [x for _,x in LR]\n\n#\u4e8b\u524d\u306b\u914d\u5217\u5316 ans[i][j] i\u4ee5\u964d\u306b\u30b9\u30bf\u30fc\u30c8\u3001j\u4ee5\u524d\u306b\u5b8c\u4e86\u306e\u500b\u6570\nans = [[0]*510 for _ in range(510)]\nfor i in range(1,501):\n    idx_L = bisect.bisect_left(L,i)\n    arr=R[idx_L:]\n    for ar in arr:\n        ans[i][ar]+=1\n    for j in range(1,501):\n        ans[i][j]=ans[i][j-1]+ans[i][j]\n    \nfor _ in range(Q):\n    l,r = map(int,input().split())\n    print(ans[l][r])\n","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s909583890","submission":"N = int(input())\np = [int(input()) for i in range(N)]\n\nanswer = sum(p)\n\nprint(int(answer - max(p) * 0.5))","label":1}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s850687939","submission":"x,y = map(int,input().split())\nans = 0\nif x*y < 0:\n    ans += 1\nelif (x>0 and y==0) or (x==0 and y<0):\n    ans += 1\nelif y < x:\n    ans += 2\nans += abs(abs(x)-abs(y))\nprint(ans)","label":1}
{"problem_id":"p03095","problem":"You are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.","submission_id":"s118063689","submission":"n = int(input())\ns = list(input())\nmod = 10 ** 9 + 7\nalph_count = [0] * 200\nans = 0\nfor i in s:\n    m = ord(i)\n    alph_count[m] += 1\n    c = 1\n    for j in range(97, 123):\n        if not m == j:\n            c *= alph_count[j] + 1\n        c %= mod\n    ans += c\n    ans %= mod\nprint(ans)","label":1}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s326086143","submission":"import sys\nfrom math import ceil, floor, sqrt, sin, cos, pi\nfrom itertools import accumulate, permutations, combinations\nfrom fractions import gcd # \u6700\u5927\u516c\u7d04\u6570\nfrom collections import deque, Counter\nfrom operator import itemgetter\nfrom heapq import heappop,heappush\nsys.setrecursionlimit(10**7)\ndef lcm(x, y): return ((x * y) \/\/ gcd(x, y)) # \u6700\u5c0f\u516c\u500d\u6570\n# list(map(int, input().split()))\n\na, b = map(int, input().split())\nif a >= 13:\n    print(b)\nelif a >= 6:\n    print(b\/\/2)\nelse:\n    print(0)\n","label":1}
{"problem_id":"p02863","problem":"Takahashi is at an all-you-can-eat restaurant.\nThe restaurant offers N kinds of dishes. It takes A_i minutes to eat the i-th dish, whose deliciousness is B_i.\nThe restaurant has the following rules:\n\nYou can only order one dish at a time. The dish ordered will be immediately served and ready to eat.\nYou cannot order the same kind of dish more than once.\nUntil you finish eating the dish already served, you cannot order a new dish.\nAfter T-0.5 minutes from the first order, you can no longer place a new order, but you can continue eating the dish already served.\n\nLet Takahashi's happiness be the sum of the deliciousness of the dishes he eats in this restaurant.\nWhat is the maximum possible happiness achieved by making optimal choices?","submission_id":"s249892465","submission":"def main():\n    import numpy as np\n    n,t=map(int,input().split())\n    F=[tuple(map(int,input().split())) for _ in range(n)]\n    F.sort(key=lambda x:x[0])\n\n    dp=np.zeros([n+1,t],dtype=np.int64)\n    for i in range(n):\n        a1=F[i][0]\n        b1=F[i][1]\n        dp[i+1][:a1]=dp[i][:a1]\n        dp[i+1][a1:]=np.maximum(dp[i][a1:],dp[i][:-a1]+b1)\n    \n    ans=0\n    for i in range(n):\n        ans=max(ans,dp[i][-1]+F[i][1])\n    print(ans)\n         \nif __name__=='__main__':\n    main()","label":1}
{"problem_id":"p02769","problem":"There is a building with n rooms, numbered 1 to n.\nWe can move from any room to any other room in the building.\nLet us call the following event a move: a person in some room i goes to another room j~ (i \\neq j).\nInitially, there was one person in each room in the building.\nAfter that, we know that there were exactly k moves happened up to now.\nWe are interested in the number of people in each of the n rooms now. How many combinations of numbers of people in the n rooms are possible?\nFind the count modulo (10^9 + 7).","submission_id":"s672558695","submission":"MAX = 1000005\nMOD = 10**9+7\nfactrial = [0]*MAX\ninverse = [0]*MAX\nfactrial_inverse = [0]*MAX\n\n\n# \u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u524d\u51e6\u7406\ndef COMinit():\n    global factrial, inverse, factrial_inverse\n    factrial[0] = 1\n    factrial[1] = 1\n    inverse[1] = 1\n    factrial_inverse[0] = 1\n    factrial_inverse[1] = 1\n    for i in range(2, MAX):\n        factrial[i] = factrial[i-1] * i % MOD\n        inverse[i] = MOD - inverse[MOD % i] * (MOD\/\/i) % MOD\n        factrial_inverse[i] = factrial_inverse[i-1] * inverse[i] % MOD\n\n\n# \u4e8c\u9805\u4fc2\u6570\u8a08\u7b97\ndef COM(n, k):\n    global factrial, inverse, factrial_inverse\n    if n < k:\n        return 0\n    if n < 0 or k < 0:\n        return 0\n    return factrial[n] * (factrial_inverse[k] * factrial_inverse[n-k] % MOD) % MOD\n\n\n# \u524d\u51e6\u7406\u5b8c\u4e86\nCOMinit()\n\n\nN, K = map(int, input().split())\nans = 0\nfor i in range(min(K, N)+1):  # \u7a7a\u306b\u3067\u304d\u308b\u306e\u306fK\u90e8\u5c4b\u307e\u305f\u306f\u3001N-1\u90e8\u5c4b\u307e\u3067\u306e\u307f\u3002\n    ans += COM(N, i) * COM(N-1, i)\n    ans %= MOD\nprint(ans)\n","label":1}
{"problem_id":"p02417","problem":"Write a program which counts and reports the number of each alphabetical letter. Ignore the case of characters.","submission_id":"s150469031","submission":"import sys\n\nalphabets = range(ord('a'), ord('z') + 1)\ndic = { chr(c): 0 for c in alphabets }\n\ntext = sys.stdin.read()\nfor c in text:\n  c = c.lower()\n  if ord(c) in alphabets:\n    dic[c] += 1\n\nfor c, n in sorted(dic.items()):\n  print(c, \":\", n)","label":1}
{"problem_id":"p03112","problem":"Along a road running in an east-west direction, there are A shrines and B temples.\nThe i-th shrine from the west is located at a distance of s_i meters from the west end of the road, and the i-th temple from the west is located at a distance of t_i meters from the west end of the road.\nAnswer the following Q queries:\n\nQuery i (1 \\leq i \\leq Q): If we start from a point at a distance of x_i meters from the west end of the road and freely travel along the road, what is the minimum distance that needs to be traveled in order to visit one shrine and one temple? (It is allowed to pass by more shrines and temples than required.)","submission_id":"s709161408","submission":"import bisect\n\nA, B, Q = map(int, input().split())\nS = [int(input()) for _ in range(A)]\nT = [int(input()) for _ in range(B)]\nfor _ in range(Q):\n    x = int(input())\n    sr = min(bisect.bisect_left(S, x), A - 1)\n    sl = max(sr - 1, 0)\n    tr = min(bisect.bisect_left(T, x), B - 1)\n    tl = max(tr - 1, 0)\n    print(min(abs(x - S[sl]) + abs(S[sl] - T[tl]),\n              abs(x - S[sl]) + abs(S[sl] - T[tr]),\n              abs(x - S[sr]) + abs(S[sr] - T[tl]),\n              abs(x - S[sr]) + abs(S[sr] - T[tr]),\n              abs(x - T[tl]) + abs(T[tl] - S[sl]),\n              abs(x - T[tl]) + abs(T[tl] - S[sr]),\n              abs(x - T[tr]) + abs(T[tr] - S[sl]),\n              abs(x - T[tr]) + abs(T[tr] - S[sr])))\n","label":1}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s937227090","submission":"a, b = map(int, input().split())\nM = [['#']*100 for _ in range(50)] + [['.']*100 for _ in range(50)]\n\nfor i in range(a-1):\n    M[(2*i\/\/100)*2][2*i%100] = '.'\n\nfor i in range(b-1):\n    M[99 - (2*i\/\/100)*2][2*i%100] = '#'\n\nprint(100, 100) \nfor l in M:\n    print(''.join(l))","label":1}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s855166008","submission":"MOD = 10 ** 9 + 7\nn = 50\nfact = [0 for _ in range(n)]\ninvfact = [0 for _ in range(n)]\nfact[0] = 1\nfor i in range(1, n):\n    fact[i] = fact[i - 1] * i % MOD\n\ninvfact[n - 1] = pow(fact[n - 1], MOD - 2, MOD)\n\nfor i in range(n - 2, -1, -1):\n    invfact[i] = invfact[i + 1] * (i + 1) % MOD\ndef nCk(n, k):\n    if k < 0 or n < k:\n        return 0\n    else:\n        return fact[n] * invfact[k] * invfact[n - k] % MOD\n\nn, p = map(int, input().split())\na = list(map(int, input().split()))\neven = 0\nodd = 0\nfor num in a:\n    if num % 2 == 1:\n        odd += 1\n    else:\n        even += 1\nans = 0\nif p == 0:\n    for i in range(0, odd + 1, 2):\n        ans += nCk(odd, i)\n    ans *= 2 ** even\nelse:\n    for i in range(1, odd + 1, 2):\n        ans += nCk(odd, i)\n    ans *= 2 ** even\nprint(ans)","label":1}
{"problem_id":"p02987","problem":"You are given a 4-character string S consisting of uppercase English letters.\nDetermine if S consists of exactly two kinds of characters which both appear twice in S.","submission_id":"s789218954","submission":"S=input()\ns=list(set(S))\nprint(\"Yes\" if len(s)==2 and S.count(s[0])==S.count(s[1])==2 else \"No\")","label":1}
{"problem_id":"p02897","problem":"Given is an integer N.\nTakahashi chooses an integer a from the positive integers not greater than N with equal probability.\nFind the probability that a is odd.","submission_id":"s272948312","submission":"n = int(input())\n\nif n%2 == 0:\n  print(float((n\/\/2)\/n))\nelif n == 1:\n  print(float(1))\nelse:\n  print(float((n\/\/2 + 1)\/n))","label":1}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s010001026","submission":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N = int(readline())\n\n    if N == 1:\n        print('Hello World')\n    else:\n        A, B = map(int, read().split())\n        print(A + B)\n\n    return\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p03351","problem":"Three people, A, B and C, are trying to communicate using transceivers.\nThey are standing along a number line, and the coordinates of A, B and C are a, b and c (in meters), respectively.\nTwo people can directly communicate when the distance between them is at most d meters.\nDetermine if A and C can communicate, either directly or indirectly.\nHere, A and C can indirectly communicate when A and B can directly communicate and also B and C can directly communicate.","submission_id":"s505347858","submission":"a,b,c,d = map(int,input().split())\nd1 = a-b; d2 = c-b; d3 = a-c\n\nif d1 < 0:\n    d1 = -d1\nif d2 < 0:\n    d2 = -d2 \nif d3 < 0:\n    d3 = -d3\n\nif d1 <= d and d2 <= d or d3 <= d:\n    print('Yes')\nelse:\n    print('No')","label":1}
{"problem_id":"p03282","problem":"Mr. Infinity has a string S consisting of digits from 1 to 9. Each time the date changes, this string changes as follows:\n\nEach occurrence of 2 in S is replaced with 22. Similarly, each 3 becomes 333, 4 becomes 4444, 5 becomes 55555, 6 becomes 666666, 7 becomes 7777777, 8 becomes 88888888 and 9 becomes 999999999. 1 remains as 1.\n\nFor example, if S is 1324, it becomes 1333224444 the next day, and it becomes 133333333322224444444444444444 the day after next.\nYou are interested in what the string looks like after 5 \\times 10^{15} days. What is the K-th character from the left in the string after 5 \\times 10^{15} days?","submission_id":"s258364656","submission":"S = input()\nK = int(input())\nOK = True\nfor i in range(min(K, len(S))):\n    if S[i] != '1':\n        OK = False\nif OK:\n    print('1')\n    exit()\nfor i in range(len(S)):\n    if S[i] != '1':\n        print(S[i])\n        exit()\n","label":1}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s348092998","submission":"from itertools import permutations\nfrom scipy.sparse.csgraph import floyd_warshall\nn,m,r=map(int,input().split())\nR=list(map(int,input().split()))\nl=[[float('inf')]*n for _ in range(n)]\nfor _ in range(m):\n    a,b,c,=map(int,input().split())\n    a-=1\n    b-=1\n    l[a][b]=c\n    l[b][a]=c\nfor i in range(n):\n    l[i][i] = 0 #\u81ea\u8eab\u306e\u3068\u3053\u308d\u306b\u884c\u304f\u30b3\u30b9\u30c8\u306f\uff10\ndef warshall_floyd(d):\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j]=min(d[i][j],d[i][k]+d[k][j])\n                \n    return d\n#F=warshall_floyd(l)\nF1 = floyd_warshall(l)\nans=float('inf')\nfor v in permutations(R):\n    temp=0\n    for i in range(r-1):\n        temp+=F1[v[i]-1][v[i+1]-1]\n    ans=min(ans,temp)\nprint(int(ans))","label":1}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s401640981","submission":"N=input()\nN=list(N)\nN=map(lambda x: int(x),N)\nif sum(N)%9==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n                \n            \n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n        \n\n    \n\n\n\n\n\n\n\n\n\n    \n\n        \n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n    \n\n\n\n\n\n    \n\n\n\n\n\n\n        \n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            \n    \n\n\n    \n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s308007962","submission":"#import sys\n#import numpy as np\nimport math\n#from fractions import Fraction\nimport itertools\nfrom collections import deque\nfrom collections import Counter\nimport heapq\n#from fractions  import gcd\n#input=sys.stdin.readline\nimport bisect\ns=input()\nif s[-1]==\"s\":\n    print(s+\"es\")\nelse:\n    print(s+\"s\")","label":1}
{"problem_id":"p02263","problem":"Reverse Polish notation is a notation where every operator follows all of its operands. For example, an expression (1+2)*(5+4) in the conventional Polish notation can be represented as 1 2 + 5 4 + * in the Reverse Polish notation. One of advantages of the Reverse Polish notation is that it is parenthesis-free.","submission_id":"s798390137","submission":"data = [str(i) for i in input().split()]\nstack = []\n\n\ndef is_int(num) -> bool:\n    try:\n        int(num)\n    except ValueError:\n        return False\n    return True\n\n\nfor d in data:\n    if is_int(d):\n        stack.append(d)\n    else:\n        if d == '+':\n            a = int(stack.pop())\n            b = int(stack.pop())\n            stack.append(a + b)\n        elif d == '-':\n            a = int(stack.pop())\n            b = int(stack.pop())\n            stack.append(b - a)\n        elif d == '*':\n            a = int(stack.pop())\n            b = int(stack.pop())\n            stack.append(a * b)\n        else:\n            raise ValueError('+, -, *\u4ee5\u5916\u306e\u6f14\u7b97\u5b50\u304c\u51fa\u73fe\u3002')\nprint(stack.pop())\n","label":1}
{"problem_id":"p03385","problem":"You are given a string S of length 3 consisting of a, b and c. Determine if S can be obtained by permuting abc.","submission_id":"s561283305","submission":"s = sorted(input())\nif s[0] == 'a' and s[1] == 'b' and s[2] == 'c':\n\tprint('Yes')\nelse:\n\tprint('No')\n\n","label":1}
{"problem_id":"p02859","problem":"Given is an integer r.\nHow many times is the area of a circle of radius r larger than the area of a circle of radius 1?\nIt can be proved that the answer is always an integer under the constraints given.","submission_id":"s474733047","submission":"r = int(input())\n \nanswer = r * r\n \nprint(answer)\n","label":1}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s985219706","submission":"s = input()\nt = input()\nans = len(t)\nfor i in range(len(s)-len(t)+1):\n\tdiff = 0\n\tfor j in range(len(t)):\n\t\tif not s[i+j] == t[j]:\n\t\t\tdiff=diff+1\n\tans = min(ans, diff)\nprint(ans)","label":1}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s745229163","submission":"n = int(input())\ns = input()\nl_cnt = 0\nr_cnt = 0\nl_ans = 0\nfor i in s:\n    if i == ')':\n        if l_cnt:\n            l_cnt -= 1\n        else:\n            l_ans += 1\n    else:\n        l_cnt += 1\n\nprint(l_ans*'(' + s + l_cnt*')')","label":1}
{"problem_id":"p03261","problem":"Takahashi is practicing shiritori alone again today.\nShiritori is a game as follows:\n\nIn the first turn, a player announces any one word.\nIn the subsequent turns, a player announces a word that satisfies the following conditions:\nThat word is not announced before.\nThe first character of that word is the same as the last character of the last word announced.\n\n\n\nIn this game, he is practicing to announce as many words as possible in ten seconds.\nYou are given the number of words Takahashi announced, N, and the i-th word he announced, W_i, for each i. Determine if the rules of shiritori was observed, that is, every word announced by him satisfied the conditions.","submission_id":"s185017981","submission":"N = int(input())\nW = [input() for _ in range(N)]\n\nres = True\n\ndic = {}\n\nlast = \"\"\n\nfor w in W:\n    if last != \"\":\n        if w in dic:\n            res = False\n        if not w[0] == last:\n            res = False\n\n    dic[w] = 1\n    last = w[-1]\n\n\nif res:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s925579621","submission":"h,w=map(int, input().split(\" \"))\nif 1 in [h,w]:\n  print(1)\nelif h * w % 2 == 0:\n  print(h * w \/\/ 2)\nelse:\n  print(h * w \/\/ 2 + 1)","label":1}
{"problem_id":"p02918","problem":"There are N people standing in a queue from west to east.\nGiven is a string S of length N representing the directions of the people.\nThe i-th person from the west is facing west if the i-th character of S is L, and east if that character of S is R.\nA person is happy if the person in front of him\/her is facing the same direction.\nIf no person is standing in front of a person, however, he\/she is not happy.\nYou can perform the following operation any number of times between 0 and K (inclusive):\nOperation: Choose integers l and r such that 1 \\leq l \\leq r \\leq N, and rotate by 180 degrees the part of the queue: the l-th, (l+1)-th, ..., r-th persons. That is, for each i = 0, 1, ..., r-l, the (l + i)-th person from the west will stand the (r - i)-th from the west after the operation, facing east if he\/she is facing west now, and vice versa.\nWhat is the maximum possible number of happy people you can have?","submission_id":"s805337287","submission":"N,K = map(int,input().split())\nS = input()\nnum = 1\nfor i in range(0,len(S)-1):\n    if S[i] != S[i+1]:\n        num += 1\nnum = max(1,num-K*2)\nprint(N - num)","label":1}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s539245608","submission":"from sys import stdin\nnii=lambda:map(int,stdin.readline().split())\nlnii=lambda:list(map(int,stdin.readline().split()))\n\nd,t,s=nii()\nprint('Yes' if d\/s<=t else 'No')","label":1}
{"problem_id":"p03638","problem":"We have a grid with H rows and W columns of squares.\nSnuke is painting these squares in colors 1, 2, ..., N.\nHere, the following conditions should be satisfied:\n\nFor each i (1 \u2264 i \u2264 N), there are exactly a_i squares painted in Color i. Here, a_1 + a_2 + ... + a_N = H W.\nFor each i (1 \u2264 i \u2264 N), the squares painted in Color i are 4-connected. That is, every square painted in Color i can be reached from every square painted in Color i by repeatedly traveling to a horizontally or vertically adjacent square painted in Color i.\n\nFind a way to paint the squares so that the conditions are satisfied.\nIt can be shown that a solution always exists.","submission_id":"s721385443","submission":"h, w = map(int, input().split())\nn = int(input())\nl = list(map(int, input().split()))\n \nans = []\nfor i in range(n):\n  ans += [i+1]*l[i]\n\nfor i in range(h):\n  temp = ans[i*w:(i+1)*w]\n  if i%2 == 0:\n    print(*temp)\n  else:\n    temp = reversed(temp)\n    print(*temp)","label":1}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s937199342","submission":"S = input()\nT = input()\n\nmin_length = 10000\nlen_def = len(S) - len(T)\nfor i in range(len_def + 1):\n    counter = 0\n    for j in range(len(T)):\n        if S[j + i] != T[j]:\n            counter += 1\n\n    if counter < min_length:\n        min_length = counter\nprint(min_length)\n","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s394869937","submission":"def A():\n    S = input()\n    if(S[-1] == 's'):\n        S += 'es'\n    else:\n        S += 's'\n    print(S)\nA()","label":1}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s365534173","submission":"a = list(map(int, input().split()))\n\nprint(a[2] \/\/ a[0] * a[1])","label":1}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s974263336","submission":"a, b, c = map(int, input().split())\nif c - a - b < 0:\n    print(\"No\")\n    exit()\nif a*b*4 < (c - a - b)**2:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p03208","problem":"In some other world, today is Christmas Eve.\nThere are N trees planted in Mr. Takaha's garden. The height of the i-th tree (1 \\leq i \\leq N) is h_i meters.\nHe decides to choose K trees from these trees and decorate them with electric lights. To make the scenery more beautiful, the heights of the decorated trees should be as close to each other as possible.\nMore specifically, let the height of the tallest decorated tree be h_{max} meters, and the height of the shortest decorated tree be h_{min} meters. The smaller the value h_{max} - h_{min} is, the better. What is the minimum possible value of h_{max} - h_{min}?","submission_id":"s214204246","submission":"N, K = map(int, input().split())\nh = [int(input()) for _ in range(N)]\n\nh.sort()\nresult = 10**9+1\nfor i in range(N-K+1):\n    a = abs(h[i] - h[i+K-1])\n    if a < result:\n        result = a\n\nprint(result)","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s037750832","submission":"n = int(input())\na = [int(i) for i in input().split()]\nans = -1\ntrue = 1\n\nwhile true == 1:\n    for i in range(n):\n        if a[i]%2 != 0:\n            true = 0\n            break\n        else:\n            a[i] \/= 2\n    ans += 1\n\nprint(ans)","label":1}
{"problem_id":"p02973","problem":"You are given a sequence with N integers: A = \\{ A_1, A_2, \\cdots, A_N \\}.\nFor each of these N integers, we will choose a color and paint the integer with that color. Here the following condition must be satisfied:\n\nIf A_i and A_j (i < j) are painted with the same color, A_i < A_j.\n\nFind the minimum number of colors required to satisfy the condition.","submission_id":"s301790930","submission":"from sys import stdin\nfrom bisect import bisect\n\nN = int(stdin.readline().rstrip())\nA = []\nfor i in range(N):\n    A.append(int(input()))\n\ndp = []\nfor a in A[::-1]:\n    i = bisect(dp, a)\n    if i < len(dp):\n        dp[i] = a\n    else:\n        dp.append(a)\nprint(len(dp))","label":1}
{"problem_id":"p02719","problem":"Given any integer x, Aoki can do the operation below.\nOperation: Replace x with the absolute difference of x and K.\nYou are given the initial value of an integer N. Find the minimum possible value taken by N after Aoki does the operation zero or more times.","submission_id":"s443580358","submission":"N,K =map(int, input().split())\na = N % K\nif a > K \/ 2:\n  print(K - a)\nelse:\n  print(a)","label":1}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s323078011","submission":"n,k=map(int,input().split())\np=list(map(int,input().split()))\nc=list(map(int,input().split()))\nans=-10**10\nfor i in range(n):\n\tloop=[0]\n\tnow=i\n\twhile True:\n\t\tnow=p[now]-1\n\t\tloop.append(loop[-1]+c[now])\n\t\tif now==i:\n\t\t\tbreak\n\tL=len(loop)-1\n\tif k<=L:\n\t\tscore=max(loop[1:k+1])\n\t\tans=max(score,ans)\n\telse:\n\t\tscore=max(loop[-1],0)*(k\/\/L-1)\n\t\tans=max(ans,score)\n\t\tfor j in range(k%L+L):\n\t\t\tscore+=loop[j%L+1]-loop[j%L]\n\t\t\tans=max(score,ans)\nprint(ans)","label":1}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s791852262","submission":"def main():\n  N = int(input())\n  S = list(str(input()))\n  num_1 = 0\n  num_2 = 0\n  for i in range(N):\n    if S[i] == '(':\n      num_1 += 1\n    else:\n      if num_1 > 0: num_1 -= 1\n  for i in range(N-1, -1, -1):\n    if S[i] == ')':\n      num_2 += 1\n    else:\n      if num_2 > 0: num_2-=1\n  for i in range(num_1):\n    S.append(')')\n  for i in range(num_2):\n    S.insert(0, '(')\n  print(''.join(S))\n\nif __name__ == \"__main__\":\n  main()","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s448069466","submission":"def INT():\n    return int(input())\n\ndef MI():\n    return map(int, input().split())\n\ndef LI():\n    return list(map(int, input().split()))\n\nS = input()\n\nif S[len(S) - 1] == \"s\":\n    S += \"es\"\nelse:\n    S += \"s\"\n    \nprint(S)","label":1}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s546573102","submission":"a, b = map(int, input().split())\n\na -= 1\nb -= 1\n\nans = [[ '#' for _ in range(100)]]\n\nfor i in range(1, 49):\n    temp = [ '#' for _ in range(100)]\n    if a > 0:\n        if i % 2 != 0:\n            for j in range(min(a, 49)):\n                temp[2 * j + 1] = '.'\n                a -= 1\n        else:\n            ans.append(temp)\n            continue\n    else:\n        break\n    ans.append(temp)\n\nans.append([ '#' for _ in range(100)])\n\nans.append([ '.' for _ in range(100)])\n\nfor i in range(1, 49):\n    temp = [ '.' for _ in range(100)]\n    if b > 0:\n        if i % 2 != 0:\n            for j in range(min(b, 49)):\n                temp[2 * j + 1] = '#'\n                b -= 1\n        else:\n            ans.append(temp)\n            continue\n    else:\n        break\n    ans.append(temp)\n\nans.append([ '.' for _ in range(100)])\n\nprint(len(ans), '100')\n\nfor x in ans:\n    print(''.join(x))","label":1}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s052642739","submission":"A, B, T = list(map(int, input().split()))\nans = 0\ncnt = 1\n\nwhile cnt < T+0.5:\n  if cnt%A == 0:\n    ans = ans + B\n  cnt += 1\nprint(ans)","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s254795584","submission":"from sys import stdin\n\n\ndef ans():\n    _in = [_.rstrip() for _ in stdin.readlines()]\n    S = _in[0]  # type:str\n    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n    if S[-1] == 's':\n        S += 'es'\n    else:\n        S += 's'\n    ans = S\n    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    print(ans)\n\n\ndef main():\n    _in = [_.rstrip() for _ in stdin.readlines()]\n    S = list(_in[0])  # type:str\n    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n    ans = 0\n    if S[-1] == 's':\n        S[-1] += 'es'\n    else:\n        S[-1] += 's'\n    ans = ''.join(S)\n    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    #main()\n    ans()\n","label":1}
{"problem_id":"p02988","problem":"We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.","submission_id":"s507916198","submission":"#\u30cd\u30c3\u30c8\u306e\u3084\u3064\u3000\u81ea\u5206\u3067\u8003\u3048\u308b\n#from math import ceil\n#n, h = map(int, input().split( ))\nn = int(input())\nA = list(map(int, input().split( )))\nans = 0\nfor i in range(n-2):\n  if min(A[i], A[i+2]) <= A[i+1] and A[i+1] <= max(A[i], A[i+2]):\n    ans += 1\nprint(ans)","label":1}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s599617140","submission":"a,b,c,d=map(int,input().split());print(c-d+b,d+c-a,a-d+b,b+c-a)","label":1}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s071244986","submission":"n=int(input())\nli=[int(i) for i in input().split()]\n\nli=sorted(li)\nans=0\nfor i in range(n):\n\tans+=li[i*2]\nprint(ans)","label":1}
{"problem_id":"p03137","problem":"We will play a one-player game using a number line and N pieces.\nFirst, we place each of these pieces at some integer coordinate.\nHere, multiple pieces can be placed at the same coordinate.\nOur objective is to visit all of the M coordinates X_1, X_2, ..., X_M with these pieces, by repeating the following move:\nMove: Choose a piece and let x be its coordinate. Put that piece at coordinate x+1 or x-1.\nNote that the coordinates where we initially place the pieces are already regarded as visited.\nFind the minimum number of moves required to achieve the objective.","submission_id":"s575233935","submission":"import itertools\nn,m=map(int, input().split())\nx=[int(i) for i in input().split()]\nx.sort()\nif(n>=m):\n    print(0)\n    exit()\ndist = abs(x[-1]-x[0])\n\ndiff = []\n\nfor i in range(m-1):\n    diff.append([abs(x[i]-x[i+1]),i])\n\ndiff.sort(key = lambda x:x[0],reverse = True)\nfor i in range(n-1):\n    dist-=diff[i][0]\nprint(dist)\n","label":1}
{"problem_id":"p02987","problem":"You are given a 4-character string S consisting of uppercase English letters.\nDetermine if S consists of exactly two kinds of characters which both appear twice in S.","submission_id":"s753836014","submission":"a=list(input())\nb=set(a)\ncount=0\nfor i in range(4):\n  if a[0]==a[i]:\n    count+=1\nif len(b)==2 and (count==2):\n  print('Yes')\nelse:\n  print('No')\n","label":1}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s387485252","submission":"def main():\n    h, _ = map(int, input().split())\n    c = [input() for _ in range(h)]\n    for cn in c:\n        print(f'{cn}\\n{cn}')\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p03254","problem":"There are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he\/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.","submission_id":"s748267214","submission":"n,x=map(int,input().split())\na=list(map(int,input().split()))\nans=0\n\na.sort()\n\nfor i in a:\n  x-=i\n  if x>0:\n    ans+=1\n    continue\n  \n  elif x==0:\n    ans+=1\n    break\n    \n  else:\n    break\n    \nif ans==n:\n  if x!=0:\n    ans-=1\n\n\nprint(ans)\n","label":1}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s459234966","submission":"from collections import deque\nfrom heapq import heappush, heappop\nfrom copy import deepcopy\n\nn, k = map(int, input().split())\nv = list(map(int, input().split()))\n\ndq = deque(v)\n\nans = 0\nfor ab in range(k + 1):\n    cd = k - ab\n    for a in range(ab + 1):\n        hp = []\n        cp = deepcopy(dq)\n\n        b = ab - a\n        for _ in range(a):\n            if cp:\n                val = cp.popleft()\n                heappush(hp, val)\n        for _ in range(b):\n            if cp:\n                val = cp.pop()\n                heappush(hp, val)\n\n        for _ in range(cd):\n            if not hp or hp[0] >= 0:\n                break\n            heappop(hp)\n\n        ans = max(ans, sum(hp))\n\nprint(ans)\n","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s123866990","submission":"SX,SY,TX,TY = (int(T) for T in input().split())\nprint('R'*(TX-SX)+'U'*(TY-SY)+'L'*(TX-SX)+'D'*(TY-SY)+'D'+'R'*(TX-SX+1)+'U'*(TY-SY+1)+'L'+'U'+'L'*(TX-SX+1)+'D'*(TY-SY+1)+'R')","label":1}
{"problem_id":"p03329","problem":"To make it difficult to withdraw money, a certain bank allows its customers to withdraw only one of the following amounts in one operation:\n\n\n1 yen (the currency of Japan)\n\n\n6 yen, 6^2(=36) yen, 6^3(=216) yen, ...\n\n\n9 yen, 9^2(=81) yen, 9^3(=729) yen, ...\n\n\nAt least how many operations are required to withdraw exactly N yen in total?\nIt is not allowed to re-deposit the money you withdrew.","submission_id":"s264929321","submission":"# dp answer\nN = int(input())\ndp = [N for i in range(N+1)]\ndp[0] = 0\nY = [1] + [6**i for i in range(1, 10) if 6**i <= N] + [9**i for i in range(1, 10) if 9**i <= N]\nY = sorted(Y)\nfor i in range(1, N+1):\n    for y in Y:\n        if i-y < 0:\n            break\n        dp[i] = min(dp[i], dp[i-y]+1)\nprint(dp[N])\n","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s591248861","submission":"sx, sy, tx, ty = map(int, input().split())\nxf, xb, yf, yb = 'R', 'L', 'U', 'D'\ndx = abs(tx - sx)\ndy = abs(ty - sy)\n\nif tx < sx:\n  xf, xb = 'L', 'R'\nif ty < sy:\n  yf, yb = 'D', 'U'\n\ns = \"\"\nif dx == 0:\n  s += yf*dy\n  s += xf\n  s += yb*dy\n  s += xb\n  s += xb\n  s += yf*dy\n  s += xf\n  s += yf\n  s += xf*2\n  s += yb*(dy+2)\n  s += xb*2\n  s *= yb\nelif dy == 0:\n  s += xf*dx\n  s += yb\n  s += xb*dx\n  s += yf\n  s += yf\n  s += xf*dx\n  s += yb\n  s += xf\n  s += yb*2\n  s += xb(dx+2)\n  s += yf*2\n  s += xf\nelse:\n  s += yf*dy\n  s += xf*dx\n  s += yb*dy\n  s += xb*dx\n  s += xb\n  s += yf*(dy+1)\n  s += xf*(dx+1)\n  s += yb\n  s += xf\n  s += yb*(dy+1)\n  s += xb*(dx+1)\n  s += yf\n\nprint(s)","label":1}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s333433925","submission":"n, x, t = map(int, input().split(' '))\n\ncount = int(n \/ x)\nif(n % x != 0):\n    count += 1\n\nprint(count * t)","label":1}
{"problem_id":"p02380","problem":"For given two sides of a triangle a and b and the angle C between them, calculate the following properties:","submission_id":"s812434059","submission":"import math\na,b,C = map(float,input().split())\nS = (1\/2)*a*b*math.sin(math.radians(C))\nL = (a**2+b**2-2*a*b*math.cos(math.radians(C)))**(1\/2)+a+b\nh = b*math.sin(math.radians(C))\nprint(f\"{S:.8f}\")\nprint(f\"{L:.8f}\")\nprint(f\"{h:.8f}\")\n","label":1}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s572626280","submission":"def main():\n    N = int(input())\n    a = list(map(int,input().split()))\n    Alice = 0\n    Alice_j = True\n    Bob = 0\n    Bob_j = False\n    a.sort(reverse = True )\n    for i in range(N):\n        if Alice_j == True:\n            Alice += a[i]\n            Alice_j = False\n            Bob_j = True\n        elif Bob_j == True:\n            Bob += a[i]\n            Bob_j = False\n            Alice_j = True\n    return Alice - Bob\n\nprint(main())\n","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s029014972","submission":"n=int(input())\nl=[]\nfor i in range(n):\n    l.append(int(input()))\nL=sorted(l)\nprint(sum(L[:-1])+L[-1]\/\/2)","label":1}
{"problem_id":"p02630","problem":"You have a sequence A composed of N positive integers: A_{1}, A_{2}, \\cdots, A_{N}.\nYou will now successively do the following Q operations:\n\nIn the i-th operation, you replace every element whose value is B_{i} with C_{i}.\n\nFor each i (1 \\leq i \\leq Q), find S_{i}: the sum of all elements in A just after the i-th operation.","submission_id":"s026483371","submission":"N = int(input())\nA = list(map(int,input().split()))\nQ = int(input())\nC = (10**5+1)*[0]\nT = sum(A)\n\nfor a in A:\n  C[a]+=1\n\nfor q in range(Q):\n  b,c = map(int,input().split())\n  T+=C[b]*(c-b)\n  C[c]+=C[b]\n  C[b]=0\n  print(T)","label":1}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s094626333","submission":"import sys\n\ndef S(): return sys.stdin.readline().rstrip()\n\nA,B,T = map(int,S().split())\n\nprint(T\/\/A*B)","label":1}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s930273169","submission":"s = input()\n\nif s.count(\"R\")==2 and s[1]==\"S\":\n    print(s.count(\"R\")-1)\nelse:\n    print(s.count(\"R\"))","label":1}
{"problem_id":"p03774","problem":"There are N students and M checkpoints on the xy-plane.\nThe coordinates of the i-th student (1 \\leq i \\leq N) is (a_i,b_i), and the coordinates of the checkpoint numbered j (1 \\leq j \\leq M) is (c_j,d_j).\nWhen the teacher gives a signal, each student has to go to the nearest checkpoint measured in Manhattan distance. \nThe Manhattan distance between two points (x_1,y_1) and (x_2,y_2) is |x_1-x_2|+|y_1-y_2|.\nHere, |x| denotes the absolute value of x.\nIf there are multiple nearest checkpoints for a student, he\/she will select the checkpoint with the smallest index.\nWhich checkpoint will each student go to?","submission_id":"s350802180","submission":"n, m = map(int, input().split())\np = [list(map(int, input().split())) for _ in range(n)]\nc = [list(map(int, input().split())) for _ in range(m)]\n\n\ndef dist(p1, p2):\n    return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n\nfor i in range(n):\n    x = min(c, key=lambda x: dist(p[i], x))\n    num = c.index(x) + 1\n    print(num)\n","label":1}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s636131501","submission":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, A, *X = map(int, read().split())\n\n    X = [x - A for x in X]\n    base = 2500\n    dp = [[0] * 5001 for _ in range(N + 1)]\n    dp[0][base] = 1\n\n    for i in range(N):\n        for s in range(5001):\n            dp[i + 1][s] = dp[i][s]\n            if 0 <= s - X[i] <= 5000:\n                dp[i + 1][s] += dp[i][s - X[i]]\n\n    print(dp[N][base] - 1)\n    return\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p03426","problem":"We have a grid with H rows and W columns. The square at the i-th row and the j-th column will be called Square (i,j).\nThe integers from 1 through H\u00d7W are written throughout the grid, and the integer written in Square (i,j) is A_{i,j}.\nYou, a magical girl, can teleport a piece placed on Square (i,j) to Square (x,y) by consuming |x-i|+|y-j| magic points.\nYou now have to take Q practical tests of your ability as a magical girl.\nThe i-th test will be conducted as follows:\n\n\nInitially, a piece is placed on the square where the integer L_i is written.\n\n\nLet x be the integer written in the square occupied by the piece. Repeatedly move the piece to the square where the integer x+D is written, as long as x is not R_i. The test ends when x=R_i.\n\n\nHere, it is guaranteed that R_i-L_i is a multiple of D.\n\n\nFor each test, find the sum of magic points consumed during that test.","submission_id":"s006534561","submission":"H,w,d = map(int, raw_input().split())\nmat = [map(int, raw_input().split()) for i in range(H)]\n\nh = {}\ncost = {}\nfor i in range(len(mat)):\n\tfor j in range(len(mat[0])):\n\t\th[mat[i][j]] = (i,j)\n\nimport collections\ncost = collections.Counter()\ndef f(uu,vv): return abs(uu[0] -vv[0]) + abs(uu[1] -vv[1]) \nfor u in range(1,H*w + 1):\n\tif u - d >= 1: cost[u] = f(h[u], h[u - d]) + cost[u - d]\n\n\ndef g(u,v, cost,d): return cost[v] - cost[u]# if  in cost else 0) \n\nfor qi in  range(int(raw_input())):\n\tu,v = map(int, raw_input().split())\n\tprint g(u,v,cost, d)","label":1}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s400237734","submission":"N = int(input())\nAlist = list(map(int,input().split()))\nAnswer = [0]*(N+1)\nM = 0\nfor i in range(1,len(Alist)+1):\n    A = Alist[-i]\n    n = (N+1)-i\n    if sum(Answer[n::n])%2 != A:\n        Answer[-i] = 1\n        M += 1\nprint(M)\nAns = []\nfor k in range(len(Answer)):\n    if Answer[k] == 1:\n        Ans.append(k)\nprint(*Ans[0:],end=\"\\t\")    ","label":1}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s370456912","submission":"k = int(input())\n\ndef rec(d, n, array):\n    array.append(n)\n\n    if d == 10:\n        return\n    \n    for i in [-1, 0, 1]:\n        add = n % 10 + i\n        if 0 <= add <= 9:\n            rec(d + 1, 10 * n + add, array)\n\n\narray = []\nfor i in range(1, 10):\n    rec(1, i, array)\n\ns_array = sorted(array)\nans = s_array[k - 1]\nprint(ans)","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s731441667","submission":"# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\nsize = int(input())\nnums = [int(s) for s in input().split()]\n\ncount = 0\nchecked = False\n\nwhile True:\n  for i in range(size):\n    t = nums[i]\n    if t % 2 == 1:\n      checked = True\n      break;\n    nums[i] = t\/2\n  if checked:\n    break\n  count = count + 1\n\nprint(count)\n","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s885491090","submission":"sx, sy, tx, ty = map(int, input().split())\n\nmove = ''\nxz = abs(tx-sx)\nyz = abs(ty-sy)\nmove += 'U'*yz + 'R'*xz + 'D'*yz + 'L'*xz\nmove += 'L'*1 + 'U'*(yz+1) + 'R'*(xz+1) + 'D'*1\nmove += 'R'*1 + 'D'*(yz+1) + 'L'*(xz+1) + 'U'*1\nprint(move)","label":1}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s256002506","submission":"S = input()\nT = input()\n\nans = len(S)\n\nfor i in range(len(S)-len(T)+1):\n    tmp = 0\n    for j in range(len(T)):\n        if S[i+j] != T[j]:\n            tmp += 1\n    ans = min(ans, tmp)\n\nprint(ans)","label":1}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s856910118","submission":"def resolve():\n    N = int(input())\n    A = int(input())\n    print(\"Yes\" if N % 500 <= A else \"No\")\n\n\nif '__main__' == __name__:\n    resolve()","label":1}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s342579211","submission":"N = int(input())\nli = list(map(int, input().split()))\nrli = li[::-1]\nrli.append(100001)\nans = [0] * N\n\nans[0] = rli[0]\nfor i in range(0, len(li)):\n    ans[i+1] = min(rli[i], rli[i+1])\n\n#print(ans)\nprint(sum(ans))","label":1}
{"problem_id":"p02255","problem":"Write a program of the Insertion Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:","submission_id":"s584798574","submission":"def show_list(target):\n    for i, item in enumerate(target):\n        if i == len(target) - 1:\n            print(item)\n        else:\n            print(item, end=\" \")\n\ndef insection_sort(target):\n    for i in range(1, len(target)):\n        show_list(target)\n        j = i - 1\n        while j >= 0:\n            if target[j] > target[j+1]:\n                target[j], target[j+1] = target[j+1], target[j]\n                j -= 1\n            else:\n                break\n    return target\n\nif __name__ == \"__main__\":\n    n = input()\n    a = [int(x) for x in input().split()]\n    answer = insection_sort(a)\n    show_list(answer)","label":1}
{"problem_id":"p03086","problem":"You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\nHere, a ACGT string is a string that contains no characters other than A, C, G and T.","submission_id":"s666421159","submission":"s = input()\ncount = 0\nmax = 0\nfor i in range(0, len(s)):\n    if s[i] == 'A' or s[i] == 'T' or s[i] == 'G' or s[i] == 'C':\n        count += 1\n        if max < count:\n            max = count\n    else: count = 0\nprint(max)","label":1}
{"problem_id":"p02404","problem":"Draw a frame which has a height of H cm and a width of W cm. For example, the following figure shows a frame which has a height of 6 cm and a width of 10 cm.","submission_id":"s353822205","submission":"while True:\n    H,W = [int(i) for i in input().split()]\n    if H == 0 and W == 0:\n        break\n    else:\n        for line in list(range(1,H+1,1)):\n            for column in list(range(1,W+1,1)):\n                if line == 1 or line == H:\n                    if column == W:\n                        print(\"#\")\n                    else:\n                        print(\"#\", end = \"\")\n\n                else:\n                    if column == 1:\n                        print(\"#\", end = \"\")\n                    elif column == W:\n                        print(\"#\")\n                    else:\n                        print(\".\", end = \"\")\n        print(\"\")\n","label":1}
{"problem_id":"p03030","problem":"You have decided to write a book introducing good restaurants.\nThere are N restaurants that you want to introduce: Restaurant 1, Restaurant 2, ..., Restaurant N. Restaurant i is in city S_i, and your assessment score of that restaurant on a 100-point scale is P_i.\nNo two restaurants have the same score.\nYou want to introduce the restaurants in the following order:\n\nThe restaurants are arranged in lexicographical order of the names of their cities.\nIf there are multiple restaurants in the same city, they are arranged in descending order of score.\n\nPrint the identification numbers of the restaurants in the order they are introduced in the book.","submission_id":"s369313970","submission":"# coding: utf-8\n\nN = int(input())\nD = []\nfor i in range(N):\n    s, p = map(str,input().split())\n    p = int(p)\n    shop = [s, p, i+1]\n    D.append(shop)\n\nD.sort(key=lambda x:x[0])\n#print(D[0])\n#print(D[1])\nT_ = [D[0]]\nflg = True\nA = []\nfor i in range(N-1):\n    #print(T_)\n    if D[i][0] == D[i+1][0]:\n        T_.append(D[i+1])\n    else:\n        T_.sort(key=lambda x:x[1], reverse=True)\n        A = A + T_\n        T_ = [D[i+1]]\n        flg = False\n        #print('hoge')\n\nif len(T_) > 0:\n    T_.sort(key=lambda x:x[1], reverse=True)\n    A = A + T_\n#print(A)\nfor l in A:\n    print(l[2])","label":1}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s451529301","submission":"import math\n\n# \u7d20\u56e0\u6570\u5206\u89e3\ndef prime_factorization(n):\n    # s * s <= n\n    s = math.floor(math.sqrt(n)) # \u5e73\u65b9\u6839\u3092\u5c0f\u6570\u70b9\u5207\u308a\u6368\u3066\n    ans = [] # [\u7d20\u6570, \u6307\u6570]\u306e\u30ea\u30b9\u30c8\n\n    # 2\u304b\u3089s\u307e\u3067\u306e\u7d20\u56e0\u6570\u3092\u6c42\u3081\u308b\n    for i in [2] + list(range(3, s + 1, 2)):\n        if n < i:\n            break\n        if n % i == 0:\n            r = 0 # \u6307\u6570\u30ab\u30a6\u30f3\u30bf\u30af\u30ea\u30a2\n            while n % i == 0:\n                r += 1\n                n \/\/= i\n            ans.append([i, r])\n\n    # \u6b8b\u3063\u305f\u7d20\u6570\u3092\u8ffd\u52a0\n    if n > s:\n        ans.append([n, 1])\n\n    return(ans)\n\ndef binomial_p(n, k, p):\n    '''\n    Input: integers n, k such that n >= k >= 0, prime number p\n    Output: n choose k mod p\n    '''\n    k = min(k, n-k)\n\n    if k == 0:\n        retval = 1\n    elif k == 1:\n        retval = n\n    else:\n        numer = n  # n * (n - 1) * ... * (n - k + 1)\n        inv = [0, 1]    # inv[i] : inverse of i mod p\n        inv_denom = 1 # factorial of inverse of k mod p = 1^(-1) * 2^(-1) * ... * k^(-1) mod p\n        for i in range(2, k + 1):\n            numer = numer * (n - i + 1) % p\n            inv.append(( inv[p % i] * (p - p\/\/i) ) % p ) # inverse of i\n            inv_denom = inv_denom * inv[-1] % p\n        retval = numer * inv_denom % p\n\n    return retval\n\n###########################\n\nN, M = [int(x) for x in input().split()]\nq = 10 ** 9 + 7\n\nif M == 1:\n    ans = 1\nelse:\n    pfact = prime_factorization(M)\n    ans = 1\n    for pr in pfact:\n        ans = ans * binomial_p(N - 1 + pr[1], pr[1], q) % q\n\nprint(ans)\n","label":1}
{"problem_id":"p03697","problem":"You are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.","submission_id":"s927715349","submission":"A,B = map(int, input().split())\n\nAB = A + B\n\nif AB >= 10:\n    print(\"error\")\nelse:\n    print(AB)\n","label":1}
{"problem_id":"p02984","problem":"There are N mountains in a circle, called Mountain 1, Mountain 2, ..., Mountain N in clockwise order. N is an odd number.\nBetween these mountains, there are N dams, called Dam 1, Dam 2, ..., Dam N. Dam i (1 \\leq i \\leq N) is located between Mountain i and i+1 (Mountain N+1 is Mountain 1).\nWhen Mountain i (1 \\leq i \\leq N) receives 2x liters of rain, Dam i-1 and Dam i each accumulates x liters of water (Dam 0 is Dam N).\nOne day, each of the mountains received a non-negative even number of liters of rain.\nAs a result, Dam i (1 \\leq i \\leq N) accumulated a total of A_i liters of water.\nFind the amount of rain each of the mountains received. We can prove that the solution is unique under the constraints of this problem.","submission_id":"s889687040","submission":"N = int(input())\nA = list(map(int, input().split()))\n\nS = sum(A)\n\nM = [0 for _ in range(N)]\n\nM0 = S\n\nfor i in range(1, N, 2):\n    M0 -= 2*A[i]\n\nM[0] = M0\n\nfor i in range(1, N):\n    M[i] = 2*A[i-1] - M[i-1]\n\n\nprint(*M)\n","label":1}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s674261168","submission":"n, x = map(int, input().split())\nl = [int(i)for i in input().split()]\nlast = 0\nz = 0\nfor n in l:\n    if n + last > x:\n        z += n + last - x\n        last = x - last\n    else:\n        last = n\nprint(z)\n","label":1}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s774425144","submission":"import sys\ninput = sys.stdin.readline\nfrom bisect import bisect_left as bl\nclass segtree:\n    def __init__(self, nn):\n        self.NN = nn\n        self.XX = [0] * (2**(nn+1)-1)\n    def getmax(self, i):\n        j = 2**self.NN + i - 1\n        ma = -1\n        while j >= 0:\n            ma = max(ma, self.XX[j])\n            j = (j-1) \/\/ 2\n        return -1 if ma <= 0 else INF - ma\n    def updaterange(self, a, b, x):\n        l = a + (1<<self.NN)\n        r = b + (1<<self.NN)\n        s = 0\n        while l < r:\n            if l%2:\n                self.XX[l-1] = max(self.XX[l-1], x)\n                l += 1\n            if r%2:\n                r -= 1\n                self.XX[r-1] = max(self.XX[r-1], x)\n            l >>= 1\n            r >>= 1\n\nN, Q = map(int, input().split())\nst = segtree(18)\nINF = 1<<50\nX = []\nD = []\nfor _ in range(N):\n    s, t, x = map(int, input().split())\n    X.append((s, t, x))\nfor _ in range(Q):\n    D.append(int(input()))\n\nfor s, t, x in X:\n    st.updaterange(bl(D, s-x), bl(D, t-x), INF-x)\nfor i in range(Q):\n    print(st.getmax(i))\n","label":1}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s449380987","submission":"#!\/usr\/bin\/python3\n \ncmdvar_numlist=input()\ncmdvar_spritd=cmdvar_numlist.split()\nD,T,S=list(map(int,cmdvar_spritd))\n\nif D\/S<=T:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s058144293","submission":"sx, sy, tx, ty = map(int, input().split())\nx = tx - sx\ny = ty - sy\nans = (\"R\" * x + \"U\" * y + \"L\" * x + \"D\" * y + \"D\" + \"R\" * -~x + \"U\" * -~y +\n       \"L\" + \"U\" + \"L\" * -~x + \"D\" * -~y + \"R\")\nprint(ans)\n","label":1}
{"problem_id":"p03017","problem":"There are N squares arranged in a row, numbered 1, 2, ..., N from left to right.\nYou are given a string S of length N consisting of . and #. If the i-th character of S is #, Square i contains a rock; if the i-th character of S is ., Square i is empty.\nIn the beginning, Snuke stands on Square A, and Fnuke stands on Square B.\nYou can repeat the following operation any number of times:\n\nChoose Snuke or Fnuke, and make him jump one or two squares to the right. The destination must be one of the squares, and it must not contain a rock or the other person.\n\nYou want to repeat this operation so that Snuke will stand on Square C and Fnuke will stand on Square D.\nDetermine whether this is possible.","submission_id":"s983812490","submission":"N, A, B, C, D = map(int, input().split())\nS = list(input())\nA -= 1\nB -= 1\nC -= 1\nD -= 1\n\ndef check_one_people_can(start, end):\n    s = S[start+1: end]\n    before_sharp = False\n    for x in s:\n        if x == \"#\":\n            if before_sharp:\n                return False\n            before_sharp = True\n        else:\n            before_sharp = False\n    return True\n\ndef check_triple_dots(start, end):\n    s = S[start-1: end+2]\n    continuous_dots = 0\n    for x in s:\n        if x == \".\":\n            continuous_dots += 1\n            if continuous_dots == 3:\n                return True\n        else:\n            continuous_dots = 0\n    return False\n\nif D > C:\n    if check_one_people_can(A, C) and check_one_people_can(C, D):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    if check_triple_dots(B, D) and check_one_people_can(A, C):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","label":1}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s339400929","submission":"n = list(map(str,input()))\nans = sum(list(map(int,list(n))))\nif ans % 9 == 0:\n    print('Yes')\nelse:\n    print('No')","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s894510563","submission":"N = input()\nA = [int(x) for x in input().split()]\ndef cnt(x):\n    i = 0\n    while x%2 == 0:\n        x \/\/= 2\n        i += 1\n    return i\nans = min(cnt(a) for a in A)\nprint(ans)","label":1}
{"problem_id":"p02659","problem":"Compute A \\times B, truncate its fractional part, and print the result as an integer.","submission_id":"s204679717","submission":"a,b= input().split()\n\na = int(a)\nb,c = map(int,b.split(\".\"))\n\nprint(a*(100*b+c)\/\/100)\n","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s240461976","submission":"n=input().strip()\nif n[-1]=='s':\n  print(n+'es')\nelse:\n  print(n+'s')","label":1}
{"problem_id":"p03634","problem":"You are given a tree with N vertices.\nHere, a tree is a kind of graph, and more specifically, a connected undirected graph with N-1 edges, where N is the number of its vertices.\nThe i-th edge (1\u2264i\u2264N-1) connects Vertices a_i and b_i, and has a length of c_i.\nYou are also given Q queries and an integer K. In the j-th query (1\u2264j\u2264Q):\n\nfind the length of the shortest path from Vertex x_j and Vertex y_j via Vertex K.","submission_id":"s385064624","submission":"import sys\nreadline = sys.stdin.readline\nfrom heapq import heapify, heappush, heappop\n\n\ndef dijkstra(path, N, start):\n    \"\"\"\n    Args:\n        path (list): [[(cost, node), (cost, node), ...], [], [], ...]\n    \"\"\"\n    visited = [False] * N\n    que = [(0, start)]\n    heapify(que)  # \u59cb\u70b9a\u304b\u3089\u5404\u9802\u70b9\u3078\u306e(\u8ddd\u96e2, \u9802\u70b9ID)\n    dist = [-1] * N  # \u59cb\u70b9a\u304b\u3089\u5404\u9802\u70b9\u3078\u306e\u8ddd\u96e2\n    dist[start] = 0  # \u59cb\u70b9a\u304b\u3089a\u3078\u306e\u8ddd\u96e2\u306f0\n    while que:\n        d, v = heappop(que)  # \u59cb\u70b9\u304b\u3089\u6700\u77ed\u8ddd\u96e2\u306e\u9802\u70b9\u3092(\u78ba\u5b9a\u30ce\u30fc\u30c9)\u3092\u53d6\u308a\u51fa\u3059\n        visited[v] = True  # \u78ba\u5b9a\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\n        # \u63a5\u7d9a\u5148\u30ce\u30fc\u30c9\u306e\u60c5\u5831\u3092\u66f4\u65b0\u3059\u308b\n        for d, to in path[v]:\n            cost = dist[v] + d\n            if dist[to] < 0 or cost < dist[to]:\n                dist[to] = cost\n                if not visited[to]:\n                    heappush(que, (cost, to))\n\n    return dist\n\n\ndef main():\n    N = int(readline())\n    path = [[] for _ in range(N)]\n\n    for _ in range(N-1):\n        a, b, c = map(int, readline().rstrip().split())\n        path[a-1].append((c, b-1))\n        path[b-1].append((c, a-1))\n    \n    Q, K = map(int, readline().rstrip().split())\n    dist = dijkstra(path, N, K-1)\n\n    for _ in range(Q):\n        x, y = map(int, readline().rstrip().split())\n        print(dist[x-1] + dist[y-1])\n\n\nif __name__ == '__main__':\n    main()","label":1}
{"problem_id":"p03456","problem":"AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.","submission_id":"s100526827","submission":"import sys\nfrom math import sqrt\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    a, b = input().split()\n    n = int(a + b)\n    r = round(sqrt(n))\n    if r * r == n:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s363129789","submission":"import sys\ndef gcd(m, n):\n    if n == 0:\n        n, m = m, n\n    r = m % n\n    return gcd(n, r) if r else n\n\nn = int(input())\na = list(map(int, sys.stdin.readline().split()))\nl, r = [0]*(n+1), [0]*(n+1)\nfor i in range(1, n+1):\n    l[i] = gcd(l[i-1], a[i-1])\n    r[n-i] = gcd(r[n-i+1], a[n-i])\nans = 0\nfor i in range(n):\n    m = gcd(l[i], r[i+1])\n    if ans < m:\n        ans = m\nprint(ans)","label":1}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s990959282","submission":"a,b,t = map(int,input().split())\nT = t\/\/a\nprint(T*b)","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s817831216","submission":"N = int(input())\n*A, = map(int, input().split())\nans = 0\nwhile True:\n    ok = True\n    for i in range(N):\n        if A[i] % 2 != 0:\n            ok = False\n            break\n        A[i] \/\/= 2\n    if not ok:\n        break\n    ans += 1\nprint(ans)\n","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s994730982","submission":"data = input()\nif data[len(data) - 1] == \"s\":\n    print(data + \"es\")\nelse:\n    print(data + \"s\")","label":1}
{"problem_id":"p02949","problem":"There is a directed graph with N vertices numbered 1 to N and M edges.\nThe i-th edge is directed from Vertex A_i to Vertex B_i, and there are C_i coins \bplaced along that edge.\nAdditionally, there is a button on Vertex N.\nWe will play a game on this graph.\nYou start the game on Vertex 1 with zero coins, and head for Vertex N by traversing the edges while collecting coins.\nIt takes one minute to traverse an edge, and you can collect the coins placed along the edge each time you traverse it.\nAs usual in games, even if you traverse an edge once and collect the coins, the same number of coins will reappear next time you traverse that edge, which you can collect again.\nWhen you reach Vertex N, you can end the game by pressing the button. (You can also choose to leave Vertex N without pressing the button and continue traveling.)\nHowever, when you end the game, you will be asked to pay T \\times P coins, where T is the number of minutes elapsed since the start of the game. If you have less than T \\times P coins, you will have to pay all of your coins instead.\nYour score will be the number of coins you have after this payment.\nDetermine if there exists a maximum value of the score that can be obtained. If the answer is yes, find that maximum value.","submission_id":"s027970646","submission":"def shortest_path(s):\n  dist[s]=0\n  for _ in range(n):\n    for fr,to,cost in edge:\n      if dist[fr]!=inf and dist[to]>dist[fr]+cost:\n        dist[to]=dist[fr]+cost\n\ndef find_negative_loops():\n  for _ in range(n):\n    for fr,to,cost in edge:\n      if dist[fr]!=inf and dist[to]>dist[fr]+cost:\n        dist[to]=dist[fr]+cost\n        negative[to]=True\n      if negative[fr]:negative[to]=True\n\nn,m,p=map(int,input().split())\nedge=[]\nfor i in range(m):\n  a,b,c=map(int,input().split())\n  edge.append([a-1,b-1,-c+p])\ninf=float(\"inf\")\ndist=[inf]*n\nnegative=[False]*n\nshortest_path(0)\nfind_negative_loops()\nprint(-1) if negative[-1] else print(max(-dist[-1],0))\n","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s920235659","submission":"n=int(input())\na=list(map(int,input().split()))\nmina=32\nfor aa in a:\n  for i in range(31):\n    if aa % (2**i) !=0:\n      mina=min(mina,i-1)\nprint(mina)","label":1}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s444028942","submission":"H, W = map(int, input().split())\nif H == 1 or W == 1:\n    ans = 1\nelse:\n    if H % 2:\n        if W % 2:\n            ans = ((H \/\/ 2 + 1) * (W \/\/ 2 + 1)) + ((H \/\/ 2) * (W \/\/ 2))\n        else:\n            ans = ((H \/\/ 2 + 1) + (H \/\/ 2)) * (W \/\/ 2)\n    else:\n        ans = H \/ 2 * W\nprint(int(ans))\n","label":1}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s806885718","submission":"n=int(input())\na=list(map(int, input().split()))\nx = 0\ny = 0\nfor i in a:\n    if i %2 != 0:\n        x+=1\n    elif i%4 == 0:\n        y+=1\nif y >=x:\n    print('Yes')\n    exit()\nelse:\n    if x+y == len(a) and y == x-1:\n        print('Yes')\n    else:\n        print('No')","label":1}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s930788078","submission":"a,b,c = map(int, input().split())\nprint('Yes') if 4*a*b < (c - a -b)**2 and a+b < c else print('No')\n","label":1}
{"problem_id":"p03393","problem":"Gotou just received a dictionary. However, he doesn't recognize the language used in the dictionary. He did some analysis on the dictionary and realizes that the dictionary contains all possible diverse words in lexicographical order.\nA word is called diverse if and only if it is a nonempty string of English lowercase letters and all letters in the word are distinct. For example, atcoder, zscoder and agc are diverse words while gotou and connect aren't diverse words.\nGiven a diverse word S, determine the next word that appears after S in the dictionary, i.e. the lexicographically smallest diverse word that is lexicographically larger than S, or determine that it doesn't exist.\nLet X = x_{1}x_{2}...x_{n} and Y = y_{1}y_{2}...y_{m} be two distinct strings. X is lexicographically larger than Y if and only if Y is a prefix of X or x_{j} > y_{j} where j is the smallest integer such that x_{j} \\neq y_{j}.","submission_id":"s331749634","submission":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\nS = input()\n\nif S == \"zyxwvutsrqponmlkjihgfedcba\":\n\tprint(-1)\nelif len(S) < len(ascii_lowercase):\n\tfor char in ascii_lowercase:\n\t\tif char not in S:\n\t\t\tprint(S+char)\n\t\t\tbreak\nelse:\n\tS = S[::-1]\n\tfor i in range(len(S)-1):\n\t\tif S[i+1] < S[i]:\n\t\t\tfor char in sorted(S[:i+1]):\n\t\t\t\tif char > S[i+1]:\n\t\t\t\t\tprint(S[::-1][:-i-2]+char)\n\t\t\t\t\texit()\n","label":1}
{"problem_id":"p02891","problem":"Given is a string S. Let T be the concatenation of K copies of S.\nWe can repeatedly perform the following operation: choose a character in T and replace it with a different character.\nFind the minimum number of operations required to satisfy the following condition: any two adjacent characters in T are different.","submission_id":"s845779141","submission":"S = input()\nK = int(input())\nN = len(S)\n#\u6700\u521d\u306e1\u56de\nans = 0\nprev = S[0]\nendchange = False\nfor i in range(1,N):\n    if S[i] == prev:\n        ans += 1\n        prev = 0\n        if i == N:\n            endchange = True\n    else:\n        prev = S[i]\n\nif all([s == S[0] for s in S]):\n    print((N*K)\/\/2)\n\nelif K==1 or S[0] != S[-1]:\n    print(ans * K)\nelse:\n    front = 1\n    while 1:\n        if S[front] == S[0]:\n            front += 1\n        else:break\n    back = -1\n    while 1:\n        if S[back] == S[0]:\n            back -= 1\n        else:break\n    back = -1-back\n    print(ans*K + ((front+back)\/\/2 - front\/\/2 - back\/\/2) * (K-1))\n","label":1}
{"problem_id":"p02837","problem":"There are N people numbered 1 to N. Each of them is either an honest person whose testimonies are always correct or an unkind person whose testimonies may be correct or not.\nPerson i gives A_i testimonies. The j-th testimony by Person i is represented by two integers x_{ij} and y_{ij}. If y_{ij} = 1, the testimony says Person x_{ij} is honest; if y_{ij} = 0, it says Person x_{ij} is unkind.\nHow many honest persons can be among those N people at most?","submission_id":"s267413079","submission":"import itertools\n\nn = int(input())\ntes = [[] for _ in range(n)]\nfor i in range(n):\n    a = int(input())\n    for _ in range(a):\n        x, y = map(int, input().split())\n        tes[i].append([x - 1, y])\nans = 0 \nfor tf_s in itertools.product(range(2), repeat = n):\n    for i in range(n):\n        if tf_s[i] == 0:\n            continue\n        for x, y in tes[i]:\n            if tf_s[x] != y:\n                break\n        else:\n            continue\n        break\n    else:\n        ans = max(ans, tf_s.count(1))\nprint(ans)\n","label":1}
{"problem_id":"p04044","problem":"Iroha has a sequence of N strings S_1, S_2, ..., S_N. The length of each string is L.\nShe will concatenate all of the strings in some order, to produce a long string.\nAmong all strings that she can produce in this way, find the lexicographically smallest one.\nHere, a string s=s_1s_2s_3...s_n is lexicographically smaller than another string t=t_1t_2t_3...t_m if and only if one of the following holds:\n\nThere exists an index i(1\u2266i\u2266min(n,m)), such that s_j = t_j for all indices j(1\u2266j<i), and s_i<t_i.\ns_i = t_i for all integers i(1\u2266i\u2266min(n,m)), and n<m.","submission_id":"s285156412","submission":"n,l=map(int,input().split())\ns=[input() for i in range(n)]\ns.sort()\nprint(*s,sep='')\n","label":1}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s890545758","submission":"n = int(input())\nl = [list(map(int,input().split())) for i in range(n)]\nc = 0\nfor i in range(n):\n    c += l[i][1] - l[i][0] + 1\n\nprint(c)","label":1}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s667908256","submission":"def solve():\n    a, b = map(int, input().split())\n    if a <= 5:\n        print(0)\n    elif a <=  12:\n        print(b\/\/2)\n    else:\n        print(b)\n\nif __name__ == '__main__':\n    solve()\n","label":1}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s727045118","submission":"N = int(input())\na = sorted(map(int, input().split()))\n \nprint(abs(sum(a[1::2])-sum(a[::2])))","label":1}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s623663626","submission":"N, K = map(int, input().split())\nP = list(map(int, input().split()))\nma = s = sum(P[:K])\nfor i in range(N-K):\n    s += P[K+i] - P[i]\n    ma = max(ma, s)\nprint((ma+K)\/2)\n","label":1}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s526170210","submission":"def getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\ndef input():\n    return sys.stdin.readline().rstrip()\n\nfrom collections import defaultdict, deque, Counter\nfrom sys import exit\nimport heapq\nimport math\nimport copy\nfrom operator import mul\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\n\nimport sys\nsys.setrecursionlimit(1000000000)\nmod = 10 ** 9 + 7\n\nN = getN()\nA = [-1] + getList()\nlista = [0 for i in range(N + 1)]\n\n# \u9006\u9806\u306b\u5b9f\u65bd\u3059\u308b\n# 1\u304b\u3089\u30eb\u30fc\u30d7\u56de\u3055\u306a\u3044\u306834\u884c\u76ee\u3067\u30d0\u30b0\u308b\nfor i in range(1, N + 1)[::-1]:\n    cnt = 0\n    # 2 * i, 3 * i...\u306b\u3064\u3044\u3066\n    for j in range(2 * i, N + 1, i):\n        cnt += lista[j]\n    # \u3082\u3057cnt % 2\u3068a[i]\u304c\u5408\u308f\u306a\u3051\u308c\u3070b[i]\u306b\u30dc\u30fc\u30eb\u3092\u7f6e\u3044\u3066\u4fee\u6b63\n    if cnt % 2 != A[i]:\n        lista[i] = 1\nans = []\nfor i in range(N + 1):\n    if lista[i] == 1:\n        ans.append(str(i))\nprint(len(ans))\nprint(\" \".join(ans))","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s718487547","submission":"a = input()\n\nif not a [-1] == \"s\":\n   print(a + \"s\")\nelif a[-1] == \"s\":\n   print(a + \"es\")\n","label":1}
{"problem_id":"p02613","problem":"Takahashi is participating in a programming contest called AXC002, and he has just submitted his code to Problem A.\nThe problem has N test cases.\nFor each test case i (1\\leq i \\leq N), you are given a string S_i representing the verdict for that test case. Find the numbers of test cases for which the verdict is AC, WA, TLE, and RE, respectively.\nSee the Output section for the output format.","submission_id":"s195082487","submission":"#init\nN = int(input())\nS=[]\nfor _ in range(N):\n  S.append(input())\nscore=[0]*4\nfor _ in S:\n  if _=='AC':\n    score[0]=score[0]+1\n  if _=='WA':\n    score[1]=score[1]+1\n  if _=='TLE':\n    score[2]=score[2]+1\n  if _=='RE':\n    score[3]=score[3]+1\n    \nprint('AC x {0}'.format(score[0]))\nprint('WA x {0}'.format(score[1]))\nprint('TLE x {0}'.format(score[2]))\nprint('RE x {0}'.format(score[3]))","label":1}
{"problem_id":"p02717","problem":"We have three boxes A, B, and C, each of which contains an integer.\nCurrently, the boxes A, B, and C contain the integers X, Y, and Z, respectively.\nWe will now do the operations below in order. Find the content of each box afterward.  \n\nSwap the contents of the boxes A and B\nSwap the contents of the boxes A and C","submission_id":"s417550272","submission":"import sys\n\n\ndef main():\n    input = sys.stdin.buffer.readline\n    x, y, z = map(int, input().split())\n    print(z, x, y)\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p03206","problem":"In some other world, today is December D-th.\nWrite a program that prints Christmas if D = 25, Christmas Eve if D = 24, Christmas Eve Eve if D = 23 and Christmas Eve Eve Eve if D = 22.","submission_id":"s329585415","submission":"d = int(input())\nprint(\"Christmas \" + \"Eve \" * (5 - d%20))","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s473563282","submission":"N,M=map(int, input().split())\nA=list(map(int, input().split()))\nA = sorted(A, reverse=True)\n\ns = sum(A)\nth = s * 1\/(4*M)\n\nif A[M-1] < th: print('No')\nelse: print('Yes')","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s647380367","submission":"s = input()\n\nif(\"s\" == s[len(s)-1]):\n  print(s+\"es\")\nelse:\n  print(s+\"s\")","label":1}
{"problem_id":"p02786","problem":"Caracal is fighting with a monster.\nThe health of the monster is H.\nCaracal can attack by choosing one monster. When a monster is attacked, depending on that monster's health, the following happens:\n\nIf the monster's health is 1, it drops to 0.\nIf the monster's health, X, is greater than 1, that monster disappears. Then, two new monsters appear, each with the health of \\lfloor X\/2 \\rfloor.\n\n(\\lfloor r \\rfloor denotes the greatest integer not exceeding r.)\nCaracal wins when the healths of all existing monsters become 0 or below.\nFind the minimum number of attacks Caracal needs to make before winning.","submission_id":"s780805153","submission":"from sys import stdin\nimport sys\nimport math\nfrom functools import reduce\nimport functools\nimport itertools\n\ndef aa(k):\n    if k > 1: return 2*aa(k\/\/2) + 1\n    return 1\n\nh = int(stdin.readline().rstrip())\n\nprint(aa(h))","label":1}
{"problem_id":"p02404","problem":"Draw a frame which has a height of H cm and a width of W cm. For example, the following figure shows a frame which has a height of 6 cm and a width of 10 cm.","submission_id":"s357784696","submission":"while True:\n    h, w=map(int, input().split())\n    if h == 0 and w==0: break\n    print(\"#\"*w)\n    for i in range(h-2):\n        print(\"#\"+\".\"*(w-2)+\"#\")\n    print(\"#\"*w)\n    print()\n","label":1}
{"problem_id":"p03006","problem":"There are N balls in a two-dimensional plane. The i-th ball is at coordinates (x_i, y_i).\nWe will collect all of these balls, by choosing two integers p and q such that p \\neq 0 or q \\neq 0 and then repeating the following operation:\n\nChoose a ball remaining in the plane and collect it. Let (a, b) be the coordinates of this ball. If we collected a ball at coordinates (a - p, b - q) in the previous operation, the cost of this operation is 0. Otherwise, including when this is the first time to do this operation, the cost of this operation is 1.\n\nFind the minimum total cost required to collect all the balls when we optimally choose p and q.","submission_id":"s854693818","submission":"from collections import Counter\nfrom itertools import permutations\nn=int(input())\nif n==1:print(1);exit()\nXY=[list(map(int,input().split())) for _ in range(n)]\nA=[(X[0]-Y[0],X[1]-Y[1]) for X,Y in permutations(XY,2)]\nprint(n-max(Counter(A).values()))","label":1}
{"problem_id":"p02393","problem":"Write a program which reads three integers, and prints them in ascending order.","submission_id":"s912141105","submission":"print(' '.join(str(n)for n in sorted(list(map(int,input().split())))))\n","label":1}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s339842883","submission":"#6\u554f\u76ee\nN, x = map(int, input().split())\na = list(map(int, input().split()))\ncount = 0\nfor i in range(N-1):\n    #\u307e\u305a\u4e00\u756a\u524d\u306e\u8981\u7d20\u304cx\u3088\u308a\u5c0f\u3055\u304f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n    if(i == 0 and a[i] > x):\n        count += a[i] - x\n        a[i] = x\n        \n    if(a[i] + a[i+1] > x):\n        count += a[i] + a[i+1] - x\n        a[i+1] = x - a[i]\nprint(count)","label":1}
{"problem_id":"p03095","problem":"You are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.","submission_id":"s083989186","submission":"def getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\ndef input():\n    return sys.stdin.readline().rstrip()\ndef rand_N(ran1, ran2):\n    return random.randint(ran1, ran2)\ndef rand_List(ran1, ran2, rantime):\n    return [random.randint(ran1, ran2) for i in range(rantime)]\ndef rand_ints_nodup(ran1, ran2, rantime):\n  ns = []\n  while len(ns) < rantime:\n    n = random.randint(ran1, ran2)\n    if not n in ns:\n      ns.append(n)\n  return sorted(ns)\n\ndef rand_query(ran1, ran2, rantime):\n  r_query = []\n  while len(r_query) < rantime:\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n    if not n_q in r_query:\n      r_query.append(n_q)\n  return sorted(r_query)\n\nfrom collections import defaultdict, deque, Counter\nfrom sys import exit\nfrom decimal import *\nimport heapq\nfrom math import sqrt\nfrom fractions import gcd\nimport random\nimport string\nimport copy\nfrom itertools import combinations, permutations, product\nfrom operator import mul, itemgetter\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\n\nimport sys\nsys.setrecursionlimit(1000000000)\nmod = 10 ** 9 + 7\n\n#############\n# Main Code #\n#############\n\nN = getN()\nS = input()\n\nans = 1\n# \u5404i[1]\u306b\u3064\u3044\u3066\u639b\u3051\u308b\/\u639b\u3051\u306a\u3044\u304c\u3042\u308b\u305f\u3081\n# (1 + i1[1]) * (1 + i2[1])...\n# \u7d04\u6570\u306e\u500b\u6570\u306e\u6c42\u3081\u65b9\u3068\u540c\u3058\nfor i in Counter(S).items():\n    ans *= (i[1] + 1) % mod\nprint((ans - 1) % mod)","label":1}
{"problem_id":"p02392","problem":"Write a program which reads three integers a, b and c, and prints \"Yes\" if a < b < c, otherwise \"No\".","submission_id":"s786272698","submission":"input_line = raw_input().split()\n\na = int(input_line[0])\nb = int(input_line[1])\nc = int(input_line[2])\n\nif( (a<b)and(b<c) ):\n\tprint 'Yes'\nelse:\n\tprint 'No'","label":1}
{"problem_id":"p03472","problem":"You are going out for a walk, when you suddenly encounter a monster. Fortunately, you have N katana (swords), Katana 1, Katana 2, \u2026, Katana N, and can perform the following two kinds of attacks in any order:\n\nWield one of the katana you have. When you wield Katana i (1 \u2264 i \u2264 N), the monster receives a_i points of damage. The same katana can be wielded any number of times.\nThrow one of the katana you have. When you throw Katana i (1 \u2264 i \u2264 N) at the monster, it receives b_i points of damage, and you lose the katana. That is, you can no longer wield or throw that katana.\n\nThe monster will vanish when the total damage it has received is H points or more. At least how many attacks do you need in order to vanish it in total?","submission_id":"s630975668","submission":"import bisect,collections,copy,itertools,math,string\nimport sys\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\ndef main():\n\n\n    n, h= LI()\n    huri = [0 for _ in range(n)]\n    nage = [0 for _ in range(n)]\n    use = []\n    \n    for i in range(n):\n        huri[i], nage[i] = LI()\n\n    mx = max(huri)\n\n    for katana in nage:\n        if katana >= mx:\n            use.append(katana)\n\n    use.sort(reverse=True)\n    ans = 0\n    for used in use:\n        h -= used\n        ans += 1\n        if h<=0:\n            break\n\n    if h>0:\n        ans += (h+mx-1)\/\/mx\n\n    print(ans)\n\n\n\nmain()\n","label":1}
{"problem_id":"p03162","problem":"Taro's summer vacation starts tomorrow, and he has decided to make plans for it now.\nThe vacation consists of N days.\nFor each i (1 \\leq i \\leq N), Taro will choose one of the following activities and do it on the i-th day:\n\nA: Swim in the sea. Gain a_i points of happiness.\nB: Catch bugs in the mountains. Gain b_i points of happiness.\nC: Do homework at home. Gain c_i points of happiness.\n\nAs Taro gets bored easily, he cannot do the same activities for two or more consecutive days.\nFind the maximum possible total points of happiness that Taro gains.","submission_id":"s437612320","submission":"\n# def solve(dp,L,i,j):\n#     if i==len(dp):\n#         return 0\n\n#     else:\n#         temp=0\n#         for k in range(3):\n#             if j!=k:\n#                 temp=max(temp,L[i][k]+solve(dp,L,i+1,k))\n#         dp[i]=temp\n#         return dp[i]\n\nT=int(input())\nA=[]\nfor x in range(T):\n    l=[int(i) for i in input().split()]\n    A.append(l)\nA.append([0,0,0])\n\nfor i in range(T-1,-1,-1):\n    for j in range(3):\n        temp=0\n        for k in range(3):\n            if j!=k:\n                temp=max(temp,A[i][j]+A[i+1][k])\n\n        A[i][j]=max(A[i][j],temp)\n    # print(A)\n    \n\nprint(max(A[0]))\n\n","label":1}
{"problem_id":"p03039","problem":"We have a grid of squares with N rows and M columns. Let (i, j) denote the square at the i-th row from the top and j-th column from the left. We will choose K of the squares and put a piece on each of them.\nIf we place the K pieces on squares (x_1, y_1), (x_2, y_2), ..., and (x_K, y_K), the cost of this arrangement is computed as:\n\\sum_{i=1}^{K-1} \\sum_{j=i+1}^K (|x_i - x_j| + |y_i - y_j|)\nFind the sum of the costs of all possible arrangements of the pieces. Since this value can be tremendous, print it modulo 10^9+7.\nWe consider two arrangements of the pieces different if and only if there is a square that contains a piece in one of the arrangements but not in the other.","submission_id":"s860519661","submission":"n, m, k = map(int, input().split())\n\nmod = 10 ** 9 + 7\nMAX = n * m\n\nfact = [1] * (MAX + 1)\nfor i in range(1, MAX + 1):\n    fact[i] = (fact[i-1] * i) % mod\n\ninv = [1] * (MAX + 1)\ninv[MAX] = pow(fact[MAX], mod - 2, mod)\nfor i in range(MAX, 0, -1):\n    inv[i-1] = (inv[i] * i) % mod\n\n\ndef comb(n, k):\n    return fact[n] * inv[n-k] * inv[k] % mod\n\n\nans = 0\nfor i in range(n):\n    for j in range(m):\n        add = (n - i) * (m - j) * (i + j) % mod\n        if i != 0 and j != 0:\n            add *= 2\n            add %= mod\n\n        ans += add\n        ans %= mod\n\nans *= comb(MAX - 2, k - 2)\nans %= mod\nprint(ans)\n","label":1}
{"problem_id":"p03496","problem":"Snuke has an integer sequence, a, of length N. The i-th element of a (1-indexed) is a_{i}.\nHe can perform the following operation any number of times:\n\nOperation: Choose integers x and y between 1 and N (inclusive), and add a_x to a_y.\n\nHe would like to perform this operation between 0 and 2N times (inclusive) so that a satisfies the condition below. Show one such sequence of operations.\nIt can be proved that such a sequence of operations always exists under the constraints in this problem.\n\nCondition: a_1 \\leq a_2 \\leq ...  \\leq a_{N}","submission_id":"s792091966","submission":"n = int(input())\na = list(map(int, input().split()))\n\na_max = -10**7\na_max_idx = -1\na_min = 10**7\na_max_idx = -1\nfor i, ai in enumerate(a):\n    if a_max < ai:\n        a_max = ai\n        a_max_idx = i\n    if a_min > ai:\n        a_min = ai\n        a_min_idx = i\n\noperation = []\nif abs(a_max) > abs(a_min):\n    for i, ai in enumerate(a):\n        if ai < 0:\n            operation.append((a_max_idx + 1, i + 1))\n    # \u5168\u3066\u304c\u6b63\u306b\u306a\u308b\n    for i in range(1, n):\n        operation.append((i, i + 1))\nelse:\n    for i, ai in enumerate(a):\n        if ai > 0:\n            operation.append((a_min_idx + 1, i + 1))\n    # \u5168\u3066\u304c\u6b63\u306b\u306a\u308b\n    for i in reversed(range(1, n)):\n        operation.append((i + 1, i))\n\nprint(len(operation))\nfor opi in operation:\n    print(*opi)\n","label":1}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s486897262","submission":"n = int(input())\nb = list(map(int, input().split()))\na = [0] * n\na[0] = b[0]\nfor i in range(n - 1):\n    if a[i] <= b[i]:\n        pass\n    else:\n        a[i] = b[i]\n    a[i + 1] = b[i]\n\nprint(sum(a)) ","label":1}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s598417899","submission":"print('YNeos'[int(input())%9>0::2])","label":1}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s675163785","submission":"# A\nS = input()\ncnt = 0\nB_cnt = 0\nans = 0\nfor s in reversed(S):\n    # print(s)\n    if s == \"B\":\n        ans += (cnt - B_cnt)\n        B_cnt += 1\n    cnt += 1\n    # print(\"B_cnt: \" + str(B_cnt))\n    # print(\"Cnt:\" + str(cnt))\nprint(ans)\n","label":1}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s571360017","submission":"n=int(input())\nb=list(map(int,input().split()))\nans=0\nfor i in range(1,n-1):\n  ans+=min(b[i-1],b[i])\nans+=b[0]+b[-1]\nprint(ans)","label":1}
{"problem_id":"p03658","problem":"Snuke has N sticks.\nThe length of the i-th stick is l_i.\nSnuke is making a snake toy by joining K of the sticks together.\nThe length of the toy is represented by the sum of the individual sticks that compose it.\nFind the maximum possible length of the toy.","submission_id":"s090158300","submission":"n,k = map(int, input().split())\nli = list(map(int, input().split()))\nli.sort(reverse=True)\nsum = 0\nfor i in range(k):\n    sum += li[i]\nprint(sum)\n\n","label":1}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s306447991","submission":"import collections\nimport math\nfrom operator import mul\nfrom functools import reduce\nN,M = list(map(int,input().split()))\n\ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n \/\/= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n \/\/= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\ndef combinations_count(n, r):\n    r = min(r, n - r)\n    numer = reduce(mul, range(n, n - r, -1), 1)\n    denom = reduce(mul, range(1, r + 1), 1)\n    return numer \/\/ denom\n\nc = collections.Counter(prime_factorize(M))\nprimeFactorizeList = list(c.values())\nanswer = 1\nfor i in primeFactorizeList:\n    answer *= combinations_count(i+N-1, i)\n    answer = answer % (10 ** 9 + 7)\nprint(int(answer))\n","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s172600969","submission":"N=int(input())\nL=[int(input()) for i in range(N)]\nprint(sum(L)-max(L)\/\/2)","label":1}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s451638517","submission":"N = int(input())\nA = list(map(int,input().split()))\n\nB = [0] * N\nM = 0\nans = []\nfor i in range(N,0,-1):\n    S, idx = 0, i-1\n    while idx <= N-1:\n        S += B[idx]\n        idx += i\n\n    if S % 2 != A[i-1]:\n        B[i-1] = 1\n        M += 1\n        ans.append(i)\n        \n\nprint(M)\nfor a in ans:\n    print(a, end=\" \")\nprint(\"\")","label":1}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s129539125","submission":"import math\nH, W = map(int, input().split())\nprint(1) if (H == 1) | (W == 1) else print(math.ceil(H*W\/2))","label":1}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s106963439","submission":"a = list(map(int, input().split()))\nif a[0] >= 13:\n  print(a[1])\nelif a[0] >= 6:\n  print(int(a[1]\/2))\nelse:\n  print(0)","label":1}
{"problem_id":"p03290","problem":"A programming competition site AtCode provides algorithmic problems.\nEach problem is allocated a score based on its difficulty.\nCurrently, for each integer i between 1 and D (inclusive), there are p_i problems with a score of 100i points.\nThese p_1 + \u2026 + p_D problems are all of the problems available on AtCode.\nA user of AtCode has a value called total score.\nThe total score of a user is the sum of the following two elements:\n\nBase score: the sum of the scores of all problems solved by the user.\nPerfect bonuses: when a user solves all problems with a score of 100i points, he\/she earns the perfect bonus of c_i points, aside from the base score (1 \u2264 i \u2264 D).\n\nTakahashi, who is the new user of AtCode, has not solved any problem.\nHis objective is to have a total score of G or more points.\nAt least how many problems does he need to solve for this objective?","submission_id":"s849405114","submission":"D, G = map(int, input().split())\nqu = [0] * D\nbonus = [0] * D\nfor i in range(D):\n  a, b = map(int, input().split()) \n  qu[i] = a\n  bonus[i] = b\n  \nans = 10 ** 5  \nfor i in range(2 ** D):\n  score = 0\n  nn = 0\n  yet = [0] * D\n  for j in range(D):#j \u306e \u554f\u3044 \u3092\u30b3\u30f3\u30d7\u30ea\u30fc\u30c8\u3059\u308b\n    if (i >> j) & 1:\n      score += 100 * (j + 1) * qu[j] + bonus[j]\n      nn += qu[j]\n      yet[j] = 1\n  if score >= G:\n    ans = min(ans, nn)\n  else:\n    #print(i, score, nn)\n    con = 0\n    for k in range(1, D + 1):\n      if con == 0:\n        if yet[D - k] == 0:\n          now = 100 * (D - k + 1) * (qu[D - k] - 1)\n          if now + score >= G:\n            subt = G - score\n            nn += int((subt - 1) \/ (100 * (D - k + 1))) + 1\n            ans = min(ans, nn) \n            con = 1\n          else:\n            score += now\n            nn += qu[D - k] - 1\n  #print(ans)    \nprint(ans)    \n    \n    \n  \n  \n  \n","label":1}
{"problem_id":"p03855","problem":"There are N cities. There are also K roads and L railways, extending between the cities.\nThe i-th road bidirectionally connects the p_i-th and q_i-th cities, and the i-th railway bidirectionally connects the r_i-th and s_i-th cities.\nNo two roads connect the same pair of cities. Similarly, no two railways connect the same pair of cities.\nWe will say city A and B are connected by roads if city B is reachable from city A by traversing some number of roads. Here, any city is considered to be connected to itself by roads.\nWe will also define connectivity by railways similarly.\nFor each city, find the number of the cities connected to that city by both roads and railways.","submission_id":"s738814227","submission":"class Unionfind:\n    \n    def __init__(self,n):\n        self.uf = [-1]*n\n\n    def find(self,x):\n        if self.uf[x] < 0:\n            return x\n        else:\n            self.uf[x] = self.find(self.uf[x])\n            return self.uf[x]\n\n    def same(self,x,y):\n        return self.find(x) == self.find(y)\n\n    def union(self,x,y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return \n        if self.uf[x] > self.uf[y]:\n            x,y = y,x\n        self.uf[x] += self.uf[y]\n        self.uf[y] = x\n\n    def size(self,x):\n        x = self.find(x)\n        return -self.uf[x]\n\nn,k,l = map(int,input().split())\n\n\ngp = Unionfind(n)\ngr = Unionfind(n)\n\nfor i in range(k):\n    a,b = map(int,input().split())\n    gp.union(a-1,b-1)\nfor i in range(l):\n    a,b = map(int,input().split())\n    gr.union(a-1,b-1)\n\nl = []\ndic = {}\nfor i in range(n):\n    a = gp.find(i) \n    b = gr.find(i)\n    if a < 0:\n        a = i\n    if b < 0:\n        b = i\n    s = (a,b)\n    l.append(s)\n    if s in dic:\n        dic[s] += 1\n    else:\n        dic[s] = 1\nans = []\nfor i in range(n):\n    ans.append(dic[l[i]])\nprint(*ans)","label":1}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s536982227","submission":"s = input()\nans = 0\nfor i in s:\n    ans += int(i)\n    ans %= 9\nprint('Yes' if ans == 0 else 'No')","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s194873789","submission":"def solve():\n    string = list(input())\n    ans = 0\n    if string[-1]==\"s\":\n        ans = \"\".join(string)+\"es\"\n        print(ans)\n        return \n    else:\n        print(\"\".join(string)+\"s\")\n        return\n\nsolve()","label":1}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s489804449","submission":"# coding: utf-8\n\ndef main():\n    S = list(input())\n    b = 0\n    ans = 0\n    for s in S:\n        if s == 'B':\n            b += 1\n        else:\n            ans += b\n\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p03607","problem":"You are playing the following game with Joisino.\n\nInitially, you have a blank sheet of paper.\nJoisino announces a number. If that number is written on the sheet, erase the number from the sheet; if not, write the number on the sheet. This process is repeated N times.\nThen, you are asked a question: How many numbers are written on the sheet now?\n\nThe numbers announced by Joisino are given as A_1, ... ,A_N in the order she announces them. How many numbers will be written on the sheet at the end of the game?","submission_id":"s583882070","submission":"from collections import Counter\nn=int(input())\na=[int(input()) for _ in range(n)]\na_count=Counter(a)\ncount=0\nfor i in a_count:\n    if a_count[i]%2==1:\n        count+=1\nprint(count)","label":1}
{"problem_id":"p03031","problem":"We have N switches with \"on\" and \"off\" state, and M bulbs. The switches are numbered 1 to N, and the bulbs are numbered 1 to M.\nBulb i is connected to k_i switches: Switch s_{i1}, s_{i2}, ..., and s_{ik_i}. It is lighted when the number of switches that are \"on\" among these switches is congruent to p_i modulo 2.\nHow many combinations of \"on\" and \"off\" states of the switches light all the bulbs?","submission_id":"s332145660","submission":"N,M=map(int, input().split())\nk=[list(map(int,input().split()))for _ in range(M)]\np=list(map(int,input().split()))\nimport itertools\nimport operator\nimport functools\nprint(sum(1 for i in itertools.product([True,False],repeat=N)if functools.reduce(operator.and_,[functools.reduce(operator.xor,[i[j-1]for j in k[l][1:]])==p[l]for l in range(M)])))\n","label":1}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s931211549","submission":"a = int(input())\nb = input()\n\nc = b[int(input()) - 1]\n\ns = [b[i] if b[i] == c else '*' for i in range(a)]\n\nprint(''.join(s))\n","label":1}
{"problem_id":"p03089","problem":"Snuke has an empty sequence a.\nHe will perform N operations on this sequence.\nIn the i-th operation, he chooses an integer j satisfying 1 \\leq j \\leq i, and insert j at position j in a (the beginning is position 1).\nYou are given a sequence b of length N. Determine if it is possible that a is equal to b after N operations. If it is, show one possible sequence of operations that achieves it.","submission_id":"s778592291","submission":"N=int(input())\nb=list(map(int,input().split()))\nc=len(b)\nd=[]\n\nfor i in range(N):\n  c = len(b)\n  for j in range(c):\n    if b[c-j-1]==c-j:\n      d.append(b.pop(c-j-1))\n      break\n      \nif b==[]:\n  for num in d[::-1]:\n    print(num)\nelse:\n  print(-1)","label":1}
{"problem_id":"p02958","problem":"We have a sequence p = {p_1,\\ p_2,\\ ...,\\ p_N} which is a permutation of {1,\\ 2,\\ ...,\\ N}.\nYou can perform the following operation at most once: choose integers i and j (1 \\leq i < j \\leq N), and swap p_i and p_j. Note that you can also choose not to perform it.\nPrint YES if you can sort p in ascending order in this way, and NO otherwise.","submission_id":"s117079809","submission":"n = int(input())\np = list(map(int, input().split()))\nw = list(range(1,n+1))\nt = 0\nfor i in range(n):\n    if p[i] != w[i]:\n        t += 1\nif 0 <= t <= 2:\n    print('YES')\nelse:\n    print('NO')","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s615895259","submission":"n = input()\n \nA = list(map(int, input().split()))\n \ncounts = 0\nwhile all(a%2==0 for a in A):\n  A = [a\/2 for a in A]\n  counts += 1\nprint(counts)","label":1}
{"problem_id":"p02661","problem":"There are N integers X_1, X_2, \\cdots, X_N, and we know that A_i \\leq X_i \\leq B_i.\nFind the number of different values that the median of X_1, X_2, \\cdots, X_N can take.","submission_id":"s657427585","submission":"n = int(input())\nAB = []\nA = [0]*n\nB = [0]*n\nfor i in range(n):\n  A[i],B[i] = map(int,input().split())  \n\nA = sorted(A)  \nB = sorted(B)  \n\nif n%2 == 1:\n  l = A[n\/\/2]\n  r = B[n\/\/2]\n  print(r-l + 1)\nelse:\n  l = (A[n\/\/2-1]+A[n\/\/2])\/2\n  r = (B[n\/\/2-1]+B[n\/\/2])\/2\n  print(int((r-l)*2+1))","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s653162310","submission":"s=input()\nv='s'\nif s[-1]=='s':\n    v='es'\n\nprint(s+v)\n","label":1}
{"problem_id":"p03775","problem":"You are given an integer N.\nFor two positive integers A and B, we will define F(A,B) as the larger of the following: the number of digits in the decimal notation of A, and the number of digits in the decimal notation of B.\nFor example, F(3,11) = 2 since 3 has one digit and 11 has two digits.\nFind the minimum value of F(A,B) as (A,B) ranges over all pairs of positive integers such that N = A \\times B.","submission_id":"s655474067","submission":"import math\n\nN=int(input())\n\nL=int(math.sqrt(N))\n\nfor a in range(L+1,0,-1):\n    if N%a==0:\n        ans1=len(str(a))\n        ans2=len(str(str(N\/\/a)))\n        print(max(ans1,ans2))\n        exit()\n\n","label":1}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s869019320","submission":"n = int(input())\na = int(input())\n\nwhile True:\n    if n >= 500:\n        n -= 500\n    \n    else:\n        break\n\nif a >= n:\n    print('Yes')\nelse:\n    print('No')","label":1}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s123501659","submission":"N, P = map(int, input().split())\nA = list(map(int, input().split()))\ndef comb(x, y):\n  m = c = 1\n  for i in range(y):\n    m *= x-i\n    c *= y-i\n  return m\/\/c\neven = odd = 0\nfor a in A:\n  if a%2 == 0:\n    even += 1\n  else:\n    odd += 1\nans = 0\nfor i in range(P, odd+1, 2):\n  ans += comb(odd, i)\nprint(pow(2, even) * ans)\n","label":1}
{"problem_id":"p02925","problem":"N players will participate in a tennis tournament. We will call them Player 1, Player 2, \\ldots, Player N.\nThe tournament is round-robin format, and there will be N(N-1)\/2 matches in total.\nIs it possible to schedule these matches so that all of the following conditions are satisfied? If the answer is yes, also find the minimum number of days required.\n\nEach player plays at most one matches in a day.\nEach player i (1 \\leq i \\leq N) plays one match against Player A_{i, 1}, A_{i, 2}, \\ldots, A_{i, N-1} in this order.","submission_id":"s254530657","submission":"from collections import deque\nn = int(input())\ngraph = [[[] for _ in range(n+1)] for _ in range(n+1)]\nindeg = [[0] * (n+1) for _ in range(n+1)]\nfor i in range(1, n+1):\n    a = tuple(map(int, input().split()))\n    for j, v in enumerate(a):\n        if j == n-2:\n            continue\n        tmp = (min(i, a[j+1]), max(i, a[j+1]))\n        indeg[tmp[0]][tmp[1]] += 1\n        if i < v:\n            graph[i][v].append(tmp)\n        else:\n            graph[v][i].append(tmp)\n\ncnt = n * (n-1)\/\/2\nq = deque([])\nfor i in range(1, n+1):\n    for j in range(i+1, n+1):\n        if indeg[i][j] == 0:\n            q.append((i, j, 1))\n            cnt -= 1\n\nans = -1\nwhile q:\n    x, y, day = q.popleft()\n    # print(x, y, day)\n    ans = max(ans, day)\n    for p, r in graph[x][y]:\n        if indeg[p][r] == 0:\n            continue\n        indeg[p][r] -= 1\n        if indeg[p][r] == 0:\n            q.append((p, r, day+1))\n            cnt -= 1\n\nif cnt == 0:\n    print(ans)\nelse:\n    print(-1)","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s706370630","submission":"#\n# abc051 c\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"0 0 1 2\"\"\"\n        output = \"\"\"UURDDLLUUURRDRDDDLLU\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"-2 -2 1 1\"\"\"\n        output = \"\"\"UURRURRDDDLLDLLULUUURRURRDDDLLDL\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    sx, sy, tx, ty = map(int, input().split())\n\n    ans = \"U\"*(ty-sy) + \"R\"*(tx-sx)\n    ans += \"D\"*(ty-sy) + \"L\"*(tx-sx)\n    ans += \"L\" + \"U\"*(ty-sy+1) + \"R\"*(tx-sx+1) + \"D\"\n    ans += \"R\" + \"D\"*(ty-sy+1) + \"L\"*(tx-sx+1) + \"U\"\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n","label":1}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s162596090","submission":"X, Y, A, B, C = list(map(int, input().split()))\np = list(map(int, input().split()))\nq = list(map(int, input().split()))\nr = list(map(int, input().split()))\n\np.sort()\nq.sort()\nlist.sort(r, reverse=True)\n\np = p[(A-X):]\nq = q[(B-Y):]\n\ni_p = 0\ni_q = 0\nfor i_r in range(C):\n    if i_p >= len(p):\n        if q[i_q] < r[i_r]:\n            q[i_q] = r[i_r]\n            i_q += 1\n    elif i_q >= len(q):\n        if p[i_p] < r[i_r]:\n            p[i_p] = r[i_r]\n            i_p += 1\n    elif p[i_p] <= q[i_q]:\n        if p[i_p] < r[i_r]:\n            p[i_p] = r[i_r]\n            i_p += 1\n    else:\n        if q[i_q] < r[i_r]:\n            q[i_q] = r[i_r]\n            i_q += 1\n\n    if i_p >= len(p) and i_q >= len(q):\n        break\n\nres = 0\n\nfor i in range(len(p)):\n    res += p[i]\n\nfor i in range(len(q)):\n    res += q[i]\n\nprint(res)","label":1}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s029465098","submission":"N=input();print(sum(sorted(list(map(int,input().split())))[::2]))","label":1}
{"problem_id":"p03069","problem":"There are N stones arranged in a row. Every stone is painted white or black.\nA string S represents the color of the stones. The i-th stone from the left is white if the i-th character of S is ., and the stone is black if the character is #.\nTakahashi wants to change the colors of some stones to black or white so that there will be no white stone immediately to the right of a black stone.\nFind the minimum number of stones that needs to be recolored.","submission_id":"s947070620","submission":"n = int(input())\ns = input()\nans = 0\nw = s.count('.')\nb = 0\nans = w+b\nfor c in s:\n    if c=='#':\n        b += 1\n    else:\n        w -= 1\n    ans = min(ans, w+b)\nprint(ans)\n","label":1}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s313943768","submission":"S=input()\nans=0\nb_cnt=0\nfor i in range(len(S)):\n  if S[i]==\"B\":\n    b_cnt+=1\n  else:\n    ans+=b_cnt\nprint(ans)\n","label":1}
{"problem_id":"p03369","problem":"In \"Takahashi-ya\", a ramen restaurant, a bowl of ramen costs 700 yen (the currency of Japan), plus 100 yen for each kind of topping (boiled egg, sliced pork, green onions).\nA customer ordered a bowl of ramen and told which toppings to put on his ramen to a clerk. The clerk took a memo of the order as a string S. S is three characters long, and if the first character in S is o, it means the ramen should be topped with boiled egg; if that character is x, it means the ramen should not be topped with boiled egg. Similarly, the second and third characters in S mean the presence or absence of sliced pork and green onions on top of the ramen.\nWrite a program that, when S is given, prints the price of the corresponding bowl of ramen.","submission_id":"s911441745","submission":"# 166 B\nL =list(input())\ns = L.count(\"o\")\nprint(700+100*s)\n\n","label":1}
{"problem_id":"p03439","problem":"This is an interactive task.\nLet N be an odd number at least 3.\nThere are N seats arranged in a circle.\nThe seats are numbered 0 through N-1.\nFor each i (0 \u2264 i \u2264 N - 2), Seat i and Seat i + 1 are adjacent.\nAlso, Seat N - 1 and Seat 0 are adjacent.\nEach seat is either vacant, or oppupied by a man or a woman.\nHowever, no two adjacent seats are occupied by two people of the same sex.\nIt can be shown that there is at least one empty seat where N is an odd number at least 3.\nYou are given N, but the states of the seats are not given.\nYour objective is to correctly guess the ID number of any one of the empty seats.\nTo do so, you can repeatedly send the following query:\n\nChoose an integer i (0 \u2264 i \u2264 N - 1). If Seat i is empty, the problem is solved. Otherwise, you are notified of the sex of the person in Seat i.\n\nGuess the ID number of an empty seat by sending at most 20 queries.","submission_id":"s667411858","submission":"N=int(input())\nl,r=0,N\nnow=-1\nprint(0)\na=input()\nli=['Male','Famale']\nif(a=='Vacant'):\n    print(0)\n    exit()\nelif(a=='Male'):\n    now=0\nelse:\n    now=1\nfor _ in range(19):\n    Q=((l+r)\/\/2)%N\n    print(Q)\n    ans=input()\n    if(ans=='Vacant'):\n        print(Q%N)\n        exit()\n    res=-1\n    if(ans=='Male'):\n        res=0\n    else:\n        res=1\n    if((Q-l-1)%2==1 and res!=now) or ((Q-l-1)%2==0 and res==now):\n        r=Q\n    else:\n        l=Q\n        now=res\nprint((l+r)\/\/2%N)","label":1}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s538648657","submission":"X, K, D = map(int, input().split())\n\nans = 0\nif abs(X) >= K*D:\n    ans = abs(X) - K*D\nelse:\n    if (K - abs(X)\/\/D)%2 == 0:\n        ans = abs(X)%D\n    else:\n        ans = D - abs(X)%D\n\nprint(ans)","label":1}
{"problem_id":"p02405","problem":"Draw a chessboard which has a height of H cm and a width of W cm. For example, the following figure shows a chessboard which has a height of 6 cm and a width of 10 cm.","submission_id":"s406442727","submission":"from sys import stdin\n\nwhile True:\n    h, w = (int(n) for n in stdin.readline().rstrip().split())\n\n    if h == w == 0:\n        break\n\n    for cnt in range(h):\n        print(('#.' * ((w + 2) \/\/ 2))[cnt % 2: w + cnt % 2])\n\n    print()\n\n","label":1}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s091796799","submission":"import math\nn,k = map(int,input().split())\na = list(map(int,input().split()))\nlim = int((1e+9)+7)\nright = [0 for _ in range(n)]\nleft = [0 for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if a[j] < a[i]:\n            if i < j:\n                right[i] += 1\n            else:\n                left[i] += 1\nans = 0\ndef c(g):\n    re = g*(g-1)\/\/2\n    return re\n\nfor i in range(n):\n    ans = (ans - (left[i]*k) + ((right[i]+left[i])*c(k+1)))%lim\nprint(ans)","label":1}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s989652458","submission":"N,K=map(int,input().split())\n*A,=map(int,input().split())\nmod=10**9+7\n\ndef nC2(n):\n  return n*(n-1)\/\/2\n\ninv=0\nfor i in range(N-1):\n  for j in range(i+1,N):\n    if A[j]<A[i]: inv += 1\n      \ninv2=0\nB = sorted(A,reverse=True)\nfor i in range(N-1):\n  for j in range(i+1,N):\n    if B[j]<B[i]: inv2 += 1\n\nprint((inv*K+inv2*nC2(K))%mod)","label":1}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s975632592","submission":"s =list(str(input()))\ns_replace = [1 if i == \"B\" else 0 for i in s]\n \ncount = 0\nans = 0\n \nfor i in range(len(s_replace)):\n  if s_replace[i] == 1: #\u3082\u3057\u9ed2\u3060\u3063\u305f\u3089\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\n    count += 1\n    continue\n  else: #\u3082\u3057\u767d\u3060\u3063\u305f\u3089\u9ed2\u306e\u6570\u3092\u8db3\u3057\u3066\u304f\u3060\u3055\u3044\n    ans = ans + count\n    continue\n    \nprint(ans)","label":1}
{"problem_id":"p02971","problem":"You are given a sequence of length N: A_1, A_2, ..., A_N.\nFor each integer i between 1 and N (inclusive), answer the following question:\n\nFind the maximum value among the N-1 elements other than A_i in the sequence.","submission_id":"s116959229","submission":"import math\n\n\ndef resolve():\n    import sys\n    import string\n    input = sys.stdin.readline\n    # row = [int(x) for x in input().rstrip().split(\" \")]\n    # n = int(input().rstrip())\n    n = int(input().rstrip())\n    a_list = [int(input().rstrip()) * -1 for i in range(n)]\n\n    import numpy\n    indices = numpy.argsort(a_list)\n    max_num = a_list[indices[0]] * -1\n    second_max_num = a_list[indices[1]] * -1\n\n    for i in range(len(a_list)):\n        if i != indices[0]:\n            print(max_num)\n        else:\n            print(second_max_num)\n\n\nif __name__ == \"__main__\":\n    resolve()\n","label":1}
{"problem_id":"p03254","problem":"There are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he\/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.","submission_id":"s102445921","submission":"import sys\n\n\ninint = lambda: int(sys.stdin.readline())\ninintm = lambda: map(int, sys.stdin.readline().split())\ninintl = lambda: list(inintm())\ninstrm = lambda: map(str, sys.stdin.readline().split())\ninstrl = lambda: list(instrm())\n\nn, x = inintm()\nA = inintl()\n\nA.sort()\nans = 0\n\nfor i in range(n-1):\n    if x - A[i] >= 0:\n        ans += 1\n        x -= A[i]\n\nif A[-1] == x:\n    ans += 1\n\nprint(ans)\n","label":1}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s178614543","submission":"N=int(input())\ndef struct(s,i,n,ma):\n    if i==n:\n        print(s)\n    else:\n        for j in range(0,ma+2):\n            struct(s+chr(ord('a')+j),i+1,n,max(j,ma))\nstruct('a',1,N,0)","label":1}
{"problem_id":"p02600","problem":"M-kun is a competitor in AtCoder, whose highest rating is X.\nIn this site, a competitor is given a kyu (class) according to his\/her highest rating. For ratings from 400 through 1999, the following kyus are given:\n\nFrom 400 through 599: 8-kyu\nFrom 600 through 799: 7-kyu\nFrom 800 through 999: 6-kyu\nFrom 1000 through 1199: 5-kyu\nFrom 1200 through 1399: 4-kyu\nFrom 1400 through 1599: 3-kyu\nFrom 1600 through 1799: 2-kyu\nFrom 1800 through 1999: 1-kyu\n\nWhat kyu does M-kun have?","submission_id":"s794025731","submission":"x = int(input())\nprint(10 - x \/\/ 200)\n","label":1}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s579865713","submission":"from bisect import bisect_right\n\ndef div_ceil(x, y): return (x + y - 1) \/\/ y\n\nN, D, A = map(int, input().split())\nmonsters = [list(map(int, input().split())) for _ in range(N)]\nmonsters = sorted(monsters, key=lambda x: x[0])\nposition = [x for x, _ in monsters]\ndamage = [0] * (N+2)\nans = 0\nfor i, [x, hp] in enumerate(monsters, 1):\n    damage[i] += damage[i-1]\n    if damage[i] >= hp: continue\n    hp -= damage[i]\n    j = bisect_right(position, x + 2*D) + 1\n    attack = div_ceil(hp, A)\n    ans += attack\n    dam = attack * A\n    # imos's method\n    damage[i] += dam\n    damage[j] -= dam\nprint(ans)","label":1}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s097298498","submission":"n=int(input())\na=list(map(int,input().split()))\ncount4=0\ncount2=0\n\nfor i in a:\n  if i%4==0:\n    count4+=1\n  elif i%2==0:\n    count2+=1\n\nif count2<1:\n  count1=len(a)-count4\nelse:\n  count1=len(a)-count4-count2+1\nif count1-count4<=1:\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":1}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s713489796","submission":"if int(input()) == 1:\n  print('Hello World')\nelse:\n  ans = int(input())\n  ans += int(input())\n  print(ans)","label":1}
{"problem_id":"p02393","problem":"Write a program which reads three integers, and prints them in ascending order.","submission_id":"s356285329","submission":"a,b,c=map(int,input().split())\nif a>b:\n\t(a,b)=(b,a)\n\tif b>c:\n\t\t(b,c)=(c,b)\n\tif a>b:\n\t\t(a,b)=(b,a)\nelif b>c:\n\t(b,c)=(c,b)\n\tif b>c:\n\t\t(b,c)=(c,b)\nprint(a,b,c)","label":1}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s723722855","submission":"a = input(\"\").split(\" \")\na = [int(aa) for aa in a]\nH = a[0]\nW = a[1]\nif H == 1 or W == 1:\n    print(\"1\")\nelif H % 2 == 0:\n    print(str(int(H\/2)*W))\nelif W % 2 == 0:\n    print(str(int(W\/2)*H))\nelse:\n    p = int((H+1)\/2)\n    q = int((W+1)\/2)\n    print(str(p*q+(p-1)*(q-1)))","label":1}
{"problem_id":"p02384","problem":"Construct a dice from a given sequence of integers in the same way as Dice I.","submission_id":"s705961135","submission":"# Problem - \u30b5\u30a4\u30b3\u30ed\n\n# input\nt, s, e, w, n, b = map(int, input().split())\np_num = int(input())\n\n# initialization\ndice_dic = {}\ndice_dic[t] = {s:e, e:n, n:w, w:s}\ndice_dic[b] = {n:e, w:n, s:w, e:s}\ndice_dic[s] = {e:t, t:w, w:b, b:e}\ndice_dic[n] = {t:e, e:b, b:w, w:t}\ndice_dic[e] = {s:b, b:n, n:t, t:s}\ndice_dic[w] = {s:t, t:n, n:b, b:s}\n\n# process\nfor i in range(p_num):\n    in_1, in_2 = map(int, input().split())\n    print(dice_dic[in_1][in_2])\n\n","label":1}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s065719852","submission":"s = input()\ns = s.replace('eraser', '').replace('erase', '').replace('dreamer', '').replace('dream', '')\nprint('YES' if s == '' else 'NO')\n\n","label":1}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s393179082","submission":"from collections import deque\nK = int(input())\n\nq = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nq = deque(q)\n\ndef next_n(n):\n    if n == 0:\n        return [0, 1]\n    elif n == 9:\n        return [8, 9]\n    else:\n        return [n-1, n, n+1]\n\nfor _ in range(K-1):\n    now = q.popleft()\n    for next_ in next_n(now%10):\n        q.append(now*10 + next_)\n\nprint(q[0])","label":1}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s674476732","submission":"n = int(input())\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n\/\/i)\n\n    # divisors.sort()\n    return divisors\n#print(make_divisors(n))\nli = make_divisors(n)\nans = 0\nfor l in li:\n    if l == 1:\n        continue\n    t = l - 1\n    if n % t == n\/\/t:\n        ans += t\nprint(ans)","label":1}
{"problem_id":"p03435","problem":"We have a 3 \\times 3 grid. A number c_{i, j} is written in the square (i, j), where (i, j) denotes the square at the i-th row from the top and the j-th column from the left.\nAccording to Takahashi, there are six integers a_1, a_2, a_3, b_1, b_2, b_3 whose values are fixed, and the number written in the square (i, j) is equal to a_i + b_j.\nDetermine if he is correct.","submission_id":"s552125452","submission":"import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\ndef main():\n    c = []\n    for _ in range(3):\n        c.append(tuple(map(int, input().split())))\n    for i1 in range(101):\n        for i2 in range(101):\n            if i1 - c[0][0] == i2 - c[0][1]:\n                i3 = c[0][2] - (c[0][0] - i1)\n                if i1 - c[1][0] == i2 - c[1][1] == i3 - c[1][2]:\n                    if i1 - c[2][0] ==i2 -c[2][1] == i3 - c[2][2]:\n                        print('Yes')\n                        sys.exit()\n    print('No')\nif __name__ == '__main__':\n    main()","label":1}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s777544853","submission":"N=int(input())\nif N==1:\n  print(\"Hello World\")\nelse:\n  A,B=(input().split() for i in range(2));print(int(A[0])+int(B[0]))","label":1}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s041415561","submission":"import sys\nfrom itertools import permutations\ndef input(): return sys.stdin.readline().strip()\n\n\ndef main():\n    N, M, num = map(int, input().split())\n    R = list(map(int, input().split()))\n\n    # \u5168\u70b9\u5bfe\u9593\u6700\u77ed\u8ddd\u96e2\u3092\u4e88\u3081\u6c42\u3081\u3066\u304a\u304f\uff08\u30ef\u30fc\u30b7\u30e3\u30eb\u30d5\u30ed\u30a4\u30c9\uff09\n    path = [[10**18] * N for _ in range(N)]\n    for i in range(N): path[i][i] = 0\n    for _ in range(M):\n        a, b, c = map(int, input().split())\n        path[a - 1][b - 1] = min(c, path[a - 1][b - 1])\n        path[b - 1][a - 1] = min(c, path[b - 1][a - 1])\n    for k in range(N):\n        for i in range(N):\n            for j in range(N):\n                path[i][j] = min(path[i][j], path[i][k] + path[k][j])\n\n    # \u3042\u3068\u306fR\u306e\u5168\u9806\u5217\u306b\u5bfe\u3057\u3066\u4e00\u3064\u305a\u3064\u8a55\u4fa1\u3059\u308c\u3070\u826f\u3044\n    ans = 10**18\n    for r in list(permutations(R)):\n        d = 0\n        for i in range(num - 1):\n            d += path[r[i] - 1][r[i + 1] - 1]\n        ans = min(ans, d)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s599952091","submission":"from sys import stdin\nimport math\nimport re\nimport queue\n\ninput = stdin.readline\n\nMOD = 1000000007\nINF = 122337203685477580\n\ndef solve():\n    N = int(input().rstrip())\n    S = (input().rstrip())\n    str = list(S)\n    K = int(input().rstrip())\n    s = str[K-1]\n    for i in range(N):\n        if(str[i] != s):\n            str[i] = \"*\"\n    print(''.join(str))\n\nif __name__ == '__main__':\n    solve()\n","label":1}
{"problem_id":"p02665","problem":"Given is an integer sequence of length N+1: A_0, A_1, A_2, \\ldots, A_N. Is there a binary tree of depth N such that, for each d = 0, 1, \\ldots, N, there are exactly A_d leaves at depth d? If such a tree exists, print the maximum possible number of vertices in such a tree; otherwise, print -1.","submission_id":"s549115443","submission":"n = int(input())\n\na_li = list(map(int, input().split()))\n\nans = 0\nli = [0]*(n+1)\n\nfor i,a in enumerate(a_li):\n  ans += (i+1)*a\n\nfor i,a in enumerate(a_li[::-1]):\n  if i >= 1:\n    li[i] = li[i-1]+a\n  else:\n    li[i] = a\n\nli = li[::-1]\n\nflag = True\nne = 0.5\nfor i in range(n+1):\n  if li[i]  > 2*ne:\n    ans -= li[i] -int(2*ne)\n\n  \n  ne = min(li[i] - a_li[i],int(2*ne)-a_li[i])\n\n  if (i == n and ne != 0) or (i != n and ne <= 0):\n    flag = False\n\n  \nif flag:\n  print(ans)\nelse:\n  print(-1)","label":1}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s887624793","submission":"x1, y1, x2, y2 = map(int, input().split())\nxdiff = x2 - x1\nydiff = y2 - y1\nprint(x2 - ydiff, y2 + xdiff, x1 - ydiff, y1 + xdiff)","label":1}
{"problem_id":"p02987","problem":"You are given a 4-character string S consisting of uppercase English letters.\nDetermine if S consists of exactly two kinds of characters which both appear twice in S.","submission_id":"s300359593","submission":"S=input()\nT=list(S)\nU=list(set(T))\nb=[0]*2\nif len(U)==2:\n  for x in range(4):\n    if U[0]==S[x]:\n      b[0]+=1\n    elif U[1]==S[x]:\n      b[1]+=1\n  if b[0]==2 and b[1]==2:\n    print(\"Yes\")\n  else:\n    print(\"No\")\nelse:\n  print(\"No\")","label":1}
{"problem_id":"p02555","problem":"Given is an integer S.\nFind how many sequences there are whose terms are all integers greater than or equal to 3, and whose sum is equal to S.\nThe answer can be very large, so output it modulo 10^9 + 7.","submission_id":"s424262884","submission":"# D - Redistribution\nS = int(input())\nMOD = 10**9+7\n\n# dp[i]: 3 \u4ee5\u4e0a\u306e\u6570\u5b57\u3067 i \u3092\u4f5c\u308b\u7d44\u307f\u5408\u308f\u305b\ndp = [0]*(S+1)\n\nif S <= 2:\n    print(0)\nelif S <= 5:\n    print(1)\nelse:\n    # \u521d\u671f\u6761\u4ef6\n    dp[3],dp[4],dp[5] = 1,1,1\n\n    # i \u3092\u4f5c\u308b\u7d44\u5408\u308f\u305b\n    for i in range(6,S+1):\n        dp[i] = dp[i-2] + dp[i-3] + dp[i-4]\n\n    ans = (dp[S])%MOD\n    print(ans)","label":1}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s970916111","submission":"import math\nt = 1\nfor tc in range(t):\n    n = int(input())\n    ans = 0\n    for i in range(1,n+1):\n        j = 1\n        ans += (n-1) \/\/ i\n        # while i*j + 1 <= n:\n        #     ans += 1\n        #     j += 1\n    print(ans)\n","label":1}
{"problem_id":"p03435","problem":"We have a 3 \\times 3 grid. A number c_{i, j} is written in the square (i, j), where (i, j) denotes the square at the i-th row from the top and the j-th column from the left.\nAccording to Takahashi, there are six integers a_1, a_2, a_3, b_1, b_2, b_3 whose values are fixed, and the number written in the square (i, j) is equal to a_i + b_j.\nDetermine if he is correct.","submission_id":"s753102695","submission":"c = [list(map(int, input().split())) for _ in range(3)]\na = [0, 0, 0]\nb = [0, 0, 0]\nb[0] = c[0][0] - a[0]\nb[1] = c[0][1] - a[0]\nb[2] = c[0][2] - a[0]\na[1] = c[1][0] - b[0]\na[2] = c[2][0] - b[0]\n\ncnt = 0\nfor i in range(3):\n    for j in range(3):\n        if c[i][j] == a[i]+b[j]:\n            cnt += 1\n\nprint('Yes' if cnt == 9 else 'No')","label":1}
{"problem_id":"p03136","problem":"Determine if an N-sided polygon (not necessarily convex) with sides of length L_1, L_2, ..., L_N can be drawn in a two-dimensional plane.\nYou can use the following theorem:\nTheorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.","submission_id":"s013455552","submission":"n = int(input())\na = list(map(int, input().split()))\nasum = sum(a)\namax = max(a)\nif amax < asum-amax:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p03062","problem":"There are N integers, A_1, A_2, ..., A_N, arranged in a row in this order.\nYou can perform the following operation on this integer sequence any number of times:\nOperation: Choose an integer i satisfying 1 \\leq i \\leq N-1. Multiply both A_i and A_{i+1} by -1.\nLet B_1, B_2, ..., B_N be the integer sequence after your operations.\nFind the maximum possible value of B_1 + B_2 + ... + B_N.","submission_id":"s398238792","submission":"N = int(input())\na = list(map(int, input().split()))\n\ndp = [[0] * 2 for _ in range(N+1)]\ndp[0][0] = 0\ndp[0][1] = -10**18\n\nfor i in range(1, N+1):\n    dp[i][0] = max(dp[i-1][0]+a[i-1], dp[i-1][1]-a[i-1])\n    dp[i][1] = max(dp[i-1][0]-a[i-1], dp[i-1][1]+a[i-1])\nprint(dp[N][0])\n\n","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s666641680","submission":"x = int(input())\n\nif 1 <= x <= 100:\n    print(x ** 3)\n","label":1}
{"problem_id":"p03250","problem":"You have decided to give an allowance to your child depending on the outcome of the game that he will play now.\nThe game is played as follows:\n\nThere are three \"integer panels\", each with a digit between 1 and 9 (inclusive) printed on it, and one \"operator panel\" with a + printed on it.\nThe player should construct a formula of the form X + Y, by arranging the four panels from left to right. (The operator panel should not be placed at either end of the formula.)\nThen, the amount of the allowance will be equal to the resulting value of the formula.\n\nGiven the values A, B and C printed on the integer panels used in the game, find the maximum possible amount of the allowance.","submission_id":"s108310648","submission":"abc = sorted(list(map(int,input().split())))\nadd = str(abc[2]) + str(abc[1])\nprint(int(add) + abc[0])","label":1}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s380753000","submission":"n, m = map(int, input().split())\nprint(int((n * (n - 1)) \/ 2) + int((m * (m - 1)) \/ 2))\n","label":1}
{"problem_id":"p02982","problem":"There are N points in a D-dimensional space.\nThe coordinates of the i-th point are (X_{i1}, X_{i2}, ..., X_{iD}).\nThe distance between two points with coordinates (y_1, y_2, ..., y_D) and (z_1, z_2, ..., z_D) is \\sqrt{(y_1 - z_1)^2 + (y_2 - z_2)^2 + ... + (y_D - z_D)^2}.\nHow many pairs (i, j) (i < j) are there such that the distance between the i-th point and the j-th point is an integer?","submission_id":"s917045621","submission":"from itertools import combinations\nimport math\nn,d=map(int,input().split())\nX=[list(map(int,input().split())) for _ in range(n)]\ncnt=0\nfor perm in list(combinations(range(n),2)):\n    d=sum(map(lambda x: (x[0]-x[1])**2,zip(X[perm[0]],X[perm[1]])))\n    if d==int(math.sqrt(d))**2:\n        cnt+=1\nprint(cnt)","label":1}
{"problem_id":"p03501","problem":"You are parking at a parking lot. You can choose from the following two fee plans:\n\nPlan 1: The fee will be A\u00d7T yen (the currency of Japan) when you park for T hours.\nPlan 2: The fee will be B yen, regardless of the duration.\n\nFind the minimum fee when you park for N hours.","submission_id":"s492065622","submission":"NAB = list(map(int, input().split()))\nans = min(NAB[0]*NAB[1],NAB[2])\nprint(ans)","label":1}
{"problem_id":"p02547","problem":"Tak performed the following action N times: rolling two dice.\nThe result of the i-th roll is D_{i,1} and D_{i,2}.\nCheck if doublets occurred at least three times in a row.\nSpecifically, check if there exists at lease one i such that D_{i,1}=D_{i,2}, D_{i+1,1}=D_{i+1,2} and D_{i+2,1}=D_{i+2,2} hold.","submission_id":"s077525299","submission":"a = int(input())\ncount = 0\nfor i in range(a):\n    x,y = map(int,input().split(\" \"))\n    if x == y:\n        count += 1\n    else:\n        count = 0\n    if count == 3:\n        print('Yes')\n        exit()\nprint(\"No\")","label":1}
{"problem_id":"p02924","problem":"For an integer N, we will choose a permutation \\{P_1, P_2, ..., P_N\\} of \\{1, 2, ..., N\\}.\nThen, for each i=1,2,...,N, let M_i be the remainder when i is divided by P_i.\nFind the maximum possible value of M_1 + M_2 + \\cdots + M_N.","submission_id":"s258408113","submission":"s=0\nfor i in range(1,int(input())):\n    s+=i\nprint(s)","label":1}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s153943599","submission":"import sys\nread = sys.stdin.read\n#readlines = sys.stdin.readlines\nfrom math import ceil\ndef main():\n    n = tuple(map(int, tuple(input())))\n    if sum(n) % 9 == 0:\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    main()","label":1}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s608186657","submission":"import numpy as np\n\nMOD = 10 ** 9 + 7\n\nS = input()\n\nn = len(S)\ndp = np.zeros((n+1, 4), np.int64)\ndp[0, 0] = 1\nfor i, c in enumerate(S):\n    if c == 'A' or c == '?':\n        dp[i+1] += dp[i]\n        dp[i+1, 1] += dp[i, 0]\n    if c == 'B' or c == '?':\n        dp[i+1] += dp[i]\n        dp[i+1, 2] += dp[i, 1]\n    if c == 'C' or c == '?':\n        dp[i+1] += dp[i]\n        dp[i+1, 3] += dp[i, 2]\n    dp[i+1] %= MOD\n\nprint(dp[n, 3])\n\n","label":1}
{"problem_id":"p03598","problem":"There are N balls in the xy-plane. The coordinates of the i-th of them is (x_i, i).\nThus, we have one ball on each of the N lines y = 1, y = 2, ..., y = N.\nIn order to collect these balls, Snuke prepared 2N robots, N of type A and N of type B.\nThen, he placed the i-th type-A robot at coordinates (0, i), and the i-th type-B robot at coordinates (K, i).\nThus, now we have one type-A robot and one type-B robot on each of the N lines y = 1, y = 2, ..., y = N.\nWhen activated, each type of robot will operate as follows.\n\n\nWhen a type-A robot is activated at coordinates (0, a), it will move to the position of the ball on the line y = a, collect the ball, move back to its original position (0, a) and deactivate itself. If there is no such ball, it will just deactivate itself without doing anything.\n\n\nWhen a type-B robot is activated at coordinates (K, b), it will move to the position of the ball on the line y = b, collect the ball, move back to its original position (K, b) and deactivate itself. If there is no such ball, it will just deactivate itself without doing anything.\n\n\nSnuke will activate some of the 2N robots to collect all of the balls. Find the minimum possible total distance covered by robots.","submission_id":"s510765905","submission":"N, = list(map(int,input().split()))\nK, = list(map(int,input().split()))\nx  = list(map(int,input().split()))\nprint(sum([2*min(x[i],abs(x[i]-K)) for i in range(N)]))","label":1}
{"problem_id":"p03327","problem":"Decades have passed since the beginning of AtCoder Beginner Contest.\nThe contests are labeled as ABC001, ABC002, ... from the first round, but after the 999-th round ABC999, a problem occurred: how the future rounds should be labeled?\nIn the end, the labels for the rounds from the 1000-th to the 1998-th are decided: ABD001, ABD002, ..., ABD999.\nYou are given an integer N between 1 and 1998 (inclusive). Print the first three characters of the label of the N-th round of AtCoder Beginner Contest.","submission_id":"s056292720","submission":"import sys\nimport copy\nimport math\nimport bisect\nimport pprint\nimport bisect\nfrom functools import reduce\nfrom copy import deepcopy\nfrom collections import deque\n\ndef lcm(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\n\nif __name__ == '__main__':\n    a = [int(i) for i in input().split()]\n\n    if a[0] >999:\n        print(\"ABD\")\n    else:\n        print(\"ABC\")\n\n","label":1}
{"problem_id":"p02262","problem":"Shell Sort is a generalization of Insertion Sort to arrange a list of $n$ elements $A$.","submission_id":"s509733754","submission":"counter=0\n\ndef insert(lst,n,g):\n    for i in range(g,n):\n        v=lst[i]\n        j=i-g\n        global counter\n        while j>=0 and lst[j]>v:\n            lst[j+g]=lst[j]\n            j=j-g\n            counter+=1\n        lst[j+g]=v\n\nn=int(input())\nlst=[int(input()) for _ in range(n)]\nwork=n\/\/4\nglst=[]\nwhile work>=0:\n    glst.append(work+1)\n    if work==0 : break\n    work\/\/=4\n\nm=len(glst)\nfor i in range(m):\n    insert(lst,n,glst[i])\n\nprint(m)\nprint(\" \".join(map(str,glst)))\nprint(counter)\nfor i in range(n): print(lst[i])\n\n","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s489732391","submission":"N = int(input())\nP = sorted([int(input()) for X in range(0,N)])\nP[-1] = P[-1]\/\/2\nprint(sum(P))","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s043969757","submission":"n,m = map(int,input().split())\na = list(map(int,input().split()))\n\nb = [x for x in a if x >= sum(a)\/4\/m]\n\nif len(b)>=m:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":1}
{"problem_id":"p03044","problem":"We have a tree with N vertices numbered 1 to N.\nThe i-th edge in the tree connects Vertex u_i and Vertex v_i, and its length is w_i.\nYour objective is to paint each vertex in the tree white or black (it is fine to paint all vertices the same color) so that the following condition is satisfied:\n\nFor any two vertices painted in the same color, the distance between them is an even number.\n\nFind a coloring of the vertices that satisfies the condition and print it. It can be proved that at least one such coloring exists under the constraints of this problem.","submission_id":"s530692923","submission":"N = int(input())\ndist_from_1 = [0 for i in range(N+1)]\n\npaths = [dict() for i in range(N+1)]\nfor i in range(N-1):\n    a, b, dist = map(int, input().split())\n    paths[a][b] = dist\n    paths[b][a] = dist\n\nqueue = [(0, 1, 0)]\nwhile len(queue) != 0:\n    prev, now, dist = queue.pop()\n    dist_from_1[now] = dist\n    for next in paths[now]:\n        if next == prev:\n            continue\n        queue.append((now, next, dist + paths[now][next]))\n\nfor i in range(1, N+1):\n    if dist_from_1[i] % 2 == 0:\n        print(0)\n    else:\n        print(1)\n","label":1}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s288118364","submission":"import sys\n\n\ndef main():\n    s = sys.stdin.readline().rstrip()\n\n    black = 0\n    ans = 0\n\n    for i in s:\n        if i == \"B\":\n            black = black + 1\n        else:\n            ans = ans + black\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","label":1}
{"problem_id":"p03230","problem":"You are given an integer N. Determine if there exists a tuple of subsets of \\{1,2,...N\\}, (S_1,S_2,...,S_k), that satisfies the following conditions:\n\nEach of the integers 1,2,...,N is contained in exactly two of the sets S_1,S_2,...,S_k.\nAny two of the sets S_1,S_2,...,S_k have exactly one element in common.\n\nIf such a tuple exists, construct one such tuple.","submission_id":"s695173374","submission":"#!\/usr\/bin\/env python3\n#Tenka1 Programmer Beginner Contest D\n\nimport sys\nimport math\nfrom bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nsys.setrecursionlimit(1000000000)\nfrom heapq import heappush, heappop,heappushpop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 10**9 + 7\ninf = float('inf')\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\nn = I()\nlst = [3]\ntmp = 3\nif n == 1:\n    print('Yes')\n    print(2)\n    print(1,1)\n    print(1,1)\n    quit()\nfor _ in range(500):\n    x = lst[-1] + tmp\n    lst.append(x)\n    tmp += 1\nif n not in lst:\n    print('No')\nelse:\n    print('Yes')\n    x = lst.index(n) + 3\n    print(x)\n    lst = [[] for _ in range(x-1)]\n    tmp = 0\n    cnt = 0\n    for i in range(1,n+1):\n        lst[tmp].append(i)\n        if cnt == tmp:\n            tmp += 1\n            cnt = 0\n            continue\n        cnt += 1\n    ans = [[] for _ in range(x)]\n    tmp = 0\n    for i in range(x-1):\n        for j in range(tmp):\n            ans[i].append(lst[tmp][j])\n        for j in range(tmp,x-1):\n            ans[i].append(lst[j][tmp])\n        tmp += 1\n    for i in range(x-1):\n        ans[-1].append(lst[i][-1])\n    for i in range(x):\n        print(x-1,*ans[i])\n","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s018010849","submission":"n, m = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort(reverse=True)\nif len(list(filter(lambda v: v * 4 * m >= sum(a), a[:m]))) == m:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":1}
{"problem_id":"p02879","problem":"Having learned the multiplication table, Takahashi can multiply two integers between 1 and 9 (inclusive) together. He cannot do any other calculation.\nGiven are two integers A and B.\nIf Takahashi can calculate A \\times B, print the result; if he cannot, print -1 instead.","submission_id":"s423901578","submission":"a, b = map(int, input().rstrip().split())\nr = -1 if 10 <= a or 10 <= b else a * b\nprint(r)\n","label":1}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s876826778","submission":"a,b,c = [int(i) for i in input().split()]\n\nimport math\n\nroot_a = math.sqrt(a)\nroot_b = math.sqrt(b)\nroot_c = math.sqrt(c)\n\nif 4*a*b< (c - b -a)**2 and c - a - b >0:\n  print('Yes')\nelse:\n  print('No')","label":1}
{"problem_id":"p02719","problem":"Given any integer x, Aoki can do the operation below.\nOperation: Replace x with the absolute difference of x and K.\nYou are given the initial value of an integer N. Find the minimum possible value taken by N after Aoki does the operation zero or more times.","submission_id":"s967028708","submission":"a,b = map(int, input().split())\nif abs(a-b) > a:\n    print(a)\nelse:\n    if a%b == 0:\n        print(0)\n    else:\n        print(abs(a%b-b))","label":1}
{"problem_id":"p02903","problem":"We have a square grid with H rows and W columns.\nSnuke wants to write 0 or 1 in each of the squares.\nHere, all of the following conditions have to be satisfied:\n\nFor every row, the smaller of the following is A: the number of 0s contained in the row, and the number of 1s contained in the row. (If these two numbers are equal, \u201cthe smaller\u201d should be read as \u201ceither\u201d.)\nFor every column, the smaller of the following is B: the number of 0s contained in the column, and the number of 1s contained in the column.\n\nDetermine if these conditions can be satisfied by writing 0 or 1 in each of the squares. If the answer is yes, show one way to fill the squares so that the conditions are satisfied.","submission_id":"s493030996","submission":"h,w,a,b=map(int,input().split())\nfor i in range(h):\n    if i<b:\n        print(\"1\"*a+\"0\"*(w-a))\n    else:\n        print(\"0\"*a+\"1\"*(w-a))\n'''\n\u884c\u3068\u5217\u306e\u305d\u308c\u305e\u308c\u306b\u6ce8\u76ee\u3057\u3066\u8003\u3048\u308b\u3068\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u3067\u3042\u308c\u3070\u305d\u308c\u305e\u308c\u3092\u5165\u308c\u66ff\u3048\u3066\u3082\u6761\u4ef6\u3092\u6e80\u305f\u3059(\u81ea\u5206\u306e\u90fd\u5408\u306e\u3044\u3044\u3088\u3046\u306b\u884c\u5217\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b)\n\u2193\n\u307e\u305f\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u3067\u3042\u308c\u30700\u30681\u3092\u5165\u308c\u66ff\u3048\u3066\u3082\u6761\u4ef6\u3092\u6e80\u305f\u3059(0\u306e\u500b\u6570\u306b\u307e\u305a\u306f\u6ce8\u76ee\u3057\u3066\u8003\u3048\u308b)\n\u2193\n\u5165\u308c\u66ff\u3048\u3066\u3044\u3063\u3066\u307e\u305a\u306f\u884c\u5217\u3092\u6700\u7d42\u7684\u306b\u306f\u4e0b\u306e\u3088\u3046\u306a\u5f62\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n'''","label":1}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s657698197","submission":"import sys\ninput = sys.stdin.readline\n\nn = int(input())\nS = input().rstrip()\nb = 0\nq = 0\n\nfor s in S:\n    if s == '(':\n        b +=1\n    else:\n        if b>0:\n            b -= 1\n        else:\n            q += 1\nprint('('*q+S+')'*b)\n","label":1}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s083665084","submission":"#!\/usr\/bin\/env python3\n\nfrom pprint import pprint\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\n\nX, Y, A, B, C = map(int, input().split())\napples_A = sorted(list(map(int, input().split())))\napples_B = sorted(list(map(int, input().split())))\napples_C = sorted(list(map(int, input().split())))\n\n# \u8d64\u306e\u30ea\u30f3\u30b4\u304b\u3089\u304a\u3044\u3057\u3055\u304c\u5927\u304d\u3044\u9806\u306b X \u500b\u9078\u3076 (1)\n# \u7dd1\u306e\u30ea\u30f3\u30b4\u304b\u3089\u304a\u3044\u3057\u3055\u304c\u5927\u304d\u3044\u9806\u306b Y \u500b\u9078\u3076 (2)\n# (1), (2) \u305d\u3057\u3066 \u7121\u8272\u306e\u30ea\u30f3\u30b4\u306e\u304b\u3089\u3001\u304a\u3044\u3057\u3055\u304c\u5927\u304d\u3044\u3082\u306e\u304b\u3089\u9806\u306b X + Y \u500b\u9078\u3079\u3070\u826f\u3044\n\napples_rest = sorted(apples_A[-X:] + apples_B[-Y:] + apples_C)\nans = sum(apples_rest[ -(X + Y):])\n\nprint(ans)\n","label":1}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s101315463","submission":"Row = int(input())\nList = []\nfor i in range (Row):\n  List.append(list(map(int, input().split())))\nres=0\nfor i in range(Row):\n  res += List[i][1]-List[i][0]+1\nprint(res)","label":1}
{"problem_id":"p03495","problem":"Takahashi has N balls. Initially, an integer A_i is written on the i-th ball.\nHe would like to rewrite the integer on some balls so that there are at most K different integers written on the N balls.\nFind the minimum number of balls that Takahashi needs to rewrite the integers on them.","submission_id":"s050521567","submission":"N,K = map(int,input().split())\nA = list(map(int,input().split()))\nB = (1+N)*[0]\n\nfor a in A:\n  B[a]+=1\n\nprint(sum(sorted(B)[:-K]))","label":1}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s450225778","submission":"def solve():\n    N, *a_l = map(int, open(0).read().split())\n    a_l = [0] + a_l\n\n    for i in range(N\/\/2, 0, -1):\n        a_l[i] = sum(a_l[i::i]) % 2\n\n    b_l = [i for i, x in enumerate(a_l) if x]\n\n    print(len(b_l))\n    if len(b_l) != 0:\n        print(' '.join(map(str, b_l)))\n\n\nif __name__ == '__main__':\n    solve()\n","label":1}
{"problem_id":"p03694","problem":"It is only six months until Christmas, and AtCoDeer the reindeer is now planning his travel to deliver gifts.\nThere are N houses along TopCoDeer street. The i-th house is located at coordinate a_i. He has decided to deliver gifts to all these houses.\nFind the minimum distance to be traveled when AtCoDeer can start and end his travel at any positions.","submission_id":"s041910881","submission":"import sys\n# sys.setrecursionlimit(100000)\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef input_int():\n    return int(input())\n\n\ndef input_int_list():\n    return [int(i) for i in input().split()]\n\n\ndef main():\n    n = input_int()\n    A = input_int_list()\n    print(max(A) - min(A))\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p02935","problem":"You have a pot and N ingredients. Each ingredient has a real number parameter called value, and the value of the i-th ingredient (1 \\leq i \\leq N) is v_i.\nWhen you put two ingredients in the pot, they will vanish and result in the formation of a new ingredient. The value of the new ingredient will be (x + y) \/ 2 where x and y are the values of the ingredients consumed, and you can put this ingredient again in the pot.\nAfter you compose ingredients in this way N-1 times, you will end up with one ingredient. Find the maximum possible value of this ingredient.","submission_id":"s501088430","submission":"n = int(input())\nv = list(map(int,input().split()))\nv.sort()\n\nfor i in range(0,n-1):\n  sum = (v[i] + v[i+1])\/ 2\n  v[i+1] = sum \n\nprint(v[n-1])","label":1}
{"problem_id":"p03774","problem":"There are N students and M checkpoints on the xy-plane.\nThe coordinates of the i-th student (1 \\leq i \\leq N) is (a_i,b_i), and the coordinates of the checkpoint numbered j (1 \\leq j \\leq M) is (c_j,d_j).\nWhen the teacher gives a signal, each student has to go to the nearest checkpoint measured in Manhattan distance. \nThe Manhattan distance between two points (x_1,y_1) and (x_2,y_2) is |x_1-x_2|+|y_1-y_2|.\nHere, |x| denotes the absolute value of x.\nIf there are multiple nearest checkpoints for a student, he\/she will select the checkpoint with the smallest index.\nWhich checkpoint will each student go to?","submission_id":"s424645987","submission":"N, M = map(int, input().split())\ns = [list(map(int, input().split())) for _ in range(N)]\nc = [list(map(int, input().split())) for _ in range(M)]\nfor i in range(N):\n    m = 0\n    for j in range(M):\n        if abs(s[i][0]-c[m][0]) + abs(s[i][1]-c[m][1]) > abs(s[i][0]-c[j][0]) + abs(s[i][1]-c[j][1]):\n            m = j\n    print(m+1)\n","label":1}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s500268330","submission":"from collections import deque\nimport sys\nn = int(input())\nif n == 1:\n    print('a')\n    sys.exit()\n\nq = deque([])\nq.append((1, 'a', '1'))\ncur = 1\nwhile cur != n:\n    num = len(q)\n    j = 0\n    while j < num:\n        a, b, c = q.popleft()\n        for i in range(1, max(map(int, list(c)))+2):\n            q.append((i, b + chr(96+i), c + str(i)))\n        j += 1\n    cur += 1\n\nfor i in range(len(q)):\n    a, b, c = q.popleft()\n    print(b)\n\n","label":1}
{"problem_id":"p02679","problem":"We have caught N sardines. The deliciousness and fragrantness of the i-th sardine is A_i and B_i, respectively.\nWe will choose one or more of these sardines and put them into a cooler. However, two sardines on bad terms cannot be chosen at the same time.\nThe i-th and j-th sardines (i \\neq j) are on bad terms if and only if A_i \\cdot A_j + B_i \\cdot B_j = 0.\nIn how many ways can we choose the set of sardines to put into the cooler? Since the count can be enormous, print it modulo 1000000007.","submission_id":"s594545328","submission":"import math\nfrom collections import Counter\n\nMOD = 10**9 + 7\nN = int(input())\n\nI = []\nzz = 0\nsz = 0\ntz = 0\nfor _ in range(N):\n    a,b = map(int, input().split())\n\n    # (a, b) = (0, 0)\n    if a == 0 and b == 0:\n        zz += 1\n        continue\n    # (a, b) = (0, #)\n    if a == 0:\n        sz += 1\n        continue\n    # (a, b) = (#, 0)\n    if b == 0:\n        tz += 1\n        continue\n\n    gcd = math.gcd(a, b)\n    if b < 0:\n        a *= -1\n        b *= -1\n    I.append((a\/\/gcd,b\/\/gcd))\n\nS = []\nT = []\nC = Counter(I)\nfor a, b in C.keys():\n    if a > 0:\n        S.append(C[(a,b)])\n        T.append(C[(-b,a)])\n    else:\n        if C[(b,-a)] == 0:\n            S.append(0)\n            T.append(C[(a,b)])\n\nans = 1\nans *= 2**sz + 2**tz - 1\nans %= MOD\nfor i in range(len(S)):\n    ans *= 2**S[i] + 2**T[i] - 1\n    ans %= MOD\nans += zz  # (0, 0)\nans -= 1\nprint(ans % MOD)","label":1}
{"problem_id":"p02257","problem":"A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.","submission_id":"s966575505","submission":"n=int(input())\nif n==10000:\n    print(592)\n    quit()\ns=0\nfor i in range(n):\n    a=int(input())\n    if a==2 or a==3:\n        s+=1\n    else:\n        for j in range(3,a+1,2):\n            if j==a:\n                s+=1\n            elif a%j==0:\n                break\n          \nprint(s)","label":1}
{"problem_id":"p03053","problem":"You are given a grid of squares with H horizontal rows and W vertical columns, where each square is painted white or black.\nHW characters from A_{11} to A_{HW} represent the colors of the squares.\nA_{ij} is # if the square at the i-th row from the top and the j-th column from the left is black, and A_{ij} is . if that square is white.\nWe will repeatedly perform the following operation until all the squares are black:\n\nEvery white square that shares a side with a black square, becomes black.\n\nFind the number of operations that will be performed.\nThe initial grid has at least one black square.","submission_id":"s888432137","submission":"from collections import deque\n \nh,w = map(int,input().split())\ns = [None]*h\n \nfor i in range(h):\n    s[i] = input()\n \nd = [[10000000 for i in range(w)] for j in range(h)]\nsharp = 0\n \nsx = []\nsy = []\n            \ndx = [1,0,-1,0]\ndy = [0,1,0,-1]\n \nfor i in range(h):\n    for j in range(w):\n        if s[i][j] == \"#\":\n            sx.append(j)\n            sy.append(i)\n            d[i][j] = 0\n            \n            \ndef bfs():\n    que = deque()\n    ans = 0\n    for i in range(len(sx)):\n        que.append([sy[i],sx[i]])\n    \n    while que:\n        y,x = que.popleft()\n        \n        for k in range(4):\n            nx = x + dx[k]\n            ny = y + dy[k]\n            \n            if 0<=nx and nx<w and 0<=ny and ny<h and d[ny][nx] == 10000000:\n                if d[ny][nx] > d[y][x]+1:\n                    d[ny][nx] = d[y][x]+1\n                    que.append([ny,nx])\n                    \n                    if d[ny][nx] > ans:\n                        ans = d[ny][nx]\n    \n    print(ans)\n        \nbfs()","label":1}
{"problem_id":"p03214","problem":"Niwango-kun is an employee of Dwango Co., Ltd.\nOne day, he is asked to generate a thumbnail from a video a user submitted.\nTo generate a thumbnail, he needs to select a frame of the video according to the following procedure:\n\nGet an integer N and N integers a_0, a_1, ..., a_{N-1} as inputs. N denotes the number of the frames of the video, and each a_i denotes the representation of the i-th frame of the video.\nSelect t-th frame whose representation a_t is nearest to the average of all frame representations.\nIf there are multiple such frames, select the frame with the smallest index.\n\nFind the index t of the frame he should select to generate a thumbnail.","submission_id":"s020571993","submission":"n, *a = map(int, open(0).read().split())\ns = sum(a)\nm = float(\"inf\")\nfor i, j in enumerate(a):\n  t = abs(s - n*j)\n  if t < m:\n    m = t\n    k = i\nprint(k)","label":1}
{"problem_id":"p03303","problem":"You are given a string S consisting of lowercase English letters.\nWe will write down this string, starting a new line after every w letters. Print the string obtained by concatenating the letters at the beginnings of these lines from top to bottom.","submission_id":"s392487746","submission":"S = input()\nw = int(input())\nnum = len(S)\nans = []\nfor i in range(0, num, w): ans += S[i]\nprint(''.join(ans))\n","label":1}
{"problem_id":"p03417","problem":"There is a grid with infinitely many rows and columns. In this grid, there is a rectangular region with consecutive N rows and M columns, and a card is placed in each square in this region.\nThe front and back sides of these cards can be distinguished, and initially every card faces up.\nWe will perform the following operation once for each square contains a card:\n\nFor each of the following nine squares, flip the card in it if it exists: the target square itself and the eight squares that shares a corner or a side with the target square.\n\nIt can be proved that, whether each card faces up or down after all the operations does not depend on the order the operations are performed.\nFind the number of cards that face down after all the operations.","submission_id":"s965697401","submission":"n,m = map(int,input().split())\n\nif n == m == 1:\n    ans = 1\n    \nelif min(n,m) == 1 and max(n,m) > 1:\n    ans = max(n,m) - 2\n    \nelse:\n    ans = (n-2) * (m-2)\n    \nprint(ans)","label":1}
{"problem_id":"p03080","problem":"There are N people numbered 1 to N. Each person wears a red hat or a blue hat.\nYou are given a string s representing the colors of the people. Person i wears a red hat if s_i is R, and a blue hat if s_i is B.\nDetermine if there are more people wearing a red hat than people wearing a blue hat.","submission_id":"s936066022","submission":"N=int(input())\ns=input()\nb_count=0\nr_count=0\nfor i in range(N):\n  if s[i]=='R':\n    r_count+=1\n  elif s[i]=='B':\n    b_count+=1\nif r_count>b_count:\n  print('Yes')\nelse:\n  print('No')","label":1}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s635402965","submission":"def gcd(x,y):\n    if x==0 or y==0:\n        return max(x,y)\n    if x<y:\n        x,y=y,x\n    if x%y==0:\n        return y\n    return gcd(y,x%y)\nn=int(input())\na=list(map(int,input().split()))\nL=[a[0]]*n\nR=[a[-1]]*n\nfor i in range(n-1):\n    L[i+1]=gcd(L[i],a[i+1])\n    R[-i-2]=gcd(R[-i-1],a[-i-2])\nans=1\nL=[0]+L\nR=R+[0]\nfor i in range(n):\n    ans=max(ans,gcd(L[i],R[i+1]))\nprint(ans)","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s037705846","submission":"sx, sy, tx, ty=map(int,input().split())\n\nhrz=tx-sx\nvrt=ty-sy\n\na=\"U\"*vrt\nb=\"R\"*hrz\nc=\"D\"*vrt\nd=\"L\"*hrz\nans1=a+b+c+d\na2=a+\"U\"\nb2=b+\"R\"\nc2=c+\"D\"\nd2=d+\"L\"\nans2=\"L\"+a2+b2+\"DR\"+c2+d2+\"U\"\nprint(ans1+ans2)","label":1}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s774809387","submission":"n,x = map(int,input().split())\na,p = [1],[1]\nfor i in range(n):\n    a.append(a[i]*2+3)\n    p.append(p[i]*2+1)\n\ndef calc(n,x):\n    if n==0:\n        return 1 if x>0 else 0\n    else:\n        if x>a[n-1]+1:\n            return p[n-1]+1+calc(n-1,x-2-a[n-1])\n        else:\n            return calc(n-1,x-1)\nprint(calc(n,x))","label":1}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s681188626","submission":"x1,y1,x2,y2 = map(int,input().split())\nx3,y3 = x2 - (y2-y1), y2 + x2-x1\nx4,y4 = x1 - (y2-y1), y1 + x2-x1\n\nans = [x3,y3,x4,y4]\nprint(*ans)","label":1}
{"problem_id":"p03456","problem":"AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.","submission_id":"s575928666","submission":"# -*- coding:utf-8 -*-\na, b = input().split()\n\njudge = int(a+b)\n\nif any(i**2 == judge for i in range(judge\/\/2)):\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s438460891","submission":"def main():\n    x, k, d = map(int,input().split())\n    abs_x = abs(x)\n    times = abs_x \/\/ d\n    if(times > k):\n        print(abs_x - k * d)\n    else:\n        if((k - times) % 2 == 0):\n            print(abs_x - times * d)\n        else:\n            print(abs(abs_x - (times + 1) * d))\nif __name__ == '__main__':\n    main()","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s301070246","submission":"a = input()\nif(a[-1] == 's'):\n  print(a+'es')\nelse:\n  print(a+'s')","label":1}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s559336714","submission":"def main(N):\n    ans = 0\n    for n in str(N):\n        ans += int(n)\n    if ans%9==0:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nif __name__ == '__main__':\n    N = int(input())\n    ans = main(N)\n    print(ans)\n\n","label":1}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s289924620","submission":"a, b, t = map(int, input().split())\nprint(t\/\/a*b)\n","label":1}
{"problem_id":"p02933","problem":"You will be given an integer a and a string s consisting of lowercase English letters as input.\nWrite a program that prints s if a is not less than 3200 and prints red if a is less than 3200.","submission_id":"s492767087","submission":"import sys\nsys.setrecursionlimit(10 ** 9)\ninput = sys.stdin.readline\nfrom itertools import permutations,  combinations, accumulate\nfrom functools import *\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heapify, heappop, heappush, heappushpop\n\nINF = float('inf')\nNIL = - 1\n\n\"\"\" Input\nN, A, B = map(int, input().split())\nA = list(map(int, input().split()))\nD = [int(input()) for _ in range(N)]\n\"\"\"\n\na = int(input())\ns = input().rstrip()\n\nif a >= 3200:\n    print(s)\nelse:\n    print('red')\n\n\n\n\n# def main():\n\n\n# if __name__ == '__main__':\n#     main()\n","label":1}
{"problem_id":"p02536","problem":"There are N cities numbered 1 through N, and M bidirectional roads numbered 1 through M.\nRoad i connects City A_i and City B_i.\nSnuke can perform the following operation zero or more times:\n\nChoose two distinct cities that are not directly connected by a road, and build a new road between the two cities.\n\nAfter he finishes the operations, it must be possible to travel from any city to any other cities by following roads (possibly multiple times).\nWhat is the minimum number of roads he must build to achieve the goal?","submission_id":"s197233959","submission":"import sys\nimport numpy as np\nimport numba\nfrom numba import njit, b1, i4, i8, f8\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nuf_t = numba.types.UniTuple(i8[:], 2)\n\n\n@njit((uf_t, i8), cache=True)\ndef find_root(uf, x):\n    root = uf[0]\n    while root[x] != x:\n        root[x] = root[root[x]]\n        x = root[x]\n    return x\n\n\n@njit((uf_t, i8, i8), cache=True)\ndef merge(uf, x, y):\n    root, size = uf\n    x, y = find_root(uf, x), find_root(uf, y)\n    if x == y:\n        return False\n    if size[x] < size[y]:\n        x, y = y, x\n    size[x] += size[y]\n    root[y] = root[x]\n    return True\n\n@njit((i8, i8, i8[:]), cache=True)\ndef main(N, M, AB):\n    ans = N - 1\n    root = np.arange(N + 1, dtype=np.int64)\n    size = np.ones_like(root)\n    uf = (root, size)\n\n    for i in range(0, len(AB), 2):\n        a, b = AB[i:i + 2]\n        if merge(uf, a, b):\n            ans -= 1\n    return ans\n\nN, M = map(int, readline().split())\nAB = np.array(read().split(), np.int64)\n\nprint(main(N, M, AB))","label":1}
{"problem_id":"p03031","problem":"We have N switches with \"on\" and \"off\" state, and M bulbs. The switches are numbered 1 to N, and the bulbs are numbered 1 to M.\nBulb i is connected to k_i switches: Switch s_{i1}, s_{i2}, ..., and s_{ik_i}. It is lighted when the number of switches that are \"on\" among these switches is congruent to p_i modulo 2.\nHow many combinations of \"on\" and \"off\" states of the switches light all the bulbs?","submission_id":"s759295097","submission":"n, m = list(map(int, input().split()))\n\nswitch = [[] for _ in range(m)]\n\nfor i in range(m):\n    ks = list(map(int, input().split()))\n    switch[i] = ks[1:]\n\n\np = list(map(int, input().split()))\n\nans = 0\n#print(switch)\n\nfor i in range(2 ** n):\n    flag = [False] * n\n    for j in range(n):  # \u3053\u306e\u30eb\u30fc\u30d7\u304c\u4e00\u756a\u306e\u30dd\u30a4\u30f3\u30c8\n        if ((i >> j) & 1):  # \u9806\u306b\u53f3\u306b\u30b7\u30d5\u30c8\u3055\u305b\u6700\u4e0b\u4f4dbit\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n            flag[j] = True\n\n    #print(flag)\n    f = True    \n    for k in range(m):\n        c = 0\n        for j in switch[k]:\n            if flag[j-1]:\n                c += 1\n        if c % 2 != p[k]:\n            f = False\n            break\n        \n    if f:\n            ans += 1\n\nprint(ans)\n\n","label":1}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s121727713","submission":"import sys\n\nsys.setrecursionlimit(10**7)\ndef I(): return int(sys.stdin.readline().rstrip())\ndef MI(): return map(int,sys.stdin.readline().rstrip().split())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))  #\u7a7a\u767d\u3042\u308a\ndef LI2(): return list(map(int,sys.stdin.readline().rstrip()))  #\u7a7a\u767d\u306a\u3057\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())  #\u7a7a\u767d\u3042\u308a\ndef LS2(): return list(sys.stdin.readline().rstrip())  #\u7a7a\u767d\u306a\u3057\n\n\n\nA,B = MI()\nif A <= 5:\n    print(0)\nelif A >= 13:\n    print(B)\nelse:\n    print(B\/\/2)\n","label":1}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s685775910","submission":"D,T,S = map(int,input().split())\nprint('YNeos'[D\/S>T::2])","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s183480632","submission":"import math\n\nN, M = map(int, input().split())\nA_list = list(map(int, input().split()))\n\ncnt = 0\nA_sum = sum(A_list)\n\nfor i in range(N):\n    if A_list[i] >= math.ceil(A_sum\/4\/M):\n        cnt += 1\nif cnt >= M:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":1}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s595633133","submission":"n,m = map(int, input().split())\na = (m*(m-1))\/\/2\nb = (n*(n-1))\/\/2\nprint(a+b)","label":1}
{"problem_id":"p02855","problem":"Chokudai made a rectangular cake for contestants in DDCC 2020 Finals.\nThe cake has H - 1 horizontal notches and W - 1 vertical notches, which divide the cake into H \\times W equal sections. K of these sections has a strawberry on top of each of them.\nThe positions of the strawberries are given to you as H \\times W characters s_{i, j} (1 \\leq i \\leq H, 1 \\leq j \\leq W). If s_{i, j} is #, the section at the i-th row from the top and the j-th column from the left contains a strawberry; if s_{i, j} is ., the section does not contain one. There are exactly K occurrences of #s.\nTakahashi wants to cut this cake into K pieces and serve them to the contestants. Each of these pieces must satisfy the following conditions:\n\nHas a rectangular shape.\nContains exactly one strawberry.\n\nOne possible way to cut the cake is shown below:\n\nFind one way to cut the cake and satisfy the condition. We can show that this is always possible, regardless of the number and positions of the strawberries.","submission_id":"s776092331","submission":"H, W, K = map(int,input().split())\ns = [input() for k in range(H)]\nt = []\nfor h in range(H):\n    temp = 0\n    for w in range(W):\n        if s[h][w] == \"#\":\n            temp += 1\n    t.append(temp)\nans = [[0]*W for k in range(H)]\nc = 1\nfor h in range(H):\n    f = 0\n    if t[h] > 0:\n        for w in range(W):\n            if s[h][w] == \"#\":\n                if f == 0:\n                    f = 1\n                else:\n                    c += 1\n            ans[h][w] = c\n        c += 1\nfor h in range(1,H):\n    if t[h] == 0:\n        for w in range(W):\n            ans[h][w] = ans[h-1][w]\nfor h in range(H-2,-1,-1):\n    if t[h] == 0:\n        for w in range(W):\n            ans[h][w] = ans[h+1][w]\n\nfor e in ans:\n    print(*e)\n","label":1}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s439263617","submission":"s = input()\nl=len(s)\nans = 0\nW = 0\nfor i in range(l):\n  if s[i] == \"W\":\n    ans += len(s[W:i])\n    W += 1\n\nprint(ans)","label":1}
{"problem_id":"p03474","problem":"The postal code in Atcoder Kingdom is A+B+1 characters long, its (A+1)-th character is a hyphen -, and the other characters are digits from 0 through 9.\nYou are given a string S. Determine whether it follows the postal code format in Atcoder Kingdom.","submission_id":"s367022875","submission":"a,b=map(int,input().split())\ns=str(input())\ne=[\"0\",'1','2','3','4','5','6','7','8','9']\nfor i in range(len(s)):\n  if a==i:\n    if s[i]!='-':\n      print(\"No\")\n      exit()\n  else:\n    if s[i] not in e:\n      print(\"No\")\n      exit()\n\nprint(\"Yes\")","label":1}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s729635730","submission":"n=int(input())\ns=input()\nk=int(input())\nfor i in s:\n    if i==s[k-1]:\n        print(i,end='')\n    else:\n        print('*',end='')","label":1}
{"problem_id":"p03806","problem":"Dolphin is planning to generate a small amount of a certain chemical substance C.\nIn order to generate the substance C, he must prepare a solution which is a mixture of two substances A and B in the ratio of M_a:M_b.\nHe does not have any stock of chemicals, however, so he will purchase some chemicals at a local pharmacy.\nThe pharmacy sells N kinds of chemicals. For each kind of chemical, there is exactly one package of that chemical in stock.\nThe package of chemical i contains a_i grams of the substance A and b_i grams of the substance B, and is sold for c_i yen (the currency of Japan).\nDolphin will purchase some of these packages. For some reason, he must use all contents of the purchased packages to generate the substance C.\nFind the minimum amount of money required to generate the substance C.\nIf it is not possible to generate the substance C by purchasing any combination of packages at the pharmacy, report that fact.","submission_id":"s994148713","submission":"from collections import defaultdict\n\nN, Ma, Mb = map(int, input().split())\nM = [tuple(map(int, input().split())) for _ in range(N)]\n\nd = defaultdict(lambda: float('inf'))\nd[(0, 0)] = 0\nfor a, b, c in M:\n    new_d = d.copy()\n    for key_a, key_b in d:\n        new_d[(a + key_a, b + key_b)] = min(new_d[(a + key_a, b + key_b)],\n                                            d[(key_a, key_b)] + c)\n    d = new_d\n\nans = float('inf')\nfor i in range(1, 401 \/\/ max(Ma, Mb)):\n    ans = min(ans, d[(Ma * i, Mb * i)])\nprint(ans if ans != float('inf') else -1)\n","label":1}
{"problem_id":"p03698","problem":"You are given a string S consisting of lowercase English letters. Determine whether all the characters in S are different.","submission_id":"s203519005","submission":"\n\nif __name__ == '__main__':\n    s= input()\n    len1 = len(s)\n    len2 = len(set(s))\n\n    if len1 == len2:\n        print(\"yes\")\n    else:\n        print(\"no\")\n","label":1}
{"problem_id":"p03074","problem":"N people are arranged in a row from left to right.\nYou are given a string S of length N consisting of 0 and 1, and a positive integer K.\nThe i-th person from the left is standing on feet if the i-th character of S is 0, and standing on hands if that character is 1.\nYou will give the following direction at most K times (possibly zero):\nDirection: Choose integers l and r satisfying 1 \\leq l \\leq r \\leq N, and flip the l-th, (l+1)-th, ..., and r-th persons. That is, for each i = l, l+1, ..., r, the i-th person from the left now stands on hands if he\/she was standing on feet, and stands on feet if he\/she was standing on hands.\nFind the maximum possible number of consecutive people standing on hands after at most K directions.","submission_id":"s245090118","submission":"n,k=map(int,input().split())\ns=input()\nl=[[\"1\",0]]\nfor i in s:\n    if l[-1][0]==i:\n        l[-1][1]+=1\n    else:\n        l.append([i,1])\nif l[-1][0]==\"0\":\n    l.append([\"1\",0])\ne=[0]\nfor i in range(len(l)):\n    e.append(e[i]+l[i][1])\nans=0 if k<len(l)\/\/2 else e[-1]\nfor i in range(2*k-1,len(l),2):\n    ans=max(ans,e[i+2]-e[i-2*k+1])\nprint(ans)","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s822876513","submission":"# -*- coding: utf-8 -*-\na = int(raw_input())\n# ??????\nprint a*a*a","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s192588996","submission":"def d_2_c(n):\n  a = 0\n  while(n % 2 == 0):\n    n = int(n\/2)\n    a += 1\n  return a\n\nN = input()\nprint(min(list(map(lambda a: d_2_c(int(a)), input().split(\" \")))))","label":1}
{"problem_id":"p03565","problem":"E869120 found a chest which is likely to contain treasure.\nHowever, the chest is locked. In order to open it, he needs to enter a string S consisting of lowercase English letters.\nHe also found a string S', which turns out to be the string S with some of its letters (possibly all or none) replaced with ?.  \nOne more thing he found is a sheet of paper with the following facts written on it:  \n\nCondition 1: The string S contains a string T as a contiguous substring.\nCondition 2: S is the lexicographically smallest string among the ones that satisfy Condition 1.\n\nPrint the string S.\nIf such a string does not exist, print UNRESTORABLE.","submission_id":"s964529226","submission":"S = input()\nT = input()\n\nfor i in range(len(S) - len(T),-1,-1):\n  for j in range(len(T)):\n    if S[j + i] != \"?\" and S[j + i] != T[j]:\n      break\n  else:\n    S = S.replace(\"?\",\"a\")\n    print(S[:i] + T + S[i + len(T):])\n    break\nelse:\n  print(\"UNRESTORABLE\")","label":1}
{"problem_id":"p03213","problem":"You are given an integer N. Among the divisors of N! (= 1 \\times 2 \\times ... \\times N), how many Shichi-Go numbers (literally \"Seven-Five numbers\") are there?\nHere, a Shichi-Go number is a positive integer that has exactly 75 divisors.","submission_id":"s538913807","submission":"N = int(input())\nP = [1]*(N+1)\nfor i in range(1,N+1):\n    n = i\n    for j in range(2,N+1):\n        while n%j==0:\n            P[j]+=1\n            n\/\/=j\nP = [p for p in P if p>1]\nN = len(P)-1\ncnt = 0\nB = [1,3,5,15,25,75]\ndef f(k,d):\n    global N,P,cnt,B\n    if d==75:\n        cnt += 1\n        return\n    elif d>75 or k>N:\n        return\n    for i in range(1,P[k]+1):\n        if i in B:\n            f(k+1,d*i)\nf(0,1)\nprint(cnt)","label":1}
{"problem_id":"p03501","problem":"You are parking at a parking lot. You can choose from the following two fee plans:\n\nPlan 1: The fee will be A\u00d7T yen (the currency of Japan) when you park for T hours.\nPlan 2: The fee will be B yen, regardless of the duration.\n\nFind the minimum fee when you park for N hours.","submission_id":"s250893471","submission":"def main():\n    input_string = list(map(int,input().split()))\n    N = input_string[0]\n    A = input_string[1]\n    B = input_string[2]\n\n    price1 = A*N\n    price2 = B\n\n    print(min(price1,price2))\n\nmain()\n","label":1}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s622254234","submission":"N = int(input())\nA = [int(x) for x in input().split()]\n\ndp = [[0]*3]*N\n\ndp[0][0] = 0  # ((i+1)-1)\/2\ndp[0][1] = 0 # (i+1)\/2\ndp[0][2] = A[0]  # ((i+1)+1)\/2\n\nfor i in range(1, N):\n    \n    if i % 2 == 0:\n        dp[i][0] = dp[i-1][0] + A[i]\n        dp[i][1] = max(dp[i-1][1], dp[i-1][2])\n        dp[i][2] = dp[i-1][2] + A[i]\n    else:\n        dp[i][0] = max(dp[i-1][0], dp[i-1][1])\n        dp[i][1] = dp[i-1][1] + A[i]\n        dp[i][2] = dp[i-1][2]\n\nif N % 2 == 0:\n    print(max(dp[N-1][1],dp[N-1][2]))\nelse:\n    print(max(dp[N-1][0],dp[N-1][1]))","label":1}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s531390072","submission":"a,b=[int (x) for x in input().split()]\nif a>=13:\n    print(b)\nelif a<=5:\n    print(0)\nelse:\n    print(b\/\/2)","label":1}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s689736401","submission":"import sys\nreadline = sys.stdin.buffer.readline\ndef even(n): return 1 if n%2==0 else 0\n\"\"\"\n1*1*1*1*m = m\u306a\u3069\u3082\u542b\u3081\u308b\n4\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u5834\u5408\u30682*2\u306b\u5206\u3051\u308b\u5834\u5408\u306a\u3069\u306e\u5834\u5408\u5206\u3051\u304c\u5fc5\u8981\n\u7d04\u6570\u5217\u6319\u304b\u3089\u3069\u3046\u3053\u3046\u3059\u308b\uff1f\n\n\"\"\"\nn,m = map(int,readline().split())\nmod = 10**9+7\n\ndef pow(n,p,mod=10**9+7): #\u7e70\u308a\u8fd4\u3057\u4e8c\u4e57\u6cd5(n\u306ep\u4e57)\n    res = 1\n    while p > 0:\n        if p % 2 == 0:\n            n = n ** 2 % mod\n            p \/\/= 2\n        else:\n            res = res * n % mod\n            p -= 1\n    return res % mod\ndef factrial_memo(n=10**6,mod=10**9+7):\n    fact = [1, 1]\n    for i in range(2, n + 1):\n        fact.append((fact[-1] * i) % mod)\n    return fact\nfact = factrial_memo()\n\n\"\"\"\u7d20\u56e0\u6570\u5206\u89e3\"\"\"\ndef factrize(n):\n    b = 2\n    fct = []\n    while b*b <= n:\n        while n % b == 0:\n            n \/\/= b\n            #\u3082\u3057\u7d20\u56e0\u6570\u3092\u91cd\u8907\u3055\u305b\u305f\u304f\u306a\u3044\u306a\u3089\u3053\u3053\u3092\u52a0\u3048\u3066fct.append(b)\u3092\u6d88\u3059\n            \"\"\"\n            if not b in fct:\n                fct.append(b)\n            \"\"\"\n            fct.append(b)\n        b = b+1\n    if n > 1:\n        fct.append(n)\n    return fct #\u30ea\u30b9\u30c8\u304c\u5e30\u308b\n\nprime = factrize(m)\n\nfrom collections import defaultdict\ndic1 = defaultdict(int)\n\nfor i in prime:\n    dic1[i] += 1\n\nans = 1\n\nfor i in dic1.values():\n    ans *= fact[n+i-1]*pow(fact[n-1],mod-2)*pow(fact[i],mod-2)\n    ans %= mod\nprint(ans)","label":1}
{"problem_id":"p02721","problem":"Takahashi has decided to work on K days of his choice from the N days starting with tomorrow.\nYou are given an integer C and a string S. Takahashi will choose his workdays as follows:\n\nAfter working for a day, he will refrain from working on the subsequent C days.\nIf the i-th character of S is x, he will not work on Day i, where Day 1 is tomorrow, Day 2 is the day after tomorrow, and so on.\n\nFind all days on which Takahashi is bound to work.","submission_id":"s511923027","submission":"N,K,C = map(int,input().split())\nS = list(input())\n\nA = [0]*N\nB = [0]*N\n\ni = 0\na = 1\nwhile i < N:\n    if S[i] == 'o':\n        A[i] = a\n        a += 1\n        i += C+1\n    else:\n        i += 1\nj = N-1\nb = K\nwhile j >= 0:\n    if S[j] == 'o':\n        B[j] = b\n        b -= 1\n        j -= C+1\n    else:\n        j -= 1\n\nfor i in range(N):\n    if A[i] == B[i] and A[i] != 0:\n        print(i+1)","label":1}
{"problem_id":"p02615","problem":"Quickly after finishing the tutorial of the online game ATChat, you have decided to visit a particular place with N-1 players who happen to be there. These N players, including you, are numbered 1 through N, and the friendliness of Player i is A_i.\nThe N players will arrive at the place one by one in some order. To make sure nobody gets lost, you have set the following rule: players who have already arrived there should form a circle, and a player who has just arrived there should cut into the circle somewhere.\nWhen each player, except the first one to arrive, arrives at the place, the player gets comfort equal to the smaller of the friendliness of the clockwise adjacent player and that of the counter-clockwise adjacent player. The first player to arrive there gets the comfort of 0.\nWhat is the maximum total comfort the N players can get by optimally choosing the order of arrivals and the positions in the circle to cut into?","submission_id":"s395145466","submission":"import sys\ninput = sys.stdin.readline\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    A = sorted(A)\n    ans = 0\n    for i in range(1, N):\n        ans += A[N - (i \/\/ 2) -1]\n\n    \n    print(ans)\n\nmain()","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s518872740","submission":"S = list(input())\nnum = len(S) - 1\nif S[num] == 's':\n    S.append('e')\n    S.append('s')\nelse:\n    S.append('s')\nprint(''.join(S))","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s888210804","submission":"S=input()\nl=len(S)\ns=list(S)\nif s[l-1]==\"s\":\n  print(S+\"es\")\nelse:\n  print(S+\"s\")\n","label":1}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s533589241","submission":"print('YNEOS'[input().replace('eraser','').replace('erase','').replace('dreamer','').replace('dream','')!=''::2])","label":1}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s556758431","submission":"s = input()\na = 'Yes'\nfor i in range(len(s)):\n  if i%2==0:\n    if s[i]!='R' and s[i]!='U' and s[i]!='D':\n      a = 'No'\n  else:\n    if s[i]!='L' and s[i]!='U' and s[i]!='D':\n      a = 'No'\nprint(a)","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s992090088","submission":"S = input()\n\nprint(S + (\"s\" if S[-1] != \"s\" else \"es\"))\n","label":1}
{"problem_id":"p03814","problem":"Snuke has decided to construct a string that starts with A and ends with Z, by taking out a substring of a string s (that is, a consecutive part of s).\nFind the greatest length of the string Snuke can construct. Here, the test set guarantees that there always exists a substring of s that starts with A and ends with Z.","submission_id":"s705311351","submission":"s = input()\nn = len(s)\na = 0\nz = n - 1\n\nfor i in range(n):\n    if s[i] == \"A\":\n        a = i\n        break\n\nfor i in range(n):\n    if s[i] == \"Z\":\n        z = i\n\nprint(z - a + 1)\n","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s375787623","submission":"n,m = map(int,input().split())\na = list(map(int,input().split()))\nm_count = 0\na_sum = sum(a)\nfor i in a:\n  if i >= (a_sum\/(4*m)):\n    m_count += 1\n  else:\n    continue\n    \nif m_count >= m:\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":1}
{"problem_id":"p03523","problem":"You are given a string S.\nTakahashi can insert the character A at any position in this string any number of times.\nCan he change S into AKIHABARA?","submission_id":"s836532797","submission":" \nimport re\n \n \nS = input()\n \nif re.fullmatch(r\"A?KIHA?BA?RA?\",S):\n    print(\"YES\")\nelse:\n    print(\"NO\")\nexit()","label":1}
{"problem_id":"p03005","problem":"Takahashi is distributing N balls to K persons.\nIf each person has to receive at least one ball, what is the maximum possible difference in the number of balls received between the person with the most balls and the person with the fewest balls?","submission_id":"s742803268","submission":"N,K=map(int,input().split())\nprint(0 if K==1 or N==K else N-K)","label":1}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s873250434","submission":"N = int(input())\ncards = list(map(int, input().split()))\ncards = sorted(cards)\n\nAlice = 0\nBob = 0\nwhile len(cards) >= 2:\n    Alice += cards[-1]\n    cards = cards[:-1]\n    Bob += cards[-1]\n    cards = cards[:-1]\nif len(cards) == 1:\n    Alice += cards[-1]\nprint(Alice - Bob)\n","label":1}
{"problem_id":"p03855","problem":"There are N cities. There are also K roads and L railways, extending between the cities.\nThe i-th road bidirectionally connects the p_i-th and q_i-th cities, and the i-th railway bidirectionally connects the r_i-th and s_i-th cities.\nNo two roads connect the same pair of cities. Similarly, no two railways connect the same pair of cities.\nWe will say city A and B are connected by roads if city B is reachable from city A by traversing some number of roads. Here, any city is considered to be connected to itself by roads.\nWe will also define connectivity by railways similarly.\nFor each city, find the number of the cities connected to that city by both roads and railways.","submission_id":"s820768753","submission":"class UnionFind():\n    def __init__(self, n):\n        # \u6b63==\u5b50: \u6839\u306e\u9802\u70b9\u756a\u53f7 \/ \u8ca0==\u6839: \u9023\u7d50\u9802\u70b9\u6570\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        #\u8981\u7d20x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u6839\u3092\u8fd4\u3059\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        #\u8981\u7d20x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3068\u8981\u7d20y\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u3068\u3092\u4f75\u5408\u3059\u308b\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        # \u8981\u7d20x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u30b5\u30a4\u30ba\uff08\u8981\u7d20\u6570\uff09\u3092\u8fd4\u3059\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        # \u8981\u7d20x, y\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3059\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        # \u8981\u7d20x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306b\u5c5e\u3059\u308b\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        # \u3059\u3079\u3066\u306e\u6839\u306e\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        # \u30b0\u30eb\u30fc\u30d7\u306e\u6570\u3092\u8fd4\u3059\n        return len(self.roots())\n\n    def all_group_members(self):\n        # {\u30eb\u30fc\u30c8\u8981\u7d20: [\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u306e\u30ea\u30b9\u30c8], ...}\u306e\u8f9e\u66f8\u3092\u8fd4\u3059\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n################################################################################\n\ndef examD():\n    N, K, L = LI()\n    ans = []\n    ufk = UnionFind(N)\n    ufl = UnionFind(N)\n    for i in range(K):\n        p, q = LI()\n        ufk.union(p-1,q-1)\n    for i in range(L):\n        r, s = LI()\n        ufl.union(r-1,s-1)\n    d = defaultdict(int)\n    for i in range(N):\n        #\u5404\u30b0\u30eb\u30fc\u30d7\u306e\u6839\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u8a18\u9332\n        d[(ufk.find(i), ufl.find(i))] += 1\n    for i in range(N):\n        print(d[(ufk.find(i), ufl.find(i))])\n\n\nimport sys\nfrom collections import Counter,defaultdict,deque\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef S(): return sys.stdin.readline().strip()\nmod = 10**9 + 7\ninf = float('inf')\n\nexamD()\n\n","label":1}
{"problem_id":"p03625","problem":"We have N sticks with negligible thickness.\nThe length of the i-th stick is A_i.\nSnuke wants to select four different sticks from these sticks and form a rectangle (including a square), using the sticks as its sides.\nFind the maximum possible area of the rectangle.","submission_id":"s367135454","submission":"import collections\nimport sys\nn = int(input())\nls = list(map(int,input().split()))\nc =collections.Counter(ls)\nd = list(c)\np = []\nq = []\nmm = 0\nmx3 = 0\nfor i in range(len(d)):\n    if c[d[i]] >=4:\n        p.append(d[i])\n    if c[d[i]] >=2:\n        q.append(d[i])\nif p == [] and len(q) < 2:\n    print(0)\n    sys.exit()\nif len(q) >= 2:\n    mx1 = max(q)\n    q.remove(mx1)\n    mx2 = max(q)\n    mm = mx1 * mx2\nif p != []:\n    mx3 = max(p)**2\nprint(max(mm,mx3))\n    \n\n","label":1}
{"problem_id":"p03806","problem":"Dolphin is planning to generate a small amount of a certain chemical substance C.\nIn order to generate the substance C, he must prepare a solution which is a mixture of two substances A and B in the ratio of M_a:M_b.\nHe does not have any stock of chemicals, however, so he will purchase some chemicals at a local pharmacy.\nThe pharmacy sells N kinds of chemicals. For each kind of chemical, there is exactly one package of that chemical in stock.\nThe package of chemical i contains a_i grams of the substance A and b_i grams of the substance B, and is sold for c_i yen (the currency of Japan).\nDolphin will purchase some of these packages. For some reason, he must use all contents of the purchased packages to generate the substance C.\nFind the minimum amount of money required to generate the substance C.\nIf it is not possible to generate the substance C by purchasing any combination of packages at the pharmacy, report that fact.","submission_id":"s552319073","submission":"N, ma, mb = map(int, input().split())\nabc = [(-1, -1, -1)]\nfor _ in range(N):\n    a, b, c = map(int, input().split())\n    abc.append((a, b, c))\n\nINF = float(\"inf\")\n\n# dp[n][i][j] :=\n# n\u756a\u76ee\u307e\u3067\u306e\u85ac\u54c1\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u3001A\u304ci\u30b0\u30e9\u30e0, \u7269\u8ceaB\u304cj\u30b0\u30e9\u30e0\u3068\u306a\u308b\u6eb6\u6db2\u306e\u6700\u5c0f\u30b3\u30b9\u30c8\n# N <= 40, a,b <= 10 \u306a\u306e\u3067\u3001 i,j <= 400\ndp = [[[INF for _ in range(401)] for _ in range(401)] for _ in range(N + 1)]\ndp[0][0][0] = 0\n\nfor n in range(1, N + 1):\n    a, b, c = abc[n]\n    for i in range(401):\n        for j in range(401):\n            # n\u756a\u76ee\u3092\u8cb7\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u5834\u5408(=\u9077\u79fb\u5143\u304c\u5b58\u5728\u3059\u308b\u5834\u5408)\n            # \u8cb7\u308f\u306a\u3044 or \u8cb7\u3046\n            if i >= a and j >= b:\n                dp[n][i][j] = min(dp[n - 1][i][j], dp[n - 1][i - a][j - b] + c)\n            # n\u756a\u76ee\u3092\u8cb7\u3046\u3053\u3068\u304c\u51fa\u6765\u306a\u3044\u5834\u5408(=\u9077\u79fb\u5143\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408)\n            else:\n                dp[n][i][j] = dp[n - 1][i][j]\n\nans = INF\n# i == j == 0\u3000\u306f\u4e0d\u9069\u30011\u304b\u3089\u59cb\u3081\u308b\nfor i in range(1, 401):\n    for j in range(1, 401):\n        # i : j = ma : mb \u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n        if i * mb == j * ma:\n            ans = min(ans, dp[N][i][j])\n\nif ans != INF:\n    print(ans)\nelse:\n    print(-1)\n","label":1}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s133166472","submission":"# abc140_c.py\n# https:\/\/atcoder.jp\/contests\/abc140\/tasks\/abc140_c\n\n# C - Maximal Value \/\n# \u5b9f\u884c\u6642\u9593\u5236\u9650: 2 sec \/ \u30e1\u30e2\u30ea\u5236\u9650: 1024 MB\n# \u914d\u70b9 : 300\u70b9\n\n# \u554f\u984c\u6587\n# \u9577\u3055 N\u306e\u5024\u306e\u5206\u304b\u3089\u306a\u3044\u6574\u6570\u5217 A\u304c\u3042\u308a\u307e\u3059\u3002\n# \u9577\u3055 N\u22121\u306e\u6574\u6570\u5217 B\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001Bi\u2265max(Ai,Ai+1)\u304c\u6210\u7acb\u3059\u308b\u3053\u3068\u304c\u5206\u304b\u3063\u3066\u3044\u307e\u3059\u3002\n# A\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\u5024\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5236\u7d04\n#     \u5165\u529b\u306f\u5168\u3066\u6574\u6570\n#     2\u2264N\u2264100\n#     0\u2264Bi\u2264105\n\n# \u5165\u529b\n# \u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\u3002\n# N\n# B1 B2 ... BN\u22121\n\n# \u51fa\u529b\n# A\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\u5024\u306e\u6700\u5927\u5024\u3092\u51fa\u529b\u305b\u3088\u3002\n\n# \u5165\u529b\u4f8b 1\n# 3\n# 2 5\n\n# \u51fa\u529b\u4f8b 1\n# 9\n\n# A\u3068\u3057\u3066\u3001\u4f8b\u3048\u3070 A = ( 2 , 1 , 5 )\u3084\u3001 A = ( \u22121 , \u22122 , \u22123 ), A = ( 2 , 2 , 5 ) \u7b49\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n# \u3053\u308c\u3089\u306e\u3046\u3061 A \u306e\u8981\u7d20\u306e\u7dcf\u548c\u304c\u6700\u5927\u3068\u306a\u308b\u3082\u306e\u306f\u3001 A = ( 2 , 2 , 5) \u3067\u3059\u3002\n\n# \u5165\u529b\u4f8b 2\n# 2\n# 3\n\n# \u51fa\u529b\u4f8b 2\n# 6\n\n# \u5165\u529b\u4f8b 3\n# 6\n# 0 153 10 10 23\n\n# \u51fa\u529b\u4f8b 3\n# 53\n\n\nglobal FLAG_LOG\nFLAG_LOG = False\n\n\ndef log(value):\n    # FLAG_LOG = True\n    # FLAG_LOG = False\n    if FLAG_LOG:\n        print(str(value))\n\n\ndef calculation(lines):\n    # S = lines[0]\n    N = int(lines[0])\n    # N, M = list(map(int, lines[0].split()))\n    values = list(map(int, lines[1].split()))\n    # values = list(map(int, lines[2].split()))\n    # values = list()\n    # for i in range(N):\n    #     values.append(int(lines[i]))\n    # valueses = list()\n    # for i in range(N):\n    #     valueses.append(list(map(int, lines[i+1].split())))\n\n    lst = [0] * N\n    lst[0] = values[0]\n    lst[N-1] = values[N-2]\n    for n in range(1, N-1):\n        lst[n] = min(values[n-1], values[n])\n\n    return [sum(lst)]\n\n\n# \u5f15\u6570\u3092\u53d6\u5f97\ndef get_input_lines(lines_count):\n    lines = list()\n    for _ in range(lines_count):\n        lines.append(input())\n    return lines\n\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\ndef get_testdata(pattern):\n    if pattern == 1:\n        lines_input = ['3', '2 5']\n        lines_export = [9]\n    if pattern == 2:\n        lines_input = ['2', '3']\n        lines_export = [6]\n    if pattern == 3:\n        lines_input = ['6', '0 153 10 10 23']\n        lines_export = [53]\n    return lines_input, lines_export\n\n\n# \u52d5\u4f5c\u30e2\u30fc\u30c9\u5224\u5225\ndef get_mode():\n    import sys\n    args = sys.argv\n    global FLAG_LOG\n    if len(args) == 1:\n        mode = 0\n        FLAG_LOG = False\n    else:\n        mode = int(args[1])\n        FLAG_LOG = True\n    return mode\n\n\n# \u4e3b\u51e6\u7406\ndef main():\n    import time\n    started = time.time()\n    mode = get_mode()\n    if mode == 0:\n        lines_input = get_input_lines(2)\n    else:\n        lines_input, lines_export = get_testdata(mode)\n\n    lines_result = calculation(lines_input)\n\n    for line_result in lines_result:\n        print(line_result)\n\n    # if mode > 0:\n    #     print(f'lines_input=[{lines_input}]')\n    #     print(f'lines_export=[{lines_export}]')\n    #     print(f'lines_result=[{lines_result}]')\n    #     if lines_result == lines_export:\n    #         print('OK')\n    #     else:\n    #         print('NG')\n    # finished = time.time()\n    # duration = finished - started\n    # print(f'duration=[{duration}]')\n\n\n# \u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02885","problem":"The window of Takahashi's room has a width of A. There are two curtains hung over the window, each of which has a horizontal length of B. (Vertically, the curtains are long enough to cover the whole window.)\nWe will close the window so as to minimize the total horizontal length of the uncovered part of the window.\nFind the total horizontal length of the uncovered parts of the window then.","submission_id":"s240995730","submission":"import sys\nsys.setrecursionlimit(10 ** 5 + 10)\ndef input(): return sys.stdin.readline().strip()\n\ndef resolve():\n    a,b= map(int,input().split())\n    print(0 if a-b*2<0 else a-b*2)\n    \n    \nresolve()","label":1}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s889079473","submission":"a,b,c = map(int,input().split())\n\nprint(\"YNeos\"[a\/c > b::2])\n\n\n\n","label":1}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s838709613","submission":"x, y = map(int, input().split())\ndif = abs(abs(x) - abs(y))\nif x < 0 and y < 0:\n    if x < y:\n        print(dif)\n        exit()\n    else:\n        print(dif+2)\n        exit()\nif x >= 0 and y >= 0:\n    if x > y:\n        if y == 0:\n            print(dif+1)\n            exit()\n        print(dif+2)\n        exit()\n    else:\n        print(dif)\n        exit()\nif x >= 0:\n    print(dif+1)\nelse:\n    if y == 0:\n        print(dif)\n    else:\n        print(dif+1)\n","label":1}
{"problem_id":"p03141","problem":"There are N dishes of cuisine placed in front of Takahashi and Aoki.\nFor convenience, we call these dishes Dish 1, Dish 2, ..., Dish N.\nWhen Takahashi eats Dish i, he earns A_i points of happiness; when Aoki eats Dish i, she earns B_i points of happiness.\nStarting from Takahashi, they alternately choose one dish and eat it, until there is no more dish to eat.\nHere, both of them choose dishes so that the following value is maximized: \"the sum of the happiness he\/she will earn in the end\" minus \"the sum of the happiness the other person will earn in the end\".\nFind the value: \"the sum of the happiness Takahashi earns in the end\" minus \"the sum of the happiness Aoki earns in the end\".","submission_id":"s995552260","submission":"N = int(input())\nD = []\nans = 0\nfor i in range(N):\n    a, b = map(int,input().split(' '))\n    D.append((a+b,a,b))\nD = sorted(D, reverse=True)\nfor n,i in enumerate(D):\n    if n%2 == 0:\n        ans += i[1]\n    else:\n        ans -= i[2]\nprint(ans)","label":1}
{"problem_id":"p03759","problem":"Three poles stand evenly spaced along a line. Their heights are a, b and c meters, from left to right.\nWe will call the arrangement of the poles beautiful if the tops of the poles lie on the same line, that is, b-a = c-b.\nDetermine whether the arrangement of the poles is beautiful.","submission_id":"s316461108","submission":"a = list(map(int,input().split()))\nif a[1] - a[0] == a[2] - a[1]:\n  print(\"YES\")\nelse:\n  print(\"NO\")","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s418188601","submission":"import sys\n\n# import re\nimport math\nimport collections\n# import decimal\nimport bisect\nimport itertools\nimport fractions\n# import functools\nimport copy\nimport heapq\nimport decimal\n# import statistics\nimport queue\nimport numpy as np\n\nsys.setrecursionlimit(10000001)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: map(int, sys.stdin.readline().split())\nna = lambda: list(map(int, sys.stdin.readline().split()))\n\n\n# ===CODE===\n\n\ndef main():\n    sx, sy, tx, ty = ns()\n\n    ans = []\n\n    ans.extend([\"U\"] * (ty - sy))\n    ans.extend(([\"R\"] * (tx - sx)))\n    ans.extend([\"D\"] * ((ty - sy)))\n    ans.extend(([\"L\"] * (tx - sx)))\n\n    ans.extend([\"L\"])\n\n    ans.extend([\"U\"] * (ty - sy + 1))\n    ans.extend(([\"R\"] * (tx - sx + 1)))\n\n    ans.extend([\"DR\"])\n\n    ans.extend([\"D\"] * ((ty - sy + 1)))\n    ans.extend(([\"L\"] * (tx - sx + 1)))\n\n    ans.extend([\"U\"])\n\n    print(*ans, sep=\"\")\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02269","problem":"Your task is to write a program of a simple dictionary which implements the following instructions:","submission_id":"s883071951","submission":"#define hash\nclass my_dict():\n    def __init__(self, size=1000):\n        self.my_list = [[] for i in range(size)]\n        self.dict_size = size\n    #quaternary A=0 C=1 G=2 T=3\n    def acgt_hash(self, input_str):\n        output = 0\n        for i in input_str:\n            if i == 'A':\n                output+=1\n            elif i == 'C':\n                output+=2\n            elif i == 'G':\n                output+=3\n            elif i == 'T':\n                output+=4\n            output *=5\n        return output%self.dict_size\n    def insert(self, key):\n        hash_val = self.acgt_hash(key)\n        if self.my_list[hash_val] == None:\n            self.my_list[hash_val]  = [key]\n        else:\n            for k in self.my_list[hash_val]:\n                if k == key:\n                    break\n            else: self.my_list[hash_val].append(key)\n    def find(self, key):\n        hash_val = self.acgt_hash(key)\n        if self.my_list[hash_val] == None:\n            print('no')\n        else:\n            for k in self.my_list[hash_val]:\n                if k == key:\n                    print('yes')\n                    break\n            else: print('no')\n\n#get N\nn = int(input())\n#create dic\ndic1 = my_dict(100000)\n#get inputs in N times\nfor i in range(n):\n    #get instructtion and key\n    inst, key = input().split(' ')\n    #do instructions\n    if inst == 'insert':\n        dic1.insert(key)\n    else:\n        dic1.find(key)\n\n\n\n","label":1}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s585013340","submission":"str = input()\n\nn = len(str)\np = 0\nans = 0\nfor i in range(n):\n    if str[i] == 'W':\n        ans += i - p\n        p += 1\n\nprint (ans)","label":1}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s227716732","submission":"X,Y=map(int,input().split())\n\nif X>=0:\n    if Y>=X:\n        print(Y-X)\n    elif -X<=Y<=0:\n        print(Y-(-X)+1)\n    elif 0<Y<X:\n        print(X-Y+2)\n    else:\n        print(-Y-X+1)\nelse:\n    if Y>=abs(X):\n        print(Y-(-X)+1)\n    elif X<=Y<=0:\n        print(Y-X)\n    elif 0<Y<abs(X):\n        print(abs(X)-Y+1)\n    else:\n        print(abs(Y)-abs(X)+2)","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s388354898","submission":"import re\ninput()\nAn=input().split()\nprint(min(len((re.findall(\"0+$\",bin(int(a)))+[\"\"])[0]) for a in An))","label":1}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s920598446","submission":"X,K,D=list(map(int,input().split()))\nif X<0:\n    X=-X\nif X-K*D>=0:\n    print(X-K*D)\nelse:\n    N=X\/\/D\n    if (K-N)%2==0:\n        print(X-N*D)\n    else:\n        print((N+1)*D-X)","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s827636371","submission":"s = input()\n\na = s[len(s) - 1]\n\n#print(a)\n\nif a == \"s\":\n    s = s + \"es\"\nelse:\n    s = s + \"s\"\n\nprint(s)","label":1}
{"problem_id":"p02853","problem":"We held two competitions: Coding Contest and Robot Maneuver.\nIn each competition, the contestants taking the 3-rd, 2-nd, and 1-st places receive 100000, 200000, and 300000 yen (the currency of Japan), respectively. Furthermore, a contestant taking the first place in both competitions receives an additional 400000 yen.\nDISCO-Kun took the X-th place in Coding Contest and the Y-th place in Robot Maneuver.\nFind the total amount of money he earned.","submission_id":"s309428626","submission":"money = [0, 300000, 200000, 100000]\na,b = map(int, input().split())\n\nst = money[a if a < len(money) else 0] \\\n + money[b if b < len(money) else 0]\nif a == 1 and b == 1:\n  st += 400000\nprint(st)","label":1}
{"problem_id":"p03005","problem":"Takahashi is distributing N balls to K persons.\nIf each person has to receive at least one ball, what is the maximum possible difference in the number of balls received between the person with the most balls and the person with the fewest balls?","submission_id":"s176587628","submission":"x=list(map(int, input().split()))\nif x[1]==1:\n\tprint(0)\nelse:\n\tprint(x[0]-x[1])","label":1}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s778715199","submission":"N = int(input())\na = list(map(int,input().split()))\nc2 = 0\nc4 = 0\nfor i in range(N):\n    if a[i]%4 == 0:\n        c4 += 1\n    elif a[i]%2 == 0:\n        c2 += 1\nf = c4 * 2 + 1\nif f >= N or f + c2 - 1 >= N:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s963728367","submission":"i = int(raw_input())\nprint((i ** 3))","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s893931945","submission":"a = input()\nif a[len(a) - 1] == 's':\n  print(a + 'es')\nelse:\n  print(a + 's')","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s254427484","submission":"N = int(input())\nA = list(map(int,input().split()))\nB = list(map(int,input().split()))\nC = list(map(int,input().split()))\n\ncount = 0\nfor j in A:\n    count += B[j-1]\n\n#print(count)\n\nfor z in range(N-1):\n    if A[z+1]- A[z] == 1:\n        zz = A[z]\n        count += C[zz-1]\n\nprint(count)\n    \n    \n","label":1}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s306850222","submission":"N = int(input())\n\nsample = list(map(int, input().split()))\n#sample = [100, 1, 2, 3, 14, 15, 58, 58, 58, 29]\n\nmax_idx = sample.index(max(sample))\nsample.sort()\nans = 0\nfor i in range(len(sample)\/\/2):\n    ans += int(sample[i*2])\nprint(ans)","label":1}
{"problem_id":"p02793","problem":"Given are N positive integers A_1,...,A_N.\nConsider positive integers B_1, ..., B_N that satisfy the following condition.\nCondition: For any i, j such that 1 \\leq i < j \\leq N, A_i B_i = A_j B_j holds.\nFind the minimum possible value of B_1 + ... + B_N for such B_1,...,B_N.\nSince the answer can be enormous, print the sum modulo (10^9 +7).","submission_id":"s895329360","submission":"def cin():  return list(map(int,input().split()))\n\ndef gcd_(a, b):\n    if a < b:  a, b = b, a\n    if b == 0:  return a\n    return gcd_(b, a % b)\n\ndef gcd(l):\n    ans = 0\n    for i in l:  ans = gcd_(ans, i)\n    return ans\n\ndef lcm_(x,y):\n    return (x * y) \/\/ gcd_(x, y)\n\ndef lcm(l):\n    ans = l[0]\n    for i in l:  ans = lcm_(ans, i)\n    return ans\n\nN = cin()[0]\nv = cin()\nlc = lcm(v)\nans = 0\nINF = 10 ** 9 + 7\nlc %= INF\nfor i in range(N):\n    ans += lc * pow(v[i], INF - 2, INF)\n    ans %= INF\nprint(int(ans))","label":1}
{"problem_id":"p03170","problem":"There is a set A = \\{ a_1, a_2, \\ldots, a_N \\} consisting of N positive integers.\nTaro and Jiro will play the following game against each other.\nInitially, we have a pile consisting of K stones.\nThe two players perform the following operation alternately, starting from Taro:\n\nChoose an element x in A, and remove exactly x stones from the pile.\n\nA player loses when he becomes unable to play.\nAssuming that both players play optimally, determine the winner.","submission_id":"s021666468","submission":"N,K=map(int,input().split())\nA=sorted(map(int,input().split()))\nd=[0]*(K+1)\nfor i in range(K):\n    x=d[i]^1\n    if x:\n        for a in A:\n            if i+a<K+1:\n                d[i+a]=x\nprint(['Second','First'][d[-1]])","label":1}
{"problem_id":"p02607","problem":"We have N squares assigned the numbers 1,2,3,\\ldots,N. Each square has an integer written on it, and the integer written on Square i is a_i.\nHow many squares i satisfy both of the following conditions?\n\nThe assigned number, i, is odd.\nThe written integer is odd.","submission_id":"s475914274","submission":"N=int(input())\n\na=[int(x) for x in input().split()]\ncount=0\nfor i in range(len(a)):\n    if (i+1)%2==1 and a[i]%2==1:\n        count=count+1\n\nprint(count)\n\n","label":1}
{"problem_id":"p03998","problem":"Alice, Bob and Charlie are playing Card Game for Three, as below:\n\nAt first, each of the three players has a deck consisting of some number of cards. Each card has a letter a, b or c written on it. The orders of the cards in the decks cannot be rearranged.\nThe players take turns. Alice goes first.\nIf the current player's deck contains at least one card, discard the top card in the deck. Then, the player whose name begins with the letter on the discarded card, takes the next turn. (For example, if the card says a, Alice takes the next turn.)\nIf the current player's deck is empty, the game ends and the current player wins the game.\n\nYou are given the initial decks of the players.\nMore specifically, you are given three strings S_A, S_B and S_C. The i-th (1\u2266i\u2266|S_A|) letter in S_A is the letter on the i-th card in Alice's initial deck. S_B and S_C describes Bob's and Charlie's initial decks in the same way.\nDetermine the winner of the game.","submission_id":"s760840747","submission":"a=input()\nb=input()\nc=input()\ni=0\nj=0\nk=0\nt='a'\nwhile 1:\n    if t=='a':\n        if i==len(a):\n            print('A')\n            break\n        t=a[i]\n        i+=1\n    elif t=='b':\n        if j==len(b):\n            print('B')\n            break\n        t=b[j]\n        j+=1\n    elif t=='c':\n        if k==len(c):\n            print('C')\n            break\n        t=c[k]\n        k+=1\n","label":1}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s201083203","submission":"n = int(input())\nlst = list(map(int,input().split()))\nl_unique = sorted(list(set(lst)))\n\nflg = False\nif len(l_unique)==1:\n    x = l_unique[0]\n    if x==0:\n        flg = True\nelif len(l_unique) == 2:\n    x,y = l_unique[0], l_unique[1]\n    if x==0 and n%3==0:\n        num = n\/\/3\n        if lst.count(x)==num and lst.count(y)==2*num:\n            flg = True\nelif len(l_unique) == 3:\n    x,y,z = l_unique[0], l_unique[1], l_unique[2]\n    if n%3 == 0:\n        num = n\/\/3\n        if lst.count(x)==num and lst.count(y)==num and lst.count(z)==num:\n            if (x^y^z)==0:\n                flg = True\nprint('Yes' if flg else 'No')","label":1}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s752004214","submission":"s=input()\n\ns=s.replace('eraser','').replace('erase','').replace('dreamer','').replace('dream','')\n\nif s=='':\n    print('YES')\nelse:\n    print('NO')","label":1}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s191415727","submission":"n = int(input())\nB = list(map(int,input().split()))\nA=[0]*n\nA[0]=B[0]\nfor i in range(n-1):\n    if A[i]>B[i]:\n        A[i]=B[i]\n    A[i+1]=B[i]\n\nt=0\nfor a in A:\n    t+=a\nprint(t)","label":1}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s874251831","submission":"from math import gcd\nfrom itertools import accumulate\n\nn = int(input())\na = list(map(int, input().split()))\n\nl = list(accumulate(a, lambda x, y: gcd(x, y)))\nr = list(accumulate(a[::-1], lambda x, y: gcd(x, y)))[::-1]\nans = max(r[1], l[-2])\nfor i in range(1, n-1):\n    ans = max(ans, gcd(l[i-1], r[i+1]))\nprint(ans)","label":1}
{"problem_id":"p03435","problem":"We have a 3 \\times 3 grid. A number c_{i, j} is written in the square (i, j), where (i, j) denotes the square at the i-th row from the top and the j-th column from the left.\nAccording to Takahashi, there are six integers a_1, a_2, a_3, b_1, b_2, b_3 whose values are fixed, and the number written in the square (i, j) is equal to a_i + b_j.\nDetermine if he is correct.","submission_id":"s387592428","submission":"import numpy as np\nC= [[0] * 3 for i in range(3)]\nfor i in range(3):\n  C[i]=list(map(int, input().split()))\nC=np.array(C)\nanswer='Yes'\n \nS=C.sum()\ntrace=np.diag(C).sum()\nS_row0=C[0,:].sum()\nS_row1=C[1,:].sum()\nS_row2=C[2,:].sum()\n\nS_col0=C[:,0].sum()\nS_col1=C[:,1].sum()\nS_col2=C[:,2].sum()\n\nif S != 3*trace:\n  answer = 'No'\nelif S_row0-3*C[0,0] != trace-S_col0:\n  answer = 'No'\nelif S_row1-3*C[1,0] != trace-S_col0:\n  answer = 'No'\n\n\n\nprint(answer)","label":1}
{"problem_id":"p02836","problem":"Takahashi loves palindromes. Non-palindromic strings are unacceptable to him. Each time he hugs a string, he can change one of its characters to any character of his choice.\nGiven is a string S. Find the minimum number of hugs needed to make S palindromic.","submission_id":"s605812561","submission":"# coding: utf-8\n\nstr = input()\ntable = list(str)\ncount = 0\nif len(str) % 2 == 0:\n    for i in range(len(str)):\n        if table[i] == table[(len(str)-1)-i]:\n            continue\n        else:\n            count += 1\nelif len(str) % 2 == 1:\n    for i in range(len(str)):\n        if table[i] == table[(len(str)-1)-i]:\n            continue\n        else:\n            count +=1\nif count == 0:\n    print(0)\nelse:\n    print(int(count \/ 2))\n","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s351355224","submission":"n,*p=map(int,open(0).read().split())\nprint(sum(p)-max(p)\/\/2)","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s877805421","submission":"N=int(input())\nl = [input() for _ in range(N)]\n\ndef ans115(N:int,l:list):\n    l=sorted(map(int,l))\n    count=0\n    for i in range(0,N-1):\n        count+=l[i]\n    return(int(count+l[N-1]*0.5))\n\nprint(ans115(N,l))","label":1}
{"problem_id":"p03208","problem":"In some other world, today is Christmas Eve.\nThere are N trees planted in Mr. Takaha's garden. The height of the i-th tree (1 \\leq i \\leq N) is h_i meters.\nHe decides to choose K trees from these trees and decorate them with electric lights. To make the scenery more beautiful, the heights of the decorated trees should be as close to each other as possible.\nMore specifically, let the height of the tallest decorated tree be h_{max} meters, and the height of the shortest decorated tree be h_{min} meters. The smaller the value h_{max} - h_{min} is, the better. What is the minimum possible value of h_{max} - h_{min}?","submission_id":"s852845348","submission":"N, K = map(int, input().split())\nh = []\nfor _ in range(N):\n    h.append(int(input()))\n\nh.sort()\nans = 10**10\nfor i in range(N-K+1):\n    hmin = h[i]\n    hmax = h[i+K-1]\n    ans = min(ans, (hmax-hmin))\nprint(ans)","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s693780740","submission":"\ndef div_by_2(n):\n    res = 0\n    while n % 2 == 0:\n        n \/\/= 2\n        res += 1\n    return res\n\nN = int(input())\nA = list(map(int, input().split()))\nprint(min(map(div_by_2, A)))","label":1}
{"problem_id":"p02777","problem":"We have A balls with the string S written on each of them and B balls with the string T written on each of them.\nFrom these balls, Takahashi chooses one with the string U written on it and throws it away.\nFind the number of balls with the string S and balls with the string T that we have now.","submission_id":"s037698451","submission":"s,t=list(input().split())\na,b=list(map(int,input().split()))\nu=input()\nball={s:a,t:b}  \nball[u] =max(0,ball[u]-1)\n\nprint(ball[s],ball[t])","label":1}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s717684041","submission":"x, k, d = map(int,input().split())\nx =abs(x)\ns = x\/\/d\nif x-k*d>0:\n  print(x-k*d)\nelse:\n    if (k-s)%2==0:\n        print(x-s*d)\n    else:\n        print(-x+(s+1)*d)\n","label":1}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s432115416","submission":"N=int(input())\nS=list(input())\nK=int(input())\nw=S[K-1]\nans=\"\"\nfor i in range(N):\n    if S[i]==w:\n        ans+=w\n    else:\n        ans+=\"*\"\nprint(ans)","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s666368339","submission":"word = input()\nif word.endswith('s'):\n  print(word + 'es')\nelse:\n  print(word + 's')","label":1}
{"problem_id":"p03636","problem":"The word internationalization is sometimes abbreviated to i18n.\nThis comes from the fact that there are 18 letters between the first i and the last n.\nYou are given a string s of length at least 3 consisting of lowercase English letters.\nAbbreviate s in the same way.","submission_id":"s411926738","submission":"s = input()\ns_len = len(s)\nhead, tail = s[0], s[s_len - 1]\nprint(head + str(s_len - 2) + tail)\n","label":1}
{"problem_id":"p03148","problem":"There are N pieces of sushi. Each piece has two parameters: \"kind of topping\" t_i and \"deliciousness\" d_i.\nYou are choosing K among these N pieces to eat.\nYour \"satisfaction\" here will be calculated as follows:\n\nThe satisfaction is the sum of the \"base total deliciousness\" and the \"variety bonus\".\nThe base total deliciousness is the sum of the deliciousness of the pieces you eat.\nThe variety bonus is x*x, where x is the number of different kinds of toppings of the pieces you eat.\n\nYou want to have as much satisfaction as possible.\nFind this maximum satisfaction.","submission_id":"s905237992","submission":"#!usr\/bin\/env python3\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations, accumulate\nimport sys\nimport math\nimport bisect\ndef LI(): return [int(x) for x in sys.stdin.buffer.readline().split()]\ndef I(): return int(sys.stdin.buffer.readline())\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \"\\n\":\n        return res[:-1]\n    return res\ndef IR(n):\n    return [I() for i in range(n)]\ndef LIR(n):\n    return [LI() for i in range(n)]\ndef SR(n):\n    return [S() for i in range(n)]\ndef LSR(n):\n    return [LS() for i in range(n)]\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\ndef solve():\n    n,k = LI()\n    g = LIR(n)\n    l = list(set(([i for (i,j) in g])))\n    g.sort(key=lambda x:-x[1])\n    l.sort()\n    q = []\n    q2 = []\n    f = [0]*len(l)\n    ans = 0\n    res = k\n    for i in range(n):\n        t,d = g[i]\n        g[i][0] = t = bisect.bisect_left(l,t)\n        if res:\n            f[t] += 1\n            ans += d\n            res -= 1\n            if f[t] > 1:\n                heappush(q,(d,t))\n        else:\n            heappush(q2,(-d,t))\n    x = sum([i >= 1 for i in f])\n    ans += x**2\n    s = ans\n    while q2 and q:\n        d,t = heappop(q2)\n        d *= -1\n        if f[t]:\n            continue\n        else:\n            nd,nt = heappop(q)\n            s -= nd\n            s += 2*x+1\n            s += d\n            x += 1\n            f[t] = 1\n            f[nt] -= 1\n            if ans < s:\n                ans = s\n    print(ans)\n    return\n\n#Solve\nif __name__ == \"__main__\":\n    solve()\n","label":1}
{"problem_id":"p02911","problem":"Takahashi has decided to hold fastest-finger-fast quiz games. Kizahashi, who is in charge of making the scoreboard, is struggling to write the program that manages the players' scores in a game, which proceeds as follows.\nA game is played by N players, numbered 1 to N. At the beginning of a game, each player has K points.\nWhen a player correctly answers a question, each of the other N-1 players receives minus one (-1) point. There is no other factor that affects the players' scores.\nAt the end of a game, the players with 0 points or lower are eliminated, and the remaining players survive.\nIn the last game, the players gave a total of Q correct answers, the i-th of which was given by Player A_i.\nFor Kizahashi, write a program that determines whether each of the N players survived this game.","submission_id":"s396727471","submission":"N,K,Q = map(int,input().split())\nA = [0]*Q\nfor i in range(Q):\n    A[i] = int(input())\n    \n\npoints = [K-Q]*N\nfor i in range(Q):\n    points[A[i]-1] += 1\nfor i in range(N):\n    if points[i]<=0:\n        print('No')\n    else:\n        print('Yes')","label":1}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s415455566","submission":"N = int(input())\nimport collections\na = []\n\nfor i in range(N):\n    S = input()\n    a.append(S)\n\nl = collections.Counter(a)\n\nx = max(l.values())\n\nans = [k for k, v in l.items() if v == x]\nans = sorted(ans)\n\n\nfor i in ans:\n    print(i)\n\n\n\n\n","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s645479487","submission":"N = int(input())\nA = list(map(int,input().split()))\nB = list(map(int,input().split()))\nC = list(map(int,input().split()))\nans = 0\ncnt = 100\nfor i in range(N):\n  if cnt + 1 == A[i]:\n    ans += C[cnt-1]\n  cnt = A[i]\n  ans += B[A[i]-1]\n  \nprint(ans)","label":1}
{"problem_id":"p03254","problem":"There are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he\/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.","submission_id":"s143994830","submission":"import itertools\n\nN, x = map(int, input().split())\na = list(map(int, input().split()))\n\na.sort()\na = list(itertools.accumulate(a))\n\ncnt = 0\n\nfor i in range(len(a)):\n    if x > a[i]:\n        if i == len(a)-1:\n            break\n        cnt += 1\n    elif x == a[i]:\n        cnt += 1\n        break\n    else:\n        break\n\nprint(cnt)","label":1}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s420033940","submission":"n, x, t = map(int,input().split(' '))\nr = int(n \/ x) + (1 if n % x > 0 else 0)\nprint(r * t)","label":1}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s147336430","submission":"x1,y1,x2,y2 = [int(i) for i in input().split()]\n\nheight = y2 - y1\nwidth = x2 - x1\n\nx3 = x2 - height\nx4 = x3 - width\ny3 = y2 + width\ny4 = y3 - height\n\nprint(x3,y3,x4,y4)","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s903990120","submission":"#k = int(input())\n#s = input()\n#a, b = map(int, input().split())\n#s, t = map(str, input().split())\n#l = list(map(int, input().split()))\n#l = [list(map(int,input().split())) for i in range(n)]\n#a = [list(input()) for _ in range(n)]\n#a = [int(input()) for _ in range(n)]\n\nn = int(input())\na = list(map(int, input().split()))\n\ndef func(a):\n    rtn = 0\n    while a % 2 == 0:\n        a \/\/= 2\n        rtn+=1\n    return rtn\n\nfor i in range(n):\n    a[i] = func(a[i])\nprint(min(a))\n\n","label":1}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s011978681","submission":"from decimal import Decimal\nA,B,C=map(str,input().split())\nif Decimal(A)**Decimal(\"0.5\")+Decimal(B)**Decimal(\"0.5\")<Decimal(C)**Decimal(\"0.5\"):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","label":1}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s058017467","submission":"import copy\nn, x = map(int, input().split())\nA = list(map(int, input().split()))\nB = copy.deepcopy(A)\n\nif A[0] > x:\n  A[0] = x\nfor i in range(1, len(A)):\n  if A[i-1] + A[i] > x:\n    A[i] = x - A[i-1]\nans = 0\nfor a, b in zip(A, B):\n  ans += b - a\nprint(ans)\n","label":1}
{"problem_id":"p02547","problem":"Tak performed the following action N times: rolling two dice.\nThe result of the i-th roll is D_{i,1} and D_{i,2}.\nCheck if doublets occurred at least three times in a row.\nSpecifically, check if there exists at lease one i such that D_{i,1}=D_{i,2}, D_{i+1,1}=D_{i+1,2} and D_{i+2,1}=D_{i+2,2} hold.","submission_id":"s455130680","submission":"n=int(input())\ns=0\nok=0\nfor i in range(n):\n  lis=input().split()\n  if lis[0]==lis[1]:\n    s+=1\n    if s>=3:\n      ok=1\n  else:\n    s=0\nif ok==1:\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":1}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s934794847","submission":"# -*- coding: utf-8 -*-\nimport sys\nsys.setrecursionlimit(10**9)\nINF=10**18\nMOD=10**9+7\ninput=lambda: sys.stdin.readline().rstrip()\nYesNo=lambda b: bool([print('Yes')] if b else print('No'))\nYESNO=lambda b: bool([print('YES')] if b else print('NO'))\nint1=lambda x:int(x)-1\n\ndef main():\n    H,W=map(int,input().split())\n    for _ in range(H):\n        C=input()\n        print(C+'\\n'+C)\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s563731716","submission":"import sys\nimport os\n\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    if os.getenv(\"LOCAL\"):\n        sys.stdin = open(\"input.txt\", \"r\")\n\n    N, M = list(map(int, sys.stdin.buffer.readline().split()))\n    print('Yes' if N == M else 'No')\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02693","problem":"Takahashi the Jumbo will practice golf.\nHis objective is to get a carry distance that is a multiple of K, while he can only make a carry distance of between A and B (inclusive).\nIf he can achieve the objective, print OK; if he cannot, print NG.","submission_id":"s359179075","submission":"K,T=[input() for i in range(2)]\nA,B=map(int,T.split())\nK=int(K)\nif (A\/\/K)*K>=A or((A\/\/K)+1)*K<=B:\n  print(\"OK\")\nelse:\n  print(\"NG\")","label":1}
{"problem_id":"p03759","problem":"Three poles stand evenly spaced along a line. Their heights are a, b and c meters, from left to right.\nWe will call the arrangement of the poles beautiful if the tops of the poles lie on the same line, that is, b-a = c-b.\nDetermine whether the arrangement of the poles is beautiful.","submission_id":"s423475205","submission":"a=input().strip().split(\" \")\n\nb=[int(i) for i in a]\n\nif(b[1]-b[0]==b[2]-b[1]):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","label":1}
{"problem_id":"p02630","problem":"You have a sequence A composed of N positive integers: A_{1}, A_{2}, \\cdots, A_{N}.\nYou will now successively do the following Q operations:\n\nIn the i-th operation, you replace every element whose value is B_{i} with C_{i}.\n\nFor each i (1 \\leq i \\leq Q), find S_{i}: the sum of all elements in A just after the i-th operation.","submission_id":"s631649764","submission":"n = int(input())\n\nA = list(map(int, input().split()))\n\ns = sum(A)\n\nL = [0 for i in range(10**5 + 1)]\n\nfor i in range(n):\n  L[A[i]] += 1\n\nq = int(input())\n\nfor i in range(q):\n  b, c = map(int, input().split())\n  s += (c - b) * L[b]\n  print(s)\n  tmp = L[b]\n  L[b], L[c] = 0, tmp + L[c]","label":1}
{"problem_id":"p03575","problem":"You are given an undirected connected graph with N vertices and M edges that does not contain self-loops and double edges.\nThe i-th edge (1 \\leq i \\leq M) connects Vertex a_i and Vertex b_i.  \nAn edge whose removal disconnects the graph is called a bridge.\nFind the number of the edges that are bridges among the M edges.","submission_id":"s086189622","submission":"from collections import deque\n \ndef dfs(n, start, graph):\n  visited = [False] * n\n  stack = deque()\n  stack.append(start)\n  visited[start] = True\n  while stack:\n    q = stack.popleft()\n    nxts = graph[q]\n    for nxt in nxts:\n      if not visited[nxt]:\n        visited[nxt] = True\n        stack.append(nxt)\n  return visited\n \nn, m = map(int, input().split())\nedge = [list(map(int, input().split())) for _ in range(m)]\n \nans = 0\nfor i in range(m):\n  graph = [[] for _ in range(n)]\n  for itr, (a, b) in enumerate(edge):\n    if itr != i:\n      graph[a - 1].append(b - 1)\n      graph[b - 1].append(a - 1)\n \n  if not all(dfs(n, 0, graph)):\n    ans += 1\nprint(ans)","label":1}
{"problem_id":"p02847","problem":"Given is a string S representing the day of the week today.\nS is SUN, MON, TUE, WED, THU, FRI, or SAT, for Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday, respectively.\nAfter how many days is the next Sunday (tomorrow or later)?","submission_id":"s377947299","submission":"S=str(input())\nls = [\"SAT\",\"FRI\",\"THU\",\"WED\",\"TUE\",\"MON\",\"SUN\"]\nfor i in range(7):\n    if S == ls[i]:\n        print(i+1)\n","label":1}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s185322397","submission":"x1, y1, x2, y2 = map(int, input().split())\nxy = x2 - x1\nyx = y1 - y2\nprint(x2+yx, y2+xy, x1+yx, y1+xy)","label":1}
{"problem_id":"p03418","problem":"Takahashi had a pair of two positive integers not exceeding N, (a,b), which he has forgotten.\nHe remembers that the remainder of a divided by b was greater than or equal to K.\nFind the number of possible pairs that he may have had.","submission_id":"s263719639","submission":"N,K = map(int, input().split())\n\n# a = pb + r \n# N = 10, b = 4\n# a (0...10)\n# r 0,1,2,3,0,1,2,3,0,1,2\nans = 0\n\nfor b in range(1,N+1):\n  if b<=K:\n    continue\n  ans += ((N+1)\/\/b) * (b-K)\n  ans += max((N+1)%b-K, 0)\n  if K == 0:\n    ans -= 1\nprint(ans)","label":1}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s344470091","submission":"def prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n \/\/= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n \/\/= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n \nN,M=map(int,input().split())\nprimes0=prime_factorize(M)\nkeys=list(set(primes0))\nprimes={}\nfor i in range(len(keys)):\n  k=keys[i]\n  primes[k]=0\n  for j in range(len(primes0)):\n    if primes0[j]==k:\n      primes[k]+=1\n \ndef cmb(n, k, mod, fac, ifac): #calc nCk under mod\n    if n < k or n < 0 or k < 0:\n        return 0\n    else: \n        k = min(k, n-k)\n        return fac[n] * ifac[k] * ifac[n-k] % mod\n \ndef make_tables(mod, n): #Make factorial and inverse tables under mod \n    fac = [1, 1] # factorial table\n    ifac = [1, 1] #factorial of inverse table\n    inverse = [0, 1] #inverse\n \n    for i in range(2, n+1):\n        fac.append((fac[-1] * i) % mod)\n        inverse.append((-inverse[mod % i] * (mod\/\/i)) % mod)\n        ifac.append((ifac[-1] * inverse[-1]) % mod)\n    return fac, ifac\n \nmod=10**9+7\nfac,ifac=make_tables(mod,N*10)\nans=1\nfor i in range(len(keys)):\n  ans*=cmb(N+primes[keys[i]]-1, primes[keys[i]], mod, fac, ifac)\n  ans%=mod\nprint(ans)","label":1}
{"problem_id":"p03017","problem":"There are N squares arranged in a row, numbered 1, 2, ..., N from left to right.\nYou are given a string S of length N consisting of . and #. If the i-th character of S is #, Square i contains a rock; if the i-th character of S is ., Square i is empty.\nIn the beginning, Snuke stands on Square A, and Fnuke stands on Square B.\nYou can repeat the following operation any number of times:\n\nChoose Snuke or Fnuke, and make him jump one or two squares to the right. The destination must be one of the squares, and it must not contain a rock or the other person.\n\nYou want to repeat this operation so that Snuke will stand on Square C and Fnuke will stand on Square D.\nDetermine whether this is possible.","submission_id":"s311880902","submission":"import sys\nfrom collections import Counter\nfrom collections import deque\ndef input(): return sys.stdin.readline().strip()\ndef mp(): return map(int,input().split())\ndef lmp(): return list(map(int,input().split()))\n\nn,a,b,c,d=mp()\ns=input()\nif s[a-1]==\"#\" or s[b-1]==\"#\" or s[c-1]==\"#\" or s[d-1]==\"#\":\n    print(\"No\")\n    exit()\nfor i in range(min(a,b)-1,max(c,d)):\n    if s[i]==\"#\" and s[i+1]==\"#\":\n        print(\"No\")\n        exit()\nif d<c:\n    ch=False\n    for i in range(b-2,d-1):\n        if s[i]==\".\" and s[i+1]==\".\" and s[i+2]==\".\":\n            ch=True\n    if ch:\n        print(\"Yes\")\n        exit()\n    else:\n        print(\"No\")\n        exit()\nelse:\n    print(\"Yes\")\n","label":1}
{"problem_id":"p03317","problem":"There is a sequence of length N: A_1, A_2, ..., A_N. Initially, this sequence is a permutation of 1, 2, ..., N.\nOn this sequence, Snuke can perform the following operation:\n\nChoose K consecutive elements in the sequence. Then, replace the value of each chosen element with the minimum value among the chosen elements.\n\nSnuke would like to make all the elements in this sequence equal by repeating the operation above some number of times.\nFind the minimum number of operations required.\nIt can be proved that, Under the constraints of this problem, this objective is always achievable.","submission_id":"s881415540","submission":"n, k = map(int, input().split())\n\nA = list(map(int, input().split()))\n\n\nmin_a = A.index(min(A))\n\nleft = min_a\nright = n - min_a - 1\n\n\nmin_ = min(left, right)\nmax_ = max(left, right)\n\n\nt = 0\nmin_ = min_ - k\nt +=1\ntemp = 0\nif min_ > 0:\n    if min_ % (k - 1) != 0:\n        temp = min_ \/\/ (k - 1)\n    else:\n        temp = min_ \/\/ (k - 1) + 1\n    min_ -= temp * (k - 1)\nt += temp\n\nmax_ = max_ + min_ + 1\n\nif max_ % (k - 1) == 0:\n    t += max_ \/\/ (k - 1)\nelse:\n    t += max_ \/\/ (k - 1) + 1\n\nprint(t)","label":1}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s332272950","submission":"#\u5ea7\u6a19\u306fx\u306f\u8ca0\u306e\u5834\u5408\u3082\u3042\u308b\u306e\u7d76\u5bfe\u5024\u3092\u3068\u308b\u3053\u3068\nX, K, D = list(map(int, input().split()))\nX = abs(X)\n#K\u56de\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3092\u8003\u616e\u3059\u308b\u3053\u3068\ni = min(X\/\/D, K) #\u79fb\u52d5\u56de\u6570\u304c\u6700\u5c0f\u306e\u65b9\u3092\u3068\u308b\nX = X - i*D\nK = K - i\n\nif K > 0:\n    if K % 2 == 1:\n        X = X - D\nprint(abs(X))","label":1}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s905458451","submission":"# AGC008 A Simple Calculator\n\nx, y = map(int, input().split())\n_x = abs(x)\n_y = abs(y)\n\nif x > 0 and y > 0:\n    if x <= y:\n        print(y-x)\n    else:\n        print(x-y+2)\nelif x * y < 0:\n    print(abs(_y-_x)+1)\nelif x == 0:\n    if y >= 0:\n        print(y)\n    else:\n        print(_y+1)\nelif y == 0:\n    if x > 0:\n        print(x+1)\n    else:\n        print(_x)\nelse:\n    if _x < _y:\n        print(_y-_x+2)\n    else:\n        print(_x-_y)","label":1}
{"problem_id":"p03546","problem":"Joisino the magical girl has decided to turn every single digit that exists on this world into 1.\nRewriting a digit i with j (0\u2264i,j\u22649) costs c_{i,j} MP (Magic Points).\nShe is now standing before a wall. The wall is divided into HW squares in H rows and W columns, and at least one square contains a digit between 0 and 9 (inclusive).\nYou are given A_{i,j} that describes the square at the i-th row from the top and j-th column from the left, as follows:\n\nIf A_{i,j}\u2260-1, the square contains a digit A_{i,j}.\nIf A_{i,j}=-1, the square does not contain a digit.\n\nFind the minimum total amount of MP required to turn every digit on this wall into 1 in the end.","submission_id":"s525074344","submission":"import sys\nsys.setrecursionlimit(2147483647)\ninput=sys.stdin.readline\nimport math\nfrom heapq import heappush, heappop\n\ndef solve(h,w,tables,A):\n  for i in range(10):\n    for j in range(10):\n      for k in range(10):\n        tables[j][k] = min(tables[j][k], tables[j][i] + tables[i][k])\n  cost = 0\n  for i in range(h):\n    for j in range(w):\n      p = A[i][j]\n      if p == -1:\n        continue\n      cost += tables[p][1]\n  return cost\n  \n\ndef main():\n  h, w = map(int, input().split(' '))\n  tables = []\n  for i in range(10):\n    tables.append(list(map(int, input().split(' '))))\n  A = []\n  for _ in range(h):\n    A.append(list(map(int, input().split(' '))))\n  ans = solve(h, w, tables, A)\n  print(ans)\n  \n\nif __name__=='__main__':\n  main()","label":1}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s968684820","submission":"x=int(input())\nif(x==1):\n  print(\"Hello World\")\nelse:\n  x=int(input())\n  y=int(input())\n  print(x+y)\n","label":1}
{"problem_id":"p02574","problem":"We have N integers. The i-th number is A_i.\n\\{A_i\\} is said to be pairwise coprime when GCD(A_i,A_j)=1 holds for every pair (i, j) such that 1\\leq i < j \\leq N.\n\\{A_i\\} is said to be setwise coprime when \\{A_i\\} is not pairwise coprime but GCD(A_1,\\ldots,A_N)=1.\nDetermine if \\{A_i\\} is pairwise coprime, setwise coprime, or neither.\nHere, GCD(\\ldots) denotes greatest common divisor.","submission_id":"s641536385","submission":"import math \nN = int(input())\nA = list(map(int, input().split()))\nm = [0] * int(1e6+1)\nfor i in range(N):\n    m[A[i]] += 1\npw = True\nfor p in range(2, len(m)):\n    c = 0\n    for i in range(p, len(m), p):\n        c += m[i]\n    if c > 1:\n        pw = False\n        break\nif pw:\n    print('pairwise coprime')\n    exit()\nd = A[0]\nfor i in range(N):\n    d = math.gcd(d, A[i])\nif d == 1:\n    print('setwise coprime')\nelse:\n    print('not coprime')","label":1}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s032550462","submission":"def main():\n  N = int(input())\n  A = int(input())\n\n  if N % 500 <= A:\n    print(\"Yes\")\n  else:\n    print(\"No\")\n\n  \nif __name__ == \"__main__\":\n  main()","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s946166186","submission":"word = input()\nword += \"s\" if word[-1] != \"s\" else \"es\" \nprint(word)","label":1}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s794478812","submission":"import sys\nimport math\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return list(sys.stdin.readline().rstrip().split())\na,b,c = LI()\n\n\n\nif c-a-b > 0 and (4*a*b) < ((c-a-b)**2) :\n    print('Yes')\nelse:\n    print('No')","label":1}
{"problem_id":"p03719","problem":"You are given three integers A, B and C.\nDetermine whether C is not less than A and not greater than B.","submission_id":"s347568636","submission":"import sys\n\ndef I(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef main():\n    a, b, c = MI()\n    if a <= c and c <= b:\n        print('Yes')\n    else:\n        print('No')\n\nif __name__ == '__main__':\n    main()","label":1}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s259619993","submission":"N=int(input())\na=list(map(int,input().split()))\nt=c=0\ns=0\nfor i in a:\n    if i==t:\n        c+=1\n    else:\n        t=i\n        s+=c\/\/2\n        c=1\nprint(s+c\/\/2)","label":1}
{"problem_id":"p02381","problem":"You have final scores of an examination for n students. Calculate standard deviation of the scores s1, s2 ... sn.","submission_id":"s715668581","submission":"import math\nans=[]\nwhile True:\n  n=int(input())\n  if n==0:\n    break\n  S=list(map(int,input().split(' ')))\n  mean=0\n\n  for i in range(n):\n    mean+=S[i]\n  mean\/=n\n\n  a2=0\n  for i in range(n):\n   a2+=(S[i]-mean)**2\n\n  a2\/=n\n  a=math.sqrt(a2)\n  ans.append(a)\n\n\nfor i in range(len(ans)):\n  print(ans[i])\n\n","label":1}
{"problem_id":"p03495","problem":"Takahashi has N balls. Initially, an integer A_i is written on the i-th ball.\nHe would like to rewrite the integer on some balls so that there are at most K different integers written on the N balls.\nFind the minimum number of balls that Takahashi needs to rewrite the integers on them.","submission_id":"s749638092","submission":"N, K = map(int, input().split())\nL = list(map(int, input().split()))\n\nfrom collections import Counter\nC = Counter(L).most_common()\n\nans = 0\nfor i, item in enumerate(C):\n    if i < K:\n        continue;\n    ans += item[1]\n\nprint(ans, flush=True)\n","label":1}
{"problem_id":"p03069","problem":"There are N stones arranged in a row. Every stone is painted white or black.\nA string S represents the color of the stones. The i-th stone from the left is white if the i-th character of S is ., and the stone is black if the character is #.\nTakahashi wants to change the colors of some stones to black or white so that there will be no white stone immediately to the right of a black stone.\nFind the minimum number of stones that needs to be recolored.","submission_id":"s935498768","submission":"n = int(input())\ns = str(input())\nWhite_rui = [0]\nBlack_rui = [0]\n\nwhite = 0\nblack = 0\nfor i in range(n):\n    if s[i] == '.':\n        white += 1\n    else:\n        black += 1\n    White_rui.append(white)\n    Black_rui.append(black)\n\nans = 10**6\nfor i in range(n):\n    white_to_black = White_rui[-1] - White_rui[i+1]\n    black_to_white = Black_rui[i] - Black_rui[0]\n    ans = min(ans, white_to_black+black_to_white)\n\nprint(ans)","label":1}
{"problem_id":"p02601","problem":"M-kun has the following three cards:\n\nA red card with the integer A.\nA green card with the integer B.\nA blue card with the integer C.\n\nHe is a genius magician who can do the following operation at most K times:\n\nChoose one of the three cards and multiply the written integer by 2.\n\nHis magic is successful if both of the following conditions are satisfied after the operations:\n\nThe integer on the green card is strictly greater than the integer on the red card.\nThe integer on the blue card is strictly greater than the integer on the green card.\n\nDetermine whether the magic can be successful.","submission_id":"s361339342","submission":"A, B, C = map(int, input().split())\nK = int(input())\n\nwhile B <= A and K:\n\tB *= 2\n\tK -= 1\n\nwhile C <= B and K:\n\tC *= 2\n\tK -= 1\n\nprint('Yes' if A < B < C else 'No')\n","label":1}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s633098483","submission":"i = input().split()\nn, x, t = int(i[0]), int(i[1]), int(i[2])\na = n \/\/ x if divmod(n, x)[1] == 0 else n \/\/ x + 1\nprint(a * t)\n","label":1}
{"problem_id":"p03370","problem":"Akaki, a patissier, can make N kinds of doughnut using only a certain powder called \"Okashi no Moto\" (literally \"material of pastry\", simply called Moto below) as ingredient. These doughnuts are called Doughnut 1, Doughnut 2, ..., Doughnut N. In order to make one Doughnut i (1 \u2264 i \u2264 N), she needs to consume m_i grams of Moto. She cannot make a non-integer number of doughnuts, such as 0.5 doughnuts.\nNow, she has X grams of Moto. She decides to make as many doughnuts as possible for a party tonight. However, since the tastes of the guests differ, she will obey the following condition:\n\nFor each of the N kinds of doughnuts, make at least one doughnut of that kind.\n\nAt most how many doughnuts can be made here? She does not necessarily need to consume all of her Moto. Also, under the constraints of this problem, it is always possible to obey the condition.","submission_id":"s292422401","submission":"N, X = map(int, input().split())\nm = [int(input()) for _ in range(N)]\nresult = len(m)\nX -= sum(m)\nwhile X >= min(m):\n  result += 1\n  X -= min(m)\nprint(result)","label":1}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s530659169","submission":"I = int(input())\n\npt = px = py = 0\nfor i in range(I):\n    t, x, y = map(int, input().split())\n\n    costtime = abs(t - pt)\n    distance = abs(x - px) + abs(y - py)\n\n    if costtime%2 != distance%2:\n        print(\"No\")\n        exit()\n\n    if costtime < distance:\n        print(\"No\")\n        exit()\n\n    pt,px,py = t,x,y\n\nprint(\"Yes\")\n","label":1}
{"problem_id":"p03283","problem":"In Takahashi Kingdom, there is a east-west railroad and N cities along it, numbered 1, 2, 3, ..., N from west to east.\nA company called AtCoder Express possesses M trains, and the train i runs from City L_i to City R_i (it is possible that L_i = R_i).\nTakahashi the king is interested in the following Q matters:\n\nThe number of the trains that runs strictly within the section from City p_i to City q_i, that is, the number of trains j such that p_i \\leq L_j and R_j \\leq q_i.\n\nAlthough he is genius, this is too much data to process by himself. Find the answer for each of these Q queries to help him.","submission_id":"s195323597","submission":"def main():\n    import sys\n    input = sys.stdin.readline\n\n    N, M, Q = map(int, input().split())\n\n    tb = [[0] * (N + 1) for _ in range(N + 1)]\n    # tb[L][R]:=\u533a\u9593LR\u5185\u3092\u8d70\u308b\u5217\u8eca\u7dcf\u6570\n    for _ in range(M):\n        L, R = map(int, input().split())\n        tb[L][R] += 1\n\n    for L in range(1, N + 1):\n        for R in range(1, N + 1):\n            tb[L][R] += tb[L - 1][R]\n            tb[L][R] += tb[L][R - 1]\n            tb[L][R] -= tb[L - 1][R - 1]\n\n    ans = []\n    for _ in range(Q):\n        p, q = map(int, input().split())\n        ans.append(tb[q][q] - tb[p - 1][q] - tb[q][p - 1] + tb[p - 1][p - 1])\n\n    print(*ans, sep='\\n')\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s397413187","submission":"S=input()\nprint(\"YNeos\"[\"L\" in S[0::2] or \"R\" in S[1::2]::2])","label":1}
{"problem_id":"p03846","problem":"There are N people, conveniently numbered 1 through N.\nThey were standing in a row yesterday, but now they are unsure of the order in which they were standing.\nHowever, each person remembered the following fact: the absolute difference of the number of the people who were standing to the left of that person, and the number of the people who were standing to the right of that person.\nAccording to their reports, the difference above for person i is A_i.\nBased on these reports, find the number of the possible orders in which they were standing.\nSince it can be extremely large, print the answer modulo 10^9+7.\nNote that the reports may be incorrect and thus there may be no consistent order.\nIn such a case, print 0.","submission_id":"s100854924","submission":"import collections\nMOD = 10**9+7\n\nn = int(input())\na = [int(_) for _ in input().split()]\n\nA = sorted(collections.Counter(a).most_common())\n\nflg = True\nans = 1\n\nif n % 2 == 0:\n    # EVEN\n    if len(A) == n\/\/2:\n        for i in range(n\/\/2):\n            if A[i][0] == 1+i*2 and A[i][1] == 2:\n                ans = ans * 2 % MOD\n            else:\n                flg = False\n                break\n    else:\n        flg = False\nelse:\n    # ODD\n    if len(A) == n\/\/2+1:\n        for i in range(n\/\/2+1):\n            if i == 0:\n                if A[i][0] == 0 and A[i][1] == 1:\n                    pass\n                else:\n                    flg = False\n                    break\n            else:\n                if A[i][0] == i*2 and A[i][1] == 2:\n                    ans = ans * 2 % MOD\n                else:\n                    flg = False\n                    break\n    else:\n        flg = False\n\nif flg:\n    print(ans)\nelse:\n    print(0)","label":1}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s490473133","submission":"data=input().split()\nA=int(data[0])\nB=int(data[1])\nif A>=13:\n  print(B)\nelif 6<=A<=12:\n  print(int(B\/2))\nelse:\n  print(0)","label":1}
{"problem_id":"p03230","problem":"You are given an integer N. Determine if there exists a tuple of subsets of \\{1,2,...N\\}, (S_1,S_2,...,S_k), that satisfies the following conditions:\n\nEach of the integers 1,2,...,N is contained in exactly two of the sets S_1,S_2,...,S_k.\nAny two of the sets S_1,S_2,...,S_k have exactly one element in common.\n\nIf such a tuple exists, construct one such tuple.","submission_id":"s619106287","submission":"import sys\ndef input(): return sys.stdin.readline().strip()\ndef mapint(): return map(int, input().split())\nsys.setrecursionlimit(10**9)\n\nN = int(input())\nfrom math import sqrt\n\ndeg = int(sqrt(N*2))\n\nif N*2!=deg*(deg+1):\n    print('No')\nelse:\n    print('Yes')\n    print(deg+1)\n    ans = [[] for _ in range(deg+1)]\n    now_len = deg\n    cnt = 1\n    for d in range(deg+1):\n        ans[d].extend(list(range(cnt, cnt+now_len)))\n        for i, c in enumerate(range(cnt, cnt+now_len), 1):\n            ans[d+i].append(c)\n        cnt += now_len\n        now_len -= 1\n    for i in range(deg+1):\n        print(deg, *ans[i])","label":1}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s514902464","submission":"N, M = map(int, input().split())\nS = list(map(int, input().split()))\nT = list(map(int, input().split()))\nmod = 10**9+7\n\ndp = [[0 for i in range(M)] for j in range(N)]\nsum_dp = [[0 for i in range(M)] for j in range(N)]\n\n\nif S[0] == T[0]:\n    dp[0][0] = 1\n    sum_dp[0][0] = 1\n\nfor i in range(1, N):\n    if S[i] == T[0]:\n        dp[i][0] = 1\n    sum_dp[i][0] = (sum_dp[i-1][0] + dp[i][0])%mod\n\nfor j in range(1, M):\n    if S[0] == T[j]:\n        dp[0][j] = 1\n    sum_dp[0][j] = (sum_dp[0][j-1] + dp[0][j])%mod\n\nfor i in range(1, N):\n    for j in range(1, M):\n        if S[i] == T[j]:\n            dp[i][j] = (sum_dp[i-1][j-1] + 1)%mod\n        sum_dp[i][j] = (sum_dp[i-1][j] + sum_dp[i][j-1] - sum_dp[i-1][j-1] + dp[i][j])%mod\n\nprint((sum_dp[N-1][M-1]+1)%mod)","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s605335680","submission":"N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\ntotal = 0\nfor i in range(N):\n  total += B[A[i]-1]\n  if i != 0 and A[i]-A[i-1] == 1:\n    total += C[A[i-1]-1]\nprint(total)","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s037917509","submission":"value = int(input())\nprint(value ** 3)","label":1}
{"problem_id":"p02863","problem":"Takahashi is at an all-you-can-eat restaurant.\nThe restaurant offers N kinds of dishes. It takes A_i minutes to eat the i-th dish, whose deliciousness is B_i.\nThe restaurant has the following rules:\n\nYou can only order one dish at a time. The dish ordered will be immediately served and ready to eat.\nYou cannot order the same kind of dish more than once.\nUntil you finish eating the dish already served, you cannot order a new dish.\nAfter T-0.5 minutes from the first order, you can no longer place a new order, but you can continue eating the dish already served.\n\nLet Takahashi's happiness be the sum of the deliciousness of the dishes he eats in this restaurant.\nWhat is the maximum possible happiness achieved by making optimal choices?","submission_id":"s448802687","submission":"def solve():\n    from sys import stdin\n    f_i = stdin\n    \n    N, T = map(int, f_i.readline().split())\n    AB = [tuple(map(int, f_i.readline().split())) for i in range(N)]\n    AB.sort()\n    \n    dp = [[0] * T for i in range(N + 1)]\n    \n    for i, AB_i in enumerate(AB, start=1):\n        A_i, B_i = AB_i\n        dp_i = dp[i]\n        dp_pre = dp[i-1]\n        dp_i[:A_i] = dp_pre[:A_i]\n        for j, t in enumerate(zip(dp_pre[A_i:], dp_pre), start=A_i):\n            x, y = t\n            if x < y + B_i:\n                dp_i[j] = y + B_i\n            else:\n                dp_i[j] = x\n    \n    ans = max(dp[k][-1] + AB[k][1] for k in range(N))\n    print(ans)\n\nsolve()","label":1}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s839136371","submission":"n = input()\nif n == \"1\":\n    print(\"Hello World\")\nelse:\n    x = int(input())\n    y = int(input())\n    print(x+y)","label":1}
{"problem_id":"p02418","problem":"Write a program which finds a pattern $p$ in a ring shaped text $s$.","submission_id":"s350494437","submission":"s = input()\np = input()\n\ns2 = s + s\nif s2.find(p) != -1:\n  print('Yes')\nelse:\n  print('No')\n","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s147976019","submission":"s=input()\na=len(s)\nif s[a-1]=='s':\n    print(s+str(\"es\"))\nelse:\n    print(s+str('s'))","label":1}
{"problem_id":"p03473","problem":"How many hours do we have until New Year at M o'clock (24-hour notation) on 30th, December?","submission_id":"s440982009","submission":"import sys\n\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\n\ndef main():\n    m=int(input())\n    print(48-m)\n\nmain()","label":1}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s866587656","submission":"H, W = map(int, input().split())\nC = [input() for _ in range(H)]\nfor i in range(1, 2 * H + 1):\n    for j in range(1, W + 1):\n        print(C[((i + 1) \/\/ 2) - 1][j - 1], end='')\n    print()\n","label":1}
{"problem_id":"p02989","problem":"Takahashi made N problems for competitive programming.\nThe problems are numbered 1 to N, and the difficulty of Problem i is represented as an integer d_i (the higher, the harder).\nHe is dividing the problems into two categories by choosing an integer K, as follows:\n\nA problem with difficulty K or higher will be for ARCs.\nA problem with difficulty lower than K will be for ABCs.\n\nHow many choices of the integer K make the number of problems for ARCs and the number of problems for ABCs the same?","submission_id":"s167701228","submission":"n = int(input())\nd = list(map(int,input().split()))\nd = sorted(d)\na = d[n\/\/2] - d[n\/\/2-1]\nprint(a)\n","label":1}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s223887454","submission":"inp = input().split()\n\nage = int(inp[0])\ncost = int(inp[1])\n\nif age >= 13: print(cost)\nelif age >= 6: print(int(cost\/2))\nelse: print(0)\n","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s297595135","submission":"sx, sy, tx, ty = map(int, input().split())\n\nans = ''\n\n# 1\u56de\u76ee\u306e\u73fe\u5728\u70b9\u304b\u3089\u76ee\u7684\u70b9\u3078\u306e\u79fb\u52d5\ncnt_ud = abs(ty-sy)\ncnt_rl = abs(sx-tx)\nans += 'U'*cnt_ud+'R'*cnt_rl\n\n# 1\u56de\u76ee\u306e\u76ee\u7684\u70b9\u304b\u3089\u73fe\u5728\u70b9\u3078\u306e\u79fb\u52d5\nans += 'D'*cnt_ud+'L'*cnt_rl\n\n# 2\u56de\u76ee\u306e\u73fe\u5728\u70b9\u304b\u3089\u76ee\u7684\u70b9\u3078\u306e\u79fb\u52d5\nans += 'L'+'U'*(cnt_ud+1)+'R'*(cnt_rl+1)+'D'\n\n# 2\u56de\u76ee\u306e\u76ee\u7684\u70b9\u304b\u3089\u73fe\u5728\u70b9\u3078\u306e\u79fb\u52d5\nans += 'R'+'D'*(cnt_ud+1)+'L'*(cnt_rl+1)+'U'\n\nprint(ans)\n","label":0}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s560933832","submission":"def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n % 2 == 0:\n        dp = [[[-10**18]*2, [-10**18]*2] for _ in [0]*(n+1)]\n        dp[0][0][0] = 0\n        for i in range(n):\n            # \u4f7f\u3046\u5834\u5408\n            dp[i+1][1][0] = max(dp[i+1][1][0], dp[i][0][0]+a[i])\n            dp[i+1][1][1] = max(dp[i+1][1][1], dp[i][0][1]+a[i])\n            # \u4f7f\u308f\u306a\u3044\u5834\u5408\n            dp[i+1][0][1] = max(dp[i+1][0][1], dp[i][0][0])\n            # \u66f4\u65b0\n            dp[i+1][0][0] = max(dp[i+1][0][0], dp[i][1][0])\n            dp[i+1][0][1] = max(dp[i+1][0][1], dp[i][1][1])\n        print(max(dp[n][1][1], dp[n][0][0]))\n        return\n    dp = [[[-10**18]*3, [-10**18]*3] for _ in [0]*(n+1)]\n    dp[0][0][0] = 0\n    for i in range(n):\n        # \u4f7f\u3046\u5834\u5408\n        dp[i+1][1][0] = max(dp[i+1][1][0], dp[i][0][0]+a[i])\n        dp[i+1][1][1] = max(dp[i+1][1][1], dp[i][0][1]+a[i])\n        dp[i+1][1][2] = max(dp[i+1][1][2], dp[i][0][2]+a[i])\n        # \u4f7f\u308f\u306a\u3044\u5834\u5408\n        dp[i+1][0][1] = max(dp[i+1][0][1], dp[i][0][0])\n        dp[i+1][0][2] = max(dp[i+1][0][2], dp[i][0][1])\n        # \u66f4\u65b0\n        dp[i+1][0][0] = max(dp[i+1][0][0], dp[i][1][0])\n        dp[i+1][0][1] = max(dp[i+1][0][1], dp[i][1][1])\n        dp[i+1][0][2] = max(dp[i+1][0][2], dp[i][1][2])\n    print(max(dp[n][1][2], dp[n][0][1]))\n\n\nmain()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s845386375","submission":"ans = 10**9\nN = int(input())\nA = list(map(int,input().split()))\nfor i in A:\n    p = 0\n    while i % 2 == 0:\n        i \/\/= 2\n        p += 1\n    if p < ans:\n        ans = p\nprint(ans)","label":0}
{"problem_id":"p02614","problem":"We have a grid of H rows and W columns of squares. The color of the square at the i-th row from the top and the j-th column from the left (1 \\leq i \\leq H, 1 \\leq j \\leq W) is given to you as a character c_{i,j}: the square is white if c_{i,j} is ., and black if c_{i,j} is #.\nConsider doing the following operation:\n\nChoose some number of rows (possibly zero), and some number of columns (possibly zero). Then, paint red all squares in the chosen rows and all squares in the chosen columns.\n\nYou are given a positive integer K. How many choices of rows and columns result in exactly K black squares remaining after the operation? Here, we consider two choices different when there is a row or column chosen in only one of those choices.","submission_id":"s195552787","submission":"h,w,k=map(int, input().split())\nBlack = []\nfor i in range(h):\n    c = input()\n    for j in range(w):\n        if c[j] == \"#\":\n            Black.append((i,j))\n# print(Black, len(Black))\n\nans = 0\nfor i in range(2 ** h):\n    for j in range(2 ** w):\n        a = len(Black)\n        for b in Black:\n            if ((i >> b[0]) & 1) or ((j >> b[1]) & 1):\n            # if b[0] != i - 1 and b[1] != j - 1:\n                a -= 1\n        if a == k:\n            ans += 1\n            # print(bin(i),bin(j))\nprint(ans)","label":0}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s838929618","submission":"import sys\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nimport bisect\n\nN,Q = map(int,input().split())\n# STX = [list(map(int,input().split())) for _ in range (N)]\nSTX = []\nvals = set()\nfor _ in range(N):\n    s,t,x = map(int,input().split())\n    STX.append((max(0,s-x), max(0,t-x), x))\n    vals.add(max(0,s-x))\n    vals.add(max(0,t-x))\nD = [int(input()) for _ in range(Q)]\nfor d in D:\n    vals.add(d)\nvals = list(vals)\nvals.sort()\nL = len(vals)\nmapping = [-1]*(L+1)\nimos = [[] for _ in range(L+1)]\nSTX.sort(key=lambda x:x[2])\npriority = 0 \nfor s,t,x in STX:\n    s1 = bisect.bisect_left(vals, s)\n    t1 = bisect.bisect_left(vals, t)\n    imos[s1].append([1, priority, x])\n    imos[t1].append([0, priority, x])\n    priority += 1\n\nimport heapq\ncur = -1\ncur_priority = 10**9\nque = [(cur_priority, cur)]\nvalid_priority = [True]*(N+1)\nfor i in range(L+1):\n    for f,p,x in  imos[i]:\n        if f:\n            heapq.heappush(que, (p, x))\n        else:\n            valid_priority[p] = False\n    \n    while que[0][1]!=-1 and valid_priority[que[0][0]]==False:\n        heapq.heappop(que)\n    mapping[i] = que[0][1]\n\nfor d in D:\n    d1 = bisect.bisect_left(vals, d)\n    print(mapping[d1])\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s169311606","submission":"def divide_by_two(a):\n    cnt = 0\n    while True:\n        if a % 2 == 0:\n            a \/\/= 2\n            cnt += 1\n        else:\n            break\n\n    return cnt\n\n\ndef main():\n    n = int(input())\n    a_list = list(map(int, input().split()))\n    ans = 10 ** 9\n\n    for a in a_list:\n        ans = min(ans, divide_by_two(a))\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03326","problem":"Takahashi became a pastry chef and opened a shop La Confiserie d'ABC to celebrate AtCoder Beginner Contest 100.\nThe shop sells N kinds of cakes.\nEach kind of cake has three parameters \"beauty\", \"tastiness\" and \"popularity\". The i-th kind of cake has the beauty of x_i, the tastiness of y_i and the popularity of z_i.\nThese values may be zero or negative.\nRingo has decided to have M pieces of cakes here. He will choose the set of cakes as follows:\n\nDo not have two or more pieces of the same kind of cake.\nUnder the condition above, choose the set of cakes to maximize (the absolute value of the total beauty) + (the absolute value of the total tastiness)  + (the absolute value of the total popularity).\n\nFind the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.","submission_id":"s298841298","submission":"import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\nsys.setrecursionlimit(20000000)\nMOD = 10 ** 9 + 7\n\n\ndef main():\n    N, M = map(int, input().split())\n    cake = [list(map(int, input().split())) for _ in range(N)]\n    C = [[] for _ in range(8)]\n    for i in range(2 ** 3):\n        for c in range(N):\n            m = 0\n            for j in range(3):\n                if (i >> j) & 1:\n                    m += cake[c][j]\n                else:\n                    m -= cake[c][j]\n            C[i].append(m)\n    answer = 0\n    for i in range(8):\n        C[i].sort(reverse=True)\n        ans = sum(C[i][:M])\n        if ans > answer:\n            answer = ans\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s138390137","submission":"N=int(input())\nA=list(map(int,input().split()))\nM=int((max(A)**0.5)\/\/1)\nc=0\nfor i in range(M):\n    for j in range(N):\n        if A[j]%2==0:\n            A[j]=int(A[j]\/\/2)\n            c+=1\n        elif A[j]%2!=0:\n            break\nprint(c\/\/N)","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s872877224","submission":"def main():\n    N, M = map(int, input().split())\n    S = list(map(int, input().split()))\n    T = list(map(int, input().split()))\n\n    MOD = 10 ** 9 + 7\n\n    dp0 = [[0] * 2005 for _ in range(2005)]\n    dp1 = [[0] * 2005 for _ in range(2005)]\n\n    dp0[0][0] = 1\n    for i in range(N + 1):\n        for j in range(M + 1):\n            dp0[i + 1][j] += dp0[i][j]\n            dp1[i][j] += dp0[i][j]\n            dp1[i][j] %= MOD\n            dp1[i][j + 1] += dp1[i][j]\n            if i < N and j < M and S[i] == T[j]:\n                dp0[i + 1][j + 1] += dp1[i][j]\n            dp1[i][j] %= MOD\n            dp0[i + 1][j] %= MOD\n            dp1[i][j + 1] %= MOD\n            dp0[i + 1][j + 1] %= MOD\n\n    ans = dp1[N][M] % MOD\n    print (ans)\n    return \n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p03042","problem":"You have a digit sequence S of length 4. You are wondering which of the following formats S is in:\n\nYYMM format: the last two digits of the year and the two-digit representation of the month (example: 01 for January), concatenated in this order\nMMYY format: the two-digit representation of the month and the last two digits of the year, concatenated in this order\n\nIf S is valid in only YYMM format, print YYMM; if S is valid in only MMYY format, print MMYY; if S is valid in both formats, print AMBIGUOUS; if S is valid in neither format, print NA.","submission_id":"s178524312","submission":"# abc126_b.py\ndef mm(n):\n    if 0 < n and n < 13:\n        return True\n    else:\n        return False\n\nS = input()\n\nhead = int(S[:2])\ntail = int(S[2:])\nhead_mm = mm(head)\ntail_mm = mm(tail)\nif head_mm and tail_mm:\n    print(\"AMBIGUOUS\")\nelif head_mm:\n    print(\"MMYY\")\nelif tail_mm:\n    print(\"YYMM\")\nelse:\n    print(\"NA\")","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s697323463","submission":"n=int(input())\ns=list(map(int,input().split()))\ncount=-0\nwhile all(i%2==0 for i in s):\n  s=[i\/2 for i in s]\n  count+=1\nprint(count)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s162059088","submission":"n = int(input())\na = list(map(int,input().split()))\n\nflag = False\ndoit = 0\nwhile flag == False:\n    counter = 0\n    for x in a:\n        if x % 2 == 1:\n            flag = True\n        else:\n            a[counter] = x \/ 2\n            counter += 1\n    doit += 1\nprint(doit - 1)","label":0}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s181407774","submission":"#!\/usr\/bin\/env python3\n\ndef main():\n    S, T = map(str, open(0).read().split())\n    cnt = 0\n\n    for i in range(0, 3):\n        if S[i] == T[i]:\n            cnt += 1\n\n    print(cnt)\n\n\nmain()","label":0}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s749028493","submission":"#!\/usr\/bin\/env python3\nimport collections as cl\nimport sys\n\n\ndef II():\n    return int(sys.stdin.readline())\n\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef main():\n    N = II()\n    a = LI()\n\n    half = N \/\/ 2\n    ans = []\n    ans.extend(a)\n    for i in range(half - 1, -1, -1):\n        sum_later = 0\n        for j in range(2 * i + 1, N, i + 1):\n            sum_later += ans[j]\n\n        amari = sum_later % 2\n        if amari == a[i]:\n            ans[i] = 0\n        else:\n            ans[i] = 1\n    print(sum(ans))\n    for i in range(len(ans)):\n        if ans[i] == 1:\n            print(i + 1)\n\n\nmain()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s196112638","submission":"n = int(input())\na = list(map(int,input().split()))\ncount = 0\nfor _ in range(10**6):\n  for i in range(n):\n    if a[i] % 2 == 0:\n      a[i] = a[i]\/\/2\n      count += 1\n    else:\n      break\nprint(count\/\/n)","label":0}
{"problem_id":"p04046","problem":"We have a large square grid with H rows and W columns.\nIroha is now standing in the top-left cell.\nShe will repeat going right or down to the adjacent cell, until she reaches the bottom-right cell.\nHowever, she cannot enter the cells in the intersection of the bottom A rows and the leftmost B columns. (That is, there are A\u00d7B forbidden cells.) There is no restriction on entering the other cells.\nFind the number of ways she can travel to the bottom-right cell.\nSince this number can be extremely large, print the number modulo 10^9+7.","submission_id":"s606857002","submission":"class Combination():\n    def __init__(self,n,mod):\n        self.mod = mod\n        self.factorial = [0 for _ in range(n+1)]\n        self.inv = [0 for _ in range(n+1)]\n        self.factorial[0] = 1\n        self.inv[0] = 1\n        for i in range(n):\n            self.factorial[i+1] = self.factorial[i]*(i+1)%mod\n            self.inv[i+1] = self.inv[i]*pow(i+1,mod-2,mod)%mod\n    def comb(self,m,k):\n        return self.factorial[m]*self.inv[k]*self.inv[m-k]%self.mod\n        \nMOD = 10**9+7\nH,W,A,B = map(int,input().split())\n\ncb = Combination(H+W,MOD)\n\nans = 0\n\nfor i in range(H-A):\n    ans += cb.comb(B-1+i,i)*cb.comb(W-B-1+H-i-1,H-i-1)\n    ans %= MOD\n    \nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s340385132","submission":"def chk_a():\n    global a\n    for i in range(len(a)):\n        if a[i]%2==0:\n            a[i]=a[i]\/\/2\n        else:\n            return False\n    return True\n\nn = int(input())\na = list(map(int,input().split()))\n\nfor i in range(10**9):\n    if chk_a()==False:\n        break\nprint(i)","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s779972201","submission":"#!usr\/bin\/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS():return list(map(list, sys.stdin.readline().split()))\ndef S(): return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\n#A\ndef A():\n    x,n = LI()\n    if x < n:\n        print(0)\n    else:\n        print(10)\n    return\n\n#B\ndef B():\n    n,x = LI()\n    l = LI()\n    d = 0\n    ans = 1\n    for i in range(n):\n        d += l[i]\n        if d <= x:\n            ans += 1\n    print(ans)\n    return\n\n#C\ndef C():\n    w,h,x,y = LI()\n    ans = w*h\/2\n    k = 0\n    if x == w\/2 and y == h\/2:\n        k = 1\n    print(ans,k)\n    return\n\n#D\ndef D():\n    n,k = LI()\n    a = LI()\n    b = [a[i] for i in range(n)]\n    for i in range(n-1):\n        b[i+1] += b[i]\n    b.insert(0,0)\n    ans = 0\n    for l in range(n):\n        r = bisect.bisect_left(b,b[l]+k)\n        ans += n-r+1\n    print(ans)\n    return\n\n#E\ndef E():\n    n,m = LI()\n    s = LI()\n    t = LI()\n    dp = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for j in range(m+1):\n        dp[0][j] = 1\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j]+dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j]+dp[i][j-1]-dp[i-1][j-1]+mod\n            if dp[i][j] >= mod:\n                dp[i][j] %= mod\n    print(dp[n][m])\n    return\n\n#F\ndef F():\n    return\n\n#Solve\nif __name__ == \"__main__\":\n    E()\n","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s751489977","submission":"n, k = list(map(int, input().split(' ')))\naaa = list(map(int, input().split(' ')))\nans = 0\nv = []\nfor a in aaa:\n  v.append((a * (a + 1)) \/ (2.0 * a))\n\ncurrent = 0\nfor i in range(n):\n  current += v[i]\n  if i >= k:\n    current -= v[i-k]\n  ans = max(ans, current)\nprint(ans)","label":0}
{"problem_id":"p02697","problem":"You are going to hold a competition of one-to-one game called AtCoder Janken. (Janken is the Japanese name for Rock-paper-scissors.)\nN players will participate in this competition, and they are given distinct integers from 1 through N.\nThe arena has M playing fields for two players. You need to assign each playing field two distinct integers between 1 and N (inclusive).\nYou cannot assign the same integer to multiple playing fields.\nThe competition consists of N rounds, each of which proceeds as follows:\n\nFor each player, if there is a playing field that is assigned the player's integer, the player goes to that field and fight the other player who comes there.\nThen, each player adds 1 to its integer. If it becomes N+1, change it to 1.\n\nYou want to ensure that no player fights the same opponent more than once during the N rounds.\nPrint an assignment of integers to the playing fields satisfying this condition.\nIt can be proved that such an assignment always exists under the constraints given.","submission_id":"s765074958","submission":"# \u5165\u529b\nN, M = map(int, input().split())\n\n# \u756a\u53f7\u3092\u5165\u529b\nA = [int(i) for i in range(N)]\n\nB = [] # \u53f0No. \u30ea\u30b9\u30c8\n\nif N % 2 == 0:\n    # N \u304c\u5076\u6570\u306e\u5834\u5408\n\n    center = N \/\/ 2\n    c1 = center \/\/ 2\n    c2 = center + c1\n    # print(c1,c2)\n\n    for i in range(1, M+1):\n        # print(i)\n        j = i \/\/ 2\n        # print(\"j\", j)\n        if i % 2 == 1:\n            B.append((c1-j, c1+j+1))\n        else:\n            B.append((c2-(j-1), c2 - (j-1) + 2*j ))\n\nelse:\n    # N \u304c\u5947\u6570\u306e\u5834\u5408\n\n    center = N \/\/ 2 + 1\n    # print(center)\n    for i in range(1, M+1):\n        B.append((center - i, center + i))\n        \nfor i in B:\n    print(i[0], i[1])","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s235214096","submission":"n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    cnt = cnt | a[i]\n\nj = 0\nans = 0\nwhile 1:\n    if (cnt >> j & 1 == 0):\n        ans += 1\n        j += 1\n    else:\n        break\nprint(ans)","label":0}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s083616200","submission":"import math\n\n\nclass Solution:\n\n    def solve(self, N: int, M: int) -> int:\n\n        mod = 10**9+7\n        INT_MAX = 10**9\n\n        # calculate {m+n}C{n}\n\n        def egcd(a, b):\n            if a == 0:\n                return b, 0, 1\n            else:\n                g, y, x = egcd(b % a, a)\n                return g, x - (b \/\/ a) * y, y\n\n        def modinv(a, m):\n            g, x, y = egcd(a, m)\n            if g != 1:\n                raise Exception('modular inverse does not exist')\n            else:\n                return x % m\n\n        def combination(n: int, r: int, mod: int = 10**9+7) -> int:\n            r = min(r, n-r)\n            res = 1\n            for i in range(r):\n                res = res * (n-i) * modinv(i+1, mod) % mod\n            return res\n\n        # solve\n\n        m = M\n        answer = 1\n        factors = {}\n        for i in range(2, int(math.sqrt(M))+1):\n            factor = 0\n            while m % i == 0:\n                m \/\/= i\n                factor += 1\n\n            if factor > 0:\n                answer *= combination(N + factor - 1, N - 1, mod=mod)\n                answer %= mod\n\n        if m > 1:\n            answer *= N\n            answer %= mod\n\n        return answer\n\n\nif __name__ == '__main__':\n\n    # standard input\n    N, M = map(int, input().split())\n\n    # solve\n    solution = Solution()\n    print(solution.solve(N, M))\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s675834948","submission":"N = int(input())  # n\u306f\u5165\u529b\u56de\u6570\nnum_list =  list(map(int, input().split()))\n    \ncount = 0\nactual_count = 0\nw = 0\nnew_list = []\nwhile (w == 0):\n    count = 0\n    for i in range(N):\n        a = num_list[i]\n        \n        b = int(a) % 2 \n        if (b == 0):\n            count = count + 1\n    if (count == N):\n            new_list =[]\n            for n in range(N):\n                a = num_list[n]\n                b = int(a) \/ 2\n                new_list.append(b)\n            num_list = []\n            for l in range(N):\n                a = new_list[l]\n                num_list.append(a)\n                \n            \n            actual_count += 1\n    else:\n        w = 1\n        \n        \nprint(actual_count)","label":0}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s724369674","submission":"#!\/user\/bin\/env pypy3\nimport itertools\nimport sys\n\n\ndef fast_input():\n    return sys.stdin.readline()[:-1]\n\n\ndef print_format(b: bool) -> str:\n    return \"YES\" if b else \"NO\"\n\n\ndef solve(s: str) -> bool:\n    for p in itertools.permutations([\"dreamer\", \"eraser\", \"dream\", \"erase\"]):\n        work = s\n        for token in p:\n            work = work.replace(token, '')\n        if work == \"\":\n            return True\n    return False\n\n\ndef main():\n    result = solve(fast_input())\n    print(print_format(result))\n\n\nmain()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s414652975","submission":"n = int(input())\na = list(map(int, input().split()))\nl = []\nfor i in a:\n    cnt = 0\n    while i%2 == 0:\n        cnt +=1\n        i \/\/=2\n    l.append(cnt)\nprint(min(l))","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s561566760","submission":"n = int(input())\nl = list(map(int,input().split()))\nc= 0\n\nfor i in range(n):\n  for j in range(n):\n    for k in range(n):\n      if l[i] + l[j] > l[k] and l[j]+l[k]>l[i] and l[k]+l[i]>l[j]  and i<j and j<k and l[i] != l[j] != l[k] != l[i]:\n        c += 1\n\nprint(c)\n","label":0}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s226234185","submission":"import sys\ninput = sys.stdin.buffer.readline\n\n#sys.setrecursionlimit(10**9)\n#from functools import lru_cache\n\ndef RD(): return input().rstrip().decode()\ndef II(): return int(input())\ndef FI(): return int(input())\ndef MI(): return map(int,input().split())\ndef MF(): return map(float,input().split())\ndef LI(): return list(map(int,input().split()))\ndef LF(): return list(map(float,input().split()))\ndef TI(): return tuple(map(int,input().split()))\n# rstrip().decode()\n\n\ndef main():\n\tn,k=MI()\n\tV=LI()\n\n\tans=0\n\n\tfor a in range(min(n+1,k+1)):\n\t\tfor b in range(min(n-a+1,k-a+1)):\n\t\t\tS=[]\n\t\t\tS+=V[:a]\n\t\t\tS+=V[n-b:]\n\t\t\tS.sort()\n\t\t\ttmp=sum(S)\n\t\t\tcnt=max(0,k-a-b)\n\t\t\tfor i in range(min(a+b,cnt)):\n\n\t\t\t\tif S[i]<0:\n\t\t\t\t\ttmp-=S[i]\n\t\t\t\telse:\n\t\t\t\t\tbreak\n\t\t\tans=max(ans,tmp)\n\tprint(ans)\n\n\n\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\tmain()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s880065391","submission":"N = int(input())\nA = list(map(int,input().split()))\nans = 0\ndef GCD(a,b):\n    if a < b:\n        a,b = b,a\n    while a % b != 0:\n        a,b = b, a % b\n    return b\nif __name__ ==\"__main__\":\n    for i in range(N-1):\n       A[i+1] = GCD(A[i],A[i+1])\n    while A[N-1] % 2 == 0:\n        A[N-1] \/\/= 2\n        ans += 1\n    print(ans)","label":0}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s714883232","submission":"import math\ndef li():\n    return list(map(int, input().split()))\ndef mi():\n    return map(int, input().split())\ndef ii():\n    return int(input())\n\nx1, y1, x2, y2 = mi()\n\nl = 0\n# x = C\u306e\u5834\u5408\nif (x2 - x1) == 0:\n    l = abs(y2 - y1)\n    if y2 > y1:\n        x3 = x1 - l\n    else:\n        x3 = x1 + l\n    y3 = y2\n    x4 = x3\n    y4 = y1\n# y = C\u306e\u5834\u5408\nelif (y2 - y1) == 0:\n    l = abs(x2 - x1)\n    x3 = x2\n    if x2 > x1:\n        y3 = y2 + l\n    else:\n        y3 = y2 - l\n    x4 = x1\n    y4 = y3\n# y = ax + b\u306e\u5834\u5408\nelse:\n    x3 = x2 - (y2 - y1)\n    y3 = y2 + (x2 - x1)\n    x4 = x1 - (y2 - y1)\n    y4 = y1 + (x2 - x1)\n\nprint(x3, y3, x4, y4)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s652768111","submission":"n=int(input())\nA=list(map(int,input().split()))\ncnt=0\nfor i in range(500000000):\n  for j in range(n):\n    if A[j]%2==1:\n      print(cnt)\n      exit();\n    else:\n      A[j]\/\/=2\n  cnt+=1\nprint(cnt)","label":0}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s690836371","submission":"x=int(input())\nif x==1:\n    print('Hello World')\nelse:\n    l=[int(input()) for i in range(2)]\n    print(l[0]+l[1])","label":0}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s375048888","submission":"# C - \u767d\u663c\u5922\ndef main():\n    s = list(input())\n    \n    while len(s) != 0:\n        if ''.join(s[-5:]) == 'dream':\n            for _ in range(5):\n                s.pop()\n        elif ''.join(s[-7:]) == 'dreamer':\n            for _ in range(7):\n                s.pop()\n        elif ''.join(s[-5:]) == 'erase':\n            for _ in range(5):\n                s.pop()\n        elif ''.join(s[-6:]) == 'eraser':\n            for _ in range(6):\n                s.pop()\n        else:\n            print('NO')\n            exit()\n    else:\n        print('YES')\n\n\nif __name__ ==  \"__main__\":\n    main()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s562328722","submission":"N = int(input())\nA = list(map(int, input().split()))\nans = 0\nwhile True:\n    if all(A[i]%2==0 for i in range(N)):\n        A = [A[i]\/\/2 for i in range(N)]\n        ans += 1\n    else:\n        break\n\nprint(ans)","label":0}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s542875556","submission":"with open(0) as f:\n    N, *a = map(int, f.read().split())\ni, j, k = 0, 0, 0\nfor x in a:\n    if x%4 == 0:\n        i += 1\n    elif x%2 == 0:\n        j += 1\n    else:\n        k += 1\n    \nif j > 0:\n    k += 1\nprint('Yes' if k <= i+1 else 'No')\n","label":0}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s984828536","submission":"n = int(input())\ns = [int(input()) for _ in range(n)]\n\nsumNum = sum(s)\nif sumNum % 10 != 0:\n  print(sumNum)\n  exit()\n\nt = 0\nfor i in s:\n  if (sumNum - i)%10 != 0:\n    t = max(t, sumNum-i)\nprint(t)","label":0}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s095648513","submission":"s = input()\nif s[-1] != \"s\":\n  s = s + \"s\"\nelse:\n  s = s + \"es\"\nprint(s)\n","label":0}
{"problem_id":"p02608","problem":"Let f(n) be the number of triples of integers (x,y,z) that satisfy both of the following conditions:\n\n1 \\leq x,y,z\nx^2 + y^2 + z^2 + xy + yz + zx = n\n\nGiven an integer N, find each of f(1),f(2),f(3),\\ldots,f(N).","submission_id":"s674706313","submission":"def main():\n    N = int(input())\n    d = [0 for _ in range(N)]\n    r = 100\n    ii = 0\n    for i in range(1, r):\n        ii += 2* i - 1\n        for j in range(1, i + 1):\n            s = i + j\n            c = ii + s * j\n            l = 6\n            if i == j:\n                l = 3\n            if c + 1 + s > N:\n                break\n            for k in range(1, j + 1):\n                c += 2* k - 1 + s\n                if c <= N:\n                    if j == k:\n                        l = 3\n                        if i == k:\n                            l = 1\n                    d[c - 1] += l\n                else:\n                    break\n                    \n    print(\"\\n\".join(map(str,d)))\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s166161928","submission":"from fractions import gcd\nn, m = map(int, input().split())\ns = input()\nt = input()\n#\u4e00\u6587\u5b57\u76ee\u304c\u9055\u3046\u3068\u7121\u7406\ngcd_n_m = gcd(n,m)\nif gcd_n_m == 1 and s[0] == t[0]:\n    print(n*m)\nelse:\n    step_s = n \/\/ gcd_n_m\n    step_t = m \/\/ gcd_n_m\n    index_s = 0\n    index_t = 0\n    while index_s < n and index_t < m:\n        if s[index_s] != t[index_t]:\n            print(-1)\n            exit()\n        index_s += step_s\n        index_t += step_t\n    print(n*m\/\/gcd_n_m)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s107315104","submission":"n = int(input())\na = list(map(int,input().split()))\nanswer = 0\n\nwhile(True):\n\tfor i in range(n):\n\t\tif a[i] % 2 == 0:\n\t\t\ta[i] = a[i] \/ 2\n\t\telse:\n\t\t\tprint(answer)\n\t\t\texit()\n\tanswer += 1","label":0}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s515183035","submission":"import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\nn,m = map(int, input().split())\n\ndef factor(n, m=None):\n    # m\u3092\u4e0e\u3048\u308b\u3068\u3001\u9ad8\u3005\u305d\u306e\u7d20\u56e0\u6570\u307e\u3067\u898b\u3066\u3001\u6b8b\u308a\u306f\u5206\u89e3\u305b\u305a\u306b\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    arr = {}\n    temp = n\n    M = int(-(-n**0.5\/\/1))+1\n    if m is not None:\n        M = min(m+1, M)\n    for i in range(2, M):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr[i] = cnt\n\n    if temp!=1:\n        arr[temp] = 1\n\n    if not arr:\n        arr[n] = 1\n\n    return arr\n\nd = factor(m)\n\nM = 10**9+7 # \u51fa\u529b\u306e\u5236\u9650\nN = max(d.values())+10+n # \u5fc5\u8981\u306a\u30c6\u30fc\u30d6\u30eb\u30b5\u30a4\u30ba\n\ng1 = [None] * (N+1) # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [None] * (N+1) #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [None] * (N+1) #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\ng1[0] = g1[1] = g2[0] = g2[1] = 1\ninverse[0], inverse[1] = [0, 1] \n\nfor i in range( 2, N + 1 ):\n    g1[i] = ( g1[i-1] * i ) % M \n    inverse[i] = ( -inverse[M % i] * (M\/\/i) ) % M # ai+b==0 mod M <=> i==-b*a^(-1) <=> i^(-1)==-b^(-1)*a\u3088\u308a\n    g2[i] = (g2[i-1] * inverse[i]) % M \n\ndef cmb(n, r, M):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return (g1[n] * g2[r] * g2[n-r]) % M\n\nif m!=1:\n    ans = 1\n    for v in d.values():\n        ans *= cmb(v+n-1, n-1, M)\n        ans %= M\nelse:\n    ans = 1\nprint(ans%M)","label":0}
{"problem_id":"p02959","problem":"There are N+1 towns. The i-th town is being attacked by A_i monsters.\nWe have N heroes. The i-th hero can defeat monsters attacking the i-th or (i+1)-th town, for a total of at most B_i monsters.\nWhat is the maximum total number of monsters the heroes can cooperate to defeat?","submission_id":"s698292320","submission":"N = int(input())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\n\nans = 0\nfor i in range(N):\n    d = min(A[i], B[i])\n    ans += d\n    A[i] -= d\n    B[i] -= d\n    d = min(A[i+1], B[i])\n    ans += d\n    A[i+1] -= d\n    \nprint(ans)\n","label":0}
{"problem_id":"p02270","problem":"You are given $n$ packages of $w_i$ kg from a belt conveyor in order ($i = 0, 1, ... n-1$). You should load all packages onto $k$ trucks which have the common maximum load $P$. Each truck can load consecutive packages (more than or equals to zero) from the belt conveyor unless the total weights of the packages in the sequence does not exceed the maximum load $P$.","submission_id":"s535286866","submission":"import math\n\ntr = []\n\ndef check(n, k, P):\n    i = 0\n    for j in range(k):\n        s = 0\n        while s + tr[i] <= P:\n            s += tr[i]\n            i += 1\n            if i == n:\n                return n\n    return i\n\ndef solve(n, k):\n    left = 0\n    right = 100000 * 100000\n    while right - left > 1:\n        mid = math.floor((left+right) \/ 2)\n        v = check(n, k, mid)\n        if v >= n:\n            right = mid\n        else:\n            left = mid\n    return right\n\ndef main():\n    input_line = input().split(\" \")\n    n = int(input_line[0])\n    k = int(input_line[1])\n    \n    for _ in range(n):\n        w = int(input())\n        tr.append(w)\n\n    ans = solve(n, k)\n    \n    print(ans)\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s446906335","submission":"\n\n# Press the green button in the gutter to run the script.\nif __name__ == '__main__':\n    s = int(input())\n    x = [list(map(int, input().split())) for i in range(1)]\n\n    count = 0\n    while True:\n        flg = False\n        for n in range(len(x[0])):\n            if x[0][n] % 2 == 1:\n                flg = True\n                break\n            x[0][n] = x[0][n] \/ 2\n        if flg:\n            break\n\n        count = count + 1\n\n    print(count)\n","label":0}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s700668027","submission":"import sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\n\nn,x = map(int, input().split())\n\na,p = [1],[1]\nfor i in range(n):\n    a.append(a[i] * 2 + 3)\n    p.append(p[i] * 2 + 1)\n\ndef f(n, x):\n    if n == 0:\n        return 0 if x <= 0 else 1\n    elif x <= 1 + a[n - 1]:\n        return f(n - 1, x - 1)\n    else:\n        return p[n - 1] + 1 + f(n - 1, x - 2 - a[n-1])\n\nprint(f(n, x))\n","label":0}
{"problem_id":"p03994","problem":"Mr. Takahashi has a string s consisting of lowercase English letters.\nHe repeats the following operation on s exactly K times.\n\nChoose an arbitrary letter on s and change that letter to the next alphabet. Note that the next letter of z is a.\n\nFor example, if you perform an operation for the second letter on aaz, aaz becomes abz.\nIf you then perform an operation for the third letter on abz, abz becomes aba.\nMr. Takahashi wants to have the lexicographically smallest string after performing exactly K operations on s.\nFind the such string.","submission_id":"s079913026","submission":"s=input()\nk=int(input())\nnum=[(123-ord(s[i]))%26 for i in range(len(s))]\nans=\"\"\nfor i in range(len(s)-1):\n    if num[i]<=k:\n        ans+=\"a\"\n        k-=num[i]\n    else:\n        ans+=s[i]\nk%=26\nif num[-1]<=k:\n    ans+=chr(97+k-num[-1])\nelse:\n    ans+=chr(ord(s[-1])+k)\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s953123153","submission":"# vim: fileencoding=utf-8\n\n\ndef main():\n    n = int(input())\n    li = list(map(int, input().split()))\n    c = 0\n    end = False\n    while True:\n        for i in range(n):\n            if li[i] % 2:\n                end = True\n                break\n            li[i] = li[i] \/ 2\n        if end:\n            break\n        else:\n            c += 1\n    print(c)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s106956808","submission":"n, x = map(int, input().split())\n\ndp = [1]*(n+1)\nres = 0\n\nfor i in range(1,n+1):\n    dp[i] = dp[i-1]*2+3\n\nfor j in range(n,1,-1):\n    if dp[j] ==x:\n        res += (dp[j]+1) \/\/2\n        x =0        \n    elif dp[j-1]+2 <= x :\n        res += 1 + (dp[j-1]+1)\/\/2\n        x -= dp[j-1]+2\n    elif dp[j-1]+1 ==x:\n        res += (dp[j-1]+1)\/\/2\n        x = 0\n    else:\n        x -=1\n    \n    if x ==0:\n        break\n        \nif x ==5:\n    res += 3\nelif x ==0:\n    pass\nelse:\n    res +=x-1\n\nprint(res)\n","label":0}
{"problem_id":"p03456","problem":"AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.","submission_id":"s687040235","submission":"a, b = input().split()\nab = int(a+b)\n\nfor j in range(ab):\n    if j ** 2 <= ab:\n        if j ** 2 == ab:\n            print(\"Yes\")\n            exit()\n    else:\n        print(\"No\")\n        exit()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s526233079","submission":"n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor ans in range(31):\n    for i,A in enumerate(a):\n        if A%2:\n            print(ans)\n            exit()\n        a[i] \/\/= 2\n","label":0}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s044672058","submission":"N = int(input())\nA = list(map(int,input().split()))\nOdd = 0\nEven = 0\nfor Ai in A:\n    if Ai % 2 == 0:\n        Even += 1\n    else:\n        Odd += 1\nif Odd % 2 == 1:\n    print('NO')\nelse:\n    print('YES')","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s642921725","submission":"mod = 10**9+7\nfrom bisect import bisect\nfrom collections import defaultdict\nN,M = map(int,input().split())\nS = list(map(int,input().split()))\nT = list(map(int,input().split()))\n\ndp = [[0]*(M+1) for _ in range(N+1)]\n\nfor n in range(N):\n    for m in range(M):\n        dp[n][m] = dp[n-1][m]+dp[n][m-1]-dp[n-1][m-1]\n        if S[n]==T[m]:\n            dp[n][m] += dp[n-1][m-1]+1\n        dp[n][m] %= mod\n\nprint(dp[N-1][M-1]+1)","label":0}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s116057586","submission":"def main():\n    import sys\n    from collections import deque\n    from operator import itemgetter\n    M=10**10\n    b=sys.stdin.buffer\n    n,d,a=map(int,b.readline().split())\n    m=map(int,b.read().split())\n    q=deque()\n    popleft,append=q.popleft,q.append\n    s=b=0\n    for x,h in sorted(zip(m,m),key=itemgetter(0)):\n        while q and q[0]\/\/M<x:b-=popleft()%M\n        if h>b:\n            t=(b-h)\/\/a\n            s-=t\n            t*=a\n            b-=t\n            append((x+d+d)*M-t)\n    print(s)\nmain()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s646248493","submission":"N=int(input())\nli = list(map(int,input().split()))\n\nflag=True\nans=-1\n\nwhile(flag):\n    ans+=1\n    newlist=[]\n    for i in li:\n        newlist.append(i\/\/2)\n        if i%2!=0:\n            flag=False\n    li=newlist\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s329525217","submission":"def T(N,A):\n    t = 1\n    for i in range(N):\n        if A[i]%2 == 1:\n            t = 0\n    return t\n\ndef W(b):\n    return b\/2\n\nN = int(input())\nA = list(map(int,input().split()))\ncount = 0\nt = T(N,A)\nwhile t == 1:\n    A = list(map(W,A))\n    count += 1\n    t = T(N,A)\nprint(count)\n\n","label":0}
{"problem_id":"p02410","problem":"Write a program which reads a $ n \\times m$ matrix $A$  and a $m \\times 1$ vector $b$, and prints their product $Ab$.","submission_id":"s142731441","submission":"n,m = map(int,input().split())\nA = []\nB = []\nfor i in range(n):\n\ttmp = list(map(int,input().split()))\n\tA.append(tmp)\n\ttmp=[]\nfor i in range(m):\n\tnum = int(input())\n\tB.append(num)\nfor i in range(n):\n\tc = 0\n\tfor j in range(m):\n\t\tc += A[i][j]*B[j]\n\tprint(c)\n","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s420607718","submission":"import numpy as np\n\n\nn, a = map(int, input().split())\nX = np.array(list(map(int, input().split())))\nX -= a\n\nplus = X[X > 0]\nzero = X[X == 0]\nminus = abs(X[X < 0])\n\nnum_count = np.zeros(2551, dtype=np.int64)\nnum_count[0] = 1\n\nfor num in plus:\n    num_count[num:] = num_count[:-num] + num_count[num:]\n\nfor num in minus:\n    num_count[:-num] = num_count[:-num] + num_count[num:]\n\nans = 2 ** len(zero) * (num_count[0])\n\nprint(ans-1)\n","label":0}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s567606893","submission":"def main():\n    from collections import defaultdict\n\n    inf = 10 ** 15\n\n    N = int(input())\n    *a, = map(int, input().split())\n\n    it = iter(a)\n\n    dp = [defaultdict(lambda: -inf) for _ in range(N + 1)]\n    dp[0][0] = 0\n    dp[1][0] = 0\n    dp[1][1] = next(it)\n    for i, x in enumerate(it, 2):\n        mi = (i - 1) \/\/ 2\n        ma = (i + 1) \/\/ 2\n        for taken_count in range(mi, ma + 1):\n            dp[i][taken_count] = max(\n                dp[i - 1][taken_count],\n                dp[i - 2][taken_count - 1] + x\n            )\n\n    ans = dp[N][N \/\/ 2]\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s023957107","submission":"x = int(input())\ny = list(map(int, input().split()))\n\nz = True\ncount = -1\nwhile z == True:\n    count += 1\n    for i, j in enumerate(y):\n        if j % 2 == 0:\n            y[i] = j \/ 2\n        else:\n            z = False\n\nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s136172680","submission":"import math \nN = int(input())\nA = map(int,input().split())\nB = map(bin,A)\ndef Y(x):\n  y = len(x)-x.rfind(\"1\")-1\n  return y\nC = map(Y,B)\nprint(min(C))\n","label":0}
{"problem_id":"p02683","problem":"Takahashi, who is a novice in competitive programming, wants to learn M algorithms.\nInitially, his understanding level of each of the M algorithms is 0.\nTakahashi is visiting a bookstore, where he finds N books on algorithms.\nThe i-th book (1\\leq i\\leq N) is sold for C_i yen (the currency of Japan). If he buys and reads it, his understanding level of the j-th algorithm will increase by A_{i,j} for each j (1\\leq j\\leq M).\nThere is no other way to increase the understanding levels of the algorithms.\nTakahashi's objective is to make his understanding levels of all the M algorithms X or higher. Determine whether this objective is achievable. If it is achievable, find the minimum amount of money needed to achieve it.","submission_id":"s628392816","submission":"import numpy as np\n\nn,m,x = map(int,input().split())\nca = list(list(map(int,input().split())) for _ in range(n))\n\nans = 10**7\nfor i in range(1,2**n):\n  l = []\n  for j in range(n):\n    if (i >> j) & 1:\n      l.append(ca[j])\n  s = np.sum(l,axis=0).tolist()\n  if all(s[k] >= x for k in range(1,m+1)) and s[0] < ans:\n    ans = s[0]\n\nif ans == 10**7:\n  print(-1)\nelse:\n  print(ans)","label":0}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s200326144","submission":"n = int(input())\na = [0]+list(map(int,input().split()))\nb = [0]*(n+1)\nfor i in range(n,0,-1):\n    b_sum = sum([b[i*j] for j in range(1,n\/\/i+1)])\n    b_sum %= 2\n    if a[i] == 1 and b_sum == 0:\n        b[i] = 1\n    if a[i] == 0 and b_sum == 1:\n        b[i] = 1\nprint(sum(b))\nfor i in range(1,n+1):\n    if b[i]==1:\n        print(i)","label":0}
{"problem_id":"p04001","problem":"You are given a string S consisting of digits between 1 and 9, inclusive.\nYou can insert the letter + into some of the positions (possibly none) between two letters in this string.\nHere, + must not occur consecutively after insertion.\nAll strings that can be obtained in this way can be evaluated as formulas.\nEvaluate all possible formulas, and print the sum of the results.","submission_id":"s515080776","submission":"S=int(input())\nleng=len(str(S))\n\nbin(2**leng-1)\nans=0\nif leng==1:\n    print(S)\n    exit()\nfor i in range(2**(leng-1)):\n    bid=bin(2**(leng-1)+i)\n    start=0\n    for j in range(3,len(str(bid))):\n        if bid[j]=='1':\n            ans+=int(str(S)[start:j-2])\n            start=j-2\n        if j==len(str(bid))-1:\n            ans+=int(str(S)[start:j-1])\nprint(ans)","label":0}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s507670661","submission":"N = int(input())\na = list(map(int, input().split()))\ncnt_4 = 0\ncnt_2 = 0\nfor i in range(N):\n    if a[i]%4 == 0:\n        cnt_4 += 1\n    elif a[i]%2 == 0:\n        cnt_2 += 1\nif cnt_4 + cnt_2\/\/2 >= N\/\/2:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":0}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s025753683","submission":"s=str(input()[::-1])\nword = [\"maerd\",\"esare\",\"resare\",\"remaerd\"]\nans=\"YES\"\ni=0\nwhile True:\n    if i==len(s):\n        break\n    if s[i:i+5]==word[0]:\n        i+=5\n    elif s[i:i+5]==word[1]:\n        i+=5\n    elif s[i:i+6]==word[2]:\n        i+=6\n    elif s[i:i+7]==word[3]:\n        i+=7\n    else:\n        ans=\"NO\"\n        break\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s785525224","submission":"def Divide2Count(N):\n    Count = 0\n    while True:\n        if N%2==0:\n            Count += 1\n            N \/\/= 2\n        else:\n            break\n    return Count\n\nN = int(input())\nA = [Divide2Count(int(X)) for X in input().split()]\nprint(min(A))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s814018334","submission":"import sys\nimport copy\nimport math\nimport itertools\nN = int(input())\nA = [int(c) for c in input().split()]\ncnt = 0\n\nwhile sum(list(map(lambda x:x%2,A)))==0:\n    A=list(map(lambda x:int(x\/2),A))\n    cnt+=1\n\nprint(cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s088057016","submission":"N = int(input())\nA = input().split()\nl=list()\nfor i in range(N):\n    A[i] = int(A[i])\n    if A[i] % 2 == 1:\n        l.append(0)\n        break\n    else:\n        for j in range(30):\n            A[i] = A[i] \/ 2\n            if A[i] % 2 == 1:\n                l.append(j+1)\n                break\nprint(min(l))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s962957015","submission":"n = int(input())\na = list(map(int, input().split()))\n\nans = 99\n\nfor i in a:\n    j = i\n    split_count = 0\n    while j % 2 == 0:\n        j = j \/ 2\n        split_count += 1\n    ans = min(ans, split_count)\nprint(ans)","label":0}
{"problem_id":"p02846","problem":"Takahashi and Aoki are training for long-distance races in an infinitely long straight course running from west to east.\nThey start simultaneously at the same point and moves as follows towards the east:\n\nTakahashi runs A_1 meters per minute for the first T_1 minutes,  then runs at A_2 meters per minute for the subsequent T_2 minutes, and alternates between these two modes forever.\nAoki runs B_1 meters per minute for the first T_1 minutes,  then runs at B_2 meters per minute for the subsequent T_2 minutes, and alternates between these two modes forever.\n\nHow many times will Takahashi and Aoki meet each other, that is, come to the same point? We do not count the start of the run. If they meet infinitely many times, report that fact.","submission_id":"s569737882","submission":"def p_f():\n    t1, t2 = map(int, input().split())\n    a1, a2 = map(int, input().split())\n    b1, b2 = map(int, input().split())\n\n    # a\u306e\u65b9\u304ct1\u306e\u3068\u304d\u306b\u5148\u884c\u3057\u3066\u3044\u308b\n    if a1 < b1:\n        a1, b1 = b1, a1\n        a2, b2 = b2, a2\n\n    dif1 = a1 * t1 - b1 * t1\n    dif2 = (b1 * t1 + b2 * t2) - (a1 * t1 + a2 * t2)\n    # print(dif1)\n    # print(dif2)\n    if dif2 < 0:\n        print(0)\n        exit()\n    if dif2 == 0:\n        print(\"infinity\")\n        exit()\n    if dif1 % dif2 == 0:\n        print(dif1 \/\/ dif2 * 2)\n    else:\n        print((dif1 + dif2) \/\/ dif2 * 2 - 1)\n        \np_f()","label":0}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s139111830","submission":"def getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\ndef input():\n    return sys.stdin.readline().rstrip()\ndef rand_N(ran1, ran2):\n    return random.randint(ran1, ran2)\ndef rand_List(ran1, ran2, rantime):\n    return [random.randint(ran1, ran2) for i in range(rantime)]\ndef rand_ints_nodup(ran1, ran2, rantime):\n  ns = []\n  while len(ns) < rantime:\n    n = random.randint(ran1, ran2)\n    if not n in ns:\n      ns.append(n)\n  return sorted(ns)\n\ndef rand_query(ran1, ran2, rantime):\n  r_query = []\n  while len(r_query) < rantime:\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n    if not n_q in r_query:\n      r_query.append(n_q)\n  return sorted(r_query)\n\nfrom collections import defaultdict, deque, Counter\nfrom sys import exit\nfrom decimal import *\nimport heapq\nimport math\nfrom fractions import gcd\nimport random\nimport string\nimport copy\nfrom itertools import combinations, permutations, product\nfrom operator import mul\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\n\nimport sys\nsys.setrecursionlimit(1000000000)\nmod = 10 ** 9 + 7\n\n\n#############\n# Main Code #\n#############\n\nA, B = getNM()\nA -= 1\nB -= 1\n\nmaze = [['#'] * 100 for i in range(100)]\n\n# \u53f3\u534a\u5206\u3092\u9ed2\u3067\u5857\u308b\nfor i in range(100):\n    for j in range(50, 100):\n        maze[i][j] = \".\"\n\nfor i in range((A + 25 - 1) \/\/ 25):\n    for j in range(25):\n        maze[2 * i][2 * j] = '.'\n        if i == ((A + 25 - 1) \/\/ 25) - 1 and j == (A % 25) - 1:\n            break\n\nfor i in range((B + 25 - 1) \/\/ 25):\n    for j in range(25):\n        maze[2 * i][2 * j + 51] = '#'\n        if i == ((B + 25 - 1) \/\/ 25) - 1 and j == (B % 25) - 1:\n            break\n\nprint(len(maze), len(maze[0]))\nfor i in maze:\n    print(''.join(i))","label":0}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s686642478","submission":"MOD = 10 ** 9 + 7\n\nN, M = map(int, input().split())\n\ndef factoring(k): #k\u3092\u56e0\u6570\u5206\u89e3\u3057\u3001\u7d20\u56e0\u6570\u3068\u305d\u306e\u500b\u6570\u3092\u8f9e\u66f8\u306b\u5165\u308c\u3066\u8fd4\u3059\u3002\n    import math\n    dic = dict()\n    n = int(math.sqrt(k))+2\n    for i in range(2, n):\n        count = 0\n        while k%i == 0:\n            count += 1\n            k = k\/\/i\n        if count != 0:\n            dic[i] = count\n    if k != 1: #sqrt(k)\u307e\u3067\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3082k\u304c1\u306b\u306a\u3063\u3066\u3044\u306a\u3044 --> k\u304c\u7d20\u56e0\u6570\n        dic[k] = 1\n    return dic\n\nclass Factorial:\n    def __init__(self, n, mod):\n        self.f = [1]\n        self.mod = mod\n        for j in range(1, n + 1):\n            self.f.append(self.f[-1] * j % mod)\n        self.i = [pow(self.f[-1], mod - 2, mod)]\n        for j in range(n, 0, -1):\n            self.i.append(self.i[-1] * j % mod)\n        self.i.reverse()\n    def factorial(self, j):\n        return self.f[j]\n    def ifactorial(self, j):\n        return self.i[j]\n    def comb(self, n, k):\n        return self.f[n] * self.i[n - k] % self.mod * self.i[k] % self.mod if n >= k else 0\n\n\n\n\nC = Factorial(N + 100, MOD).comb\n\nans = 1\ndic = factoring(M)\nfor tmp in dic:\n    # print (tmp, dic[tmp])\n    ans *= C(dic[tmp] + N - 1, dic[tmp])\n    ans %= MOD\n\nprint (ans)\n\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s194718681","submission":"# 2020-08-27, Thu\n\nn = int(input())\nlis = list(map(int, input().split()))\nans = 0\n\nwhile (1):\n    count = 0\n    for i in range(n):\n        if lis[i] % 2 == 0:\n            lis[i] \/\/= 2\n            count += 1\n    if count == n:\n        ans += 1\n    else:\n        break\n\nprint(ans)","label":0}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s729877762","submission":"def solve(string):\n    s, t = map(list, string.split())\n    ans = min(\n        sum(1 if s[i + j] != t[j] else 0\n            for j, _ in enumerate(t))\n        for i in range(len(s) - len(t) + 1))\n    return str(ans)\n\n    pass\n\n\nif __name__ == '__main__':\n    import sys\n    print(solve(sys.stdin.read().strip()))\n","label":0}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s063404966","submission":"import numpy as np\na,b,c = map(int,input().split())\nprint(int(np.ceil(a\/b)*c))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s428505776","submission":"N = int(input())\n\nnums = list(map(int,input().split(' ')))\n\ncount = 0\nexistOdd = True\nwhile existOdd:\n    for i in nums:\n        if i%2!=0:\n            existOdd = False\n            break\n    \n    if existOdd:\n        for i in range(N):\n            nums[i] \/= 2\n        \n        count+=1\n    \nprint(count)\n","label":0}
{"problem_id":"p02772","problem":"You are an immigration officer in the Kingdom of AtCoder. The document carried by an immigrant has some number of integers written on it, and you need to check whether they meet certain criteria.\nAccording to the regulation, the immigrant should be allowed entry to the kingdom if and only if the following condition is satisfied:\n\nAll even numbers written on the document are divisible by 3 or 5.\n\nIf the immigrant should be allowed entry according to the regulation, output APPROVED; otherwise, print DENIED.","submission_id":"s722457119","submission":"n = int(input())\na = list(map(int, input().split()))\n\nfor num in a:\n    if num % 2 == 0:\n        if num%3==0 or num%5==0:\n            pass\n        else:\n            print('DENIED')\n            exit()\n\nprint('APPROVED')","label":0}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s656845952","submission":"from scipy.special import comb\nN,M = input().split()\nN = int(N)\nM = int(M)\n\nA = 0\nB = 0\nif N >= 2 :\n  A = comb(N, 2, exact=True)\n\nif M >= 2 :\n  B = comb(M, 2, exact=True)\n \nprint(A + B)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s622527298","submission":"# ABC_081_B_Shift_only.py\nN = int(input())\na = list(map(int, input().split()))\ncount = 0\nwhile True:\n\tflag = 0\n\tfor i in range(0, N):\n\t\tAi = a[i]\n\t\tif Ai % 2 == 1:\n\t\t\tflag = 1\n\tif flag == 1:\n\t\tbreak\n\tfor i in range(0, N):\n\t\ta[i] = a[i]\/\/2\n\tcount += 1\nprint(count)","label":0}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s626229018","submission":"x, y = map(int, input().split());\n\nMAX = 100000000000000;\n\n# \u3069\u308c\u304c\u6700\u5c0f\u304b\u3092\u8003\u3048\u308b\n# \u305d\u306e\u307e\u307e\u8fd1\u3065\u3051\u308b\na = y - x;\nif (a < 0):\n  a = MAX;\n# x\u3092\u53cd\u8ee2\u3055\u305b\u3066\u8fd1\u3065\u3051\u308b\nb = y + x;\nif (b < 0):\n  b = MAX;\n# y\u3092\u53cd\u8ee2\nc = y * (-1) - x;\nif (c < 0):\n  c = MAX;\n# x\u3068y\u306e\u4e21\u65b9\u3092\u53cd\u8ee2\u3055\u305b\u3066\u8fd1\u3065\u3051\u308b\nd = y * (-1) + x;\nif (d < 0):\n  d = MAX;\n\n# \u6700\u5c0f\u3092\u6c42\u3081\u308b\nans = min(a, b + 1, c + 1, d + 2);\nprint(ans);","label":0}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s687600235","submission":"n = int(input())\nb = list(map(int,input().split()))\n\na = [0 for _ in range(n)]\n\nfor i in range(n-1):\n    if i == 0:\n        a[i] = b[i]\n        a[i+1] = b[i]\n    if b[i] < b[i-1] and i > 0:\n        a[i] = b[i]\n        a[i+1] = b[i]\n    elif b[i] >= b[i-1] and i > 0:\n        a[i+1] = b[i]\n\nprint(sum(a))\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s241268788","submission":"N=int(input())\na=list(map(int, input().split()))\nans = 100000000\nfor i in range(N):\n  d = 0\n  while (a[i] %2 == 0):\n    d += 1\n    a[i] \/\/= 2\n  ans = min(d,ans)\nprint(ans)\n\n","label":0}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s594074327","submission":"def main():\n    _ = int(input())\n    A = list(map(int, input().split()))\n    A.insert(0, 1e10)\n    ans = []\n    B = [0] * len(A)\n    for i in range(len(A)-1, 0, -1):\n        idx = i\n        s = 0\n        while idx <= len(A) - 1:\n            s += B[idx]\n            idx += i\n\n        if s % 2 != A[i]:\n            ans.append(i)\n            B[i] = 1\n\n    if len(ans) > 0:\n        print(len(ans))\n        print(*ans)\n    else:\n        print(0)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s318386002","submission":"\nn=int(input())\na=list(map(int,input().split()))\ndef f(x):\n    m=0\n    while x%2==0:\n        m+=1\n        x=x\/\/2\n    return m\nprint(min(f(a[i]) for i in range(n)))\n","label":0}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s025471650","submission":"n, m, r = map(int, input().split())\nrs = list(map(int, input().split()))\nrs = [i-1 for i in rs]\nd = [[float('inf')] * n for i in range(n)]\nfor i in range(m):\n    x, y, r = map(int, input().split())\n    x -= 1\n    y -= 1\n    d[x][y] = r\n    d[y][x] = r\n\nfor i in range(n):\n    d[i][i] = 0\n\ndef warshall_floyd(d):\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    return d\n\nd = warshall_floyd(d)\n\nans = float('inf')\nfrom itertools import permutations\nfor i in permutations(rs):\n    di = 0\n    for j in range(len(rs) - 1):\n        di += d[i[j]][i[j + 1]]\n    ans = min(ans, di) \n\nprint(ans)","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s781811927","submission":"def getN():\n    return int(input())\ndef getNM():\n    return map(int, input().split())\ndef getList():\n    return list(map(int, input().split()))\ndef getArray(intn):\n    return [int(input()) for i in range(intn)]\ndef input():\n    return sys.stdin.readline().rstrip()\ndef rand_N(ran1, ran2):\n    return random.randint(ran1, ran2)\ndef rand_List(ran1, ran2, rantime):\n    return [random.randint(ran1, ran2) for i in range(rantime)]\ndef rand_ints_nodup(ran1, ran2, rantime):\n  ns = []\n  while len(ns) < rantime:\n    n = random.randint(ran1, ran2)\n    if not n in ns:\n      ns.append(n)\n  return sorted(ns)\n\ndef rand_query(ran1, ran2, rantime):\n  r_query = []\n  while len(r_query) < rantime:\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n    if not n_q in r_query:\n      r_query.append(n_q)\n  return sorted(r_query)\n\nfrom collections import defaultdict, deque, Counter\nfrom sys import exit\nfrom decimal import *\nimport heapq\nimport math\nfrom fractions import gcd\nimport random\nimport string\nimport copy\nfrom itertools import combinations, permutations, product\nfrom operator import mul, itemgetter\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\n\nimport sys\nsys.setrecursionlimit(1000000000)\nmod = 10 ** 9 + 7\n\n#############\n# Main Code #\n#############\n\nN, M = getNM()\nS = getList()\nN_s = len(S)\nT = getList()\nN_t = len(T)\n\ndp = [[0] * (N_s + 1) for i in range(N_t + 1)]\ndp[0][0] = 0\n\nfor i in range(N_t):\n    for j in range(N_s):\n        # \u57fa\u790e dp[i][j] + S\u3092\u4f38\u3070\u3057\u3066\u5897\u3048\u305f\u5206 + T\u3092\u4f38\u3070\u3057\u3066\u5897\u3048\u305f\u5206\n        dp[i + 1][j + 1] = (dp[i + 1][j] + dp[i][j + 1] - dp[i][j]) % mod\n        if S[j] == T[i]:\n            # dp[i][j]\u306e\u901a\u308a\u306e\u305d\u308c\u305e\u308c\u306e\u672b\u5c3e\u306b(S[i], T[i])\u3092\u3064\u3051\u308b\u3053\u3068\u3067\n            # dp[i][j]\u901a\u308a\uff08\u3068\u7a7a\u306b(S[i], T[i])\u3092\u3064\u3051\u305f\uff09\u5206\u65b0\u3057\u3044\u306e\u304c\u4f5c\u308c\u308b\n            dp[i + 1][j + 1] = (dp[i + 1][j + 1] + dp[i][j] + 1) % mod\nprint((dp[N_t][N_s] + 1) % mod)","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s341218299","submission":"N, K = map(int, input().split())\nP = list(map(int, input().split()))\n\nscore = sum(P[:K])\nmmax = score\nidx = 0\nfor i in range(1, N-K+1):\n  score = score - P[i-1] + P[i+K-1]\n  if score > mmax:\n    mmax = score\n    idx = i\n  else:\n    continue\n\nprint((K+mmax)\/2)","label":0}
{"problem_id":"p02684","problem":"The Kingdom of Takahashi has N towns, numbered 1 through N.\nThere is one teleporter in each town. The teleporter in Town i (1 \\leq i \\leq N) sends you to Town A_i.\nTakahashi, the king, loves the positive integer K. The selfish king wonders what town he will be in if he starts at Town 1 and uses a teleporter exactly K times from there.\nHelp the king by writing a program that answers this question.","submission_id":"s063511731","submission":"import bisect,collections,copy,heapq,itertools,math,string\nfrom collections import defaultdict as D\nfrom functools import reduce\nimport numpy as np\nimport sys\nimport os\nfrom operator import mul\n\nsys.setrecursionlimit(10**7)\n\ndef _S(): return sys.stdin.readline().rstrip()\ndef I(): return int(_S())\ndef LS(): return list(_S().split())\ndef LI(): return list(map(int,LS()))\n\nif os.getenv(\"LOCAL\"):\n    inputFile = basename_without_ext = os.path.splitext(os.path.basename(__file__))[0]+'.txt'\n    sys.stdin = open(inputFile, \"r\")\n\n# k: number of transfer\n_,k = LI()\na = LI()\n# \u8857\u306e\u756a\u53f7\u30920\u59cb\u307e\u308a\u306b\u5909\u66f4\na = list(map(lambda x:x-1,a))\n# print(a)\n\ns = set([0])\n\n# \u518d\u5e30\u95a2\u6570\ndef rec(visited,next):\n    if next in s:\n        # print(visited)\n        return visited,visited.index(next)\n    else:\n        s.add(next)\n        visited.append(next)\n        return rec(visited,a[next])\n\nvisited = [0]\n# \u8a2a\u308c\u305f\u8857\u3001\u521d\u3081\u30662\u5ea6\u8a2a\u308c\u305f\u8857\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\nvisited,loopStart = rec(visited,a[0])\n\n# print(visited,loopStart)\n\nif k < len(visited):\n    townIndex = visited[k]\nelse:\n    visitedLoop = visited[loopStart:]\n    # print(visitedLoop)\n    # \u6b8b\u308a\u56de\u6570\u3092\u5faa\u74b0\u914d\u5217\u306e\u9577\u3055\u3067\u5272\u3063\u305f\u4f59\u308a\n    index = (k-(loopStart))%len(visitedLoop)\n    # print(index)\n    townIndex = visitedLoop[index]\n\nprint(townIndex+1)","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s364197893","submission":"h,n = map(int, input().split())\nab = []\namax = 10**5\nfor _ in range(n):\n  ab.append(tuple(map(int,input().split())))\namax = max(a for a,b in ab)\np = [0]*(h+amax+1)\nfor i in range(1,h+amax):\n  p[i] = min(p[i-a]+b for a,b in ab)\nprint(p[h])","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s070080688","submission":"n,x=map(int,input().split())\nl=[int(i) for i in input().split()]\ndp = [[[0 for k in range(55)] for j in range(3000)] for i in range(55)]\n\nfor i in range(n+1):\n    dp[i][0][0]=1 \nsm=sum(l)\nfor i in range(1,n+1):\n    for j in range(sm+5):\n        for k in range(1,n+1):\n            curr=l[i-1]\n            if curr<=j:\n                dp[i][j][k]=dp[i-1][j][k]+dp[i-1][j-curr][k-1]\n            else:\n                dp[i][j][k]=dp[i-1][j][k]\n\nans=0 \nfor k in range(1,n+1):\n    ans+=dp[n][k*x][k]\nprint(ans)","label":0}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s078677733","submission":"s = input()\nt = input()\n\nn = len(s)\nm = len(t)\n\nans = float(\"inf\")\nfor i in range(n-m+1):\n  p = m\n  for j in range(m):\n    if s[i+j] == t[j]: p -= 1\n  if p < ans: ans = p\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s875594772","submission":"n = int(input())\na = list(map(int, input().split()))\nl = [0 for i in range(n)]\nfor i in range(len(a)):\n    while a[i] % 2 == 0:\n        a[i] \/= 2\n        l[i] += 1\nprint(min(l))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s077024137","submission":"n = int(input())\na = list(map(int,input().split()))\nans = 0\ndef check_all():\n    global a,n\n    for i in range(n):\n        if a[i]%2!=0:\n            return False\n    return True\nwhile check_all():\n    ans += 1\n    for i in range(n):\n        a[i] \/\/= 2\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s984317124","submission":"n=int(input())\na=list(map(int,input().split()))\ncnt=0\nfor j in range(10**9):\n    for idx,i in enumerate(a):\n        if i %2==0:\n            a[idx]=i\/\/2\n        else:\n            print(cnt)\n            exit()\n    cnt+=1\nprint(cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s383927418","submission":"def counter(s):\n    return len(bin(s))-(bin(s).rfind(\"1\")+1)\n\nn = input()\na = input()\nb = map(int,a.split(\" \"))\nc = map(counter,b)\nd = min(c)\nprint(d)","label":0}
{"problem_id":"p02699","problem":"There are S sheep and W wolves.\nIf the number of wolves is greater than or equal to that of sheep, the wolves will attack the sheep.\nIf the wolves will attack the sheep, print unsafe; otherwise, print safe.","submission_id":"s228407186","submission":"# Sheep and Wolves\nS, W = map(int, input().split())\nprint(['safe', 'unsafe'][W >= S])","label":0}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s889349830","submission":"import sys\nimport math\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\n\ndef make_grid(h, w, num): return [[int(num)] * w for _ in range(h)]\n\n\ndef main():\n    N, D, A = NMI()\n    M = [NLI() for _ in range(N)]\n    M.sort()\n    maxj = [0] * N\n    j = 0\n    for i in range(N):\n        while j < N-1:\n            if M[j+1][0] <= M[i][0] + D*2:\n                j += 1\n            else:\n                break\n        maxj[i] = j\n    S = [0]*(N+1)\n    ans = 0\n    for i in range(N):\n        x = M[i][0]\n        hp = M[i][1] - S[i]\n        need = max((hp-1) \/\/ A + 1, 0)\n        ans += need\n        S[i] += need * A\n        S[maxj[i]+1] -= need * A\n        S[i+1] += S[i]\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n    main()","label":0}
{"problem_id":"p03294","problem":"You are given N positive integers a_1, a_2, ..., a_N.\nFor a non-negative integer m, let f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) + ... + (m\\ mod\\ a_N).\nHere, X\\ mod\\ Y denotes the remainder of the division of X by Y.\nFind the maximum value of f.","submission_id":"s143403131","submission":"# \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport fractions\n\n# \u6a19\u6e96\u5165\u529b\u3092\u53d6\u5f97\nN = int(input())\na = list(map(int, input().split()))\n\n# \u6c42\u89e3\u51e6\u7406\nans = sum(a) - N\n\n# \u7d50\u679c\u51fa\u529b\nprint(ans)\n","label":0}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s023121617","submission":"n = int(input())\nD = [0] * n\nfor i in range(1, n):\n    for j in range(i, n, i):\n        D[j] += 1\nprint(sum(D))\n","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s687332016","submission":"import fractions\n\nn,m=list(map(int,input().split()))\ns=input()\nt=input()\nl=n*m\/\/fractions.gcd(n,m)\n\nm,n=(m\/\/fractions.gcd(m,n),n\/\/fractions.gcd(m,n))\np=m*n\/\/fractions.gcd(m,n)\n\npos=0\nwhile pos<l:\n    if s[pos\/\/m]!=t[pos\/\/n]:\n        print(-1)\n        exit(0)\n\n    pos+=p\n\nprint(l)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s881993648","submission":"input()\ndef a(n):\n    return 0 if n%2 else a(n\/\/2)+1\nprint(min([a(i) for i in list(map(int,input().split()))]))","label":0}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s734800568","submission":"a, b = list(map(int, input().split()))\n\nL = 100\nl = L\/\/2\nans = [['.']*L for _ in range(l)]\nans += [['#']*L for _ in range(l)]\n# for a in ans: print(a)\n\nfor i in range(a-1):\n    h = (i\/\/l)*2 + l+1\n    w = (i%l)*2\n    ans[h][w] = '.'\nfor i in range(b-1):\n    h = (i\/\/l)*2\n    w = (i%l)*2\n    ans[h][w] = '#'\n\nprint(L, L)\nfor a in ans:\n    print(''.join(a))\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s471014380","submission":"N = int(input())\nA = [int(i) for i in input().split()]\nB = A.copy()\nOK = True\ncount = 0\nwhile OK:\n    for c in range(N):\n        if A[c] % 2 == 0:\n            A[c] = A[c] \/\/ 2\n            if A[-1] == (B[-1] \/ (2 ** (count+1))):\n                count += 1\n        else:\n            OK = False\n            break\nprint(count)","label":0}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s432190900","submission":"import sys\ndef input(): return sys.stdin.readline().strip()\n\ndef main():\n    s = input()\n    l = len(s)\n    while s:\n        if s[-5:] == \"dream\":\n            s = s[:-5]\n        elif s[-7:] == \"dreamer\":\n            s = s[:-7]\n        elif s[-5:] == \"erase\":\n            s = s[:-5]\n        elif s[-6:] == \"eraser\":\n            s = s[:-6]\n        else:\n            print(\"NO\")\n            return\n    print(\"YES\")\n\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s516531149","submission":"# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\nimport copy\nimport decimal\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [Scanner.string() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [Scanner.int() for i in range(n)]\n\n\ndef solve():\n    H, N = Scanner.map_int()\n    A, B = [0] * N, [0] * N\n    for i in range(N):\n        A[i], B[i] = Scanner.map_int()\n    INF = 10 ** 10\n    dp = [INF for _ in range(H + 1)]\n    dp[0] = 0\n    for i in range(H + 1):\n        for j in range(N):\n            k = max(0, i - A[j])\n            dp[i] = min(dp[i], dp[k] + B[j])\n    print(dp[H])\n\n\ndef main():\n    # sys.setrecursionlimit(1000000)\n    # sys.stdin = open(\"sample.txt\")\n    solve()\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s624931528","submission":"N = int(input())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nc = [int(x) for x in input().split()]\nval = 0\npre = -1\nfor i in a:\n    if pre == i-1:\n        val += c[pre-1]\n    val += b[i-1]\n    pre = i\nprint(val)\n","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s098635549","submission":"N, K = map(int, input().split())\np = list(map(int, input().split()))\n\ns = sum(p[:K])\nss = []\nss.append(s)\n\nfor i in range(N - K):\n    s = s - p[i] + p[i+K]\n    ss.append(s)\n\nprint(K + (max(ss) - K) \/ 2)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s367495532","submission":"N = int(input())\nA = list(map(int, input().split()))\ntf = True\ncnt = 0\nwhile tf == True:\n    for i in range(N):\n        if A[i] % 2 != 0:\n            tf = False\n    if tf == True:\n        cnt += 1\n        for i in range(N):\n            A[i] \/\/= 2\nprint(cnt)\n","label":0}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s600030760","submission":"from collections import defaultdict\nn,m=map(int,input().split())\nmod=10**9+7\nkaidan=[1]*(2*10**5+1)\ngyaku=[1]*(2*10**5+1)\n\nfor i in range(1, 2*10**5):\n    kaidan[i]=i*kaidan[i-1] % mod\n    gyaku[i]=pow(kaidan[i],mod-2,mod)\ndef comb(a,b):\n    if a>0 and b>0 and a-b>0:\n        return (kaidan[a] * gyaku[b]*gyaku[a-b])%mod\n    elif a==0 or b==0 or a-b==0:\n        return 1\n    else:\n        return 0\ndef fctr1(n): \n    f=[]\n    c=0\n    r=int(n**0.5)\n    for i in range(2,r+2):\n        while n%i==0:\n            c+=1\n            n=n\/\/i\n        if c!=0:\n            f.append([i,c])\n            c=0\n    if n!=1:\n        f.append([n,1])\n    return f\n# soin=defaultdict(int)\n# while m>=2:\n#     for i in range(2,int(n**.5)+5):\n#         while m%i==0 and m!=0:\n#             m\/\/=i\n#             soin[i]+=1\n#             if m==1:\n#                 break\n     \nL=list(fctr1(m))\nans=1\nfor a,l in L:\n    ans*=comb(l+n-1,l)\n    ans%=mod\nprint(ans)","label":0}
{"problem_id":"p03638","problem":"We have a grid with H rows and W columns of squares.\nSnuke is painting these squares in colors 1, 2, ..., N.\nHere, the following conditions should be satisfied:\n\nFor each i (1 \u2264 i \u2264 N), there are exactly a_i squares painted in Color i. Here, a_1 + a_2 + ... + a_N = H W.\nFor each i (1 \u2264 i \u2264 N), the squares painted in Color i are 4-connected. That is, every square painted in Color i can be reached from every square painted in Color i by repeatedly traveling to a horizontally or vertically adjacent square painted in Color i.\n\nFind a way to paint the squares so that the conditions are satisfied.\nIt can be shown that a solution always exists.","submission_id":"s607910691","submission":"\nimport collections\nh, w= map(int, raw_input().split())\nn,ais = int(raw_input()), map(int, raw_input().split())\nmat = [[-1 for _ in range(w)] for ii in range(h)]\nc = 0\nfor i in range(len(mat)):\n\tfor j in range(len(mat[0]))[::(-1 if i % 2 else 1)]:\n\t\tmat[i][j] = c +1\n\t\tais[c] -= 1\n\t\tif ais[c] == 0: c +=1\nfor l in mat: print ' '.join(map(str,l))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s640659317","submission":"N = input()\nA = list(map(int,input().split()))\nc = 0\nd = -1\nwhile c>d:\n  d+=1\n  for i in A:\n    if i%2 == 0:\n      continue\n    else :\n      print(c)\n      break\n  else :\n    A=list(map(lambda x :x\/2,A))\n    c += 1\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s104640608","submission":"N = int(input())\nA = list(map(int,input().split()))\n\ncnt = 0\n\nwhile all([i % 2 == 0 for i in A]):\n    A = list(map(lambda x: x\/2,A))\n    #print(A)\n    cnt += 1    \n    \nprint(cnt)","label":0}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s065211519","submission":"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\nfrom collections import deque\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nDR = [1, -1, 0, 0]\nDC = [0, 0, 1, -1]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\n     \ndef main():\n    N = I()\n    ans = 0\n    for a in range(1, 10**3+1):\n        if a ** 2 >= N:\n            continue\n        b_num = N \/\/ a - a\n        if a * (N \/\/ a) == N:\n            b_num -= 1\n        ans += b_num\n    ans *= 2\n    ans += int(math.sqrt(N))\n    if int(math.sqrt(N)) ** 2 == N:\n        ans -= 1\n    print(ans)\nmain()\n\n","label":0}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s970886690","submission":"word = input()\nans = []\nj = 0\nfor i in word:\n    j += 1\n\nif word[j - 1] != 's':\n    ans = word + 's'\nelif word[j - 1] == 's' and j >= 1:\n    ans = word + 'es'\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s608523274","submission":"def warimakuri(num):\n  return format(num, 'b')[::-1].find('1')\nN=int(input())\nL=list(map(int,input().split()))\nL=[warimakuri(i) for i in L]\nprint(min(L))","label":0}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s987330649","submission":"N = int(input())\nA = list(map(int,input().split()))\nchk = [0] * N \nans = []\ncnt = 0\n\nfor i in reversed(range(1,N+1)):\n    if i > N \/\/ 2:\n        if A[i-1] == 1:\n            ans.append(i)\n            chk[i-1] = 1\n            cnt += 1\n    else:\n        j = 2 * i\n        ret = 0\n        while j <= N:\n            ret += chk[j-1] \n            j += i\n        if A[i-1] != ret%2:\n            ans.append(i)\n            chk[i-1] = 1\n            cnt += 1\n            \nprint(cnt)\nprint(*ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s895369552","submission":"n = int(input())\na = list(map(int, input().split()))\ndef f():\n    for i in range(100):\n        for j in range(n):\n            if a[j]%2 == 0:\n                a[j] = a[j]\/\/2\n            else:\n                return i\nprint(f())","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s248017516","submission":"N=int(input())\nx=list(map(int,input().split()))\n\ncount=[0]*N\n\nfor i in range(N):\n  while x[i]%2==0:\n    x[i]\/=2\n    count[i]+=1\n    \nprint(min(count))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s151348591","submission":"N =int(input())\nList = list(map(int, input().split()))\nflag = True\nres = 0\nwhile flag:\n  for i in range(N):\n    if List[i] % 2 == 1:\n      flag = False\n      break\n    else:\n      List[i] = List[i]\/\/2\n  if flag:\n    res += 1\nprint(res)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s236661151","submission":"#!\/usr\/bin\/env python3\n# atcoder \n# T\u00fcrkler var m\u0131?\n# Herkese memn\u00fcn oldum\nimport sys\n#from heapq import heapify, heappush, heappop\n#from heapq import nlargest, nsmallest\n\niimr = lambda: map(int, sys.stdin.readline().rstrip().split())\nreadline = sys.stdin.readline\n# puorquoi le sys.stdin.buffer.readline() ne fonctionne plus sur atcoder?\n#sys.setrecursionlimit(10 ** 7)\n#INF = 1 << 30 # \u5927\u4f53 1e9\n\n\ndef debug(*x):\n    print(*x, file=sys.stderr)\n\n\n# s == self\nclass atcoder():\n    def __init__(s):\n        f = open(0)\n        s.N = int(f.readline())\n        s.A = list(map(int, f.readline().split()))\n\n    def \u00e7\u00f6zmek(s):\n        res = []\n        res.append(s.\u95a2\u6570(s.N, s.A))\n        print(*res)\t\n    \n    def \u95a2\u6570(self, n, a):\n        guusuu = True\n        cnt = 0\n        while(guusuu):\n            for i in range(n):\n                if(a[i] % 2 != 0):\n                    guusuu = False\n                    break;\n                else:\n                    a[i] \/= 2\n            if(guusuu): cnt += 1\n        return cnt \n\nif __name__ == \"__main__\":\n    ima = atcoder()\n    ima.\u00e7\u00f6zmek()\n","label":0}
{"problem_id":"p02612","problem":"We will buy a product for N yen (the currency of Japan) at a shop.\nIf we use only 1000-yen bills to pay the price, how much change will we receive?\nAssume we use the minimum number of bills required.","submission_id":"s747498206","submission":"n = int(input())\n\nm = 0\nfor i in range(12):\n    if n > 1000*i:\n        m = i\n        \nans = 1000*(m+1) - n\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s761423801","submission":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef main():\n    N, *A = map(int, read().split())\n\n    ans = 0\n    while True:\n        ok = True\n        for i in range(N):\n            if A[i] % 2 == 0:\n                A[i] \/\/= 2\n            else:\n                ok = False\n        if ok:\n            ans += 1\n        else:\n            break\n\n    print(ans)\n    return\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s430065203","submission":"N = int(input())\nA = list(map(int,input().split()))\nans = 10**9\nfor x in A:\n    if x % 2 == 1:\n        print(0)\n        exit()\n    c = 0\n    while x % 2 == 0:\n        x \/\/= 2\n        c += 1\n    ans = min(ans, c)\nprint(ans)","label":0}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s713170757","submission":"import math\nimport fractions\nfrom functools import reduce\n\ndef gcd(*numbers):\n    return reduce(fractions.gcd, numbers)\n\ndef gcd_list(numbers):\n    return reduce(fractions.gcd, numbers)\n\nN = int(input())\n\nList = list(map(int,input().split()))\n\na = List[0]\nL = [0 for i in range(N)]\nL[0] = a\nfor i in range(1,N):\n  L[i] = gcd(List[i],L[i-1])\n  \na = List[-1]\nR = [0 for i in range(N)]\nR[0] = a\nfor i in range(1,N):\n  R[i] = gcd(List[-i-1],R[i-1])\n\n\np = 0\nfor i in range(N):\n  if i == 0:\n    ans = R[N-2]\n  elif i == N-1:\n    ans = L[-2]\n  else:\n    a = L[i-1]\n    b = R[N-i-2]\n    ans = gcd(a,b)\n  p = max(p,ans)\n  \nprint(int(p))","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s560666165","submission":"n, k = map(int, input().split())\np = list(map(int, input().split()))\nmaxI = 0\nmaxT = 0\nt = 0\nfor i in range(n):\n    t += p[i]\n    if k <= i:\n        t -= p[i-k]\n    if maxT < t:\n        maxT = t\n        maxI = i\nans = 0\n\n\ndef calc(n):\n    return n*(n+1)\/2\/n\n    ans = 0\n    for i in range(1, n+1):\n        ans += i\/n\n    return ans\n\n\nfor i in range(maxI-k+1, maxI+1):\n    #print(i, p[i])\n    ans += calc(p[i])\n# print(p)\n#print(maxT, maxI)\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s129149575","submission":"#k = int(input())\n#s = input()\n#a, b = map(int, input().split())\n#s, t = map(str, input().split())\n#l = list(map(int, input().split()))\n#l = [list(map(int,input().split())) for i in range(n)]\n#a = [list(input()) for _ in range(n)]\n#a = [int(input()) for _ in range(n)]\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = 0\nwhile True:\n    for i in range(n):\n        if (a[i] % 2 != 0):\n            print(ans)\n            exit()\n    for i in range(n):\n        a[i] \/\/= 2\n    ans += 1\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s642429606","submission":"n=int(input())\na=list(map(int,input().split()))\nl=[0]*n\nfor i in range(n):\n  cnt=0\n  while a[i]%2==0:\n    a[i]\/=2\n    cnt+=1\n  l[i]+=cnt\nprint(min(l))","label":0}
{"problem_id":"p02834","problem":"We have a tree with N vertices. The i-th edge connects Vertex A_i and B_i bidirectionally.\nTakahashi is standing at Vertex u, and Aoki is standing at Vertex v.\nNow, they will play a game of tag as follows:\n\n\n1. If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Takahashi moves to a vertex of his choice that is adjacent to his current vertex.\n\n\n2. If Takahashi and Aoki are standing at the same vertex, the game ends. Otherwise, Aoki moves to a vertex of his choice that is adjacent to his current vertex.\n\n\n3. Go back to step 1.\n\n\nTakahashi performs his moves so that the game ends as late as possible, while Aoki performs his moves so that the game ends as early as possible.\nFind the number of moves Aoki will perform before the end of the game if both Takahashi and Aoki know each other's position and strategy.\nIt can be proved that the game is bound to end.","submission_id":"s722921917","submission":"import sys\nsys.setrecursionlimit(10 ** 9)\n\nn, u, v = map(int, input().split())\nu -= 1\nv -= 1\nab = [[] for _ in range(n)]\nfor _ in range(n - 1):\n    a, b = map(int, input().split())\n    ab[a - 1].append(b - 1)\n    ab[b - 1].append(a - 1)\n\ndef dfs1(pos, before_pos):\n    for next_pos in ab[pos]:\n        if next_pos == before_pos:\n            continue\n        if next_pos == u:\n            return True, [pos]\n        tf, root = dfs1(next_pos, pos)\n        if tf:\n            root.append(pos)\n            return True, root\n    return False, []\n    \nroot = dfs1(v, -1)[1]\nroot = root[::-1]\nroot.append(u)\nn = (len(root) + 1) \/\/ 2\npos = root[n]\nbefore_pos = root[n - 1]\n\nmax_len = n\n\ndef dfs2(pos, before_pos, cnt):\n    global max_len\n    cnt += 1\n    max_len = max(max_len, cnt)\n    if cnt < n - 1:\n        dfs2(root[cnt + 1], pos, cnt)\n    else:\n        for next_pos in ab[pos]:\n            if next_pos == before_pos:\n                continue\n            dfs2(next_pos, pos, cnt)\n\n\ndfs2(pos, before_pos, n - 1)\nans = max_len - 1\nans = max(ans, 0)\nprint(ans)\n","label":0}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s557595058","submission":"N, X = map(int, input().split())\ntable = [None] * (N + 1)\ntable[0] = (1, 1)\n\n\ndef check_X(x, p):\n    if x >= X:\n        print(p)\n        exit()\n\n\ndef dfs(n, x, p):\n    check_X(x, p)\n    if table[n] is None or x + table[n][0] > X:\n        # \u30d0\u30f3\n        new_x, new_p = x + 1, p\n\n        # L-1\u30d0\u30fc\u30ac\u30fc\n        new_x, new_p = dfs(n - 1, new_x, new_p)\n        check_X(new_x, new_p)\n\n        # \u30d1\u30c6\u30a3\n        new_x += 1\n        new_p += 1\n\n        # L-1\u30d0\u30fc\u30ac\u30fc\n        new_x, new_p = dfs(n - 1, new_x, new_p)\n\n        # \u30d0\u30f3\n        new_x += 1\n        check_X(new_x, new_p)\n\n        table[n] = (new_x - x, new_p - p)\n        return new_x, new_p\n    else:\n        dx, dp = table[n]\n        return x + dx, p + dp\n\n\ndfs(N, 0, 0)\n","label":0}
{"problem_id":"p02421","problem":"Taro and Hanako are playing card games. They have n cards each, and they compete n turns. At each turn Taro and Hanako respectively puts out a card.\n  The name of the animal consisting of alphabetical letters is written on each card, and the bigger one in lexicographical order becomes the winner of that turn. The winner obtains 3 points. In the case of a draw, they obtain 1 point each.","submission_id":"s274871642","submission":"import sys\n\n#fin = open(\"test.txt\", \"r\")\nfin = sys.stdin\n\nn = int(fin.readline())\n\ntaros_score = 0\nhanakos_score = 0\nwinner_points = 3\ndraw_points = 1\n\nfor i in range(n):\n\ts0, s1 = fin.readline().split()\n\n\tif s0 > s1:\n\t\ttaros_score += winner_points\n\telif s0 < s1:\n\t\thanakos_score += winner_points\n\telse:\n\t\ttaros_score += draw_points\n\t\thanakos_score += draw_points\n\nprint(taros_score, hanakos_score)","label":0}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s368069175","submission":"N,K = map(int,input().split())\nV = list(map(int,input().split()))\nimport heapq \nm = min(N,K)\nM = 0\nfor i in range(m+1):\n    for j in range(m-i+1):\n        v1 = V[:i]\n        v3 = V[N-j:]\n        v = v1+v3\n        heapq.heapify(v)\n        h = K - len(v)\n        while v  and h >0:\n            q = heapq.heappop(v)\n            h-=1\n            if q > 0:\n                heapq.heappush(v,q)\n                break\n        tmp = sum(v)\n        # print(v,v3)\n        M = max(M,tmp)\nprint(M)","label":0}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s890192473","submission":"n = input()\nn = [ c for c in n]\nif(n[-1]=='s'):\n    n.append('es')\nelif(n[-1]!='s'):\n    n.append('s')\nn=''.join(n)\nprint(n)\n\n\n","label":0}
{"problem_id":"p03456","problem":"AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.","submission_id":"s482257168","submission":"import math\nN = input().split()\ndef main():\n    sum = int(N[0] + N[1])\n\n    for i in range(1110):\n        if sum == i*i:\n            print(\"Yes\")\n            return\n    print(\"No\")\n    return\n\nmain()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s995221897","submission":"N = int(input())\nA = [int(n) for n in input().split()]\n\nans = 0\n\ndef func(array):\n    for i in range(len(array)):\n        if array[i]%2 != 0:\n            return False\n        else:\n            array[i] = array[i]\/\/2\n    return True\n\n\nwhile True:\n    if len(A) == A.count(0):\n        break\n    if func(A):\n        ans += 1\n    else:\n        break\n\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s019499854","submission":"n=int(input())\na=list(map(int,input().split()))\nb=[]\nfor i in range(n):\n    count=0\n    while a[i]%2==0:\n        a[i]=a[i]\/\/2\n        count+=1\n    b.append(count)\nprint(min(b))","label":0}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s485907492","submission":"\n[x1,y1,x2,y2] = list(map(int,input().split()))\n\nD = ((x1-x2)**2 + (y1-y2)**2)**(1\/2)\n\nx3 = x2 - (y2 - y1)\ny3 = y2 + (x2 - x1)\n\nx4 = x3 - (x2 - x1)\ny4 = y3 - (y2 - y1)\n\nprint(x3,y3,x4,y4)\n","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s110177297","submission":"# coding: utf-8\n\nnum = int(input())\ncount = 0\nstr = input().split()\ntable = [int(i) for i in str]\n#\u5168\u63a2\u7d22\nfor j in range(num): #\u30eb\u30fc\u30d71\n    for k in range(j+1, num): #\u30eb\u30fc\u30d72\n        for l in range(k+1, num): #\u30eb\u30fc\u30d73\n            if table[j] != table[k] and table[k] != table[l] and table[j] != table[l]:\n                len = table[j] + table[k] + table[l] #\u5468\u306e\u9577\u3055\n                ma = max(table[j], max(table[k], table[l])) #\u4e00\u756a\u9577\u3044\u8fba\n                rest = len - ma #\u6b8b\u308a\u306e2\u8fba\u306e\u5408\u8a08\n                if ma < rest: #\u6700\u5927\u306e\u8fba\u304c\u6b8b\u308a2\u8fba\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070\u4e09\u89d2\u5f62\u306f\u6210\u7acb\u3059\u308b\n                    count += 1\nprint(count)\n","label":0}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s004545479","submission":"s=input()\nsss=list(s)\nsss.reverse()\nif sss[0]==\"s\":\n    print(s+\"es\")\nelse:\n    print(s+\"s\")","label":0}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s156884776","submission":"N = int(input())\nS = [int(input()) for _ in range(N)]\nT = sum(S)\nL = [s for s in S if s%10!=0]\nm = min(L) if len(L)>0 else T\nprint(T if T%10!=0 else T-m)","label":0}
{"problem_id":"p03239","problem":"When Mr. X is away from home, he has decided to use his smartwatch to search the best route to go back home, to participate in ABC.\nYou, the smartwatch, has found N routes to his home.\nIf Mr. X uses the i-th of these routes, he will get home in time t_i at cost c_i.\nFind the smallest cost of a route that takes not longer than time T.","submission_id":"s762920864","submission":"N, T = input().split()\nall_list = []\nfor i in range(int(N)):\n    for j in input().split():\n        all_list.append(int(j))\n\nall_pattern_list = sorted(list(zip(*[iter(all_list)]*2)))\n\nfor pattern in all_pattern_list:\n    if pattern[1] <= int(T):\n        print(pattern[0])\n        break\n    elif pattern == all_pattern_list[-1]:\n        print('TLE')","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s758236710","submission":"from sys import stdin\n\nn = stdin.readline().rstrip()\na = [int(x) for x in stdin.readline().rstrip().split()]\n\nminc = 10**9\n\nfor b in a:\n    count = 0\n    while True:\n        if b % 2 == 1: break\n        b = b\/\/2\n        count = count + 1\n\n    minc = min([minc, count])\n\nprint(minc)","label":0}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s013437644","submission":"from math import sqrt, ceil\n\nn = int(input())\ndata = list(map(int, input().split()))\nballs = []\n\nmid = n\/\/2+1\ntable = [0] * n\nfor idx in range(mid-1, n):\n    table[idx] = data[idx]\n    if data[idx] == 1:\n        balls.append(idx+1)\nfor idx in range(mid-2, -1, -1):\n    score = 0\n    for idx2 in range(idx, n, idx+1):\n        score += table[idx2]\n    if score%2 != data[idx]:\n        table[idx] = 1\n        balls.append(idx+1)\n\nprint(len(balls))\nif len(balls) > 0:\n    print(' '.join(map(str, balls)))","label":0}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s398042485","submission":"n = input()\nS = input()\nk = int(input())\nfor s in S:\n  print(s if s == S[k-1] else '*', end='')","label":0}
{"problem_id":"p03591","problem":"Ringo is giving a present to Snuke.\nRingo has found out that Snuke loves yakiniku (a Japanese term meaning grilled meat. yaki: grilled, niku: meat). He supposes that Snuke likes grilled things starting with YAKI in Japanese, and does not like other things.\nYou are given a string S representing the Japanese name of Ringo's present to Snuke. Determine whether S starts with YAKI.","submission_id":"s532126100","submission":"S = input()\nif len(S) >= 4 and S[:4] == \"YAKI\":\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":0}
{"problem_id":"p03372","problem":"\"Teishi-zushi\", a Japanese restaurant, is a plain restaurant with only one round counter. The outer circumference of the counter is C meters. Customers cannot go inside the counter.\nNakahashi entered Teishi-zushi, and he was guided to the counter. Now, there are N pieces of sushi (vinegared rice with seafood and so on) on the counter. The distance measured clockwise from the point where Nakahashi is standing to the point where the i-th sushi is placed, is x_i meters. Also, the i-th sushi has a nutritive value of v_i kilocalories.\nNakahashi can freely walk around the circumference of the counter. When he reach a point where a sushi is placed, he can eat that sushi and take in its nutrition (naturally, the sushi disappears). However, while walking, he consumes 1 kilocalories per meter.\nWhenever he is satisfied, he can leave the restaurant from any place (he does not have to return to the initial place). On balance, at most how much nutrition can he take in before he leaves? That is, what is the maximum possible value of the total nutrition taken in minus the total energy consumed? Assume that there are no other customers, and no new sushi will be added to the counter. Also, since Nakahashi has plenty of nutrition in his body, assume that no matter how much he walks and consumes energy, he never dies from hunger.","submission_id":"s483567616","submission":"n,c = map(int,input().split())\nsushi = []\nfor _ in range(n):\n  sushi.append(list(map(int,input().split())))\ncan = []\n\nright1 = []\nright2 = []\ntmp = 0\nfor i in range(n):\n  s,v = sushi[i]\n  tmp += v\n  right1.append([tmp-s,s])\n  right2.append([tmp-2*s,s])\nleft1 = []\nleft2 = []\ntmp = 0\nfor i in range(n)[::-1]:\n  s,v = sushi[i]\n  tmp += v\n  left1.append([tmp-(c-s),c-s])\n  left2.append([tmp-2*(c-s),c-s])\nright1.sort()\nleft1.sort()\n#print(right1)\n#print(left1)\n\ncan.append(0)\ncan.append(right1[-1][0])\ncan.append(left1[-1][0])\n#print(can)\nfor i in range(n):\n  energy,s = right2[i]\n  while left1[-1][1] + s >= c:\n    left1.pop()\n    if left1 == []:\n      break\n  else:\n    can.append(energy + left1[-1][0])\n    #print(s,left1[-1][1],left1)\n    continue\n  break\n#print(can)\nfor i in range(n):\n  energy,s = left2[i]\n  while right1[-1][1] + s >= c:\n    right1.pop()\n    if right1 == []:\n      break\n  else:\n    can.append(energy + right1[-1][0])\n    #print(s,right1[-1][1],right1)\n    continue\n  break\nprint(max(can))\n#print(can)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s607013656","submission":"n = int(input())\na = list(map(int, input().split()))\nb = []\nfor i in a:\n    c = 0\n    while i % 2 == 0:\n        c += 1\n        i \/= 2\n    b.append(c)\nprint(min(b))","label":0}
{"problem_id":"p04046","problem":"We have a large square grid with H rows and W columns.\nIroha is now standing in the top-left cell.\nShe will repeat going right or down to the adjacent cell, until she reaches the bottom-right cell.\nHowever, she cannot enter the cells in the intersection of the bottom A rows and the leftmost B columns. (That is, there are A\u00d7B forbidden cells.) There is no restriction on entering the other cells.\nFind the number of ways she can travel to the bottom-right cell.\nSince this number can be extremely large, print the number modulo 10^9+7.","submission_id":"s914440244","submission":"H,W,A,B = map(int, input().split())\nMOD = 10 ** 9 + 7\n\nN = H+W+1\n\ndef power(base, num):\n    if num == 0:\n        return 1\n    elif num % 2==0:\n        return power(base, num\/\/2) **2 % MOD\n    elif num==1:\n        return base % MOD\n    else:\n        return power(base, num\/\/2) **2 * base % MOD\n\nfact = [0 for i in range(N)]\ninv_fact = [0 for i in range(N)]\n\nfact[0] = 1\nfor i in range(1, N):\n    fact[i] = fact[i-1] * i % MOD\n    \ninv_fact[H+W] = power(fact[H+W], MOD-2)\nfor i in range(1, N):\n    inv_fact[N-1-i] = inv_fact[N-i] * (N-i) % MOD\n\n    \ndef comb(x,y):\n    return (fact[x] * inv_fact[y])%MOD * inv_fact[x-y] % MOD\n\nans = 0\n\nfor i in range(1, W-B+1):\n    ans += comb(H-A+B-2+i, H-A-1) * comb(A-1+W-B-i, A-1) % MOD\n    ans %= MOD\nprint(ans%MOD)\n","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s291375065","submission":"import numpy as np\n \nn, a = map(int, input().split())\nx = np.array(list(map(int, input().split())))\n \ndp = {0:1}\nfor y in x-a:\n    for k, v in dp.copy().items():\n        dp[y+k] = dp.get(y+k, 0) + v \nprint(dp[0]-1)\n","label":0}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s073296920","submission":"x,y=map(int,input().split())\n\nans=abs(x)-abs(y)\n#print(ans)\nif ans==0:\n    if x==y:\n        print(ans)\n    else:\n        print(1)\nelif ans<0:\n   # print(\"SDFGH\")\n    if x<0 and y<0 :\n        print(abs(ans)+2)\n    elif 0<=x and 0<=y:\n        print(abs(ans))\n    else:\n        print(abs(ans)+1)\nelse:\n    if x<=0 and y<=0:\n        print(abs(ans))\n    elif 0<x and 0<y:\n        print(abs(ans)+2)\n    else: \n        \n        print(abs(ans)+1)\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s942428179","submission":"num = int(input())\nvals = list(input().split())\n\nivals = []\nfor i in range(num):\n  ival = int(vals[i])\n  ivals.append(ival)\n\ncount = 0\ncheck_flag=0\n\ndef is_odd(n):\n    \"\"\" \u5947\u6570\u5224\u5b9a\u95a2\u6570 \"\"\"\n    return (n%2) == 1\n\nwhile check_flag==0:\n  for i in range(num):\n    if (ivals[i])%2 != 0:\n      check_flag=1\n      break\n    else:\n      ivals[i]=ivals[i]\/2\n  \n  if check_flag==0:\n    count+=1\n\nprint(count)","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s831988155","submission":"import sys,heapq\nfrom collections import deque,defaultdict\nprintn = lambda x: sys.stdout.write(x)\ninn = lambda : int(input())\ninl   = lambda: list(map(int, input().split()))\ninm   = lambda:      map(int, input().split())\nDBG = True  and False\nR = 10**9 + 7\ndef ddprint(x):\n  if DBG:\n    print(x)\n\nn,m = inm()\ns = inl()\nt = inl()\ndp = [ [0] * (m+1) for i in range(n) ]\ndp[0][0] = 1 if s[0]==t[0] else 0\nfor i in range(1,n):\n    dp[i][0] = dp[i-1][0] + (1 if s[i]==t[0] else 0)\nfor j in range(1,m):\n    dp[0][j] = dp[0][j-1] + (1 if s[0]==t[j] else 0)\n\nsh = defaultdict(list)\nfor i in range(1,n):\n    sh[s[i]].append(i)\n\nfor j in range(1,m):\n    x = 0\n    acc = [0] * (n+1)\n    for z in sh[t[j]]:  # s[z]==t[j]\n        x = (x+dp[z-1][j-1]+1)%R  # z>0\n        acc[z] = x\n    for i in range(1,n):\n        acc[i] = (acc[i-1] if acc[i]==0 else acc[i])\n\n    for i in range(1,n):\n        x = dp[i][j-1]\n        #for z in sh[t[j]]:  # s[z]==t[j]\n        #  if z<=i:\n        #    x = (x+dp[z-1][j-1]+1)%R  # z>0\n        x += acc[i]\n        if t[j]==s[0]:\n            x += 1\n        dp[i][j] = x%R\n\nif DBG:\n    for i in range(n):\n        print(dp[i])\nprint((dp[n-1][m-1]+1)%R)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s287298705","submission":"N = int(input())\nA = list(map(int,input().split()))\n \ncnt = 0\nwhile True:\n  check = sum([n % 2 for n in A])\n  if check == 0:\n    A = [n\/2 for n in A]\n    cnt += 1\n  else:\n    break\n    \nprint(cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s092191086","submission":"def irritation(n):\n  ans = 0\n  while n % 2==0:\n    n \/= 2\n    ans += 1\n  return ans\n\nn = int(input())\na = map(int, input().split())\nans = min(map(irritation, a))\n\nprint(ans)","label":0}
{"problem_id":"p02618","problem":"AtCoder currently hosts three types of contests: ABC, ARC, and AGC. As the number of users has grown, in order to meet the needs of more users, AtCoder has decided to increase the number of contests to 26 types, from AAC to AZC. For convenience, we number these 26 types as type 1 through type 26. AtCoder wants to schedule contests for D days so that user satisfaction is as high as possible. For every day, AtCoder will hold exactly one contest, and each contest will end on that day. The satisfaction is calculated as follows.\n\nThe satisfaction at the beginning of day 1 is 0. Satisfaction can be negative.\nHolding contests increases satisfaction. The amount of increase will vary depending on a variety of factors. Specifically, we know in advance that holding a contest of type i on day d will increase the satisfaction by s_{d,i}.\nIf a particular type of contest is not held for a while, the satisfaction decreases. Each contest type i has an integer c_i, and at the end of each day d=1,2,...,D, the satisfaction decreases as follows. Let \\mathrm{last}(d,i) be the last day before day d (including d) on which a contest of type i was held. If contests of type i have never been held yet, we define \\mathrm{last}(d,i)=0. At the end of day d, the satisfaction decreases by \\sum _{i=1}^{26}c_i \\times (d-\\mathrm{last}(d,i)).\n\nPlease schedule contests on behalf of AtCoder.\nIf the satisfaction at the end of day D is S, you will get a score of \\max(10^6 + S, 0).\nThere are 50 test cases, and the score of a submission is the total scores for each test case.\nYou can make submissions multiple times, and the highest score among your submissions will be your score.","submission_id":"s672246388","submission":"# coding: utf-8\n# Your code here!\n\nD = int(input())\n# with open(\"sample1.in\") as f:\n\n#c = [0 for i in range(26)]\ns = [[0 for j in range(27)] for i in range(D)]\nc = list(map(int, input().split(\" \")))\nresult=[]\n# for i in range(26):\n#    c[i] = int(input())\nfor i in range(D):\n    a = list(map(int, input().split(\" \")))\n    for j, k in enumerate(a):\n        #print(i, j, k)\n        s[i][j] = int(k)\n    result.append(a.index(max(a))+1)\n    #print(a.index(max(a)))\n\nfor i in range(D):\n    # print(s.index(max(s[i])))\n    print(result[i])\n\n","label":0}
{"problem_id":"p02381","problem":"You have final scores of an examination for n students. Calculate standard deviation of the scores s1, s2 ... sn.","submission_id":"s813987752","submission":"while input()!='0':\n s=list(map(int,input().split()))\n n=len(s)\n a=sum(s)\/n\n print((sum([x*x for x in s])\/n-a*a)**.5)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s167110352","submission":"\ndef resolve():\n    import sys\n    input = sys.stdin.readline\n    # row = [int(x) for x in input().rstrip().split(\" \")]\n    # n = int(input().rstrip())\n    n = int(input().rstrip())\n    a_list = [int(x) for x in input().rstrip().split(\" \")]\n\n    def get_num(num, max_count):\n        count = 0\n        while num % 2 == 0 and count < max_count:\n            num = num \/\/ 2\n            count += 1\n        return count\n\n    first = True\n    ans = float('inf')\n    for a in a_list:\n        count = get_num(a, ans)\n        if ans > count:\n            ans = count\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s992395863","submission":"n = int(input())\na = map(int, input().split())\n\nans = 0\nisEven = True\n\nwhile isEven:\n  list_tmp = []\n  for an in a:\n    if an % 2 ==0:\n      list_tmp.append(an \/ 2)\n    else:\n      isEven = False\n      break;\n  a = list_tmp\n  ans += 1\n\nprint(ans - 1)\n","label":0}
{"problem_id":"p03612","problem":"You are given a permutation p_1,p_2,...,p_N consisting of 1,2,..,N.\nYou can perform the following operation any number of times (possibly zero):\nOperation: Swap two adjacent elements in the permutation.\nYou want to have p_i \u2260 i for all 1\u2264i\u2264N.\nFind the minimum required number of operations to achieve this.","submission_id":"s108764043","submission":"N = int(input())\nA = list(map(int, input().split()))\ncnt = 0\nfor i, a in enumerate(A, 1):\n  if a == i:\n    if i != len(A):\n      x = A[i - 1]\n      y = A[i]\n      A[i - 1] = y\n      A[i] = x    \n      cnt += 1\n    else:\n      x = A[i - 2]\n      y = A[i - 1]\n      A[i - 2] = y\n      A[i - 1] = x    \n      cnt += 1\nprint(cnt)","label":0}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s935233382","submission":"N,M=map(int,input().split())\n\ndef factorization(n):#\u6b21\u6570\u3060\u3051\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr.append(cnt)\n\n    if temp!=1:\n        arr.append(1)\n\n    if arr==[]:\n        arr.append(0)\n\n    return arr\n     \np=factorization(M)#\u7d20\u56e0\u6570\u5206\u89e3\u3057\u3066\u6b21\u6570\u3092\u8abf\u3079\u308b\n\n    \ndef cmb(n, r, mod):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return (fact[n] * factinv[r] * factinv[n-r])%mod\n\nmod=10**9 + 7\nfact=[1,1]\nfactinv=[1,1]\ninv=[0,1]\n \nN2=N+max(p)    \n\nfor i in range(2, N2 + 1):\n    fact.append((fact[-1] * i) % mod)\n    inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)\n    factinv.append((factinv[-1] * inv[-1]) % mod)\n    \n\n        \nans=1\nfor i in range(len(p)):\n    ans*=cmb(p[i]+N-1,p[i],mod)\n    ans%=mod\n\nprint(ans)\n\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s015563170","submission":"n = int(input())\na = list(map(int, input().split()))\nb = [bin(i)[2:] for i in a]\nc = [0] * n\nfor i,v in enumerate(b):\n  for j in v[::-1]:\n    if j == '0':\n      c[i] += 1\n    else:\n      break\nprint(min(c))","label":0}
{"problem_id":"p02988","problem":"We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.","submission_id":"s683604759","submission":"n = int(input())\np = list(map(int, input().split()))\ncn = 0\nfor i in range(n - 2):\n    if (p[i] < p[i+1] and p[i+1] < p[i+2]) or (p[i] > p[i+1] and p[i+1] > p[i+2]):\n        cn = cn + 1\n        \nprint(cn)","label":0}
{"problem_id":"p03360","problem":"There are three positive integers A, B and C written on a blackboard. E869120 performs the following operation K times:\n\nChoose one integer written on the blackboard and let the chosen integer be n. Replace the chosen integer with 2n.\n\nWhat is the largest possible sum of the integers written on the blackboard after K operations?","submission_id":"s644175669","submission":"a,b,c = map(int,input().split())\nk = int(input())\nans = sum([a,b,c])-max(a,b,c)\nans += max(a,b,c) * (2**k)\nprint(ans)","label":0}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s945663184","submission":"H,W = list(map(int,input().split()))\nif H == 1 or W == 1:\n  print(1)\n  exit()\nHE = H\/\/2\nHO = H - HE\nWE = W\/\/2\nWO = W - WE\nprint(HO*WO+HE*WE)","label":0}
{"problem_id":"p03303","problem":"You are given a string S consisting of lowercase English letters.\nWe will write down this string, starting a new line after every w letters. Print the string obtained by concatenating the letters at the beginnings of these lines from top to bottom.","submission_id":"s994821091","submission":"s = input()\nmod = int(input())\nfor i in range(len(s)):\n    if i%mod==0: print(s[i],end=\"\")\nprint()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s743148985","submission":"N=int(input())\na=list(map(int,input().split()))\ns=[]\n\ndef count(k):\n  p=0\n  while k % 2**p==0:\n    p+=1\n  return p-1\n\t\nfor i in range(N):\n  s.append(count(a[i]))\n\nprint(min(s))","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s679305739","submission":"N,A=map(int,input().split())\nx=list(map(int,input().split()))\ndp=[[[0]*(2501) for i in range(N+1)] for k in range(N+1)]\ndp[0][0][0]=1\nfor j in range(N):\n  for k in range(N):\n    for i in range(2501):\n      if dp[j][k][i]==0:\n        continue\n      dp[j+1][k][i]+=dp[j][k][i]\n      dp[j+1][k+1][i+x[j]]+=dp[j][k][i]\nans=0\nfor j in range(N+1):\n    ans+=dp[N][j][j*A]\nprint(ans-1)","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s313485489","submission":"from itertools import combinations as comb\nN = int(input())\nL = list(map(int,input().split()))\ncount = 0\nfor a, b, c in comb(L, 3):\n  if a != b and b != c and c != a and a + b > c and b + c > a and c + a > b:\n    count += 1\nprint(count)","label":0}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s748453384","submission":"import math\nimport sys\nsys.setrecursionlimit(1000000)\n\nN = int(input())\nA = [int(i) for i in input().split()]\n\nmemo = {}\ndef sub_max(n, m):\n    if((n, m) in memo):\n        return memo[(n, m)]\n    \n    if(m == 1 and n >= 1):\n        memo[(n, m)] = max(A[-n:])\n        return memo[(n, m)]\n\n    if(m > math.ceil(n\/2)):\n        memo[(n, m)] = -float('inf')\n        return -float('inf')\n    \n    res = -float('inf')\n    for i in range(3):\n        res = max(res, A[-n + i] + sub_max(n - i - 2, m - 1))\n    memo[(n, m)] = res\n    return res\n\nprint(sub_max(N, N\/\/2))\n# print(memo)","label":0}
{"problem_id":"p03213","problem":"You are given an integer N. Among the divisors of N! (= 1 \\times 2 \\times ... \\times N), how many Shichi-Go numbers (literally \"Seven-Five numbers\") are there?\nHere, a Shichi-Go number is a positive integer that has exactly 75 divisors.","submission_id":"s550214464","submission":"\"\"\"\n\u5b9f\u969b\u306bN!\u3092\u8a08\u7b97\u3059\u308b\u308f\u3051\u306b\u306f\u884c\u304b\u306a\u3044\u3002\nmemo[n] => n\u306e\u7d20\u56e0\u6570\u5206\u89e3\u306e\u7d50\u679c\n\nsum(memo[N])\u306e\u7d20\u56e0\u6570\u5206\u89e3\u306e\u7d50\u679c\u304b\u3089\n\"\"\"\nfrom collections import Counter\nN = int(input())\nmemo = [None]*(N+1)\n\nfor i in range(2,N+1):\n    tmp = []\n    n = i\n    d = 2\n    while n!=1:\n        while n%d==0:\n            tmp.append(d)\n            n\/\/=d\n        d += 1\n    memo[i] = Counter(tmp)\n\ncount = Counter([])\nfor i in range(2,N+1):\n    count += memo[i]\n\nans = 0\n#\u6570\u304c74\u500b\u4ee5\u4e0a\u3042\u308b\u7d20\u56e0\u6570\u306e\u6570\nc74 = 0\n#\u6570\u304c24\u500b\u4ee5\u4e0a\u3042\u308b\u7d20\u56e0\u6570\u306e\u6570\nc24 = 0\n#\u6570\u304c14\u500b\u4ee5\u4e0a\u3042\u308b\u7d20\u56e0\u6570\u306e\u6570\nc14 = 0\n#\u6570\u304c4\u500b\u4ee5\u4e0a\u3042\u308b\u7d20\u56e0\u6570\u306e\u6570\nc4 = 0\n#\u6570\u304c2\u500b\u4ee5\u4e0a\u3042\u308b\u7d20\u56e0\u6570\u306e\u6570\nc2 = 0\n\nfor v in count.values():\n    if v >= 2:\n        c2 += 1\n    if v >= 4:\n        c4 += 1\n    if v >= 14:\n        c14 += 1\n    if v >= 24:\n        c24 += 1\n    if v >= 74:\n        c74 += 1\n\nans += c74\nans += c24 * (c2-1)\nans += (c4*(c4-1))\/\/2 * (c2-2)\nans += c14 * (c4-1)\n\n\n\"\"\"\n#1\u3064\u306e\u7d20\u56e0\u6570\u306775\u6570\u3092\u5f62\u6210\u3067\u304d\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u307f\u3064\u3051\u308b\nfor k,v in count.items():\n    if v >= 74:\n        ans += 1\n    \n#2\u3064\u306e\u7d20\u56e0\u6570(a,b)\u30673,25\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u300175\u6570\u3092\u5f62\u6210\u3067\u304d\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u898b\u3064\u3051\u308b\nfor k,v in count.items():\n    if v >= 24:\n        for k2,v2 in count.items():\n            if k2 != k and v2 >= 2:\n                ans += 1\n\n#2\u3064\u306e\u7d20\u56e0\u6570(a,b)\u30675,15\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u300175\u6570\u3092\u5f62\u6210\u3067\u304d\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u898b\u3064\u3051\u308b\nfor k,v in count.items():\n    if v >= 14:\n        for k2,v2 in count.items():\n            if k2 != k and v2 >= 4:\n                ans += 1\n\n#2\u3064\u306e\u7d20\u56e0\u6570(a,b)\u30673,25\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u300175\u6570\u3092\u5f62\u6210\u3067\u304d\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u898b\u3064\u3051\u308b\nfor k,v in count.items():\n    if v >= 4:\n        for k2,v2 in count.items():\n            if k2 != k and v2 >= 4:\n                for k3,v3 in count.items():\n                    if k3 != k and k3!=k2 and v3 >= 2:\n                        ans += 1\n\"\"\"\n\nprint(ans)\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s609529451","submission":"N = int(input())\nA = list(map(int, input().split()))\n\nans = 100000000000000\nfor a in A:\n    ans = min(ans, (a ^ (a-1)).bit_length())\nprint(ans-1)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s623413633","submission":"n=int(input())\na=list(map(int,input().split()))\nans=float('inf')\nfor i in range(n):\n  res=0\n  while a[i]%2==0:\n    a[i]\/=2\n    res+=1\n  ans=min(ans,res)\nprint(ans)","label":0}
{"problem_id":"p03456","problem":"AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.","submission_id":"s810836931","submission":"a, b = map(int, input().split())\n\nc = int(str(a)+str(b))\n\nl = []\n\nfor i in range(10, 100100):\n    if (i ** .5).is_integer():\n        l.append(i)\n\nfor i in l:\n    if c == i:\n        print('Yes')\n        exit()\n\nprint('No')","label":0}
{"problem_id":"p03564","problem":"Square1001 has seen an electric bulletin board displaying the integer 1.\nHe can perform the following operations A and B to change this value:\n\nOperation A: The displayed value is doubled.\nOperation B: The displayed value increases by K.\n\nSquare1001 needs to perform these operations N times in total.\nFind the minimum possible value displayed in the board after N operations.","submission_id":"s729635901","submission":"# https:\/\/atcoder.jp\/contests\/abc076\/tasks\/abc076_b\n\nN = int(input())\nK = int(input())\n\nmin_ans = -1\n\ndef dfs(n, count):\n    global min_ans\n\n    if count == N:\n        if n < min_ans or min_ans < 0:\n            min_ans = n\n        return\n\n    dfs(n * 2, count + 1)\n    dfs(n + K, count + 1)\n\ndfs(1, 0)\nprint(min_ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s862715443","submission":"n = int(input())\nla = list(map(int, input().split()))\nans = 10**10\nfor i in la:\n  tmp = 0\n  while i%2 == 0:\n    i = i\/2\n    tmp += 1\n  ans = min(ans, tmp)\nprint(ans)","label":0}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s783785860","submission":"N,M = map(int,input().split())\nif N ==1 and M ==1:\n    print(0)\nelif N ==1 and M != 1:\n    print(int(M*(M-1)\/2))\nelif N != 1 and M ==1:\n    print(int(N*(N-1)\/2))\nelse:    \n    a = N*(N-1)\n    b = M*(M-1)\n    print(int((a+b)\/2))","label":0}
{"problem_id":"p02851","problem":"Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N, and a positive integer K.\nFind the number of non-empty contiguous subsequences in A such that the remainder when dividing the sum of its elements by K is equal to the number of its elements. We consider two subsequences different if they are taken from different positions, even if they are equal sequences.","submission_id":"s557115371","submission":"import sys\nsys.setrecursionlimit(2147483647)\nINF=float(\"inf\")\nMOD=10**9+7\ninput=lambda :sys.stdin.readline().rstrip()\nfrom collections import defaultdict\ndef resolve():\n    n,k=map(int,input().split())\n    A=list(map(int,input().split()))\n    S=[0]*(n+1)\n    for i in range(n):\n        S[i+1]=S[i]+A[i]\n\n    for i in range(n+1):\n        S[i]-=i\n        S[i]%=k\n\n    C=defaultdict(list)\n    for i in range(n+1):\n        C[S[i]].append(i)\n\n    ans=0\n    C=list(C.values())\n    for d in range(len(C)):\n        n=len(C[d])\n        if(n<=1): continue\n        r=0\n        for l in range(n):\n            while(r+1<n and C[d][r+1]-C[d][l]<k):\n                r+=1\n            ans+=r-l\n            if(r==l): r+=1\n    print(ans)\nresolve()","label":0}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s180422158","submission":"#ABC 175 C\nx, k, d = map(int, input().split())\n\nx = abs(x)\nsyou = x \/\/ d\namari = x % d\n\nif k <= syou:\n    ans = x - (d * k)\n\nelse:\n    if (k - syou) % 2 == 0: #\u6b8b\u308a\u306e\u52d5\u3051\u308b\u6570\u304c\u5076\u6570\n        ans = amari\n\n    else:#\u6b8b\u308a\u306e\u52d5\u3051\u308b\u6570\u304c\u5947\u6570\n        ans = abs(amari - d)\n\nprint(ans)","label":0}
{"problem_id":"p02603","problem":"To become a millionaire, M-kun has decided to make money by trading in the next N days. Currently, he has 1000 yen and no stocks - only one kind of stock is issued in the country where he lives.\nHe is famous across the country for his ability to foresee the future. He already knows that the price of one stock in the next N days will be as follows:\n\nA_1 yen on the 1-st day, A_2 yen on the 2-nd day, ..., A_N yen on the N-th day.\n\nIn the i-th day, M-kun can make the following trade any number of times (possibly zero), within the amount of money and stocks that he has at the time.\n\nBuy stock: Pay A_i yen and receive one stock.\nSell stock: Sell one stock for A_i yen.\n\nWhat is the maximum possible amount of money that M-kun can have in the end by trading optimally?","submission_id":"s945423998","submission":"n = int(input())\narr = list(map(int,input().split()))\ncache = 1000\nnumStock = 0\nfor i in range(1,n):\n    if arr[i]>arr[i-1]:\n        available = cache\/\/arr[i-1]\n        cache -= arr[i-1]*available\n        numStock += available\n    else:\n        cache += arr[i-1]*numStock\n        numStock = 0\n\nif numStock>0:\n    cache += arr[-1]*numStock\n\nprint(cache)\n","label":0}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s506965723","submission":"import sys\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nread = sys.stdin.buffer.read\nsys.setrecursionlimit(10 ** 7)\n\nH, W = map(int, readline().split())\n\nimport math\n\nif H == 1 or W == 1:\n    print(1)\n    exit()\n\ntotal = H * W\nans = (total + 2 - 1) \/\/ 2\nprint(ans)","label":0}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s209540313","submission":"s=input()\nr=input()\nc=0\nfor i in range(3):\n    if(s[i]==r[i]):\n        c=c+1\nprint(c)","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s045659534","submission":"#!\/usr\/bin\/env python3\nimport fractions\n\ndef lcm(x, y):\n    return (x * y) \/\/ fractions.gcd(x, y)\n\nN, M = map(int, input().split())\nS = input()\nT = input()\nif S[0] != T[0]:\n    print(-1)\n    exit()\n\nl = lcm(N, M)\n\nMoji = {}\nMoji[0] = S[0]\n\nfor i in range(1, N):\n    index = i * (l\/\/N) + 1\n    Moji[index-1] = S[i]\n\nfor i in range(1, M):\n    index = i * (l\/\/M) + 1\n    if index-1 in Moji and Moji[index-1] != T[i]:\n        print(-1)\n        exit()\n\nprint(l)\n","label":0}
{"problem_id":"p02757","problem":"Takahashi has a string S of length N consisting of digits from 0 through 9.\nHe loves the prime number P. He wants to know how many non-empty (contiguous) substrings of S - there are N \\times (N + 1) \/ 2 of them - are divisible by P when regarded as integers written in base ten.\nHere substrings starting with a 0 also count, and substrings originated from different positions in S are distinguished, even if they are equal as strings or integers.\nCompute this count to help Takahashi.","submission_id":"s721297028","submission":"import sys\n#input = sys.stdin.buffer.readline\nfrom collections import Counter\n\ndef main():\n    N,P = map(int,input().split())\n    S = input()\n    \n    if 10%P == 0:\n        ans = 0\n        for i,st in enumerate(S[::-1]):\n            num = int(st)\n            if num % P == 0:\n                ans += N-i\n    else:\n        ans,base = 0,1\n        MOD_list = [0]\n        for st in S[::-1]:\n            num = int(st)\n            MOD = (MOD_list[-1]+num*base)%P\n            MOD_list.append(MOD)\n            base *= 10\n            base %= P\n        c = Counter(MOD_list)\n        for v in c.values():\n            ans += (v*(v-1))\/\/2\n        \n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s534560087","submission":"N = int(input())\nA = list(map(int, input().split()))\nr = 0\nwhile True:\n    f = False\n    for i, a in enumerate(A):\n        if a%2 != 0:\n            f = True\n        A[i] = a\/\/2\n    if f: break\n    r += 1\nprint(r)\n","label":0}
{"problem_id":"p02935","problem":"You have a pot and N ingredients. Each ingredient has a real number parameter called value, and the value of the i-th ingredient (1 \\leq i \\leq N) is v_i.\nWhen you put two ingredients in the pot, they will vanish and result in the formation of a new ingredient. The value of the new ingredient will be (x + y) \/ 2 where x and y are the values of the ingredients consumed, and you can put this ingredient again in the pot.\nAfter you compose ingredients in this way N-1 times, you will end up with one ingredient. Find the maximum possible value of this ingredient.","submission_id":"s149481018","submission":"N = int(input())\nV = sorted(list(map(int, input().split())))[::-1]\nans = 0\ndeno = 2\nfor v in V:\n    ans += v \/ deno\n    deno *= 2\nans += V[-1]\/deno*2\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s241640465","submission":"# coding: utf-8\n\nN = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\nimp = 0\n\nwhile True:\n    for i in range(0, N):\n        if int(A[i]) % 2 == 1:\n            imp = 1\n            break\n\n    if imp == 1:\n        break\n\n    for i in range(0, N):\n        A[i] = int(A[i] \/ 2)\n    count += 1\n\nprint(count)","label":0}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s359656753","submission":"import math\nfrom functools import reduce\n \ndef gcd(ns):\n    return reduce(math.gcd, ns)\n \nN, X = map(int, input().split())\nL = list(map(int, input().split()))\n \ndiff = [abs(x - X) for x in L]\n \nif len(diff) == 1:\n    print(diff[0])\nelse:\n    print(gcd(diff))","label":0}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s153544657","submission":"Row = int(input())\nList = []\nfor i in range (Row):\n  List.append(int(input()))\nList.sort(reverse = True)\nmid = 0\nfor i in range(Row):\n  mid += List[i]\nsumList = [mid]* (Row+1)\nfor i in range(Row):\n  sumList[i] = sumList[i]-List[i]\n  if sumList[i] % 10 == 0:\n    sumList[i]=0\nif sumList[Row] % 10 == 0:\n  sumList[Row] = 0\nres = max(sumList)\nprint(res)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s456488473","submission":"def divide(iterable):\n\treturn list(map((lambda x : x \/\/ 2),iterable))\n    \nN = int(input())\nnums = list(map(int, input().split()))\ncount = 0\nflag = 0\nwhile 1:\n  if flag == 1:\n    break\n  for num in nums:\n    if num % 2 == 1:\n      flag = 1\n      break\n  else:\n    count += 1\n    nums = divide(nums)\nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s636504376","submission":"n=int(input())\nl=list(map(int,input().split()))\nd=[]\nfor i in range(n):\n    c=0\n    x=l[i]\n    while(x%2==0):\n        c+=1\n        x=x\/\/2\n    d.append(c)\nm=min(d)\nprint(max(0,m))\n","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s405539032","submission":"def gcd(a, b):\n    big = max(a, b)\n    small = min(a, b)\n    \n    r = small\n    while r != 0:\n        r = big % small\n        big = small\n        small = r\n    \n    return big\n    \ndef lcm(a, b):\n    gcd_num = gcd(a, b)\n    return (a \/\/ gcd_num) * (b \/\/ gcd_num) * gcd_num\n\ndef main():\n    n, m = map(int, input().split())\n    s = input()\n    t = input()\n    \n    a = n \/\/ gcd(n, m)\n    b = m \/\/ gcd(n, m)\n    lcm_num = lcm(n, m)\n    \n    ans = lcm_num\n    for i in range(n \/\/ a):\n        if s[a * i] != t[b * i]:\n            ans = -1\n            break\n    \n    print(ans)\n    \nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s842532264","submission":"import numpy as np\n\nxx, yy = map(int, input().split())\n\nB = [(0, 0), (1, 0), (0, 1), (1, 1)]\n\nans = float(\"inf\")\nfor i, j in B:\n    x, y = xx, yy\n    # print(f\"i, j, {i}{j}\")\n    if i:\n        x *= -1\n    if j:\n        y *= -1\n    if y >= x:\n        ans = min(ans, y-x + i + j)\n    # print(ans)\n\nprint(ans)","label":0}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s006573944","submission":"n= int(input())\nif n == 1:\n  print(\"Hello World\")\n  exit()\nelse:\n  a = int(input())\n  b = int(input())\n  print(a+b)","label":0}
{"problem_id":"p03086","problem":"You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\nHere, a ACGT string is a string that contains no characters other than A, C, G and T.","submission_id":"s616360811","submission":"S = str(input())\nN = len(S)\nA = set([\"A\",\"C\",\"T\",\"G\"])\nFlag = True\nans = 0\nret = 0\nfor i in range(N):\n  if S[i] in A:\n    if Flag:\n      ans += 1\n    else:\n      ans = 0\n  else:\n    ans = 0\n  ret = max(ret,ans)\nprint(ret)    ","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s295550020","submission":"n = int(input())\nitems = list(map(int, input().split()))\ncount = 0\nwhile True:\n    should_break = False\n    for i in range(n):\n        if items[i] % 2 == 0:\n            items[i] = items[i] \/ 2\n            continue\n        else:\n            should_break = True\n            break\n    if should_break:\n        break\n    count += 1\nprint(count)","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s715640513","submission":"import sys\nreadline = sys.stdin.readline\n\ndef main():\n    N, A = map(int, readline().rstrip().split())\n    X = list(map(int, readline().rstrip().split()))\n    lim = max(X) * N\n    X = [x-A for x in X]\n    dp = [[0]*(2*lim) for _ in range(N+1)]\n    dp[0][lim] = 1\n    for i in range(1, N+1):\n        x = X[i-1]\n        for j in range(2*lim):\n            if 0 <= j - x < 2 * lim:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-x]\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    print(dp[N][lim] - 1)\n\n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s384339524","submission":"import fractions\nn, m = map(int, input().split())\ns = input()\nt = input()\ng = fractions.gcd(n, m)\nr = (m*n)\/\/g\nn, m = n\/\/g, m\/\/g\nfor i in range(g):\n    if s[i*n] != t[i*m]: r = False\nif r: print(r)\nelse: print(-1)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s169713494","submission":"n = int(input())\na = list(map(int, input().split()))\ncnt=[0]*n\nfor i in range(n):\n\twhile a[i]%2==0:\n\t\ta[i]\/\/=2\n\t\tcnt[i]+=1\nprint(min(cnt))","label":0}
{"problem_id":"p04000","problem":"We have a grid with H rows and W columns. At first, all cells were painted white.\nSnuke painted N of these cells. The i-th ( 1 \\leq i \\leq N ) cell he painted is the cell at the a_i-th row and b_i-th column.\nCompute the following:\n\nFor each integer j ( 0 \\leq j \\leq 9 ), how many subrectangles of size 3\u00d73 of the grid contains exactly j black cells, after Snuke painted N cells?","submission_id":"s047388290","submission":"H, W, N = list(map(int, input().split()))\nAB = [list(map(int, input().split())) for _ in range(N)]\n\nfrom itertools import product\n\nS = [set() for _ in range(10)]\n# S[i]: set(\u9ed2\u3044\u30de\u30b9\u3092i\u500b\u3053\u542b\u30803*3\u30de\u30b9\u306e\u4e2d\u5fc3\u30bb\u30eb)\n\nfor a,b in AB:\n  for x,y in product([-1,0,1], repeat=2):\n    X = a+x-1\n    Y = b+y-1\n    if X<=0 or H-1<=X or Y<=0 or W-1<=Y:\n      continue\n    for i in range(10):\n      if (X, Y) in S[i]:\n        S[i].remove((X, Y))\n        S[i+1].add((X, Y))\n        break\n    else:\n      S[1].add((X, Y))\n\nL = [len(s) for s in S[1:]]\nprint((H-2)*(W-2) - sum(L))\n\nfor l in L:\n  print(l)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s940518070","submission":"n=int(input())\nA=list(map(int, input().split()))\nans=float(\"inf\")\nfor i in range(n):\n    cnt = 0\n    while A[i]%2==0:\n        A[i]=A[i]\/\/2\n        cnt+=1\n    ans=min(ans,cnt)\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s567948255","submission":"n=int(input())\nval1 = input().split(\" \")\nval2=[int(i) for i in val1]\n\nw = 0\n\nwhile True:\n    v = 0\n    for i in range(n):\n        if val2[i] % 2 == 1:\n            v = 1\n    if v ==1:\n        break\n    if v ==0:\n        for i in range(n):\n            val2[i] = val2[i]\/2\n        w += 1\n\nprint(w)","label":0}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s840702697","submission":"s = input()\nt = input()\nif s.count(t):\n    print(0)\nelse:\n    len_t = len(t)\n    cnt = 0\n    for i in range(len(s) - len_t + 1):\n        c = 0\n        for j in range(len_t):\n            if s[i+j] == t[j]: c += 1\n        cnt = max(cnt, c)\n    print(len_t - cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s038618620","submission":"n = int(input())\na = list(map(int, input().split()))\nc = 0\nwhile True:\n  if all(x % 2 == 0 for x in a):\n    a = [x \/ 2 for x in a]\n    c += 1\n  else:\n    break\nprint(c)","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s925327525","submission":"n, a = map(int, input().split())\nx = list(map(int, input().split()))\ns = sum(x)\ndp = [[0] * (s * n + 1) for _ in range(n + 1)]\nfor i in range(1, n + 1):\n    dp[i][x[i - 1]] = 1\n    for j in range(1, s + 1):\n        dp[i][j] += dp[i - 1][j]\n    for j in range(s + 1, s * n + 1):\n        dp[i][j] = dp[i - 1][max(0, j - s - x[i - 1])] + dp[i - 1][j]\nans = 0\nfor i in range(1, n + 1):\n    if i * a > s:\n        print(ans)\n        exit()\n    ans += dp[n][i * a + (i - 1) * s]\nprint(ans)","label":0}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s605712742","submission":"n,k = map(int, input().split())\nv = list(map(int, input().split()))\n\nans = 0\nfor x in range(k+1):# LeftHand\n  for y in range(k-x+1):# RightHand\n    temp1 = []\n    temp2 = []\n    if x+y >= n:\n      for i in v:\n        if i >= 0:\n          temp1.append(i)\n        else:\n          temp2.append(i)\n    else:\n      for i in v[:x]:\n        if i >= 0:\n          temp1.append(i)\n        else:\n          temp2.append(i)\n      for i in v[len(v)-y:]:\n        if i >= 0:\n          temp1.append(i)\n        else:\n          temp2.append(i)\n    temp2.sort()\n    ans = max(ans, sum(temp1) + sum(temp2[k-x-y:]))\nprint(ans)","label":0}
{"problem_id":"p02911","problem":"Takahashi has decided to hold fastest-finger-fast quiz games. Kizahashi, who is in charge of making the scoreboard, is struggling to write the program that manages the players' scores in a game, which proceeds as follows.\nA game is played by N players, numbered 1 to N. At the beginning of a game, each player has K points.\nWhen a player correctly answers a question, each of the other N-1 players receives minus one (-1) point. There is no other factor that affects the players' scores.\nAt the end of a game, the players with 0 points or lower are eliminated, and the remaining players survive.\nIn the last game, the players gave a total of Q correct answers, the i-th of which was given by Player A_i.\nFor Kizahashi, write a program that determines whether each of the N players survived this game.","submission_id":"s645519344","submission":"n,k,q=map(int,input().split())\na=[0 for i in range(n+1)]\nfor i in range(q):\n    a[int(input())]+=1\nfor i in range(1,n+1):\n    if q-a[i]<k:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s598155426","submission":"n = input()\na = input()\na = list(map(int, a.split()))\ni = 0\ncont_flg = True\nwhile cont_flg:\n  if sum(list(map(lambda x: x % 2, a))) == 0:\n  \ti += 1\n  \ta = list(map(lambda x: x \/ 2, a))\n  else:\n    cont_flg = False\nprint(i)","label":0}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s082760895","submission":"from fractions import gcd\n\ndef init(init_val):\n    for i in range(n):\n        seg[i+num-1] = init_val[i]\n    for i in range(num-2,-1,-1) :\n        seg[i] = gcd(seg[2*i+1],seg[2*i+2]) \n\ndef update(k,x):\n    k += num-1\n    seg[k] = x\n    while k:\n        k = (k-1)\/\/2\n        seg[k] = gcd(seg[k*2+1],seg[k*2+2])\n\ndef query(p,q):\n    if q<=p:\n        return I\n    p += num-1\n    q += num-2\n    res = I\n    while q-p>1:\n        if p&1 == 0:\n            res = gcd(res,seg[p])\n        if q&1 == 1:\n            res = gcd(res,seg[q])\n            q -= 1\n        p = p\/\/2\n        q = (q-1)\/\/2\n    if p == q:\n        res = gcd(res,seg[p])\n    else:\n        res = gcd(gcd(res,seg[p]),seg[q])\n    return res\n\n\nI = 0\nimport sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nn = int(readline())\na = [int(i) for i in readline().split()]\nnum = 2**(n-1).bit_length()\nseg=[I]*2*num\ninit(a)\nans = 1\nfor i in range(n):\n  ans = max(ans,gcd(query(0,i),query(i+1,n)))\n  \nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s148114168","submission":"N = int(input())\nA = list(map(int, input().split()))\n\n# N \u304c 2 \u3067\u4f55\u56de\u5272\u308c\u308b\u304b\ndef how_many_times(N):\n    exp = 0\n    while N % 2 == 0:\n        N \/\/= 2\n        exp += 1\n    return exp\n\nresult = min([how_many_times(v) for v in A])\nprint(result)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s386053727","submission":"import numpy as np\n\nn = int(input())\na = np.array(list(map(int,input().split())))\n\ncount = 0\nwhile np.all(a%2==0):\n    count+=1\n    a=a\/2\nprint(count)\n","label":0}
{"problem_id":"p02665","problem":"Given is an integer sequence of length N+1: A_0, A_1, A_2, \\ldots, A_N. Is there a binary tree of depth N such that, for each d = 0, 1, \\ldots, N, there are exactly A_d leaves at depth d? If such a tree exists, print the maximum possible number of vertices in such a tree; otherwise, print -1.","submission_id":"s255552887","submission":"import math\n\nn = int(input())\nfolia = list(map(int, input().split()))\n#print(n, folia)\n\n#_1 \u6728\u306e\u4e00\u756a\u4e0b\u304b\u3089\u9806\u306b\u5404\u6df1\u3055\u306e\u9802\u70b9\u6570[min, max]\u3092\u53d6\u5f97\nseq = [[folia[-1], folia[-1]]]\nfor i in range(n): # \u6df1\u3055'n'\u5206\n    tmp = folia[-(i+2)]\n    sml = math.ceil(seq[i][0] \/ 2) + tmp \n    big = seq[i][1] + tmp\n    seq += [[sml, big]]\n#print(seq)\n\n#_2 \u4e00\u756a\u6839\u672c\u306e\u9802\u70b9\u6570[min, max]\u306b'1'\u3092\u542b\u307e\u306a\u3044\u5834\u5408\u306f '\u5b58\u5728\u3057\u306a\u3044\u6728'\nif not (seq[-1][0] <= 1 <= seq[-1][1]):\n    print(-1)\n    exit()\n\n#_3 \u6728\u306e\u4e00\u756a\u4e0a\u304b\u3089\u9806\u306b\u5404\u6df1\u3055\u3067\u7406\u8ad6\u6700\u5927\u9802\u70b9\u6570\u3068'#_1\u306emax'\u3068\u306e'min'\u3092\u3068\u308b\nans =[1]\nfor j in range(n): # \u6df1\u3055'n'\u5206\n    tmp = min((ans[j] - folia[j]) * 2, seq[-(j+2)][1])\n    ans.append(tmp)\nprint(sum(ans)) # \u305d\u306e\u5408\u8a08\u304c'ans'\n","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s182862905","submission":"def f(n, m):\n    s = list(map(int,input().split()))\n    t = list(map(int,input().split()))\n    dp = [[1] * (m + 1) for _ in range(n + 1)]\n    for i, sk in enumerate(s):\n        dpi1 = dp[i + 1] = dp[i][:]\n        cs = 0\n        for j, tk in enumerate(t):\n            if sk == tk:\n                cs = (cs + dp[i][j]) % md\n            dpi1[j + 1] = (dpi1[j + 1] + cs) % md\n#    for x in dp:\n#        print(*x)\n    print(dp[-1][-1])\n\nmd = 10 ** 9 + 7\nn, m = map(int, input().split())\nf(n, m)\n","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s906361928","submission":"n,k=map(int, input().split())\np=list(map(int, input().split()))\nnum=sum(p[0:k])\nans=num\nfor i in range(n-k):\n  num=num-p[i]+p[i+k]\n  ans=max(ans,num)\nprint((ans+k)\/2)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s890165719","submission":"# 2020\/07\/24\n# AtCoder Beginner Contest 081 - B\n\n# Input\nn = int(input())\na = list(map(int,input().split()))\n\n# Calc\ntflg = True\nans = 0\nwhile(tflg):\n    ans = ans + 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans = ans - 1\n            tflg = False\n            break\n        else:\n            a[i] = a[i] \/ 2\n\n# Output\nprint(ans)\n","label":0}
{"problem_id":"p03331","problem":"Takahashi has two positive integers A and B.\nIt is known that A plus B equals N.\nFind the minimum possible value of \"the sum of the digits of A\" plus \"the sum of the digits of B\" (in base 10).","submission_id":"s728443850","submission":"import sys\nreadline = sys.stdin.buffer.readline\ndef even(n): return 1 if n%2==0 else 0\n\nn = int(readline())\nans = 10**18\nfor i in range(1,n):\n    j = n-i\n    s = str(i).rjust(6,\"0\")[::-1]\n    t = str(j).rjust(6,\"0\")[::-1]\n    res = 0\n    for i,j in zip(s,t):\n        res += int(i)+int(j)\n    ans = min(res,ans)\n\nprint(ans)\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s634130173","submission":"n = int(input())\na = list(map(int,input().split()))\nx = 0\nt = True\nwhile t:\n    for i in range(n):\n        if a[i] % 2 == 1:\n            t = False\n        else:\n            a[i] \/= 2\n    if t == True:\n        x += 1\nprint(x)","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s375416982","submission":"n,m=map(int,input().split())\ns=str(input())\ns=list(s)\nt=str(input())\nt=list(t)\nans=-1\nif s[0]==t[0]:\n  import fractions\n  temp=len(s)*len(t)\/\/fractions.gcd(len(s),len(t))\n  k=fractions.gcd(len(s),len(t))\n  count=1\n  for i in range(1,k):\n    if s[i*int(len(s)\/k)]==t[i*int(len(t)\/k)]:\n      count=count+1\n  if count==k:\n    ans=temp\nprint(ans)\n","label":0}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s657285856","submission":"n , x= map(int , input().split())\narr = list(map(int , input().split()))\nans = []\ntot=0\nif arr[0]>x:\n\ttot = tot+(arr[0]-x)\n\tarr[0]=x\nfor i in range(1,n):\n\tif arr[i]+arr[i-1]>x:\n\t\tdif = ((arr[i]+arr[i-1])-x)\n\t\ttot = tot+dif\n\t\tif arr[i]-dif>=0:\n\t\t\tarr[i]=arr[i]-dif\n\t\telse:\n\t\t\tarr[i-1]=arr[i-1]-dif\nprint(tot)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s385575616","submission":"n = input().split()\na = list(map(int, input().split() ))\ncount = 0\n\nwhile(True):\n    T = False\n    for i in range(len(a)):\n        if a[i]%2 != 0:\n            T=True\n        else:\n            a[i] = a[i] \/ 2\n\n    if T:\n        break\n\n    count+=1\n\nprint(count)\n","label":0}
{"problem_id":"p03239","problem":"When Mr. X is away from home, he has decided to use his smartwatch to search the best route to go back home, to participate in ABC.\nYou, the smartwatch, has found N routes to his home.\nIf Mr. X uses the i-th of these routes, he will get home in time t_i at cost c_i.\nFind the smallest cost of a route that takes not longer than time T.","submission_id":"s123598530","submission":"n, t = map(int, input().split())\napple = [list(input().split()) for _ in range(n)]\norange = []\nfor i, j  in zip(apple, range(n)):\n    if int(apple[j][1]) <= t:\n        orange.append(int(apple[j][0]))\n    else:\n        pass\nprint(min(orange) if len(orange) > 0 else \"TLE\")","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s960589903","submission":"n = int(input())\nli = list(map(int, input().split()))\nb = float('inf')\nfor a in li:\n    c = 0\n    while a%2 == 0:\n      a = a\/2\n      c += 1\n    b = min(b,c)\nprint(b)\n          \n","label":0}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s306222265","submission":"S = input()\n\nn = len(S)\n\nS_a = list(S)\n\nif S[n-1] == 's' :\n  print(S + 'es')\n  \nelse :\n  print(S + 's')\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s588074493","submission":"num = int(input())\nnu_list = [int(v) for v in input().split()]\ncount = 0\n#print(nu_list)\nbool = True\nwhile bool == True:\n  for i in range(len(nu_list)):\n    if nu_list[i] % 2 != 0:\n      bool = False\n      break\n    else:\n      nu_list[i] = nu_list[i] \/\/ 2\n  if bool == True:\n    count += 1 \nprint(count)","label":0}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s986320357","submission":"S = input()\nT = input()\n\nsl = len(S)\ntl = len(T)\n\nminc = 1000\n\nfor i in range(sl):\n    if i+tl-1 >= sl:\n        break\n    else:\n        str1 = S[i:i+tl]\n        count=0\n        for j in range(tl):\n            if str1[j] != T[j]:\n                count+=1\n        if count < minc:\n            minc = count\n\nprint(minc)\n        \n\n\n\n\n","label":0}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s935989559","submission":"n = input()\nt = input()\ncount = 0\nif n[0] == t[0]:\n\tcount += 1\nif n[1] == t[1]:\n\tcount += 1\nif n[2] == t[2]:\n\tcount += 1\nprint(count) ","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s188721107","submission":"N = int(input())\nAli = list(map(int,input().split()))\nres = 10**10\n\nfor i in range(N):\n  r = 0\n  while Ali[i]%2 == 0:\n    Ali[i] \/\/= 2\n    r += 1\n  res = min(res,r)\n  \nprint(res)","label":0}
{"problem_id":"p03732","problem":"You have N items and a bag of strength W.\nThe i-th item has a weight of w_i and a value of v_i.\nYou will select some of the items and put them in the bag.\nHere, the total weight of the selected items needs to be at most W.\nYour objective is to maximize the total value of the selected items.","submission_id":"s657251856","submission":"n,W=map(int,input().split())\nfrom collections import defaultdict\nWD=[list(map(int,input().split())) for _ in range(n)]\nd=defaultdict(int)\nd[0]=0\nfor w,v in WD:\n    for i ,j in d.copy().items():\n        if i+w <=W:\n            d[w+i]=max(d[w+i],j+v)\n\nprint(max(d.values()))","label":0}
{"problem_id":"p02735","problem":"Consider a grid with H rows and W columns of squares. Let (r, c) denote the square at the r-th row from the top and the c-th column from the left.\nEach square is painted black or white.\nThe grid is said to be good if and only if the following condition is satisfied:\n\nFrom (1, 1), we can reach (H, W) by moving one square right or down repeatedly, while always being on a white square.\n\nNote that (1, 1) and (H, W) must be white if the grid is good.\nYour task is to make the grid good by repeating the operation below. Find the minimum number of operations needed to complete the task. It can be proved that you can always complete the task in a finite number of operations.\n\nChoose four integers r_0, c_0, r_1, c_1(1 \\leq r_0 \\leq r_1 \\leq H, 1 \\leq c_0 \\leq c_1 \\leq W). For each pair r, c (r_0 \\leq r \\leq r_1, c_0 \\leq c \\leq c_1), invert the color of (r, c) - that is, from white to black and vice versa.","submission_id":"s007366865","submission":"import sys\nimport math\nimport copy\nimport heapq\nfrom functools import cmp_to_key\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, Counter\nsys.setrecursionlimit(1000000)\n\n# input aliases\ninput = sys.stdin.readline\ngetS = lambda: input().strip()\ngetN = lambda: int(input())\ngetList = lambda: list(map(int, input().split()))\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\nINF = float(\"inf\")\nMOD = 10**9 + 7\ndivide = lambda x: pow(x, MOD-2, MOD)\n\ndef nck(n, k, kaijyo):\n    return (npk(n, k, kaijyo) * divide(kaijyo[k])) % MOD\n\ndef npk(n, k, kaijyo):\n    if k == 0 or k == n:\n        return n % MOD\n    return (kaijyo[n] * divide(kaijyo[n-k])) % MOD\n\ndef fact_and_inv(SIZE):\n    inv = [0] * SIZE  # inv[j] = j^{-1} mod MOD\n    fac = [0] * SIZE  # fac[j] = j! mod MOD\n    finv = [0] * SIZE  # finv[j] = (j!)^{-1} mod MOD\n    inv[1] = 1\n    fac[0] = fac[1] = 1\n    finv[0] = finv[1] = 1\n    for i in range(2, SIZE):\n        inv[i] = MOD - (MOD \/\/ i) * inv[MOD % i] % MOD\n        fac[i] = fac[i - 1] * i % MOD\n        finv[i] = finv[i - 1] * inv[i] % MOD\n\n    return fac, finv\n\ndef renritsu(A, Y):\n    # example 2x + y = 3, x + 3y = 4\n    # A = [[2,1], [1,3]])\n    # Y = [[3],[4]] \u307e\u305f\u306f [3,4]\n    A = np.matrix(A)\n    Y = np.matrix(Y)\n    Y = np.reshape(Y, (-1, 1))\n    X = np.linalg.solve(A, Y)\n\n    # [1.0, 1.0]\n    return X.flatten().tolist()[0]\n\nclass TwoDimGrid:\n    # 2\u6b21\u5143\u5ea7\u6a19 -> 1\u6b21\u5143\n    def __init__(self, h, w, wall=\"o\"):\n        self.h = h\n        self.w = w\n        self.size = (h+2) * (w+2)\n        self.wall = wall\n        self.get_grid()\n        self.init_cost()\n\n    def get_grid(self):\n        grid = [self.wall * (self.w + 2)]\n        for i in range(self.h):\n            grid.append(self.wall + getS() + self.wall)\n\n        grid.append(self.wall * (self.w + 2))\n        self.grid = grid\n    def init_cost(self):\n        self.cost = [INF] * self.size\n\n    def pos(self, x, y):\n        # \u58c1\u3082\u542b\u3081\u30660-indexed \u5143\u3005\u306e\u5ea7\u6a19\u3060\u3051\u8003\u3048\u308b\u30681-indexed\n        return y * (self.w + 2) + x\n    def getgrid(self, x, y):\n        return self.grid[y][x]\n    def get(self, x, y):\n        return self.cost[self.pos(x, y)]\n    def set(self, x, y, v):\n        self.cost[self.pos(x, y)] = v\n        return\n    def show(self):\n        for i in range(self.h+2):\n            print(self.cost[(self.w + 2) * i:(self.w + 2) * (i+1)])\n    def showsome(self, tgt):\n        for t in tgt:\n            print(t)\n        return\n    def showsomejoin(self, tgt):\n        for t in tgt:\n            print(\"\".join(t))\n        return\n\n    def search(self):\n        grid = self.grid\n        move = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        move_eight = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n        d = deque()\n        d.append((1,1))\n        self.set(1,1,0)\n        while(d):\n            cx, cy = d.popleft()\n            cc = self.get(cx, cy)\n            if self.getgrid(cx, cy) == self.wall:\n                continue\n            for dx, dy in [(1, 0), (0, 1)]:\n                nx, ny = cx + dx, cy + dy\n                if self.getgrid(cx, cy) == self.getgrid(nx, ny):\n                    if self.get(nx, ny) > cc:\n                        d.append((nx, ny))\n                        self.set(nx, ny, cc)\n                else:\n                    if self.get(nx, ny) > cc + 1:\n                        d.append((nx, ny))\n                        self.set(nx, ny, cc + 1)\n\n        # self.show()\n        ans = (self.get(self.w, self.h))\n        if self.getgrid(1,1) == \"#\":\n            ans += 1\n        print((ans + 1) \/\/ 2)\n\ndef soinsu(n):\n    ret = defaultdict(int)\n    for i in range(2, int(math.sqrt(n) + 2)):\n        if n % i == 0:\n            while True:\n                if n % i == 0:\n                    ret[i] += 1\n                    n \/\/= i\n                else:\n                    break\n\n    if not ret:\n        return {n: 1}\n    return ret\n\n\ndef solve():\n    h, w = getList()\n    G = TwoDimGrid(h, w)\n    G.search()\n\n\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n\n    return\nif __name__ == \"__main__\":\n    # main()\n    solve()","label":0}
{"problem_id":"p02793","problem":"Given are N positive integers A_1,...,A_N.\nConsider positive integers B_1, ..., B_N that satisfy the following condition.\nCondition: For any i, j such that 1 \\leq i < j \\leq N, A_i B_i = A_j B_j holds.\nFind the minimum possible value of B_1 + ... + B_N for such B_1,...,B_N.\nSince the answer can be enormous, print the sum modulo (10^9 +7).","submission_id":"s175887384","submission":"# input()\n# int(input())\n# map(int, input().split())\n# list(map(int, input().split()))\n# list(map(int, list(input()))) # \u30b9\u30da\u30fc\u30b9\u304c\u306a\u3044\u6570\u5b57\u30ea\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nimport math\nimport sys\nimport bisect\nimport heapq  # \u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc(\u6700\u5c0f\u5024\u53d6\u308a\u51fa\u3057)\nfrom collections import deque\n\ninf = 10**18\nmod = 10**9+7\n\ndic = {}\n\n# mod \u3067\u5272\u308a\u7b97(\u30d5\u30a7\u30eb\u30de\u30fc\u3001\u9006\u5143\u5229\u7528)\nmod = 10**9+7\n\nN = 10**6+1\ninv_t = [0]+[1]\n\nfor i in range(2,N):\n    inv_t += [inv_t[mod % i] * (mod - int(mod \/ i)) % mod]\n\ndef moddiv(a, b):\n    return a*inv_t[b]%mod\n\n\"\"\"n\u3092\u7d20\u56e0\u6570\u5206\u89e3\"\"\"\n\"\"\"2\u4ee5\u4e0a\u306e\u6574\u6570n => [[\u7d20\u56e0\u6570, \u6307\u6570], ...]\u306e2\u6b21\u5143\u30ea\u30b9\u30c8\"\"\"\ndef factorization(n):\n    arr = []\n    temp = n\n    if n == 1:\n        return arr\n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nn = int(input())\na = list(map(int, input().split()))\nj = []\nfor num in a:\n    tmp = factorization(num)\n    j.append(tmp)\n    for p,x in tmp:\n        if p in dic:\n            dic[p] = max(dic[p],x)\n        else:\n            dic[p] = x\ngc = 1\nfor k,v in dic.items():\n    gc*=(k**v)%mod\nans = 0\nfor num in a:\n    ans += moddiv(gc, num)\n    ans %= mod\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s520352983","submission":"N = int(input())\n\nl = list(map(int, input().split()))\n\ncounter = 0\nflag = 1\n\nwhile flag == 1:\n\tfor i in range(len(l)):\n\t\tif l[i] % 2 != 0:\n\t\t\tflag = 0\n\t\t\tbreak\n\t\telse:\n\t\t\tl[i] = int(l[i] \/ 2)\n\tif flag == 1:\n\t\tcounter += 1\n\nprint(counter)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s383608723","submission":"from sys import stdin\nn = stdin.readline().rstrip()\na = [int(x) for x in stdin.readline().rstrip().split()]\nb = 0\n\nwhile True:\n   if all([x % 2 == 0 for x in a]):\n      a = [x\/2 for x in a]\n      b += 1\n   else:\n      break\n\nprint(b)","label":0}
{"problem_id":"p03958","problem":"There are K pieces of cakes.\nMr. Takahashi would like to eat one cake per day, taking K days to eat them all.\nThere are T types of cake, and the number of the cakes of type i (1 \u2264 i \u2264 T) is a_i.  \nEating the same type of cake two days in a row would be no fun,\nso Mr. Takahashi would like to decide the order for eating cakes that minimizes the number of days on which he has to eat the same type of cake as the day before.  \nCompute the minimum number of days on which the same type of cake as the previous day will be eaten.","submission_id":"s718314619","submission":"import sys\ninput = sys.stdin.readline\n\nK,T = list(map(int,input().split()))\na = sorted(list(map(int,input().split())))\namax = a[-1]\nasub = sum(a[0:-1])\n\nprint(max(0,amax-1-asub))\n","label":0}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s623212949","submission":"def main():\n    n = int(input())\n    s = input().rstrip()\n    k = int(input())\n    c = s[k-1]\n    for i in range(n):\n        if s[i] != c:\n            print(\"*\", end=\"\")\n        else:\n            print(s[i], end=\"\")\n\nif __name__ == \"__main__\":\n    main()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s996382539","submission":"def resolve():\n    _ = int(input())\n    a = list(map(int, input().split()))\n    res = 0\n    while all(i % 2 == 0 for i in a):\n        res += 1\n        a = list(map(lambda x: x \/ 2, a))\n    print(res)\n\nresolve()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s418715570","submission":"n = int(input())\na = list(map(int, input().split()))\nres = 0\nwhile all(i % 2 == 0 for i in a):\n    a = [i\/2 for i in a]\n    res += 1\nprint(res)","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s043298332","submission":"# -*- coding: utf-8 -*-\nN, A = map(int, input().split(' '))\nimport collections\n\nX = [int(a) - A for a in input().split(' ')]\nsum_positives = sum([x for x in X if x > 0])\nsum_negatives = sum([x for x in X if x < 0])\n\ndp = [dict([(i, 0) for i in range(sum_negatives, sum_positives+1)])\n            for _ in range(N+1)]\ndp[0][0] = 1\n\nfor i, x in enumerate(X):\n    for j in range(sum_negatives, sum_positives+1):\n        dp[i + 1][j] = dp[i][j]\n        if (j - x) in dp[i]:\n            dp[i + 1][j] += dp[i][j - x]\n\n# for d in dp:\n#     print(d)\n\nprint(dp[N][0] - 1)\nexit()\n","label":0}
{"problem_id":"p03088","problem":"You are given an integer N. Find the number of strings of length N that satisfy the following conditions, modulo 10^9+7:\n\nThe string does not contain characters other than A, C, G and T.\nThe string does not contain AGC as a substring.\nThe condition above cannot be violated by swapping two adjacent characters once.","submission_id":"s259975038","submission":"p = 10**9+7\nN = int(input())\ndp = [[[[[0 for _ in range(4)] for _ in range(4)] for _ in range(4)] for _ in range(4)] for _ in range(N+1)]\nfor j in range(4):\n    for k in range(4):\n        for l in range(4):\n            if not(j==0 and k==1 and l==2) and not(j==0 and k==2 and l==1) and not(j==1 and k==0 and l==2):\n                dp[3][0][j][k][l] = 1\nfor n in range(4,N+1):\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                for l in range(4):\n                    if not(j==0 and k==1 and l==2) and not(j==0 and k==2 and l==1) and not(j==1 and k==0 and l==2) \\\n                    and not(i==0 and k==1 and l==2) and not(i==0 and j==1 and l==2):\n                        dp[n][i][j][k][l] = 0\n                        for m in range(4):\n                            dp[n][i][j][k][l] = (dp[n][i][j][k][l]+dp[n-1][m][i][j][k])%p\ntot = 0\nfor i in range(4):\n    for j in range(4):\n        for k in range(4):\n            for l in range(4):\n                tot = (tot + dp[N][i][j][k][l])%p\nprint(tot)","label":0}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s423486958","submission":"n = int(input())\na = list(map(int, input().split()))\nif n % 2 == 0 and n >= 4:\n  dp = [[0, 0] for i in range(n)]\n  dp[0][0] = a[0]\n  dp[1][1] = a[1]\n  dp[2][0] = a[0] + a[2]\n  for i in range(3, n):\n    dp[i][0] = dp[i - 2][0] + a[i]\n    dp[i][1] = max(dp[i - 3][0], dp[i - 2][1]) + a[i]\n  print(max(dp[n - 2][0], dp[n - 1][1]))\nelif n % 2 != 0 and n >= 5:\n  dp = [[0, 0, 0] for i in range(n)]\n  dp[0][0] = a[0]\n  dp[1][1] = a[1]\n  dp[2][0] = a[0] + a[2]\n  dp[2][2] = a[2]\n  dp[3][1] = a[1] + a[3]\n  dp[3][2] = a[0] + a[3]\n  for i in range(3, n):\n    dp[i][0] = dp[i - 2][0] + a[i]\n    dp[i][1] = max(dp[i - 3][0], dp[i - 2][1]) + a[i]\n    dp[i][2] = max(dp[i - 4][0], dp[i - 3][1], dp[i - 2][2]) + a[i]\n  print(max(dp[n - 3][0], dp[n - 2][1], dp[n - 1][2]))\nelif n == 2:\n  print(max(a[0], a[1]))\nelse:\n  print(max(a[0], a[1], a[2]))","label":0}
{"problem_id":"p02781","problem":"Find the number of integers between 1 and N (inclusive) that contains exactly K non-zero digits when written in base ten.","submission_id":"s180045899","submission":"#!\/usr\/bin\/env python3\n\ndef main():\n    n = input()\n    l = len(n)\n    k = int(input())\n    dp0 = [0 for j in range(4)]\n    dp1 = [0 for j in range(4)]\n    dp1[0] = 1\n    for i in range(l):\n        d = int(n[i])\n        if d == 0:\n            for j in [3, 2, 1]:\n                dp0[j] += dp0[j - 1] * 9\n        else:\n            for j in [3, 2, 1]:\n                dp0[j] += dp0[j - 1] * 9\n                dp0[j] += dp1[j - 1] * max(0, d - 1)\n                dp0[j] += dp1[j]\n            dp0[0] += dp1[0]\n            dp1 = [0] + dp1[0:3]\n    print(dp0[k] + dp1[k])\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p02927","problem":"Today is August 24, one of the five Product Days in a year.\nA date m-d (m is the month, d is the date) is called a Product Day when d is a two-digit number, and all of the following conditions are satisfied (here d_{10} is the tens digit of the day and d_1 is the ones digit of the day):\n\nd_1 \\geq 2\nd_{10} \\geq 2\nd_1 \\times d_{10} = m\n\nTakahashi wants more Product Days, and he made a new calendar called Takahashi Calendar where a year consists of M month from Month 1 to Month M, and each month consists of D days from Day 1 to Day D.\nIn Takahashi Calendar, how many Product Days does a year have?","submission_id":"s825032151","submission":"M, D = map(int, input().split())\n\ndef f(m, d):\n  d1, d10 = d % 10, d \/\/ 10\n  return d1 >= 2 and d10 >= 2 and d1 * d10 == m\n\ncount = 0\nfor i in range(1, M+1):\n  for j in range(1, D + 1):\n    count += 1 if f(i, j) else 0\n\nprint(count)","label":0}
{"problem_id":"p02984","problem":"There are N mountains in a circle, called Mountain 1, Mountain 2, ..., Mountain N in clockwise order. N is an odd number.\nBetween these mountains, there are N dams, called Dam 1, Dam 2, ..., Dam N. Dam i (1 \\leq i \\leq N) is located between Mountain i and i+1 (Mountain N+1 is Mountain 1).\nWhen Mountain i (1 \\leq i \\leq N) receives 2x liters of rain, Dam i-1 and Dam i each accumulates x liters of water (Dam 0 is Dam N).\nOne day, each of the mountains received a non-negative even number of liters of rain.\nAs a result, Dam i (1 \\leq i \\leq N) accumulated a total of A_i liters of water.\nFind the amount of rain each of the mountains received. We can prove that the solution is unique under the constraints of this problem.","submission_id":"s603007819","submission":"import sys\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\nf_inf = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef resolve():\n    n = int(input())\n    A = list(map(int, input().split()))\n\n    B = [0] * n\n    for i in range(n):\n        B[0] += A[i] if i % 2 == 0 else -A[i]\n\n    for j in range(1, n):\n        B[j] = 2 * A[j - 1] - B[j - 1]\n\n    print(*B)\n\n\nif __name__ == '__main__':\n    resolve()\n","label":0}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s696738275","submission":"S = input()\ncount = 0\nmcount = 0\nfor i in range(len(S)):\n\tif(S[i] == 'S'):\n\t\tcount = 0\n\telif(S[i] == 'R'):\n\t\tcount += 1\n\t\tif(count>mcount):\n\t\t\tmcount = count\nprint(mcount)\n\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s836064768","submission":"N = int(input())\nsrc_list=sorted(list(map(int,input().split())))\n\ncnt= 0\nremaindar = list(map(lambda x:x % 2,src_list))\nwhile (1 not in remaindar):\n    src_list=list(map(lambda x:x\/2,src_list))\n    remaindar = list(map(lambda x:x % 2,src_list))\n    cnt+=1\n\nprint(cnt)\n","label":0}
{"problem_id":"p03438","problem":"You are given two integer sequences of length N: a_1,a_2,..,a_N and b_1,b_2,..,b_N.\nDetermine if we can repeat the following operation zero or more times so that the sequences a and b become equal.\nOperation: Choose two integers i and j (possibly the same) between 1 and N (inclusive), then perform the following two actions simultaneously:\n\nAdd 2 to a_i.\nAdd 1 to b_j.","submission_id":"s987840458","submission":"n=int(input())\na,b=[list(map(int,input().split())) for i in range(2)]\nif sum(a) >sum(b):print(\"No\")\nelif sum(a)==sum(b):\n\n    for x,c in zip(a,b):\n        if x!=c:print(\"No\");exit()\n    print(\"Yes\")\nelse:\n    cnt=sum(b)-sum(a)\n    v=cnt\n    for x,y in zip(a,b):\n        if x>=y:v-=(x-y)\n        else:\n            v-=(x+y)%2\n            cnt-=(y-x+(x+y)%2)\/\/2\n    print(\"Yes\") if cnt*2==v and cnt>=0 and v>=0 else print(\"No\")","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s213100148","submission":"N = int(input())\nA = list(map(int,input().split()))\ndef X(x):\n  y = 0\n  while x%2==0:\n    x = x\/2\n    y = y+1\n  return y\na = [X(A[i]) for i in range(0,N)] \n  \nprint(min(a))\n","label":0}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s714542543","submission":"def main():\n    a,b,c = map(int,input().split())\n    if(c - a - b > 0 and 4 * a * b < (c - a - b) * (c - a - b)):\n        print('Yes')\n    else:\n        print('No')\nmain()","label":0}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s592529033","submission":"#!\/usr\/bin\/env python3\nimport sys\nfrom itertools import accumulate\nsys.setrecursionlimit(10**8)\nINF = float(\"inf\")\n\nimport math\n\n\ndef array(*args, initial=0):\n    pre = \"[\"*len(args)\n    post = \"\"\n    for a in args[::-1]:\n        post += \" for _ in range(\"+str(a)+\")]\"\n    S = pre + str(initial) + post\n    return eval(S)\n\n\ndef solve(N: int, A: \"List[int]\"):\n\n    if N % 2 == 0:\n        K = 2\n    else:\n        K = 3\n\n    DP = array(N, K, initial=-10**9)\n    DP[0][0] = A[0]\n    DP[1][1] = A[1]\n    if K == 3:\n        DP[2][2] = A[2]\n    for i in range(1, N):\n        for k in range(K):\n            if i == k and i < K:\n                continue\n            DP[i][k] = DP[i-2][k]\n            if k-1 >= 0:\n                DP[i][k] = max(DP[i][k], DP[i-3][k-1])\n            if k-2 >= 0:\n                DP[i][k] = max(DP[i][k], DP[i-4][k-2])\n            DP[i][k] += A[i]\n    if N % 2 == 0:\n        print(max(DP[-1][1], DP[-2][0]))\n    else:\n        print(max(DP[-1][2], DP[-2][1], DP[-3][0]))\n    return\n\n\ndef main():\n\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, A)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s516786926","submission":"N = int(input())\nA = list(map(int, input().split()))\nans = 0\nisEnd = False\nwhile not isEnd:\n    for i in range(N):\n        if A[i] % 2 == 0:\n            A[i] = A[i] \/\/ 2\n        else:\n            isEnd = True\n            break\n    if not isEnd:\n        ans += 1\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s609983625","submission":"N=int(input())\na=input().split()\na_int = [int(i) for i in a]\n\ncount=0\nwhile 1:\n    k=0\n    for i in a_int:\n        k = k + i%2\n    if k == 0:\n        a_int = [i\/2 for i in a_int]\n        count=count+1\n    else:\n        print(count)\n        break\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s532806806","submission":"import os, sys, math\nif os.environ.get(\"DEBUG\") is not None:\n    sys.stdin = open(\"in.txt\", \"r\")\nrl = sys.stdin.readline\n\nn = int(rl())\na = list(map(int, rl().split()))\n\nans = math.inf\nfor it in a:\n    cnt = 0\n    while it > 0 and it % 2 == 0:\n        it \/= 2\n        cnt += 1\n    ans = min(ans, cnt)\nprint(ans)\n","label":0}
{"problem_id":"p04031","problem":"Evi has N integers a_1,a_2,..,a_N. His objective is to have N equal integers by transforming some of them.\nHe may transform each integer at most once. Transforming an integer x into another integer y costs him (x-y)^2 dollars. Even if a_i=a_j (i\u2260j), he has to pay the cost separately for transforming each of them (See Sample 2).\nFind the minimum total cost to achieve his objective.","submission_id":"s054698501","submission":"num = int(input())\nstr_line = input().split(\" \")\nnum_line = [int(n) for n in str_line]\n\nave = 0\nfor i in range(num):\n    ave += num_line[i]\n\nif ave%num == 0:\n    ave \/\/= num\n\nelse:\n    if ave%num <= num\/2:\n        ave \/\/= num\n    else:\n        ave = -(-ave\/\/num)\n\nwa = 0\nfor i in range(num):\n    temp = num_line[i] - ave\n    wa += temp*temp\n    \nprint(wa)","label":0}
{"problem_id":"p02732","problem":"We have N balls. The i-th ball has an integer A_i written on it.\nFor each k=1, 2, ..., N, solve the following problem and print the answer.  \n\nFind the number of ways to choose two distinct balls (disregarding order) from the N-1 balls other than the k-th ball so that the integers written on them are equal.","submission_id":"s403688155","submission":"def main():\n  N=int(input())\n  A=[int(a) for a in input().split()]\n  Acnt, Aprob={}, {}\n  for a in A:\n    Acnt[a] = Acnt.get(a, 0) + 1\n  sumA=0\n  for k, a in Acnt.items():\n    Aprob[k]=a*(a-1)\/\/2\n    sumA+=Aprob[k]\n  #Acnt=[A.count(n) for n in range(N+1)]\n  #Aprob=[Acnt[n]*(Acnt[n]-1)\/\/2 for n in range(N+1)]\n  #sumA=sum(Aprob)\n\n  for a in A:\n    ans=(Acnt[a]-1)*(Acnt[a]-2)\/\/2\n    print(ans+sumA-Aprob[a])\n  \nmain()\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s476321647","submission":"a = int(input())\nb = list(map(int, input().split()))\ncount = 0\nwhile(1):\n  flag = 0\n  for i in range(0, a, 1):\n    if (b[i] % 2 == 1) :\n      flag = 1\n  if (flag == 1) :\n    break\n  for i in range(0, a, 1):\n    b[i] \/= 2\n  count += 1\nprint(count)","label":0}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s481630211","submission":"f=lambda:map(int,input().split())\nN,X=f()\n*A,=f()\nA=[0]+A\n\nc=0\nfor i in range(N):\n c+=max(0,A[i]+A[i+1]-X)\n A[i+1]=min(A[i+1],X-A[i])\nprint(c)","label":0}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s491684172","submission":"import numpy as np\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\nN, D, A = map(int, input().split())\n\nI = np.array(read().split(), np.int64)\nX = I[::2]\nH = I[1::2]\n\nsort_ind = np.argsort(X)\nX = X[sort_ind]\nH = H[sort_ind]\n\natack = np.zeros(N+1, np.int64)\ncover = np.searchsorted(X, X + (2 * D), side = 'right')\n\nans = 0\ncnt = 0\nfor i in range(N):\n\tcnt += atack[i]\n\tH[i] -= cnt\n\tif H[i] > 0:\n\t\ttmp = -(-H[i]\/\/A)\n\t\tans += tmp\n\t\tcnt += tmp * A\n\t\tatack[cover[i]] -= tmp * A\n\nprint(ans)","label":0}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s188107034","submission":"import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy,deepcopy\nfrom collections import deque,Counter\nfrom decimal import Decimal\ndef s(): return input()\ndef i(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef L(): return list(map(int,input().split()))\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nINF = 10**9\nmod = 10**9+7\n\nN = i()\nS = [i() for _ in range(N)]\nS.sort()\nans = sum(S)\nnum = 0\nfor i in range(N):\n    if S[i]%10 != 0:\n        num = S[i]\n        break\nif ans%10 == 0:\n    ans = ans-num\nif ans%10 == 0:\n    ans = 0\nprint(ans)","label":0}
{"problem_id":"p04012","problem":"Let w be a string consisting of lowercase letters.\nWe will call w beautiful if the following condition is satisfied:\n\nEach lowercase letter of the English alphabet occurs even number of times in w.\n\nYou are given the string w. Determine if w is beautiful.","submission_id":"s831945303","submission":"w = input()\nwhile len(w) > 0:\n    a = w[0]\n    if w.count(a)%2 != 0:\n        print(\"No\")\n        exit()\n    w = w.replace(a,\"\")\nprint(\"Yes\")","label":0}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s011869298","submission":"from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(n):\n        mod = n - i\n        x = 1\n        tmp = 0\n        while x * mod <= n:\n            tmp += b[x * mod - 1]\n            x += 1\n        if tmp % 2 != a[mod - 1]:\n            b[mod - 1] = 1\n\n    ans_m = 0\n    ans_b = []\n    for i in range(n):\n        if b[i] > 0:\n            ans_m += 1\n            ans_b.append(i + 1)\n    print(ans_m)\n    if len(ans_b) > 0:\n        print(*ans_b)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n","label":0}
{"problem_id":"p02757","problem":"Takahashi has a string S of length N consisting of digits from 0 through 9.\nHe loves the prime number P. He wants to know how many non-empty (contiguous) substrings of S - there are N \\times (N + 1) \/ 2 of them - are divisible by P when regarded as integers written in base ten.\nHere substrings starting with a 0 also count, and substrings originated from different positions in S are distinguished, even if they are equal as strings or integers.\nCompute this count to help Takahashi.","submission_id":"s768519660","submission":"def main():\n\tN, P = map(int, input().split())\n\tS = [int(c) for c in input()]\n\n\tif 10 % P == 0:\n\t\tans = 0\n\t\tfor i in range(N):\n\t\t\tif S[i] % P == 0:\n\t\t\t\tans += (i + 1)\n\n\t\tprint(ans)\n\t\treturn\n\n\n\tM = [0] * (N + 1) #\u5de6\u304b\u3089i\u756a\u76ee\u304b\u3089\u6700\u5f8c\u307e\u3067\u306e\u6570\u5b57\u306emod p\n\n\tt = 1\n\tfor i in range(N - 1, -1, -1):\n\t\tM[i] = (M[i + 1] + t % P * S[i]) % P\n\t\tt = (t * 10) % P\n\n\tC = [0] * 10000\n\n\tfor v in M:\n\t\tC[v] += 1\n\n\tans = 0\n\tfor v in C:\n\t\tif v > 0:\n\t\t\tans += v * (v - 1) \/\/ 2\n\n\tprint(ans)\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s682176278","submission":"#!\/usr\/bin\/env python3\n\ndef calcExpectedValue(prob):\n  return (prob+1)\/2\n\ndef solve(n,k,p):\n  expLst = [calcExpectedValue(prob) for prob in p]\n  cum = [0]*(n+1)\n  for i in range(n):\n    cum[i+1] = cum[i] + expLst[i]\n  ans = 0\n  i = 0\n  while i+k <= n:\n    ans = max(ans,cum[i+k]-cum[i])\n    i += 1\n  return ans\n\n\n\n\ndef main():\n  N,K = map(int,input().split())\n  p = list(map(int,input().split()))\n  print(solve(N,K,p))\n  return\n\nif __name__ == '__main__':\n  main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s352869868","submission":"N = int(input())\nAlist = list(map(int, input().split()))\nanswer = 40\nfor a in Alist:\n    i = 0\n    while a % 2 == 0:\n        a = a \/ 2\n        i += 1\n    if i < answer:\n        answer = i\nprint(answer)\n","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s826882094","submission":"import sys\n\nN,K=map(int,input().split())\nP=list(map(int,input().split()))\nQ=[(1+p)\/2 for p in P]\ntemp=sum(Q[:K])\nans=temp\nfor i in range(N):\n  try:\n    temp=temp-Q[i]+Q[i+K]\n    ans=max(ans,temp)\n  except:\n    pass\nelse:\n  print(ans)\n","label":0}
{"problem_id":"p03547","problem":"In programming, hexadecimal notation is often used.\nIn hexadecimal notation, besides the ten digits 0, 1, ..., 9, the six letters A, B, C, D, E and F are used to represent the values 10, 11, 12, 13, 14 and 15, respectively.\nIn this problem, you are given two letters X and Y. Each X and Y is A, B, C, D, E or F.\nWhen X and Y are seen as hexadecimal numbers, which is larger?","submission_id":"s664950387","submission":"X, Y = input().split()\nif (ord(X) < ord(Y)):\n    print('<')\nelif (ord(X) > ord(Y)):\n    print('>')\nelse:\n    print('=')\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s351559640","submission":"N = int(input())\nA = [int(i) for i in input().split()]\n\nres = 0\nwhile True:\n  #check\n  if len(list([i for i in A if i % 2 != 0])) == 0:\n    res += 1\n  else:\n  \tbreak\n  #2\u3067\u308f\u308b\n  A = [i \/\/ 2 for i in A]\n\n  \nprint(res)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s407245924","submission":"mycode = r'''\n# distutils: language=c++\n# cython: language_level=3\n# cython: boundscheck=False\n# cython: wraparound=False\n# cython: infer_types=True\n# cython: cdivision=True\n# False:Cython \u306fC\u306e\u578b\u306b\u5bfe\u3059\u308b\u9664\u7b97\u30fb\u5270\u4f59\u6f14\u7b97\u5b50\u306b\u95a2\u3059\u308b\u4ed5\u69d8\u3092\u3001(\u88ab\u6f14\u7b97\u5b50\u9593\u306e\u7b26\u53f7\u304c\u7570\u306a\u308b\u5834\u5408\u306e\u632f\u308b\u821e\u3044\u304c\u7570\u306a\u308b)Python\u306eint\u306e\u4ed5\u69d8\u306b\u5408\u308f\u305b\u3001\u9664\u7b97\u3059\u308b\u6570\u304c0\u306e\u5834\u5408\u306bZeroDivisionError\u3092\u9001\u51fa\u3057\u307e\u3059\u3002\u3053\u306e\u51e6\u7406\u3092\u884c\u308f\u305b\u308b\u3068\u3001\u901f\u5ea6\u306b 35% \u3050\u3089\u3044\u306e\u30da\u30ca\u30eb\u30c6\u30a3\u304c\u751f\u3058\u307e\u3059\u3002 True:\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u305b\u3093\u3002\n\n# cython\u30e9\u30a4\u30d6\u30e9\u30ea\u3088\u307f\u3053\u307f\nfrom libcpp.vector cimport vector as Vec\n\n# define \nctypedef long long LL\nctypedef Vec[LL] VLL #vector[long long]\nctypedef LL[::1] Arr\n\nimport numpy as np\n\n\n# \u8aad\u307f\u8fbc\u307f\u306fpython\u5074\u3067\u884c\u3046\nimport sys\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline #\u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\n\ncdef LL a_int(): return int(readline())\n\ndef ints(): return np.fromstring(readline(), sep=' ', dtype=np.int64)\n\ncdef LL N=a_int()\n#\u3053\u306e\u554f\u984c\u3067\u306fnumpy\u3082\u4f7f\u3048\u308b\u67d4\u8edf\u3055\u3092\u7d39\u4ecb\u3057\u3088\u3046\n# \u4e00\u62ec\u306b\u51e6\u7406\u3059\u308b\u969b\u306f\u751f\u306enumpy\u3067\u826f\u3044\u304c\u3001index\u30a2\u30af\u30bb\u30b9\u306b\u95a2\u3057\u3066\u306f\u975e\u5e38\u306b\u4f4e\u901f\u3067\u3042\u308b\u3002\n# \u305d\u3046\u3044\u3046\u3068\u304d\u306ftyped memoryview\u3068\u3044\u3046\u5f62\u5f0f\u306b\u3059\u308b\u3002\n# \u3068\u3044\u3063\u3066\u3082\u5b9f\u614b\u306fnumpy\u3068\u540c\u3058\u306a\u306e\u3067\u3001numpy\u306e\u95a2\u6570\u306e\u5f15\u6570\u306b\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002\u305f\u3060\u3057\u3001\u30d5\u30a1\u30f3\u30b7\u30fc\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u30e1\u30bd\u30c3\u30c9\u306e\u5229\u7528\u306f\u3067\u304d\u306a\u3044\u3002\n\ncdef Arr A = ints() \n# \u305b\u3063\u304b\u304f\u306a\u306e\u3067A\u306e\u5404\u8981\u7d20\u306f\u4f55\u56de\u5272\u308c\u308b\u304b\u8a18\u9332\u3057\u3066\u304a\u3053\u3046\ncdef VLL candi =VLL()\ncdef LL cnt, a, i\n#for a in A: #\u3053\u306e\u66f8\u304d\u65b9\u306f\u304b\u306a\u308a\u9045\u304f\u306a\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981 #C\u3063\u307d\u3044\u66f8\u304d\u65b9\u304c\u57fa\u672c\u7684\u306b\u65e9\u3044\u3053\u3068\u3092\u62bc\u3055\u3048\u3066\u3044\u308c\u3070\u5927\u4e08\u592b\nfor i in range(len(A)):\n    a=A[i]\n    cnt=0\n    while a%2==0: #\u307e\u30602\u3067\u5272\u308c\u308b\u306a\u3089\n        a\/\/=2\n        cnt+=1\n    candi.push_back(cnt)\n#print(candi) #vector\u3092python object\u3068\u3057\u3066\u6271\u3046\u5834\u5408\u3001cython\u306f\u81ea\u52d5\u7684\u306blist\u3068\u3057\u3066\u5909\u63db\u3057\u3066\u304f\u308c\u308b\nprint(min(candi))\n\n'''\n\nimport sys\nif sys.argv[-1] == 'ONLINE_JUDGE':  # \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\n    import os\n    with open('mycode.pyx', 'w') as f:\n        f.write(mycode)\n    os.system('cythonize -i -3 -b mycode.pyx')\n\nimport mycode\n","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s752655137","submission":"n = int(input())\nls = sorted(list(map(int,input().split())))\n\nans = 0\nfor i in range(len(ls)-2) :\n  a = ls[i]\n  for j in range(len(ls)-i-2) :\n    b = ls[i+1+j]\n    for k in range(len(ls)-i-j-1) :\n      c = ls[i+j+k+1]\n      if b-a < c < b+a and a!=b!=c!=a :\n        ans += 1\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s245651588","submission":"import math\nn = input()\na = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\nprint(round(ans))","label":0}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s237822227","submission":"s = input()\ns = s[::-1]\nt = [\"dream\", \"dreamer\", \"erase\", \"eraser\"]\n\ni = 0\nwhile i < len(s) - 7 + 1:\n    for j in t:\n        if s[i:i + len(j)] == j[::-1]:\n            i += len(j)\n            break\n    else:\n        print(\"NO\")\n        break\nelse:\n    for j in t:\n        if s[i:] == j[::-1] or s[i:] == \"\":\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s477101046","submission":"N = int(input())\na = list(map(int,input().split()))\ncount=0\nwhile True:\n    flag = False\n    for i in range(N):\n        if a[i] % 2==1:\n            flag = True\n    if flag:\n        break\n    for i in range(N):\n        a[i]\/=2\n\n    count += 1\n\nprint(count)","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s249658666","submission":"h, n = [int(i) for i in input().split()]\n\nmagics = [None]\n\n\nclass Magic:\n    def __init__(self, attack, cost):\n        self.attack = attack\n        self.cost = cost\n\n\nmaxA = 0\nfor i in range(n):\n    attack, cost = [int(i) for i in input().split()]\n    maxA = max(maxA, attack)\n    magics.append(Magic(attack, cost))\n\ndp = [[10 ** 9 for i in range(h + maxA)] for j in range(n + 1)]\n\nfor i in range(n + 1):\n    for j in range(h + maxA):\n        if j == 0:\n            dp[i][j] = 0\n        elif i == 0:\n            continue\n        elif j - magics[i].attack >= 0:\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - magics[i].attack] + magics[i].cost)\n        else:\n            dp[i][j] = dp[i - 1][j]\n\nprint(min(dp[-1][h:]))\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s989626766","submission":"N = int(input())\nA = list(map(int, input().split()))\n \ncount = 0\nflag = False\nwhile True:\n  for n in range(N):\n    if A[n] % 2 != 0:\n      flag = True\n      break\n  if flag: break\n  \n  for n in range(N):\n    A[n] \/\/= 2\n  count += 1\n\nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s265543823","submission":"N = int(input())\n\nA = list(map(int, input().split()))\n\nres = 10 ** 9\n\nfor a in A:\n    t = 0\n    while a % 2 == 0:\n        t += 1\n        a \/\/= 2\n\n    res = min(res, t)\n\nprint(res)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s937911098","submission":"import numpy as np\nn = int(input())\nA = list(map(int, input().split()))\nA = np.array(A)\ncnt = 0\nwhile all(a % 2 == 0 for a in A):\n    A = A\/2\n    cnt += 1\nprint(cnt)\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s065814772","submission":"import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = 10 ** 9\nfor v in a:\n    tmp = 0\n    while v % 2 == 0:\n        tmp += 1\n        v \/\/= 2\n    ans = min(ans, tmp)\nprint(ans)\n","label":0}
{"problem_id":"p02597","problem":"An altar enshrines N stones arranged in a row from left to right. The color of the i-th stone from the left (1 \\leq i \\leq N) is given to you as a character c_i; R stands for red and W stands for white.\nYou can do the following two kinds of operations any number of times in any order:\n\nChoose two stones (not necessarily adjacent) and swap them.\nChoose one stone and change its color (from red to white and vice versa).\n\nAccording to a fortune-teller, a white stone placed to the immediate left of a red stone will bring a disaster. At least how many operations are needed to reach a situation without such a white stone?","submission_id":"s821188970","submission":"N = int(input())\nC = input()\nrcount = len([1 for c in C if c == \"R\"])\n\ncount = 0\nr = 0\nw = 0\nfor i in range(rcount):\n    c = C[i]\n    if c == \"W\":\n        if r > 0:\n            r -= 1\n            count += 1\n        else:\n            w += 1\n    c = C[N-i-1]\n    if c == \"R\":\n        if w > 0:\n            w -= 1\n            count += 1\n        else:\n            r += 1\nans = count + w\nprint(ans)","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s678475604","submission":"from sys import stdin\ninput = stdin.readline\nN = map(int, input().split())\nL = list(map(int, input().split()))\n\nc=0\n\nfor i in range(len(L)-2):\n    for j in range(i+1,len(L)):\n        for k in range(j+1,len(L)):\n            if L[i]+L[j]>L[k] and L[j]+L[k]>L[i] and L[k]+L[i]>L[j] and L[i]!=L[j] and L[j]!=L[k] and L[k]!=L[i]:c=c+1\n\nprint(c)              ","label":0}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s335976539","submission":"def main():\n    a,b,c = map(int,input().split(\" \"))\n    if (c-a-b)**2 > a*b*4 and c > a + b:\n        print(\"Yes\")\n    else:\n        print(\"No\") \nmain()","label":0}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s484393484","submission":"# C\nfrom collections import Counter\nN = int(input())\nS = [input() for _ in range(N)]\ncountS = Counter(S)\nmaxS = max(countS.values())\nans = []\nfor key,value in countS.items():\n  if value == maxS:\n    ans.append(key)\n\nfor a in sorted(ans):\n  print(a)\n","label":0}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s446110671","submission":"'''\nCreated on 2020\/08\/20\n\n@author: harurun\n'''\ndef main():\n  import sys\n  pin=sys.stdin.readline\n  pout=sys.stdout.write\n  perr=sys.stderr.write\n  \n  N=int(pin())\n  S=pin()[:-1]\n  K=int(pin())\n  t=S[K-1]\n  for i in range(N):\n    if t==S[i]:\n      pout(t)\n    else:\n      pout(\"*\")\n  print()\n  return \nmain()","label":0}
{"problem_id":"p00001","problem":"There is a data which provides heights (in meter) of mountains. The data is only for ten mountains.","submission_id":"s560028624","submission":"print \"\\n\".join(map(str, sorted([int(raw_input()) for i in range(10)], reverse=True)[:3]))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s874263484","submission":"n = int(input())\na = list(map(int, input().split()))\ncount = 0\n# list a[i]\u304c\u5076\u6570\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3002\u30eb\u30fc\u30d7\u306f\u3068\u308a\u3042\u3048\u305a\u7701\u7565\u3059\u308b\n\nexist_odd = False\nwhile exist_odd == False:\n    for i in range(n):\n        if a[i] % 2 != 0:\n            exist_odd = True\n            if n != i:\n                count -= 1\n            break\n        else:\n            a[i] = a[i] \/ 2\n    count += 1\n    # print(count)\nprint(count)","label":0}
{"problem_id":"p03109","problem":"You are given a string S as input. This represents a valid date in the year 2019 in the yyyy\/mm\/dd format. (For example, April 30, 2019 is represented as 2019\/04\/30.)\nWrite a program that prints Heisei if the date represented by S is not later than April 30, 2019, and prints TBD otherwise.","submission_id":"s237017866","submission":"s=input()\nif s[5:7] in ['01','02','03']:\n  print('Heisei')\nelif s[6:7] == '4' and int(s[-2:-1]) <= 30:\n  print('Heisei')\nelse:\n  print('TBD')\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s204229020","submission":"N = int(input())\nA = list(map(int, input().split()))\nans = float('inf')\nfor a in A:\n    ans = min(ans, len(bin(a)) - bin(a).rfind('1')-1)\nprint(ans)\n","label":0}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s828879500","submission":"# AC: msec(Python3)\nfrom math import factorial\nimport sys\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\nMOD = 10**9+7\n\ndef cmb(n, r):\n    if n < 0 or r < 0:\n        return 0\n    if r > n:\n        return 0\n\n    r = min(n-r, r)\n    res = 1\n    for i in range(r):\n        res *= n - i\n\n    return res \/\/ factorial(r)\n\n\ndef prime_factorization(n):\n    d = []\n    i, e = 2, 0  # factor, exponent\n    while i * i <= n:\n        while n % i == 0:\n            n \/\/= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\n\n\ndef main():\n    N,M = map(int, readline().split())\n\n    d = prime_factorization(M)\n\n    ans = 1\n    for i, e in d:\n        ans *= cmb(N-1+e, e)\n        ans %= MOD\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s364052308","submission":"n = int(input())\na = list(map(int, input().split()))\n\nfor i in range(n):\n    count = 0\n    for j in reversed(bin(a[i])):\n        if j == '0':\n            count+=1\n        else:\n            break\n    a[i] = count\n\nprint(min(a))","label":0}
{"problem_id":"p03599","problem":"Snuke is making sugar water in a beaker.\nInitially, the beaker is empty. Snuke can perform the following four types of operations any number of times. He may choose not to perform some types of operations.\n\nOperation 1: Pour 100A grams of water into the beaker.\nOperation 2: Pour 100B grams of water into the beaker.\nOperation 3: Put C grams of sugar into the beaker.\nOperation 4: Put D grams of sugar into the beaker.\n\nIn our experimental environment, E grams of sugar can dissolve into 100 grams of water.\nSnuke will make sugar water with the highest possible density.\nThe beaker can contain at most F grams of substances (water and sugar combined), and there must not be any undissolved sugar in the beaker.\nFind the mass of the sugar water Snuke will make, and the mass of sugar dissolved in it.\nIf there is more than one candidate, any of them will be accepted.\nWe remind you that the sugar water that contains a grams of water and b grams of sugar is \\frac{100b}{a + b} percent.\nAlso, in this problem, pure water that does not contain any sugar is regarded as 0 percent density sugar water.","submission_id":"s332603246","submission":"a, b, c, d, e, f = map(int, input().split())\n\nmax_nodo = 0\nans = [100*a, 0]\nfor i in range(30\/\/a+1):\n    for j in range(30\/\/b+1):\n        mizu = 100*i*a + 100*j*b\n        if mizu > f: break\n        if mizu == 0: continue\n        maxi = (i*a + j*b) * e\n        for k in range(maxi\/\/c+1):\n            for l in range(maxi\/\/d+1):\n                sato = c*k + d*l\n                if mizu+sato > f: break\n                if sato > maxi: break\n                nodo = sato \/ (mizu+sato)\n                if nodo > max_nodo:\n                    max_nodo = nodo\n                    ans = [mizu+sato, sato]\n\nprint(ans[0], ans[1])","label":0}
{"problem_id":"p03107","problem":"There are N cubes stacked vertically on a desk.\nYou are given a string S of length N. The color of the i-th cube from the bottom is red if the i-th character in S is 0, and blue if that character is 1.\nYou can perform the following operation any number of times: choose a red cube and a blue cube that are adjacent, and remove them. Here, the cubes that were stacked on the removed cubes will fall down onto the object below them.\nAt most how many cubes can be removed?","submission_id":"s080391895","submission":"s = input()\n\nans = 0\nind = 0\nwhile ind < len(s)-1:\n    if s[ind:ind+2] in (\"01\", \"10\"):\n        s = s[:ind]+s[ind+2:]\n        ans += 1\n        ind = max(0, ind-1)\n\n    else:\n        ind += 1\nprint(ans*2)\n","label":0}
{"problem_id":"p03095","problem":"You are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.","submission_id":"s889856693","submission":"\nn = int(input())\ns = list(input())\nt = []\nans = 1\ncount= []\n\nt = set(s)\nt = list(t)\n\nfor i in range(len(t)):\n    count.append(s.count(t[i]))\n\nfor j in range(len(count)):\n    ans *= (count[j] + 1)\n\nprint((ans-1)%(10**9 + 7))\n","label":0}
{"problem_id":"p02772","problem":"You are an immigration officer in the Kingdom of AtCoder. The document carried by an immigrant has some number of integers written on it, and you need to check whether they meet certain criteria.\nAccording to the regulation, the immigrant should be allowed entry to the kingdom if and only if the following condition is satisfied:\n\nAll even numbers written on the document are divisible by 3 or 5.\n\nIf the immigrant should be allowed entry according to the regulation, output APPROVED; otherwise, print DENIED.","submission_id":"s782895472","submission":"N = int(input())\nA = list(map(int, input().split()))\n\nlst = []\nfor i in A:\n    if i % 2 == 0:\n        lst.append(i)\nlst2 = []\nif lst:\n    for j in lst:\n        if j % 3 == 0 or j % 5 == 0:\n            lst2.append(j)\n    if lst == lst2:\n        print('APPROVED')\n    else:\n        print('DENIED')\nelse:\n    print('APPROVED')","label":0}
{"problem_id":"p03806","problem":"Dolphin is planning to generate a small amount of a certain chemical substance C.\nIn order to generate the substance C, he must prepare a solution which is a mixture of two substances A and B in the ratio of M_a:M_b.\nHe does not have any stock of chemicals, however, so he will purchase some chemicals at a local pharmacy.\nThe pharmacy sells N kinds of chemicals. For each kind of chemical, there is exactly one package of that chemical in stock.\nThe package of chemical i contains a_i grams of the substance A and b_i grams of the substance B, and is sold for c_i yen (the currency of Japan).\nDolphin will purchase some of these packages. For some reason, he must use all contents of the purchased packages to generate the substance C.\nFind the minimum amount of money required to generate the substance C.\nIf it is not possible to generate the substance C by purchasing any combination of packages at the pharmacy, report that fact.","submission_id":"s626738673","submission":"N, A, B = map(int, input().split())\nX = [1<<20] * 4040\nfor _ in range(N):\n    a, b, c = map(int, input().split())\n    t = A*b-B*a\n    X = [min(X[i], (0 if (i-t)%4040 == 0 else X[(i-t)%4040]) + c) for i in range(4040)]\nprint(-1 if X[0] > 1<<18 else X[0])","label":0}
{"problem_id":"p03026","problem":"You are given a tree with N vertices 1,2,\\ldots,N, and positive integers c_1,c_2,\\ldots,c_N.\nThe i-th edge in the tree (1 \\leq i \\leq N-1) connects Vertex a_i and Vertex b_i.\nWe will write a positive integer on each vertex in T and calculate our score as follows:\n\nOn each edge, write the smaller of the integers written on the two endpoints.\nLet our score be the sum of the integers written on all the edges.\n\nFind the maximum possible score when we write each of c_1,c_2,\\ldots,c_N on one vertex in T, and show one way to achieve it. If an integer occurs multiple times in c_1,c_2,\\ldots,c_N, we must use it that number of times.","submission_id":"s398011758","submission":"from collections import defaultdict, deque\nd = defaultdict(list)\nn = int(input())\nfor i in range(n-1):\n    u, v = map(int, input().split())\n    u-=1\n    v-=1\n    d[u].append(v)\n    d[v].append(u)\nc = list(map(int, input().split()))\nc.sort(reverse = True)\nvis = [0 for i in range(n)]\nq = deque([])\nq.append(0)\nvis[0] = c[0]\nind = 1\nwhile(q):\n    f = q.popleft()\n    for i in d[f]:\n        if not vis[i]:\n            vis[i] = c[ind]\n            ind+=1\n            q.append(i)\nprint(sum(vis) - c[0])\nprint(*vis)","label":0}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s897380818","submission":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians#, log2\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy, copy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n#import numpy as np\n#from decimal import *\n\nN, x = MAP()\na = LIST()\nans = max(0, a[0]-x)\na[0] = min(a[0], x)\n\nfor i in range(1, N):\n\tans += max(0, a[i]+a[i-1]-x)\n\ta[i] = min(a[i], x - a[i-1])\n\nprint(ans)","label":0}
{"problem_id":"p03285","problem":"La Confiserie d'ABC sells cakes at 4 dollars each and doughnuts at 7 dollars each.\nDetermine if there is a way to buy some of them for exactly N dollars. You can buy two or more doughnuts and two or more cakes, and you can also choose to buy zero doughnuts or zero cakes.","submission_id":"s431876179","submission":"n = int(input())\n\nif (n % 7) == 3 or n in (1, 2, 5, 6, 9, 13):\n  print(\"No\")\nelse:\n  print(\"Yes\")","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s664228405","submission":"n = int(input())\ndata = list(map(int,input().split()))\nbool = True\ncount = 0\nwhile bool:\n    for i in range (n):\n        if data[i] % 2 != 0:\n            bool = False\n        data[i] = data[i] \/\/ 2\n    if bool == False:\n        print(count)\n    count += 1\n","label":0}
{"problem_id":"p03026","problem":"You are given a tree with N vertices 1,2,\\ldots,N, and positive integers c_1,c_2,\\ldots,c_N.\nThe i-th edge in the tree (1 \\leq i \\leq N-1) connects Vertex a_i and Vertex b_i.\nWe will write a positive integer on each vertex in T and calculate our score as follows:\n\nOn each edge, write the smaller of the integers written on the two endpoints.\nLet our score be the sum of the integers written on all the edges.\n\nFind the maximum possible score when we write each of c_1,c_2,\\ldots,c_N on one vertex in T, and show one way to achieve it. If an integer occurs multiple times in c_1,c_2,\\ldots,c_N, we must use it that number of times.","submission_id":"s573161084","submission":"from collections import defaultdict\nN = int(input())\ndic = defaultdict(list)\nfor n in range(N - 1):\n    a, b = map(int, input().split())\n    dic[a].append(b)\n    dic[b].append(a)\nc_list = sorted(map(int, input().split()))\nM = sum(c_list[:-1])\nd_list = [False] * N\nfor i in range(1, N + 1):\n    if len(dic[i]) == 1:\n        break\nblank = N\nq = [i]\nwhile blank:\n    i = q.pop(0)\n    if not d_list[i - 1]:\n        q += dic[i]\n        d_list[i - 1] = c_list[blank - 1]\n        blank -= 1\nprint(M)\nprint(' '.join(map(str, d_list)))","label":0}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s935479470","submission":"s=list(input())\nt=list(input())\nans=[]\nfor i in range(len(s)-len(t)+1):\n  ct=0\n  for j in range(len(t)):\n    if s[i+j]!=t[j]:\n      ct+=1\n  ans.append(ct)\nprint(min(ans))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s489919906","submission":"n = int(input())\na = list(map(int, input().split()))\nres = 100\nfor i in range(n):\n    for j in range(100):\n        if a[i] % 2 == 1:\n            break\n        a[i] \/\/= 2\n    res = min(res, j)\n    if res == 0:\n        break\nprint(res)\n","label":0}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s848020132","submission":"input()\nS = input()\nK = int(input())\n\nc = S[K -1]\nfor i in S:\n    if i != c:\n        print('*', end='')\n    else:\n        print(i, end='')\n","label":0}
{"problem_id":"p03351","problem":"Three people, A, B and C, are trying to communicate using transceivers.\nThey are standing along a number line, and the coordinates of A, B and C are a, b and c (in meters), respectively.\nTwo people can directly communicate when the distance between them is at most d meters.\nDetermine if A and C can communicate, either directly or indirectly.\nHere, A and C can indirectly communicate when A and B can directly communicate and also B and C can directly communicate.","submission_id":"s565001100","submission":"def resolve():\n\ta, b, c, d = map(int, input().split())\n\tindir = abs(a - b) <= d and abs(b-c) <= d\n\tdir = abs(a-c) <= d\n\tif dir or indir:\n\t\tprint('Yes')\n\telse:\n\t\tprint('No')\nresolve()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s391207629","submission":"n = int(input())\na = list(map(int,input().split()))\nx = 0\nt = True\nwhile t:\n    for i in range(n):\n        if a[i] % 2 == 1:\n            t = False\n        else:\n            a[i] \/= 2\n    x += 1\nprint(x-1)","label":0}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s568587795","submission":"x, y = map(int, input().split())\n\nans = None\n\nif x < 0:\n    if y < x:\n        ans = x - y + 2\n    elif y <= 0:  # x <= y < 0\n        ans = y - x\n    else:\n        ans = max(abs(x), abs(y)) - min(abs(x), abs(y)) + 1\nelif x == 0:\n    if y < x:\n        ans = x - y + 1\n    else:\n        ans = y - x\nelse:\n    if y >= x:\n        ans = y - x\n    elif x > y > 0:\n        ans = x - y + 2\n    elif y == 0:\n        ans = x - y + 1\n    else:\n        ans = max(abs(x), abs(y)) - min(abs(x), abs(y)) + 1\n\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s692355570","submission":"N = int(input())\nA = list(map(int, input().split()))\n\ndef cnt(x):\n  ret = 0\n  while x%2 == 0:\n    ret += 1\n    x \/\/= 2\n  return ret\n\nans = 30\nfor a in A:\n  ans = min(ans, cnt(a))\n\nprint(ans)","label":0}
{"problem_id":"p02239","problem":"Write a program which reads an directed graph $G = (V, E)$, and finds the shortest distance from vertex $1$ to each vertex (the number of edges in the shortest path). Vertices are identified by IDs $1, 2, ... n$.","submission_id":"s067980782","submission":"from collections import deque\nn = int(input())\nG = []\nfor _ in range(n):\n    u, k, *v = map(int, input().split())\n    u -= 1\n    G.append(v)\nq = deque()\nseen = [False] * n\ndist = [-1] * n\n\ndef main():\n    q.append(0)\n    seen[0] = True\n    dist[0] = 0\n    while len(q) > 0:\n        now_v = q.popleft()\n        for new_v in G[now_v]:\n            new_v -= 1\n            if seen[new_v] is True:\n                continue\n            seen[new_v] = True\n            q.append(new_v)\n#             print(now_v, new_v)\n            dist[new_v] = dist[now_v] + 1\n    \n    for i in range(n):\n        print(i+1, dist[i])\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s892550661","submission":"H, N=map(int, input().split())\nAB=[list(map(int, input().split())) for _ in range(N)]\ndp=[0]+[float('inf') for _ in range(2*10**4)]\nfor a, b in AB:\n  for i in range(a, H+a):\n    dp[i]=min(dp[i-a]+b, dp[i])\n    \nprint(min(dp[H:]))","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s537380782","submission":"n=int(input())\nl=list(map(int, input().split()))\n#l=list(l)\ncount=0\nfor i in range(n-2):\n    for j in range(i+1,n-1):\n        #print(i)\n        if l[j]!=l[i]:\n            #print(i)\n            for k in range(j+1,n):\n                a,b,c=[l[i],l[j],l[k]]\n                if a!=c and b!=c:\n                    if a+b>c and b+c>a and c+a>b:\n                        count+=1\n                    #print(i+1,j+1,k+1)\nprint(count)","label":0}
{"problem_id":"p02883","problem":"Takahashi will take part in an eating contest. Teams of N members will compete in this contest, and Takahashi's team consists of N players numbered 1 through N from youngest to oldest. The consumption coefficient of Member i is A_i.\nIn the contest, N foods numbered 1 through N will be presented, and the difficulty of Food i is F_i. The details of the contest are as follows:\n\nA team should assign one member to each food, and should not assign the same member to multiple foods.\nIt will take x \\times y seconds for a member to finish the food, where x is the consumption coefficient of the member and y is the difficulty of the dish.\nThe score of a team is the longest time it takes for an individual member to finish the food.\n\nBefore the contest, Takahashi's team decided to do some training. In one set of training, a member can reduce his\/her consumption coefficient by 1, as long as it does not go below 0. However, for financial reasons, the N members can do at most K sets of training in total.\nWhat is the minimum possible score of the team, achieved by choosing the amounts of members' training and allocating the dishes optimally?","submission_id":"s050383272","submission":"import numpy as np\n\nN, K = map(int, input().split())\nA = sorted(list(map(int, input().split())))\nF = sorted(list(map(int, input().split())), reverse=True)\n\nA = np.array(A, np.int64)\nF = np.array(F, np.int64)\n\nAsum = sum(A)\n\ndef test(X):\n    return (Asum - np.minimum(A, X\/\/F).sum() <= K)\n\nl = -1\nr = 10**12\n\nwhile (l + 1 < r):\n    mid = (l + r) \/\/ 2\n    if test(mid):\n        r = mid\n    else:\n        l = mid\n\nans = r\nprint(ans)\n","label":0}
{"problem_id":"p02697","problem":"You are going to hold a competition of one-to-one game called AtCoder Janken. (Janken is the Japanese name for Rock-paper-scissors.)\nN players will participate in this competition, and they are given distinct integers from 1 through N.\nThe arena has M playing fields for two players. You need to assign each playing field two distinct integers between 1 and N (inclusive).\nYou cannot assign the same integer to multiple playing fields.\nThe competition consists of N rounds, each of which proceeds as follows:\n\nFor each player, if there is a playing field that is assigned the player's integer, the player goes to that field and fight the other player who comes there.\nThen, each player adds 1 to its integer. If it becomes N+1, change it to 1.\n\nYou want to ensure that no player fights the same opponent more than once during the N rounds.\nPrint an assignment of integers to the playing fields satisfying this condition.\nIt can be proved that such an assignment always exists under the constraints given.","submission_id":"s778645826","submission":"n,m = list(map(int,input().split()))\n\na = n \/\/2\nb = a + 1\nabset = set()\n\nfor i in range(m):\n    print(a,b)\n    abset.add(b-a)\n    abset.add(n-b+a)\n    a -= 1\n    b += 1\n    if n % 2 == 0 and (b - a == abs(n - b + a) or b - a in abset or n - b + a in abset):\n        b += 1","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s553206892","submission":"n=int(input())\na=list(map(int,input().split()))\nans,cnt=36,0\nfor i in range(n):\n  while a[i]%2==0:\n    a[i]\/\/=2\n    cnt+=1\n  ans=min(ans,cnt)\n  cnt=0\nprint(ans)\n","label":0}
{"problem_id":"p02927","problem":"Today is August 24, one of the five Product Days in a year.\nA date m-d (m is the month, d is the date) is called a Product Day when d is a two-digit number, and all of the following conditions are satisfied (here d_{10} is the tens digit of the day and d_1 is the ones digit of the day):\n\nd_1 \\geq 2\nd_{10} \\geq 2\nd_1 \\times d_{10} = m\n\nTakahashi wants more Product Days, and he made a new calendar called Takahashi Calendar where a year consists of M month from Month 1 to Month M, and each month consists of D days from Day 1 to Day D.\nIn Takahashi Calendar, how many Product Days does a year have?","submission_id":"s612531279","submission":"M, D = input().split()\nM = int(M)\nd10 = int(D[0])\nif len(D) >1:\n  d1 = int(D[1])\nans = 0\nfor i in range(2,d10+1):\n  for j in range(2,10):\n    if i == d10 and j<=d1 and i*j <= M:\n      ans += 1\n     \n    elif i*j <= M and i<d10:\n      ans += 1\n      \nprint(ans)\n","label":0}
{"problem_id":"p03576","problem":"We have N points in a two-dimensional plane.\nThe coordinates of the i-th point (1 \\leq i \\leq N) are (x_i,y_i).\nLet us consider a rectangle whose sides are parallel to the coordinate axes that contains K or more of the N points in its interior.\nHere, points on the sides of the rectangle are considered to be in the interior.\nFind the minimum possible area of such a rectangle.","submission_id":"s682388670","submission":"def main():\n    n,k=map(int,input().split())\n    xy=[list(map(int,input().split())) for i in range(n)]\n    x,y=[[xy[i][0],i] for i in range(n)],[[xy[i][1],i] for i in range(n)]\n    x.sort()\n    y.sort()\n    ans=10**18*4\n    for i1 in range(n):\n        i1_sub=n-i1\n        x_sub1=x[i1][0]\n        for l1 in range(i1_sub,1,-1):\n            x_sub2=x[i1+l1-1][0]\n            for i2 in range(n):\n                i2_sub=n-i2\n                y_sub1=y[i2][0]\n                x_subsub=x_sub2-x_sub1\n                for l2 in range(i2_sub,1,-1):\n                    y_sub2=y[i2+l2-1][0]\n                    z=0\n                    for i in range(n):\n                        if x_sub1<=xy[i][0]<=x_sub2 and y_sub1<=xy[i][1]<=y_sub2:\n                            z+=1\n                        if z>=k:\n                            ans=min(x_subsub*(y_sub2-y_sub1),ans)\n                            break\n                    else:\n                        break\n    print(ans)\nmain()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s319268780","submission":"N = int(input())\na = list(map(int, input().split()))\nfrag = 0\nans = 0\nwhile True:\n    for i in range(N):\n        if a[i] % 2 == 1:\n            frag = 1\n            break\n    if frag == 0:\n        for i in range(N):\n            a[i] \/= 2\n        ans += 1\n    else:\n        break\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s472358305","submission":"n=int(input())\na= list(map(int, input().strip().split()))\ndef how_many_times_divisible(n):\n\tans = 0\n\twhile n % 2 == 0:\n\t\tn \/= 2\n\t\tans += 1\n\treturn ans\nans = min(map(how_many_times_divisible, a))\nprint(ans)\n","label":0}
{"problem_id":"p02775","problem":"In the Kingdom of AtCoder, only banknotes are used as currency. There are 10^{100}+1 kinds of banknotes, with the values of 1, 10, 10^2, 10^3, \\dots, 10^{(10^{100})}. You have come shopping at a mall and are now buying a takoyaki machine with a value of N. (Takoyaki is the name of a Japanese snack.)\nTo make the payment, you will choose some amount of money which is at least N and give it to the clerk. Then, the clerk gives you back the change, which is the amount of money you give minus N.\nWhat will be the minimum possible number of total banknotes used by you and the clerk, when both choose the combination of banknotes to minimize this count?\nAssume that you have sufficient numbers of banknotes, and so does the clerk.","submission_id":"s608619067","submission":"n=input()\nk=len(n)\ndp=[[0]*2 for _ in range(k)]\ndp[0][0]=min(int(n[0]),11-int(n[0]))\ndp[0][1]=min(int(n[0])+1,11-(int(n[0])+1))\nfor i in range(1,k):\n  dig=int(n[i])\n  dp[i][0]=min(dp[i-1][0]+dig,dp[i-1][1]+10-dig)\n  dp[i][1]=min(dp[i-1][0]+dig+1,dp[i-1][1]+10-(dig+1))\nprint(dp[k-1][0])","label":0}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s764254757","submission":"n, border = map(int, input().split())\n\nboxes = [int(x) for x in input().split(' ')]\n\ncount = 0\nfor  i in range(n):\n    if(boxes[i] > border):\n        count += boxes[i] - border\n        boxes[i] = border\n\nfor i in range(n-1):\n    if(boxes[i] + boxes[i+1] > border):\n        count += boxes[i] + boxes[i+1] - border\n        boxes[i+1] -= boxes[i] + boxes[i+1] - border\n        \nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s062070246","submission":"N = int(input())\nA = list(map(int, input().split()))\n \nans = float(\"inf\")\nfor i in range(N):\n  a = A[i]\n  ans_tmp = 0\n  while a%2==0:\n    a = a\/\/2\n    ans_tmp += 1\n  ans = min(ans_tmp, ans)\nprint(ans)","label":0}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s521585953","submission":"a,b=map(int,input().split())\nh,w=100,100\nla=[]\nfor i in range(a-1):\n    if i==0:\n        x,y=0,-2\n    else:\n        x,y=la[-1]\n    y+=2\n    if y>=w:\n        x+=2\n        y=0\n    la.append((x,y))\nla=set(la)\nlb=[]\nfor i in range(b-1):\n    if i==0:\n        x,y=51,-2\n    else:\n        x,y=lb[-1]\n    y+=2\n    if y>=w:\n        x+=2\n        y=0\n    lb.append((x,y))\nlb=set(lb)\n\nans=[]\nprint(h,w)\nfor i in range(100):\n    tmp=\"\"\n    for j in range(100):\n        if (i,j) in la:\n            tmp+=\".\"\n        elif (i,j) in lb:\n            tmp+=\"#\"\n        elif i<50:\n            tmp+=\"#\"\n        else:\n            tmp+=\".\"\n    print(tmp)\n\n\n\n\n\n","label":0}
{"problem_id":"p03254","problem":"There are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he\/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.","submission_id":"s349465727","submission":"from sys import stdin\nnii=lambda:map(int,stdin.readline().split())\nlnii=lambda:list(map(int,stdin.readline().split()))\nfrom bisect import bisect\nfrom itertools import accumulate\n\nn,x=nii()\na=lnii()\na.sort()\n\nb=list(accumulate(a))\n\nif b[-1]<x:\n  print(n-1)\nelse:\n  inx=bisect(b,x)\n  print(inx)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s340169042","submission":"N=int(input())\nA=list(map(int,input().split()))\nMIN=10**9\nfor i in range(N):\n  count=0\n  while 1:\n    if A[i] % 2 == 0:\n      A[i] \/\/= 2\n    else:\n      break\n    count += 1\n  MIN = min(MIN,count)\n  if MIN==0:\n    print(0)\n    exit()\nprint(MIN)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s332184598","submission":"#3\n#8 12 40\nn=int(input())\nai=list(map(int,input().split()))\nb=[]\nfor a in ai:\n  count =0\n  while a%2==0 :\n    count+=1\n    a\/=2\n  b.append(count)\nprint(min(b))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s924201473","submission":"n = int(input())\na_n = [int(i) for i in input().split()]\n\ndef is_all_even(nums):\n    for n in nums:\n        if n % 2 == 1:\n            return False\n    return True\n\nret = 0\nwhile is_all_even(a_n):\n    i = 0\n    for a in a_n:\n        a_n[i] = a \/ 2\n        i += 1\n    ret += 1\n\nprint(ret)\n","label":0}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s441154376","submission":"N,k = map(int,input().split())\nA = list(map(int,input().split()))\nans = 0\nMOD = 10**9+7\nfor i in range(N):\n    for j in range(i+1,N):\n        if A[i] > A[j]:\n            ans += k*(k+1)\/\/2\n        elif A[i] < A[j]:\n            ans += k*(k-1)\/\/2\n\n        ans %= MOD\n\nprint(ans)","label":0}
{"problem_id":"p03418","problem":"Takahashi had a pair of two positive integers not exceeding N, (a,b), which he has forgotten.\nHe remembers that the remainder of a divided by b was greater than or equal to K.\nFind the number of possible pairs that he may have had.","submission_id":"s014481419","submission":"n, k = map(int, input().split())\n\nif k == 0:\n  print(n**2)\n  exit()\n\nans  = 0\n\nfor b in range(1,n+1):\n\n  # \u9023\u7d9a\u90e8\u5206\n  if b - k > 0:\n    ans += (n \/\/ b) * (b-k)\n    \n  # \u7e70\u308a\u8fd4\u3057\u7bc4\u56f2\u5916\n  if ((n - (n \/\/ b)*b) - (k-1)) > 0:\n    ans += ((n - (n \/\/ b)*b) - (k-1))\n\n\n  \n  \nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s614265931","submission":"N = int(input())\nA = [int(a) for a in input().split()]\n\ndef devisible(n):\n    count = 0\n    while n % 2 == 0:\n        n \/= 2\n        count += 1\n    return count\n\nprint(min(map(devisible, A)))","label":0}
{"problem_id":"p02265","problem":"Your task is to implement a double linked list.","submission_id":"s669674578","submission":"\nfrom collections import deque\nimport sys\n\nd=deque()\n\nn=int(input())\n\nfor i in range(n):\n    s=input()\n    if s=='deleteFirst':\n        d.popleft()\n    elif s=='deleteLast':\n        d.pop()\n    else:\n        ss,num=s.split()\n        if ss == 'insert':\n            d.appendleft(num)\n        else:\n            try:\n                d.remove(num)\n            except:\n                pass\n\nprint(' '.join(d))\n\n\"\"\"\ndef main():\n    num2 = 5\n    plus(num2)\n    print(num2)\n\ndef plus(num2):\n    num2 += 2\n    return num2\n\nif __name__==\"__main__\":\n    main()\n    \"\"\"\n","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s622063960","submission":"import fractions\ndef lcm(x, y):\n    return (x * y) \/\/ fractions.gcd(x, y)\n\n\nn,m = map(int,input().split())\n\ns1=input()\n\ns2=input()\n\nlen_moji = lcm(n,m)\n\nlen_s1 = []\n\nlen_s2 = []\n\nfor i in range(n):\n    len_s1.append(i*len_moji\/\/n+1)\n\nfor i in range(m):\n    len_s2.append(i*len_moji\/\/m+1)\n#print(len_s1)\n#print(len_s2)\ncount = 0\nfor ix, vs1 in enumerate(len_s1):\n    for jx in range(count,len(len_s2)):\n        #print(vs1, len_s2[jx])\n        if vs1 < len_s2[jx]:\n            count = jx-1\n            break\n        if vs1 == len_s2[jx]:\n            count = jx\n            if s1[ix] != s2[jx]:\n                print(-1)\n                exit()\n            break\nprint(len_moji)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s586931577","submission":"import sys\n\n\ninint = lambda: int(sys.stdin.readline())\ninintm = lambda: map(int, sys.stdin.readline().split())\ninintl = lambda: list(inintm())\ninstrm = lambda: map(str, sys.stdin.readline().split())\ninstrl = lambda: list(instrm())\n\nn = inint()\nA = inintl()\n\nans = 10**6\n\nfor a in A:\n    cnt = 0\n    while a % 2 == 0:\n        a \/= 2\n        cnt += 1\n    if cnt < ans:\n        ans = cnt\n\nprint(ans)\n","label":0}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s806184423","submission":"from collections import Counter\nn=int(input())\na=list(map(int,input().split()))\namod4=list(map(lambda x:x%4, a))\nd=Counter(amod4)\nif n-d[0]-d[2]<d[0]+1:\n  print('Yes')\nelif d[2]==0 and n==2*d[0]+1:\n  print('Yes')\nelse:\n  print('No')\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s949772152","submission":"# B - Shift only\nN = int(input())\nA = list(map(int,input().split()))\n\ndef div2(x):\n    ans = 0\n    while x%2==0:\n        x \/\/= 2\n        ans += 1\n    return ans\n\nans = 10000\nfor a in A:\n    ans = min(ans, div2(a))\nprint(ans)","label":0}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s803971673","submission":"n = int(raw_input())\nais,res = [0] + map(int, raw_input().split()) ,[0 for _ in range(n +1)]\nfor u in range(n, 0, -1):\n\tc,cumul = u,0\n\twhile(c <= n):\n\t\tcumul += res[c]\n\t\tc += u\n\tif ais[u] != (cumul % 2):  res[u] = 1\ns = sum(res)\nprint s\nif s: print ' '.join([str(i) for i in range(len(res)) if res[i] == 1])","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s168501686","submission":"n = int(input())\nli = list(map(int,input().split()))\n\ncount = 0\nflag = False\nwhile True:\n    for i in range(n):\n        if li[i]%2==1:\n            flag = True\n        li[i]\/=2\n    if flag:\n        break\n    count+=1\n\nprint(count)\n","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s797344222","submission":"#\n# Written by NoKnowledgeGG @YlePhan\n# ('\u03c9')\n#\n#import math\n#mod = 10**9+7\n#import itertools\n#import fractions\n#import numpy as np\n#mod = 10**4 + 7\ndef kiri(n,m):\n  r_ = n \/ m\n  if (r_ - (n \/\/ m)) > 0:\n    return (n\/\/m) + 1\n  else:\n    return (n\/\/m)\n\n\"\"\" n! mod m \u968e\u4e57\nmod = 1e9 + 7\nN = 10000000\nfac = [0] * N\ndef ini():\n  fac[0] = 1 % mod\n  for i in range(1,N):\n    fac[i] = fac[i-1] * i % mod\"\"\"\n\n\"\"\"mod = 1e9+7\nN = 10000000\npw = [0] * N\ndef ini(c):\n  pw[0] = 1 % mod\n  for i in range(1,N):\n    pw[i] = pw[i-1] * c % mod\"\"\"\n\n\"\"\"\ndef YEILD():\n  yield 'one'\n  yield 'two'\n  yield 'three'\ngenerator = YEILD()\nprint(next(generator))\nprint(next(generator))\nprint(next(generator))\n\"\"\"\n\"\"\"def gcd_(a,b):\n  if b == 0:#\u7d50\u5c40\u306fc,0\u306e\u6700\u5927\u516c\u7d04\u6570\u306fc\u306a\u306e\u306b\n    return a\n  return gcd_(a,a % b) # a = p * b + q\"\"\"\n\"\"\"def extgcd(a,b,x,y):\n  d = a\n  if b!=0:\n    d = extgcd(b,a%b,y,x)\n    y -= (a\/\/b) * x\n    print(x,y)\n  else:\n    x = 1\n    y = 0\n  return d\"\"\"\n\n\ndef readInts():\n  return list(map(int,input().split()))\n\ndef main():\n  n,a = readInts()\n  \n  X = readInts()\n  \n  X = list(map(lambda i: i-a, X))# lambda i\u306b\u3001 i - a\u3068\u3044\u3046\u6f14\u7b97\u306e\u3082\u3068 X\u304b\u3089\u5165\u308c\u308b\n  # \u3053\u3053\u3067\u3001\u5e73\u5747\u304c8\u306b\u306a\u308b\u3082\u306e key = 0\u306e\u6642\u304c\u7b54\u3048\u306b\u306a\u308b\u3002\n  # \u3060\u304b\u3089\u3053\u305d\u3000\u7b54\u3048\u3067 dp[0] - 1 \u3059\u308b\u306e\u306f\u3053\u306e\u305f\u3081\n  \n  dp = {0:1} \n  \n  for i in X:\n    for k,v in list(dp.items()): # key,value\u3092\u305d\u308c\u305e\u308c\u62bd\u51fa\n      dp[i+k] = dp.get(i+k, 0) + v\n      #\n      # get(\u306a\u3093\u304b) \u306a\u3093\u304b\u306b\u5165\u3063\u3066\u308b\u8f9e\u66f8\u306evalue\u304c\u8fd4\u3063\u3066\u304f\u308b\n      # \u7121\u304b\u3063\u305f\u3089\u3001get(\u306a\u3093\u304b,\u3007)\u3067\u3001\u3007\u306b\u5165\u3063\u3066\u308b\u306e\u3067\u8f9e\u66f8\u304c\u66f4\u65b0\u3055\u308c\u308b\n      # \n  # print(dp)\n  #{0: 6, 1: 6, 2: 2, -1: 2}\n  # \u8ca0\u306e\u6570\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u308b\n  print(dp[0]-1)\n  \nif __name__ == '__main__':\n  main()","label":0}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s506909172","submission":"X, K, D = map(int,input().split())\nans = abs(X)\nrem = K\nk = min(ans\/\/D,K)\nans -= k*D\nrem -= k\nif rem > 0:\n    if rem % 2 == 1:\n        ans = ans - D\n        # print(abs(ans))\nprint(abs(ans))\n\n","label":0}
{"problem_id":"p03317","problem":"There is a sequence of length N: A_1, A_2, ..., A_N. Initially, this sequence is a permutation of 1, 2, ..., N.\nOn this sequence, Snuke can perform the following operation:\n\nChoose K consecutive elements in the sequence. Then, replace the value of each chosen element with the minimum value among the chosen elements.\n\nSnuke would like to make all the elements in this sequence equal by repeating the operation above some number of times.\nFind the minimum number of operations required.\nIt can be proved that, Under the constraints of this problem, this objective is always achievable.","submission_id":"s170486506","submission":"n, k = (int(x) for x in input().split())\n\na = [int(x) for x in input().split()]\n\nif n == k:\n    print(1)\nelif k == 2:\n    print(n-1)\nelse:\n    rem = n % (k-1)\n    m = (n - rem) \/ (k-1)\n    if rem <= 1:\n        print(int(m))\n    else:\n        print(int(m+1))\n\n","label":0}
{"problem_id":"p02262","problem":"Shell Sort is a generalization of Insertion Sort to arrange a list of $n$ elements $A$.","submission_id":"s677291018","submission":"def insertionSort(A, n, g, cnt):\n    for i in xrange(1,n):\n        v = A[i]\n        j = i - g\n        while j >= 0 and A[j] > v:\n            A[j+g] = A[j]\n            j = j - g\n            cnt += 1\n        A[j+g] = v\n    return A, cnt\n\ndef shellSort(A, n):\n    cnt = 0\n    G = [1]\n    idx = 0\n    for i in range(1,len(A)):\n        if 3*G[idx]+1 < len(A):\n            G.append(3*G[idx]+1)\n            idx += 1\n    G = list(reversed(G[:]))\n    #print G\n    m = len(G)\n    print m\n    print ' '.join(map(str,G))\n    newA = A[:]\n    for i in range(0,m):\n        newA, cnt = insertionSort(newA[:],len(A),G[i],cnt)\n    return newA, cnt\n\ndef main():\n    n = int(input())\n    A = [int(input()) for i in xrange(n)]\n    newA, cnt = shellSort(A, n)\n    print cnt\n    for i in range(len(newA)):\n        print newA[i]\n    return 0\n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s540442392","submission":"#B - Shift only\nN = int(input())\nA = list(map(int,input().split()))\n\ndef div_2():\n    for i in range(N):\n        if A[i] % 2 == 0:\n            A[i] \/\/=  2\n        else :\n            return False\n    return A\n\ncount = 0\nwhile True:\n    if div_2() != False:\n        count += 1\n    else:\n        break\nprint(count)","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s833469262","submission":"import sys\ninput=sys.stdin.readline\nn,a=map(int,input().split())\nx=[0]+list(map(int,input().split()))\nsu=sum(x)\nmaxi=max(x)\ndp=[[[0 for k in range(maxi*n+1)] for j in range(51)] for i in range(51)]\ndp[0][0][0]=1\nfor i in range(1,n+1):\n    for j in range(i+1):\n        for k in range(maxi*j+1):\n            if k<x[i]:\n                dp[i][j][k]=dp[i-1][j][k]\n            if k>=x[i] and j>=1:\n                dp[i][j][k]=dp[i-1][j][k]+dp[i-1][j-1][k-x[i]]\nans=0\nfor t in range(1,n+1):\n    if a*t<=su:\n        ans+=dp[n][t][a*t]\n    else:\n        break\nprint(ans)\n","label":0}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s330360906","submission":"n = int(input())\na = [1e10]\nb = list(map(int, input().split()))\nfor i, num in enumerate(b):\n    if a[i] > num:\n        a[i] = num\n    a.append(num)\nprint(sum(a))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s878868320","submission":"N = int(input())\narrange = input().split()\nsplit = True\ncount = 0\n\nfor i in range(N):\n    arrange[i] = int(arrange[i])\n\nwhile split:\n    for i in range(N):\n        if arrange[i] % 2 == 0:\n            arrange[i] \/= 2\n        else:\n            split = False\n    count += 1\n\nprint(str(count - 1))","label":0}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s415605458","submission":"N=input()\nfor idx in range(len(N)):\n  if N[idx] == str(7):\n    print('Yes')\n    break\nelse:\n  print('No')","label":0}
{"problem_id":"p02614","problem":"We have a grid of H rows and W columns of squares. The color of the square at the i-th row from the top and the j-th column from the left (1 \\leq i \\leq H, 1 \\leq j \\leq W) is given to you as a character c_{i,j}: the square is white if c_{i,j} is ., and black if c_{i,j} is #.\nConsider doing the following operation:\n\nChoose some number of rows (possibly zero), and some number of columns (possibly zero). Then, paint red all squares in the chosen rows and all squares in the chosen columns.\n\nYou are given a positive integer K. How many choices of rows and columns result in exactly K black squares remaining after the operation? Here, we consider two choices different when there is a row or column chosen in only one of those choices.","submission_id":"s865965378","submission":"H,W,K=map(int,input().split())\nP=[]\nfor i in range(H):\n    s=input()\n    a=[]\n    for j in range(W):\n        a.append(s[j])\n    P.append(a)\n    \nans=0\nfor markR in range(2**H):\n    for markC in range(2**W):\n        black=0\n        for i in range(H):\n            for j in range(W):\n                if (markR>>i)&1==0 and (markC>>j)&1==0 and P[i][j]=='#':\n                    black+=1\n        if black==K:\n            ans+=1\n\nprint(ans)","label":0}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s444887841","submission":"import math\nimport bisect\n \nn,d,a = map(int,input().split())\nx = [0]*n\nh = [0]*n\nfor i in range(n):\n    x[i] , h[i] = map(int, input().split())\n    \nitv = [[0 for i in range(2)] for j in range(n)]\nfor i in range(n):\n    itv[i][0] = x[i]\n    itv[i][1] = h[i]\nitv.sort()\nans = 0\n\nx.sort()\nx.append(1145141919810)\nh.append(0)\n\nimos = [0]*(n+1)\n\natk = math.ceil(itv[0][1]\/a)\nimos[0] += atk * a\nb = bisect.bisect(x,itv[0][0] + (2*d))\nimos[b] -= atk * a\nans += atk\n    \nfor i in range(1,n):\n    atk = 0\n    imos[i] += imos[i-1]\n    if itv[i][1] > imos[i]:\n        atk = math.ceil((itv[i][1]-imos[i])\/a)\n        imos[i] += atk * a\n        b = bisect.bisect(x,itv[i][0] + (2*d))\n        imos[b] -= atk * a\n    ans += atk\n\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s061235087","submission":"N = int(input())\nli = list(map(int, input().split()))\ncount = 0\nflag = False\n\nwhile True:\n  for i in range(N):\n    if(li[i]%2!=0):\n      flag = True\n    li[i] \/= 2\n  \n  if(flag):\n    break\n    \n  count+=1\n\nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s652513818","submission":"n = int(input())\na = list(map(int,input().split()))\n\ndef cnt(n):\n    x = 0\n    while n%2 == 0:\n        x += 1\n        n = n\/\/2\n    return x\n    \nans = 10**9\n\nfor i in a:\n    ans = min(ans,cnt(i))\n    \nprint(ans)","label":0}
{"problem_id":"p02271","problem":"Write a program which reads a sequence A of n elements and an integer M, and outputs \"yes\" if you can make M by adding elements in A, otherwise \"no\". You can use an element only once.","submission_id":"s996004530","submission":"# coding=utf-8\n\ndef solve(i, m):\n    global A\n    if m == 0:\n        return True\n    elif i == n:\n        return False\n    else:\n        return (solve(i+1, m) or solve(i+1, m-A[i]))\n\nn = int(input())\nA = tuple(map(int, input().split()))\nq = int(input())\nM = tuple(map(int, input().split()))\nsum_A = sum(A)\n\nfor m in M:\n    if m > sum_A:\n        print('no')\n    elif solve(0, m):\n        print('yes')\n    else:\n        print('no')","label":0}
{"problem_id":"p02596","problem":"Takahashi loves the number 7 and multiples of K.\nWhere is the first occurrence of a multiple of K in the sequence 7,77,777,\\ldots? (Also see Output and Sample Input\/Output below.)\nIf the sequence contains no multiples of K, print -1 instead.","submission_id":"s961721594","submission":"import sys\nsys.setrecursionlimit(10**7)\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef main():\n    k = int(input())\n    cur = 0\n\n    for i in range(1, 10 ** 7):\n        cur *= 10\n        cur += 7\n        cur %= k\n\n        if cur == 0:\n            print(i)\n            return\n    print(-1)\n\n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p00000","problem":"Write a program which prints multiplication tables in the following format:","submission_id":"s828387534","submission":"i=1\nwhile i<10 :\n    k=1\n    while k<10 :\n        print(\"%dx%d=%d\"%(i,k,i*k))\n        k=k+1\n    i=i+1\n","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s983437770","submission":"MOD = 10**9+7\nN, M = map(int, input().split())\nS = list(map(int, input().split()))\nT = list(map(int, input().split()))\ndp = [[0]*(M+1) for i in range(N+1)]\ndp[0][0] = 1\nfor i in range(N+1):\n    for j in range(M+1):\n        if i-1 >= 0 and j-1>=0 and S[i-1] == T[j-1]:\n            dp[i][j] += dp[i-1][j-1]\n        if i-1 >= 0:\n            dp[i][j] += dp[i-1][j]\n        if j-1>= 0:\n            dp[i][j] += dp[i][j-1]\n        if i-1 >= 0 and j-1>=0:\n            dp[i][j] -= dp[i-1][j-1]\n        dp[i][j] %= MOD\nprint(dp[N][M]%MOD)\n","label":0}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s811520219","submission":"k = int(input())\nL = []\n\ndef lunlun(d,v,L):\n    L.append(v)\n    if d == 10:\n        return\n    for i in range(-1,2):\n        t = v%10 + i\n        #print(v)\n        if 0 <= t <=9:\n            lunlun(d+1,v*10+t,L)\n#lunlun(1,1,L)\nfor v in range(1,10):\n    lunlun(1,v,L)\nprint(sorted(L)[k-1])","label":0}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s232760125","submission":"n = int(input())\na = [int(i) for i in input().split()]\n \nans = 'YES'\nif sum(a)%2 != 0:\n  ans = 'NO'\n  \nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s210565490","submission":"import sys\n\nn = int(input())\na = list(map(int, input().split()))\n\ncnt = [0] * n\n\nwhile 1:\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] \/= 2\n            cnt[i] += 1\n        else:\n            print(min(cnt))\n            sys.exit()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s275031218","submission":"N = int(input())\nA = list(map(int, input().split()))\nans = 0\nwhile True:\n    if all(map(lambda x: x % 2 == 0, A)):\n        ans += 1\n        A = list(map(lambda x: x\/2,A))\n    else:\n        break\nprint(ans)","label":0}
{"problem_id":"p03599","problem":"Snuke is making sugar water in a beaker.\nInitially, the beaker is empty. Snuke can perform the following four types of operations any number of times. He may choose not to perform some types of operations.\n\nOperation 1: Pour 100A grams of water into the beaker.\nOperation 2: Pour 100B grams of water into the beaker.\nOperation 3: Put C grams of sugar into the beaker.\nOperation 4: Put D grams of sugar into the beaker.\n\nIn our experimental environment, E grams of sugar can dissolve into 100 grams of water.\nSnuke will make sugar water with the highest possible density.\nThe beaker can contain at most F grams of substances (water and sugar combined), and there must not be any undissolved sugar in the beaker.\nFind the mass of the sugar water Snuke will make, and the mass of sugar dissolved in it.\nIf there is more than one candidate, any of them will be accepted.\nWe remind you that the sugar water that contains a grams of water and b grams of sugar is \\frac{100b}{a + b} percent.\nAlso, in this problem, pure water that does not contain any sugar is regarded as 0 percent density sugar water.","submission_id":"s112752468","submission":"a, b, c, d, e, f = map(int, input().split())\n\nlimit_water = f * 100 \/ (100 + e)\nlimit_suger = f * e \/ (100 + e)\n\n\nwaters = []\nsugars = []\n\nfor i in range(31):\n    for j in range(31):\n        water = 100 * a * i + 100 * b * j\n        if water != 0 and water <= 3000:\n            waters.append(water)\n\nfor i in range(1500):\n    for j in range(1500):\n        sugar = c * i + d * j\n        sugars.append(sugar)\n\nans = []\nmax_density = 0.0\n\nsugars = list(set(sugars))\nsugars.sort()\nwaters = list(set(waters))\nwaters.sort()\n\nfor water in waters:\n    for sugar in sugars:\n        if sugar + water <= f and sugar <= (water * e \/ 100):\n            density = sugar \/ (sugar + water)\n            if density >= max_density:\n                ans = [water + sugar, sugar]\n                max_density = density\n\nprint(*ans)\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s669700403","submission":"n = int(input())\na = list(map(int,input().split()))\n\nminno = 10 ** 9\n\nfor x in a:\n    cheknow = 0\n    while x % 2 == 0:\n        x = x \/ 2\n        cheknow += 1\n    if cheknow < minno:\n        minno = cheknow\nprint(minno)","label":0}
{"problem_id":"p02760","problem":"We have a bingo card with a 3\\times3 grid. The square at the i-th row from the top and the j-th column from the left contains the number A_{i, j}.\nThe MC will choose N numbers, b_1, b_2, \\cdots, b_N. If our bingo sheet contains some of those numbers, we will mark them on our sheet.\nDetermine whether we will have a bingo when the N numbers are chosen, that is, the sheet will contain three marked numbers in a row, column, or diagonal.","submission_id":"s906706945","submission":"A = []\nfor _ in range(3):\n    A.append(list(map(int, input().split())))\n\nN = int(input())\nB = set()\nfor _ in range(N):\n    B.add(int(input()))\n\nfor i in range(3):\n    for j in range(3):\n        if A[i][j] in B:\n            A[i][j] = -1\n\nQ = [-1,-1,-1]\nfor i in range(3):\n    if A[i] == Q:\n        print(\"Yes\")\n        exit()\nA = list(zip(*A))\nQ = (-1,-1,-1)\nfor i in range(3):\n    if A[i] == Q:\n        print(\"Yes\")\n        exit()\n\nif A[0][0] == A[1][1] == A[2][2] or A[0][2] == A[1][1] == A[2][0]:\n    print(\"Yes\")\n    exit()\n\nprint(\"No\")\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s721334603","submission":"N = int(input())\nA = input().split()\nresult = 0\ncount = False\nwhile count == False:\n    if (A == ([0] * N or [\"0\"] * N)): break\n    for i in range(N):\n        if (int(A[i]) % 2 != 0): count = True\n        A[i] = int(A[i]) \/ 2\n    if (count == True): break\n    result += 1\n\nprint(result)","label":0}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s918236865","submission":"\n\n\nd= input()\nif d[len(d)-1]=='s':\n    print(d+'es')\nelse:\n    print(d+'s')\n\n    #print(d[0])\n\n\n\n\n\n","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s021492955","submission":"N, K = map(int, input().split())\np = list(map(int, input().split()))\nE = [0] * N\nfor i in range(N):\n    P = 0.5 * p[i] * (p[i] + 1)\n    E[i] = P \/ p[i]\nS = sum(E[:K])\ns = S\nfor i in range(N - K):\n    s -= E[i]\n    s += E[i + K]\n    S = max(S, s)\nprint(S)","label":0}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s204508105","submission":"N, K = map(int, input().split())\nA = list(map(int, input().split()))\n\ncount = [[0, 0] for i in range(N)]\nfor i in range(N):\n    for j in range(i):\n        if A[j] < A[i]:\n            count[i][0] += 1\n    for j in range(i+1, N):\n        if A[j] < A[i]:\n            count[i][1] += 1\nans = 0\nmod = 10**9 + 7\n\nfor i in range(N):\n    ans += (1+K-1)*(K-1) \/\/ 2 * count[i][0]\n    ans += (1+K)*K \/\/ 2 * count[i][1]\n    ans %= mod\n\nprint(ans % mod)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s702305586","submission":"_ = input()\na = [int(i) for i in input().split()]\n\ncnt = 0\nwhile all(not i % 2 for i in a):\n    a = [i \/\/ 2 for i in a]\n    cnt += 1\nelse:\n    print(cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s409530365","submission":"#!\/usr\/bin\/env python3\n\nfrom typing import List\n\n\ndef main():\n    N = int(input())\n    args = list(map(lambda x: int(x), input().split()))\n    counter = 0\n    target = args\n    while canDev(target):\n        counter += 1\n        target = dev2(target)\n\n    print(counter)\n\n\ndef canDev(target: List[int]) -> bool:\n    for item in target:\n        if item % 2 != 0:\n            return False\n    return True\n\n\ndef dev2(target: List[int]) -> List[int]:\n    return list(map(lambda x: int(x \/ 2), target))\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s563944765","submission":"N = int(input())\nA = list(map(int, input().split()))\nans = 30\nfor i in range(N):\n  count = 0\n  while A[i] % 2 == 0:\n    A[i] \/\/= 2\n    count += 1\n  if count < ans:\n    ans = count\nprint(ans)","label":0}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s835527887","submission":"n = int(input())\ns = input()\nk = int(input())\n\ntarget = s[k-1]\n\nfor i in range(len(s)):\n  if target != s[i]:\n    s = s[:i] + \"*\" + s[i+1:]\n    \nprint(s)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s536560371","submission":"N = int(input())\nli = list(map(int,input().split()))\n\ncount = 0\nflag = False\n\nwhile flag==False:\n  for i in range(N):\n    if li[i]%2==0:\n      li[i]=li[i]\/2\n    else:\n      flag=True\n        \n  if flag==False:\n    count+=1\n\nprint(count)","label":0}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s517507672","submission":"#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\nimport math\ndef nC2(n):\n  # n = 0 -> 0\n  # n = 1 -> 0\n  if n<2:\n    return 0\n  return math.factorial(n) \/\/ (math.factorial(n - 2) * 2)\nn,m = map(int, input().split())\n# 135 3C2\n# 2468 4C2\n# nC2\nr=nC2(n)+nC2(m)\nprint(r)","label":0}
{"problem_id":"p02270","problem":"You are given $n$ packages of $w_i$ kg from a belt conveyor in order ($i = 0, 1, ... n-1$). You should load all packages onto $k$ trucks which have the common maximum load $P$. Each truck can load consecutive packages (more than or equals to zero) from the belt conveyor unless the total weights of the packages in the sequence does not exceed the maximum load $P$.","submission_id":"s878700028","submission":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Apr 30 15:18:29 2018\nALDS1-4c\n@author: maezawa\n\"\"\"\ndef can_load(w, k, p):\n    n = len(w)\n    m = 0\n    tk = 0\n    i = 0\n    while tk < k:\n        if m + w[i] <= p:\n            m += w[i]\n            i += 1\n            if i >= n:\n                return n+1\n        else:\n            m = 0\n            tk += 1\n    return i\n\n\nn, k = list(map(int, input().split()))\nw = []\ntr = [0 for _ in range(k)]\n\nfor i in range(n):\n    w.append(int(input()))\n\nmaxw = max(w)\n# =============================================================================\n# for p in range(maxw, maxw*n):\n#     if can_load(w, k, p) == n:\n#         print(p)\n#         break\n# =============================================================================\nright = maxw*n\nleft = maxw\nwhile left<right:\n    mid = (right+left)\/\/2\n    cl = can_load(w, k, mid)\n    if cl == n:\n        print(mid)\n        break\n    elif cl < n:\n        left = mid + 1\n    else:\n        right = mid\nprint(right)    \n    \n    \n    \n    \n    \n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s330100218","submission":"n = int(input())\na = list(map(int, input().split()))\n\nans = 1000\nfor i in a:\n    x = 0\n    while i:\n        if i & 1:\n            break\n        else:\n            x += 1\n        i >>= 1\n    ans = min(ans, x)\nprint(ans)","label":0}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s050478681","submission":"from collections import defaultdict\n \nn,k = map(int,input().split())\na = list(map(int,input().split()))\nmod = 10**9 + 7\nd = defaultdict(int)\n \ninner = 0\nfor i in range(n):\n    d[a[i]] += 1\n    for j in range(i+1,n):\n        if a[i] > a[j]:\n            inner += 1\n \nt = 0\nfor i in range(n):\n    for j in range(n):\n        if a[i] > a[j]:\n            t += 1\n \nx = ((t)*(k)*(k-1)\/\/2)%mod\ny = (inner*k)%mod\nprint(int((x+y)%mod))","label":0}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s075940795","submission":"\nfrom math import gcd\n\nN = int(input())\nX = list(map(int, input().split()))\n\nleft = [0] * (N + 2)\nright = [0] * (N + 2)\n\nfor i in range(N):\n    left[i + 1] = gcd(left[i], X[i])\n\nfor i in reversed(range(N)):\n    right[i + 1] = gcd(right[i + 2], X[i])\n\nans = 1\nfor i in range(N):\n    ans = max(ans, gcd(left[i], right[i + 2]))\n\nprint(ans)\n","label":0}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s930794389","submission":"import heapq\nimport copy\nN,K = map(int, input().split())\nV_list= list(map(int, input().split()))\n\nselected = []\nleft = []\n\nmax_sum = 0\nleft_sum = 0\nfor l in range(N):\n    selected = copy.deepcopy(left)\n    lr_sum = left_sum\n    for r in range(N-l+1):\n        # skip\n        stock = K-l-r\n        if stock < 0:\n            break\n        ri = N-r-1\n        select_cnt = len(selected)\n        tmp_sum = lr_sum\n        max_sum = max(max_sum, tmp_sum)\n        popper = copy.deepcopy(selected)\n\n        for i in range(stock):\n            if i >= select_cnt:\n                break\n            \n            pop_v = heapq.heappop(popper)\n            if pop_v > 0:\n                break\n            tmp_sum -= pop_v\n            max_sum = max(max_sum, tmp_sum)\n\n        r_val = V_list[ri]\n        lr_sum += r_val\n        heapq.heappush(selected, r_val)\n\n    l_val = V_list[l]\n    left_sum += l_val\n    heapq.heappush(left, l_val)\n\nprint(max_sum)","label":0}
{"problem_id":"p03106","problem":"You are given positive integers A and B.\nFind the K-th largest positive integer that divides both A and B.\nThe input guarantees that there exists such a number.","submission_id":"s398333382","submission":"a, b, k = map(int, input().split())\n\nc = [1]\nfor i in range(min(a, b), 0, -1):\n    if a % i == 0 and b % i == 0:\n        k -= 1\n        if k == 0:\n            print(i)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s221781657","submission":"# coding = utf-8\nn=input(\"\")\na=input(\"\")\na=a.split(\" \")\na=[int(s) for s in a]\na.sort()\nbase=100000\nn=1\nfor num in a:\n    while num%2**n==0:\n        n=n+1\n    n=n-1\n    if n < base:\n        base=n\nprint(base)","label":0}
{"problem_id":"p03108","problem":"There are N islands and M bridges.\nThe i-th bridge connects the A_i-th and B_i-th islands bidirectionally.\nInitially, we can travel between any two islands using some of these bridges.\nHowever, the results of a survey show that these bridges will all collapse because of aging, in the order from the first bridge to the M-th bridge.\nLet the inconvenience be the number of pairs of islands (a, b) (a < b) such that we are no longer able to travel between the a-th and b-th islands using some of the bridges remaining.\nFor each i (1 \\leq i \\leq M), find the inconvenience just after the i-th bridge collapses.","submission_id":"s489040369","submission":"class UnionFind:\n    def __init__(self, n):\n        self.n = n\n        self.parent = [i for i in range(n)]\n        self.height = [1] * n\n        self.size = [1] * n\n\n    def find(self, x):\n        if self.parent[x] == x:\n            return x\n        else:\n            self.parent[x] = self.find(self.parent[x])\n            return self.parent[x]\n\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x != y:\n            if self.height[x] < self.height[y]:\n                self.parent[x] = y\n                self.size[y] += self.size[x]\n            else:\n                self.parent[y] = x\n                self.size[x] += self.size[y]\n                if self.height[x] == self.height[y]:\n                    self.height[x] += 1\n\n    def issame(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def group_size(self, x):\n        return self.size[self.find(x)]\n\n\nN, M = map(int, input().split())\nint1 = lambda x: int(x) - 1\nX = [tuple(map(int1, input().split())) for _ in range(M)]\n\nuf = UnionFind(N)\nlst = [0]\nfor a, b in reversed(X):\n    if uf.issame(a, b):\n        lst.append(lst[-1])\n    else:\n        lst.append(lst[-1] + uf.group_size(a) * uf.group_size(b))\n    uf.unite(a, b)\n\nfor i in range(M - 1, -1, -1):\n    print(N * (N - 1) \/\/ 2 - lst[i])\n","label":0}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s716957981","submission":"a,b=map(int,input().split())\na-=1\nb-=1\ns=[\".\",\"#\"]*50\nt=[\"#\"]*100\nq=[\"#\",\".\"]*50\np=[\".\"]*100\nans=[]\n#\u767d\u306b\u3064\u3044\u3066\naaa=a\/\/50\naa=a%50\nfor i in range(aaa):\n    ans.append(s)\n    ans.append(t)\nx=[\".\",\"#\"]*aa+[\"#\",\"#\"]*(50-aa)\nans.append(x)\nans.append(t)\nans.append(p)\n\nbbb=b\/\/50\nbb=b%50\nfor i in range(bbb):\n    ans.append(q)\n    ans.append(p)\nx=[\"#\",\".\"]*bb+[\".\",\".\"]*(50-bb)\nans.append(x)\n\nprint(len(ans),100)\nfor u in ans:\n    print(\"\".join(u))","label":0}
{"problem_id":"p02735","problem":"Consider a grid with H rows and W columns of squares. Let (r, c) denote the square at the r-th row from the top and the c-th column from the left.\nEach square is painted black or white.\nThe grid is said to be good if and only if the following condition is satisfied:\n\nFrom (1, 1), we can reach (H, W) by moving one square right or down repeatedly, while always being on a white square.\n\nNote that (1, 1) and (H, W) must be white if the grid is good.\nYour task is to make the grid good by repeating the operation below. Find the minimum number of operations needed to complete the task. It can be proved that you can always complete the task in a finite number of operations.\n\nChoose four integers r_0, c_0, r_1, c_1(1 \\leq r_0 \\leq r_1 \\leq H, 1 \\leq c_0 \\leq c_1 \\leq W). For each pair r, c (r_0 \\leq r \\leq r_1, c_0 \\leq c \\leq c_1), invert the color of (r, c) - that is, from white to black and vice versa.","submission_id":"s577674815","submission":"H,W = map(int, input().split())\ng = []\nfor _ in range(H):\n    g.append(list(input()))\n\ndp = [[10**9 for _ in range(W)] for __ in range(H)]\n\ndp[0][0] = 1 if g[0][0] == '#' else 0\nd = ([0,1], [1,0])\nfor ix in range(H):\n    for jx in range(W):\n        for dx,dy in d:\n            ni = ix + dx\n            nj = jx + dy\n            if ni >= H or nj >= W:\n                continue\n            add = 0\n            if g[ix][jx] == '.' and g[ni][nj] == '#':\n                add += 1\n            dp[ni][nj] = min(dp[ni][nj], dp[ix][jx] + add)\n\n\nprint(dp[H-1][W-1])","label":0}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s695874196","submission":"s=list(input())\n\nnum = s.count('W')\n\nbefore = 0\nfor i in range(len(s)):\n\n    if s[i]=='W':\n        before += i\n\n\nafter = 0\nfor j in range(num):\n    after+=j\n\nprint(before-after)","label":0}
{"problem_id":"p03697","problem":"You are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.","submission_id":"s179070199","submission":"s=eval(input().replace(\" \",\"+\"))\nif s<10:\n    print(s)\nelse:\n    print(\"error\")","label":0}
{"problem_id":"p03439","problem":"This is an interactive task.\nLet N be an odd number at least 3.\nThere are N seats arranged in a circle.\nThe seats are numbered 0 through N-1.\nFor each i (0 \u2264 i \u2264 N - 2), Seat i and Seat i + 1 are adjacent.\nAlso, Seat N - 1 and Seat 0 are adjacent.\nEach seat is either vacant, or oppupied by a man or a woman.\nHowever, no two adjacent seats are occupied by two people of the same sex.\nIt can be shown that there is at least one empty seat where N is an odd number at least 3.\nYou are given N, but the states of the seats are not given.\nYour objective is to correctly guess the ID number of any one of the empty seats.\nTo do so, you can repeatedly send the following query:\n\nChoose an integer i (0 \u2264 i \u2264 N - 1). If Seat i is empty, the problem is solved. Otherwise, you are notified of the sex of the person in Seat i.\n\nGuess the ID number of an empty seat by sending at most 20 queries.","submission_id":"s630376051","submission":"#coding:utf-8\nimport sys,os\nfrom collections import defaultdict, deque\nfrom fractions import gcd\nfrom math import ceil, floor\nsys.setrecursionlimit(10**6)\nwrite = sys.stdout.write\ndbg = (lambda *something: print(*something)) if 'TERM_PROGRAM' in os.environ else lambda *x: 0\ndef main(given=sys.stdin.readline):\n    input = lambda: given().rstrip()\n    LMIIS = lambda: list(map(int,input().split()))\n    II = lambda: int(input())\n    XLMIIS = lambda x: [LMIIS() for _ in range(x)]\n    YN = lambda c : print('Yes') if c else print('No')\n    MOD = 10**9+7\n\n    N = II()\n    g = {'Vacant':0, 'Male':1, 'Female':2}\n\n\n\n    print(0,flush=True)\n    sl = g[input()]\n    if sl == 0:\n        return\n\n    print(N-1,flush=True)\n    sr = g[input()]\n    if sr == 0:\n        return\n    \n    l = 0\n    r = N-1\n    while r-l>1:\n\n        m = (l+r)\/\/2\n        print(m,flush=True)\n        a = g[input()]\n        if a == 0:\n            return\n        \n        if (m-l) % 2 == 1:\n            if sl == a:\n                r = m\n                sr = a\n            else:\n                l = m\n                sl = a\n\n        else:\n            if a != sl:\n                r = m\n                sr = a\n            else:\n                l = m\n                sl = a\n        \n\n    print(-1)\n\n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p03450","problem":"There are N people standing on the x-axis.\nLet the coordinate of Person i be x_i.\nFor every i, x_i is an integer between 0 and 10^9 (inclusive).\nIt is possible that more than one person is standing at the same coordinate.\nYou will given M pieces of information regarding the positions of these people.\nThe i-th piece of information has the form (L_i, R_i, D_i).\nThis means that Person R_i is to the right of Person L_i by D_i units of distance, that is, x_{R_i} - x_{L_i} = D_i holds.\nIt turns out that some of these M pieces of information may be incorrect.\nDetermine if there exists a set of values (x_1, x_2, ..., x_N) that is consistent with the given pieces of information.","submission_id":"s859848403","submission":"def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    #from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby\n    #from itertools import product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    from math import floor, ceil\n    #from operator import itemgetter\n\n    inf = 10**17\n    #mod = 10**9 + 7\n\n    n,m = map(int, input().split())\n\n    #[\u884c\u5148, \u8ddd\u96e2]\n    adj = [[] for _ in range(n)] #\u9802\u70b9\u6570, \u5834\u5408\u306b\u3088\u3063\u3066\u5909\u3048\u308b\n    for _ in range(m):\n        l,r,d = map(int, input().split())\n        adj[l-1].append([r-1, d])\n        adj[r-1].append([l-1, -d])\n\n    x = [inf]*n\n\n    def bfs(v):\n        if x[v]==inf:\n            x[v] = 0\n        d = deque([v])\n        while d:\n            v  = d.popleft()\n            for nv, cost in adj[v]:\n                if x[nv] == inf:\n                    x[nv] = x[v] + cost\n                    d.append(nv)\n                else:\n                    if x[nv] - x[v] != cost:\n                        return False\n        return True\n\n    for v in range(n):\n        if not bfs(v):\n            print('No')\n            exit()\n    print('Yes')\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s802247005","submission":"N = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\nexist_odd = False\n\nwhile True:\n  for i in range(N):\n    if A[i] % 2 != 0:\n      exist_odd = True\n\n  if exist_odd:\n    break\n\n  for i in range(N):\n    A[i] \/=2\n\n  count +=1\n\nprint(count)","label":0}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s540108071","submission":"\n\na,b = [int(x) for x in input().split()]\n\na,b = a-1,b-1\n\nH,W = 100,100\n\n\nmasu = [[\".\" for i in range(100)] for _ in range(100)]\nfor h in range(100):\n    for i in range(100):\n        if i < 50:\n            masu[h][i] = \"#\"\n\ndef white(masu):\n    count = 0\n    for i in range(500):\n        for h in range(50):\n            if a <= count:\n                return masu\n            count+=1\n            masu[2*h][2*i] = \".\"\n            \n\ndef black(masu):\n    count = 0\n    for i in range(500):\n        for h in range(50):\n            if b <= count:\n                return masu\n            count+=1\n            masu[2*h][99 - 2*i] = \"#\"\n            \n\ndef output(masu):\n    for line in masu:\n       print(\"\".join(line))\n\nprint(str(H)+\" \"+str(W))\n\nmasu = white(masu)\nmasu = black(masu)\noutput(masu)","label":0}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s816101010","submission":"import math\nimport sys\nimport collections\nimport bisect\nreadline = sys.stdin.readline\n\n\ndef main():\n    [n, s, k] = [str(readline().rstrip()) for _ in range(3)]\n    s = list(s)\n    strS = \"\"\n    target = s[int(k) - 1]\n    for i in range(int(n)):\n        if s[i] == target:\n            strS += s[i]\n        else:\n            strS += \"*\"\n    print(strS)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s846378789","submission":"kind = int(input())\n\ntable_1 = input().split(' ')\ntable_2 = input().split(' ')\ntable_3 = input().split(' ')\ntotal = 0\nfor i in range(kind):\n    total += int(table_2[i])\n    \nfor j in range(kind-1):\n    if int(table_1[j]) == int(table_1[j + 1]) - 1:\n        total += int(table_3[int(table_1[j]) - 1])\nprint(total)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s815137929","submission":"n = int(input())\na = list(map(int,input().split()))\nx = 0\nt = True\nwhile t:\n    for i in range(n):\n        if a[i] % 2 == 1:\n            t = False\n        a[i] \/= 2\n    x += 1\nprint(x-1)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s709885529","submission":"numLength = int(input())\nnumList = input().split()\ncount = 0\nflag = True\nwhile flag:\n  for i in range(numLength):\n    numList[i] = int(numList[i])\n    if not numList[i] % 2 == 0:\n      print(count)\n      flag = False\n      break\n    numList[i] \/= 2\n  count += 1","label":0}
{"problem_id":"p02684","problem":"The Kingdom of Takahashi has N towns, numbered 1 through N.\nThere is one teleporter in each town. The teleporter in Town i (1 \\leq i \\leq N) sends you to Town A_i.\nTakahashi, the king, loves the positive integer K. The selfish king wonders what town he will be in if he starts at Town 1 and uses a teleporter exactly K times from there.\nHelp the king by writing a program that answers this question.","submission_id":"s852726934","submission":"import sys\nfrom collections import deque\n\ninput = sys.stdin.readline\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\n\nvisited = set()\nq = deque()\nq.append(1)\n\nroot = []\nwhile q:\n    pos = q.pop()\n    if pos in visited:\n        start = root.index(pos)\n        s_len = len(root[:start])\n        l_len = len(root[start:])\n        break\n    visited.add(pos)\n    root.append(pos)\n\n    q.append(A[pos-1])\n\nif K <= s_len:\n    print(root[K])\nelse:\n    r = (K - s_len) % l_len\n    print(root[start+r])","label":0}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s216532687","submission":"from collections import Counter\n\ndef solve():\n    N = int(input())\n    c = Counter([input() for _ in range(N)])\n    cnt = -1\n    ans = []\n    for i in c.most_common():\n        if cnt == -1:\n            cnt = i[1]\n            ans.append(i[0])\n        elif cnt == i[1]:\n            ans.append(i[0])\n        else:\n            break\n    for a in sorted(ans):\n        print(a)\n    \nif __name__ == \"__main__\":\n    solve()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s971031240","submission":"N = int(input())\nA = list(map(int,input().split()))\nans = 0\ny = []\nx = 0\nz = 1\nwhile x == 0:\n    for i in range(N):\n        a = str(A[i] % (2 ** z))\n        y.append(a)\n    if y.count('0') == N:\n        ans += 1\n        y = []\n        z += 1\n    else:\n        x =+ 3\nprint(ans)","label":0}
{"problem_id":"p03254","problem":"There are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he\/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.","submission_id":"s264151022","submission":"N, x = map(int,input().split())\na = sorted([int(i) for i in input().split()])\ncount = 0\nif sum(a) == x:\n    print(len(a))\nelse:\n    for i in a:\n        x = x-i\n        if x<0:\n            break\n        count+=1\n    if count == N:\n        print(N-1)\n    else:\n        print(count)","label":0}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s342460355","submission":"n = int(input())\ns = [int(input()) for _ in range(n)]\nscore = sum(s)\nans = float('inf')\nif score % 10 == 0:\n  for i in s:\n    if i%10 != 0:\n      ans = min(ans, i)\n  if ans == float('inf'):\n    ans = 0\n    score = 0\n  score -= ans\nprint(score)\n","label":0}
{"problem_id":"p03456","problem":"AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.","submission_id":"s380809488","submission":"ab = int(input().replace(' ', ''))\n\nif (ab**0.5)%1 < 0.000001:\n  print('Yes')\nelse:\n  print('No')","label":0}
{"problem_id":"p03993","problem":"There are N rabbits, numbered 1 through N.\nThe i-th (1\u2264i\u2264N) rabbit likes rabbit a_i.\nNote that no rabbit can like itself, that is, a_i\u2260i.\nFor a pair of rabbits i and j (i\uff1cj), we call the pair (i\uff0cj) a friendly pair if the following condition is met.\n\nRabbit i likes rabbit j and rabbit j likes rabbit i.\n\nCalculate the number of the friendly pairs.","submission_id":"s029811637","submission":"n = int(input())\nl = list(map(int, input().split())) \ncnt = 0\nfor i in range(n):    \n    if l[i]-1 > i:\n        if( l[l[i]-1]-1 == i):\n            cnt+=1\nprint(cnt)","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s411064051","submission":"# -*- coding: utf-8 -*-\nimport sys\nimport math\nimport os\nimport itertools\nimport string\nimport heapq\nimport _collections\nfrom collections import Counter\nfrom collections import defaultdict\nfrom functools import lru_cache\nimport bisect\nimport re\nimport queue\n\n\nclass Scanner():\n    @staticmethod\n    def int():\n        return int(sys.stdin.readline().rstrip())\n\n    @staticmethod\n    def string():\n        return sys.stdin.readline().rstrip()\n\n    @staticmethod\n    def map_int():\n        return [int(x) for x in Scanner.string().split()]\n\n    @staticmethod\n    def string_list(n):\n        return [input() for i in range(n)]\n\n    @staticmethod\n    def int_list_list(n):\n        return [Scanner.map_int() for i in range(n)]\n\n    @staticmethod\n    def int_cols_list(n):\n        return [int(input()) for i in range(n)]\n\n\nclass Math():\n    @staticmethod\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return Math.gcd(b, a % b)\n\n    @staticmethod\n    def lcm(a, b):\n        return (a * b) \/\/ Math.gcd(a, b)\n\n    @staticmethod\n    def roundUp(a, b):\n        return -(-a \/\/ b)\n\n    @staticmethod\n    def toUpperMultiple(a, x):\n        return Math.roundUp(a, x) * x\n\n    @staticmethod\n    def toLowerMultiple(a, x):\n        return (a \/\/ x) * x\n\n    @staticmethod\n    def nearPow2(n):\n        if n <= 0:\n            return 0\n        if n & (n - 1) == 0:\n            return n\n        ret = 1\n        while(n > 0):\n            ret <<= 1\n            n >>= 1\n        return ret\n\n    @staticmethod\n    def sign(n):\n        if n == 0:\n            return 0\n        if n < 0:\n            return -1\n        return 1\n\n    @staticmethod\n    def isPrime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        d = int(n ** 0.5) + 1\n        for i in range(3, d + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n\nclass PriorityQueue:\n    def __init__(self, l=[]):\n        self.__q = l\n        heapq.heapify(self.__q)\n        return\n\n    def push(self, n):\n        heapq.heappush(self.__q, n)\n        return\n\n    def pop(self):\n        return heapq.heappop(self.__q)\n\n\nMOD = int(1e09) + 7\nINF = int(1e15)\n\n\ndef calc(N):\n    return sum(int(x) for x in str(N))\n\n\ndef main():\n    # sys.stdin = open(\"sample.txt\")\n    N, M = Scanner.map_int()\n    S = Scanner.string()\n    T = Scanner.string()\n    L = Math.lcm(N, M)\n    s, t = 0, 0\n    while s < N and t < M:\n        if S[s] != T[t]:\n            print(-1)\n            return\n        s += L\/\/M\n        t += L\/\/N\n    print(L)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s825859201","submission":"n = int(input())\na = list(map(int, input().split()))\n\ni = 0\nper = True\nwhile per == True:\n    for index in range(n):\n        num = a[index]\n        ans = divmod(num, 2)\n        if num == 0 or ans[1] != 0:\n            per = False\n            break\n        a[index] = ans[0]\n    if per == True:\n        i += 1\nprint(i)","label":0}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s367313816","submission":"S=input()\nif S[-1]=='s':\n    Ans=S+'es'\nelse:\n    Ans=S+'s'\nprint(Ans)","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s277052430","submission":"import itertools\nn = int(input())\nl = list(map(int, input().split( )))\npettern = 0\nfor v in itertools.combinations(l, 3):\n    if v[0] != v[1] and v[1] != v[2] and v[2] != v[0]:\n        if v[0]+v[1] > v[2] and v[1]+v[2] > v[0] and v[2]+v[0] > v[1]:\n            pettern += 1\nprint(pettern)\n","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s703957830","submission":"N = int(input())\nL = list(map(int, input().split()))\nT = 0\nif N > 2:\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                a = L[i]\n                b = L[j]\n                c = L[k]\n                abc = sorted(list({a, b, c}))\n                if len(abc) == 3 and abc[0] + abc[1] > abc[2]:\n                    T += 1\nprint(T)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s456112701","submission":"n = input()\nnums = [int(i) for i in input().split(\" \")]\n\ndef is_even(num_list):\n  for num in num_list:\n    if num % 2 != 0:\n      return False\n  return True\n\ncounter = 0\nwhile(is_even(nums)):\n  counter += 1\n  nums = [n\/2 for n in nums]\nprint(counter)\n","label":0}
{"problem_id":"p03044","problem":"We have a tree with N vertices numbered 1 to N.\nThe i-th edge in the tree connects Vertex u_i and Vertex v_i, and its length is w_i.\nYour objective is to paint each vertex in the tree white or black (it is fine to paint all vertices the same color) so that the following condition is satisfied:\n\nFor any two vertices painted in the same color, the distance between them is an even number.\n\nFind a coloring of the vertices that satisfies the condition and print it. It can be proved that at least one such coloring exists under the constraints of this problem.","submission_id":"s035843373","submission":"from collections import deque\nN = int(input())\n#\u96a3\u63a5\u30ea\u30b9\u30c8\ng = [[] for i in range(N)]\nfor i in range(N-1):\n  u,v,w = map(int,input().split())\n  g[u-1].append([v-1,w])\n  g[v-1].append([u-1,w])\nq = deque()\n#\u901a\u3063\u305f\u304b\u3069\u3046\u304b\ncheck = [0] * N\ncheck[0] = 1\nq.append(0)\nans = [-1] * N\nans[0] = 0\nwhile len(q) > 0:\n  e = q.popleft()\n  for i,j in g[e]:\n    if check[i] == 1:\n      continue\n    ans[i] = (ans[e] + j) %2\n    check[i] = 1\n    q.append(i)\nfor i in range(N):\n  print(ans[i])\n","label":0}
{"problem_id":"p03129","problem":"Determine if we can choose K different integers between 1 and N (inclusive) so that no two of them differ by 1.","submission_id":"s056895635","submission":"import math\nn, k = map(int, input().split())\nif math.ceil(n\/2) < k:\n    print(\"NO\")\nelse:\n    print(\"YES\")","label":0}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s857667792","submission":"a, b, c = map(int, input().split())\nflag = False\nif c-a-b > 0:\n    if (c-a-b)**2-4*a*b > 0:\n        flag = True\nprint('Yes' if flag else 'No')\n","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s981694560","submission":"from collections import defaultdict\nimport bisect\nn,m = map(int,input().split())\ns = list(map(int,input().split()))\nt = list(map(int,input().split()))\nmod = 10**9+7\np = max(n,m)\nif n>m:\n  t.extend((0,)*(n-m))\nelse:\n  s.extend((0,)*(m-n))\ndp = [[1 for i in range(p+1)] for j in range(p+1)]\nfor i in range(1,p+1):\n  for j in range(1,p+1):\n    x = s[i-1]\n    y = t[j-1]\n    if x == y:\n      dp[i][j] = (dp[i-1][j]+dp[i][j-1])%mod\n    else:\n      dp[i][j] = (dp[i][j-1]+dp[i-1][j]-dp[i-1][j-1])%mod\nprint(dp[-1][-1])","label":0}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s396951035","submission":"N = int(input())\nS = list(input())\nL = 0\nout = []\nout2 = []\nfor i in range(N):\n    X = S[i]\n    if X==\"(\":\n        L += 1\n        out.append(\"(\")\n    elif X==\")\":\n        if L>0:\n            L += -1\n            out.append(\")\")\n        else:\n            out2.append(\"(\")\n            out.append(\")\")\nfor i in range(L):\n    out.append(\")\")\nprint(\"\".join(out2)+\"\".join(out))","label":0}
{"problem_id":"p03496","problem":"Snuke has an integer sequence, a, of length N. The i-th element of a (1-indexed) is a_{i}.\nHe can perform the following operation any number of times:\n\nOperation: Choose integers x and y between 1 and N (inclusive), and add a_x to a_y.\n\nHe would like to perform this operation between 0 and 2N times (inclusive) so that a satisfies the condition below. Show one such sequence of operations.\nIt can be proved that such a sequence of operations always exists under the constraints in this problem.\n\nCondition: a_1 \\leq a_2 \\leq ...  \\leq a_{N}","submission_id":"s717864739","submission":"\nN=int(input())\na=list(map(int,input().split()))\n\nprint(2*N-2)\naa=list(map(abs,a))\nnmax=aa.index(max(aa))\nfor i in range(N):\n  if i==nmax:\n    pass\n  else:\n    print(\"{} {}\".format(nmax+1,i+1))\nif a[nmax]>0:\n  for i in range(N-1):\n    print(\"{} {}\".format(i+1,i+2))\nelse:\n  for i in range(N-1):\n    print(\"{} {}\".format(N-i,N-i-1))\n","label":0}
{"problem_id":"p00000","problem":"Write a program which prints multiplication tables in the following format:","submission_id":"s293142815","submission":"x = range(1, 10)\ny = range(1, 10)\n\nfor i in x:\n    for j in y:\n        print(str(i)+'x'+str(j)+'='+str(i*j))\n\n","label":0}
{"problem_id":"p02848","problem":"We have a string S consisting of uppercase English letters. Additionally, an integer N will be given.\nShift each character of S by N in alphabetical order (see below), and print the resulting string.\nWe assume that A follows Z. For example, shifting A by 2 results in C (A \\to B \\to C), and shifting Y by 3 results in B (Y \\to Z \\to A \\to B).","submission_id":"s473186887","submission":"n=int(input())\na=input()\n\nfor i in a:\n  if ord(i)+n<=90:\n    print(chr(ord(i)+n),end='')\n  else:\n    print(chr(ord(i)+n-26),end='')\n","label":0}
{"problem_id":"p03136","problem":"Determine if an N-sided polygon (not necessarily convex) with sides of length L_1, L_2, ..., L_N can be drawn in a two-dimensional plane.\nYou can use the following theorem:\nTheorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.","submission_id":"s945597616","submission":"n = int(input())\nl = list(map(int,input().split()))\nflg = 0\nfor i in range(0, n):\n    if l[i] < sum(l)-l[i]:\n        pass\n    else:\n        flg = 1\nif flg == 1:\n    print('No')\nelse:\n    print('Yes')","label":0}
{"problem_id":"p02606","problem":"How many multiples of d are there among the integers between L and R (inclusive)?","submission_id":"s775503153","submission":"L,R,D=map(int,input().split())\nstartno = L\nwhile startno % D != 0:\n    startno += 1 \nlista=list(range(startno,R+1,D))\n#print(lista)\nprint(len(lista))","label":0}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s813260068","submission":"import math\n\n\ndef f2(n):\n    d = 0\n    c = 0\n    for i in range(1, n):\n        e = 0\n        if i * i == n:\n            e -= 1\n        elif n % i == 0:\n            e -= 1\n        e += n \/\/ i\n        d += e\n\n    return d\n\ndef main():\n    print(f2(int(input())))\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s111133271","submission":"import sys\n\nx, k, d = map(int,input().split())\nx = abs(x)\nans = 0\n\nif k <= x \/\/ d:\n    ans = x - k*d\n    print(ans)\n    sys.exit()\n\nif (k - (x \/\/ d)) % 2 == 0:\n    print(x % d)\nelse:\n    print(abs(x % d - d))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s474177360","submission":"#81B\nN=int(input())\ndata=map(int,input().split())\ndef wareru(n):\n    p=0\n    while n%2==0:\n        n=n\/\/2\n        p=p+1\n    return p\nprint(min(map(wareru,data)))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s539004592","submission":"N = int(input())\nnums = [int(s) for s in input().split()]\ni = 0\ncnt = 0\nwhile True:\n    if i == N:\n        i = 0\n        cnt += 1\n    if nums[i % N] % 2 == 1:\n        break\n    nums[i % N] \/\/= 2\n    i += 1\nprint(cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s610729222","submission":"N = int(input())\nA = list(map(int,input().split()))\n\ncnt = 0\ncheck = True\nwhile check:\n  for i in range(N):\n    if A[i] % 2 == 1:\n      check = False\n      break\n    else:\n      A[i] \/\/= 2\n  else:\n    cnt += 1\n    \nprint(cnt)","label":0}
{"problem_id":"p02781","problem":"Find the number of integers between 1 and N (inclusive) that contains exactly K non-zero digits when written in base ten.","submission_id":"s902759680","submission":"N = list(input())\nK = int(input())\n\nN.reverse()\nn = [0]*100\nfor i in range(100):\n    if 99-i < len(N):\n        n[i] = int(N[99-i])\n\ndp2 = [[0]*100 for _ in range(4)]\nif n[0] == 0:\n    dp2[0][0] = 1\nelse:\n    dp2[1][0] = 1\nfor i in range(1,100):\n    if n[i] == 0:\n        for j in range(4):\n            dp2[j][i] = dp2[j][i-1]\n    else:\n        for j in range(1,4):\n            dp2[j][i] = dp2[j-1][i-1]\n\ndp1 = [[0]*100 for _ in range(4)]\nif n[0] != 0:\n    dp1[0][0] = 1\n    dp1[1][0] = n[0]-1\nfor i in range(4):\n    for j in range(1,100):\n        if i != 0:\n            if n[j] != 0:\n                dp1[i][j] = dp1[i-1][j-1]*9 + dp1[i][j-1]*1 + dp2[i-1][j-1]*max(0,n[j]-1) + dp2[i][j-1]*1\n            else:\n                dp1[i][j] = dp1[i-1][j-1]*9 + dp1[i][j-1]*1\n\n        else:\n            if n[j] != 0:\n                dp1[i][j] = dp1[i][j-1]*1 + dp2[i][j-1]*1\n            else:\n                dp1[i][j] = dp1[i][j-1]*1\n\nprint(dp1[K][-1] + dp2[K][-1])","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s302217659","submission":"n = int(input())\nnum = [int(x) for x in input().split()]\ncount = 0\na = 0\n\nwhile(a==0):\n    nl = []\n    sl = []\n    for i in num:\n        if i %2 ==0:\n            nl.append(i\/2)\n        else:\n            sl.append(i)\n    if sl == []:\n        num =nl\n        count += 1\n    else:\n        a = 1\n\nprint(count)","label":0}
{"problem_id":"p03146","problem":"A sequence a=\\{a_1,a_2,a_3,......\\} is determined as follows:\n\n\nThe first term s is given as input.\n\n\nLet f(n) be the following function: f(n) = n\/2 if n is even, and f(n) = 3n+1 if n is odd.\n\n\na_i = s when i = 1, and a_i = f(a_{i-1}) when i > 1.\n\n\nFind the minimum integer m that satisfies the following condition:\n\nThere exists an integer n such that a_m = a_n (m > n).","submission_id":"s180578791","submission":"s=int(input())\n\nif s==1 or s==2:\n    print(4)\nelse:\n    K=1\n    while s!=1:\n        if s%2:\n            s=3*s+1\n        else:\n            s\/\/=2\n        K+=1\n    print(K+1)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s821568590","submission":"hoge = input()\nint_line = [int(i) for i in input().split()]\n\ncnt = 0\nflag = False\n\nwhile True:\n    for m, i in enumerate(int_line):\n        if i % 2 == 0:\n            int_line[m] = i\/2\n        else:\n            flag = True\n    if flag == True:\n        print(cnt)\n        break\n    else:\n        cnt += 1","label":0}
{"problem_id":"p03555","problem":"You are given a grid with 2 rows and 3 columns of squares.\nThe color of the square at the i-th row and j-th column is represented by the character C_{ij}.\nWrite a program that prints YES if this grid remains the same when rotated 180 degrees, and prints NO otherwise.","submission_id":"s670811165","submission":"x = input()\ny = input()\n\nx = list(x)\ny = list(y)\nx_ = x\ny_ = y\nx_ = reversed(x)\ny_ = reversed(y)\nx_ = list(x_)\ny_ = list(y_)\n\n\nif y_ == x and x_ == y:\n  print(\"YES\")\nelse:\n  print(\"NO\")","label":0}
{"problem_id":"p02416","problem":"Write a program which reads an integer and prints sum of its digits.","submission_id":"s705373080","submission":"a=[]\nw=1\nwhile(w!=0):\n    w=int(input())\n    a.append(w)\na.pop()\nfor i in a:\n    s=0\n    for j in range(len(str(i))):\n       s+=int(str(i)[j])\n    print(\"{0}\".format(s))","label":0}
{"problem_id":"p03285","problem":"La Confiserie d'ABC sells cakes at 4 dollars each and doughnuts at 7 dollars each.\nDetermine if there is a way to buy some of them for exactly N dollars. You can buy two or more doughnuts and two or more cakes, and you can also choose to buy zero doughnuts or zero cakes.","submission_id":"s955437962","submission":"n = int(input())\ncake = 4\ndonut = 7\n\nfor i in range(25):\n    for j in range(25):\n        if i*cake+j*donut==n:\n            print(\"Yes\")\n            exit()\n\nprint(\"No\")\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s644659216","submission":"# -*- coding: utf-8 -*-\nimport math\n\nN = int(input()) #\u4f7f\u7528\u3057\u306a\u3044\n\nmaxn = 1000000000\nfor a in input().split():\n\n    count = 0\n    b = int(a)\n    while( b % 2 == 0):\n        b = b \/\/ 2\n        count += 1\n\n    maxn = min(maxn, count)\n\nprint(maxn)","label":0}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s464029806","submission":"#\u57fa\u672c1\u3064\u98db\u3070\u3057\u3060\u304c\u3001\u30d1\u30b9\u3082\u4f7f\u3048\u308b\u3002\n#\u5947\u6570\u306a\u3089\u30d1\u30b92\u56de\u3001\u5076\u6570\u306a\u3089\u30d1\u30b91\u56de\u3002\nN = int(input())\nA = [int(hoge) for hoge in input().split()]\nDP = [[0]*3 for n in range(N)] #DP[n][y] = n\u6841\u76ee\u307e\u3067\u307f\u3066\u3001\u30d1\u30b9\u3092y\u56de\u4f7f\u3063\u305f\u3068\u304d\u306e\u6700\u5927\u5024\n\nDP[0][0] = A[0]\n\nfor n in range(1,N):#n\u6841\u76ee\u307e\u3067\u307f\u308b\u3002\n    #\u300c\u9078\u3076\u300d\u304b\u300c\u30d1\u30b9\u3092\u4f7f\u3046\u300d\u304b\u306e2\u629e\u3002\n    DP[n][0] = DP[n-2][0] + A[n]\n    DP[n][1] = max((DP[n-2][1]+A[n],DP[n-1][0]))\n    DP[n][2] = max((DP[n-2][2]+A[n],DP[n-1][1]))\nif N%2:\n    print(DP[n][2])\nelse:\n    print(DP[n][1])","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s469022077","submission":"n = int(input())\na = list(map(int, input().split()))\ncount = 0\n\nwhile all([x % 2 ==0 for x in a]):\n  count += 1\n  b = [x\/2 for x in a]\n  a = b\nprint(count)","label":0}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s875785292","submission":"import sys\n\nN, x = map(int, sys.stdin.readline().strip().split())\nA = list(map(int, sys.stdin.readline().strip().split()))\n\nans = 0\ntmp_sum = A[0]\nfor i in range(N-1):\n    if A[i] + A[i+1] > x:\n        diff = A[i] + A[i+1] - x\n        ans += diff\n        # \u660e\u793a\u7684\u306b\u66f8\u304b\u308c\u3066\u3044\u306a\u3044\u304c\u3001A[i] > diff - A[i+i]  \u306f\u306a\u3044\u306f\u305a\n        A[i+1] = 0 if A[i+1] < diff else A[i+1] - diff\n\nprint(ans)","label":0}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s242004400","submission":"n = int(input())\nL = list(map(int,input().split()))\nans = L[0]\nfor i in range(1,n):\n    ans ^= L[i]\nif ans == 0:\n    print('Yes')\nelse:\n    print('No')\n","label":0}
{"problem_id":"p02679","problem":"We have caught N sardines. The deliciousness and fragrantness of the i-th sardine is A_i and B_i, respectively.\nWe will choose one or more of these sardines and put them into a cooler. However, two sardines on bad terms cannot be chosen at the same time.\nThe i-th and j-th sardines (i \\neq j) are on bad terms if and only if A_i \\cdot A_j + B_i \\cdot B_j = 0.\nIn how many ways can we choose the set of sardines to put into the cooler? Since the count can be enormous, print it modulo 1000000007.","submission_id":"s465041137","submission":"\nfrom fractions import Fraction\nfrom collections import defaultdict\ndef resolve():\n    # A1*A2 + B1*B2 = 0 \u5f0f\u5909\u5f62 A1\/B1 = -(B2\/A2)\n    # a, b \u306e0\u304c\u3042\u308b\u6761\u4ef6\u3092\u8003\u3048\u308b\n    \n    MOD = 1000000007\n    N = int(input())\n    zeroes = 0\n    hash1 = defaultdict(int) #\n    hash2 = defaultdict(str) #\u4e2d\u306e\u60aa\u3044\u76f8\u624b\u3092\u8a18\u5165\n    for _ in range(N):\n        a, b = map(int, input().split())\n        if a==0 and b==0:\n            zeroes += 1\n        elif b == 0:\n            hash1[\"1\/0\"] += 1\n            hash2[\"1\/0\"] = \"0\/1\"\n        elif a == 0:\n            hash1[\"0\/1\"] += 1\n            hash2[\"0\/1\"] = \"1\/0\"\n        else: # a, b\u304c0\u4ee5\u5916\n            rat1 = Fraction(a, b)\n            rat2 = Fraction(-b, a)\n            hash1[str(rat1)] += 1\n            hash2[str(rat1)] = str(rat2) # \u76f8\u624b\u3092\u5165\u308c\u308b\n\n    confirmed = set()\n    ans = 1\n    for k, v in hash1.items():\n        if k in confirmed: # \u78ba\u8a8d\u6e08\u307f\u3092\u6570\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n            continue\n        bad = hash1.get(hash2[k], 0) # \u4e2d\u306e\u60aa\u3044\u76f8\u624b, \u30ad\u30fc\u304c\u306a\u304b\u3063\u305f\u30890\u3092\u51fa\u529b\n        cnt1 = pow(2, v, MOD) - 1\n        cnt2 = pow(2, bad, MOD) - 1\n        ans = (ans * (cnt1 + cnt2 + 1)) % MOD\n        # \u78ba\u8a8d\u6e08\u307f\u306b\u3059\u308b\n        confirmed.add(k)\n        confirmed.add(hash2[k])\n        # \u203b \u30eb\u30fc\u30d7\u4e2d\u306b\u5024\u3092\u5909\u66f4\u3057\u305f\u3089\u30a8\u30e9\u30fc\n        # hash1[k] = -1\n\n    ans = (ans + zeroes + MOD -1) % MOD\n    print(ans)\n\nif __name__ == \"__main__\":\n    resolve()","label":0}
{"problem_id":"p03994","problem":"Mr. Takahashi has a string s consisting of lowercase English letters.\nHe repeats the following operation on s exactly K times.\n\nChoose an arbitrary letter on s and change that letter to the next alphabet. Note that the next letter of z is a.\n\nFor example, if you perform an operation for the second letter on aaz, aaz becomes abz.\nIf you then perform an operation for the third letter on abz, abz becomes aba.\nMr. Takahashi wants to have the lexicographically smallest string after performing exactly K operations on s.\nFind the such string.","submission_id":"s335849089","submission":"s = input()\nk = int(input())\n\nasc = [0] * len(s)\nfor i in range(len(s)):\n    asc[i] = ord(s[i]) - ord(\"a\")\ni = 0\nfor i in range(len(s)):\n    if 26 - asc[i] <= k and asc[i] != 0:\n        x = 26 - asc[i]\n        asc[i] = 0\n        k -= x\nif k > 0:\n    asc[-1] += k % 26\nfor i in range(len(s)):\n    asc[i] += ord(\"a\")\n    asc[i] = chr(asc[i])\nprint(\"\".join(asc))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s712144580","submission":"from sys import stdin\nreadline = stdin.buffer.readline\nread = stdin.buffer.read\ndef i_input(): return int(input().rstrip())\ndef i_map(): return map(int, input().rstrip().split())\ndef i_list(): return list(i_map())\n\ndef main():\n    N = i_input()\n    A = i_list()\n    ans = 0\n    c = True\n    while c:\n        for i in range(N):\n            if A[i] % 2 == 0 and A[i] > 0:\n                A[i] \/\/= 2\n            else:\n                c = False\n                break\n        else:\n            ans += 1\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s799395253","submission":"sx, sy, tx, ty = list(map(int, input().split()))\n\nout = []\ndx = tx - sx\ndy = ty - sy\nout.append('R' * dx)\nout.append('U' * dy)\nout.append('L' * dx)\nout.append('D' * dy)\nout.append('D')\nout.append('R' * (dx + 1))\nout.append('U' * (dy + 1))\nout.append('L')\nout.append('U')\nout.append('L' * (dx + 1))\nout.append('D' * (dy + 1))\nout.append('R' * 1)\nprint(''.join(out))\n","label":0}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s210152960","submission":"n = int(input())\nans = 0\nfor i in range(1,n):\n\tans += n\/\/i\n\tif n%i == 0:\n\t\tans -= 1\nprint(ans)\t\t","label":0}
{"problem_id":"p02612","problem":"We will buy a product for N yen (the currency of Japan) at a shop.\nIf we use only 1000-yen bills to pay the price, how much change will we receive?\nAssume we use the minimum number of bills required.","submission_id":"s654917044","submission":"a=input()\nb=int(a[-3:])\nif b==0:\n  ans=0\nelse:\n  ans=1000-b\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s752003663","submission":"import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N = int(readline())\n    A = list(map(int, readline().split()))\n\n    ans = INF\n\n    for x in A:\n        cur = x\n        score = 0\n        while cur % 2 == 0:\n            cur \/\/= 2\n            score += 1\n        ans = min(ans, score)\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s965275653","submission":"N = int(input())\nA = list(map(int,input().split()))\n\nimport math\nx = A[0]\nfor i in range(1,N):\n    x = math.gcd(x,A[i])\n\nans = 0\nwhile x%2 == 0:\n    x = x\/\/2\n    ans += 1\n\nprint(ans)\n","label":0}
{"problem_id":"p02419","problem":"Write a program which reads a word W and a text T, and prints the number of word W which appears in text T","submission_id":"s530949870","submission":"import sys\n\nw = sys.stdin.readline().rstrip().lower()\ncnt = 0\nwhile True:\n\tlines = sys.stdin.readline().rstrip()\n\tif not lines:\n\t\tbreak\n\tfor s in lines.split( \" \" ):\n\t\tif w == s.lower():\n\t\t\tcnt = cnt + 1\t\n\nprint( cnt )","label":0}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s378983705","submission":"a, b, t = map(int, input().split())\n\nnow = a\ncnt = 0\nt += (0.5 - a)\nwhile(t > 0):\n    cnt += b\n    now += a\n    t -= a\nprint(cnt)\n","label":0}
{"problem_id":"p03326","problem":"Takahashi became a pastry chef and opened a shop La Confiserie d'ABC to celebrate AtCoder Beginner Contest 100.\nThe shop sells N kinds of cakes.\nEach kind of cake has three parameters \"beauty\", \"tastiness\" and \"popularity\". The i-th kind of cake has the beauty of x_i, the tastiness of y_i and the popularity of z_i.\nThese values may be zero or negative.\nRingo has decided to have M pieces of cakes here. He will choose the set of cakes as follows:\n\nDo not have two or more pieces of the same kind of cake.\nUnder the condition above, choose the set of cakes to maximize (the absolute value of the total beauty) + (the absolute value of the total tastiness)  + (the absolute value of the total popularity).\n\nFind the maximum possible value of (the absolute value of the total beauty) + (the absolute value of the total tastiness) + (the absolute value of the total popularity) for the set of cakes that Ringo chooses.","submission_id":"s978111748","submission":"import numpy as np\nimport itertools\nN, M = map(int, input().split())\nx = [0] * N\ny = [0] * N\nz = [0] * N\nfor i in range(N):\n    x[i], y[i], z[i] = map(int, input().split())\n\nx = np.array(x)\ny = np.array(y)\nz = np.array(z)\n\nans = 0\nvals = []\nfor op1,op2,op3 in itertools.product([-1,1],repeat=3):\n    #print(op1,op2,op3)\n    s = x*op1 + y*op2 + z*op3\n    #print(s)\n    s.sort()\n    vals.append(s[N-M:].sum())\n\n\nprint(max(vals))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s759697621","submission":"n = input()\na = list(map(int,input().split()))\nans = float(\"inf\")\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\nprint(ans)","label":0}
{"problem_id":"p03402","problem":"You are given two integers A and B.\nPrint a grid where each square is painted white or black that satisfies the following conditions, in the format specified in Output section:\n\nLet the size of the grid be h \\times w (h vertical, w horizontal). Both h and w are at most 100.\nThe set of the squares painted white is divided into exactly A connected components.\nThe set of the squares painted black is divided into exactly B connected components.\n\nIt can be proved that there always exist one or more solutions under the conditions specified in Constraints section.\nIf there are multiple solutions, any of them may be printed.","submission_id":"s999507028","submission":"#ABC092-D Grid Components\n\"\"\"\n\u554f\u984c\uff1a\n100*100\u4ee5\u4e0b\u306e\u30b0\u30ea\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u3001\n\u767d\u30fb\u9ed2\u306b\u8272\u3092\u5857\u308b\u6642\u3001\u767d\u306e\u9023\u7d50\u6210\u5206\u306e\u500b\u6570\u3092w\u306b\u3001\n\u9ed2\u306e\u9023\u7d50\u6210\u5206\u3092b\u3068\u3057\u305f\u3082\u306e\u3092\u51fa\u529b\u305b\u3088\n\u89e3\u6cd5\uff1a\n\u307e\u305a\u30b0\u30ea\u30c3\u30c9\u306f100*100\u3068\u3057\u3066\u3088\u3044\u3002\n\u4e0a50\u884c\u3092\u9ed2\u3001\u4e0b50\u884c\u3092\u767d\u3067\u5857\u308b(w,b>=1)\n\u4e0a50\u884c100\u5217\u306e\u3046\u3061\u3001w-1\u500b\u3060\u3051\u659c\u3081\u306b\u914d\u7f6e\u3059\u308b\n\u540c\u3058\u3088\u3046\u306b\u4e0b50\u884c100\u5217\u3082b-1\u500b\u3060\u3051\u659c\u3081\u306b\u914d\u7f6e\n\"\"\"\nimport sys\nreadline = sys.stdin.buffer.readline\ndef even(n): return 1 if n%2==0 else 0\nw,b = map(int,readline().split())\nH,W = 100,100\nprint(H,W)\nans = [[\".\"]*W for _ in range(H\/\/2)]\nans += [[\"#\"]*W for _ in range(H\/\/2)]\n\ni,j = 0,0\nres = b-1\nwhile True:\n    if res == 0:\n        break\n    if j+2 >= W:\n        i += 2\n        j = 0 if even(i) else 1\n        ans[i][j] = \"#\"\n        res -= 1\n    else:\n        j += 2\n        ans[i][j] = \"#\"\n        res -= 1\ni,j = 51,0\nres = w-1      \nwhile True:\n    if res == 0:\n        break\n    if j+2 >= W:\n        i += 2\n        j = 0 if even(i) else 1\n        ans[i][j] = \".\"\n        res -= 1\n    else:\n        j += 2\n        ans[i][j] = \".\"\n        res -= 1\nfor i in ans:\n    print(\"\".join(i))","label":0}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s451237634","submission":"# D\nn, k = map(int, input().split())\nv = list(map(int, input().split()))\nq = []\nans = 0\nfor a in range(min(n, k) + 1):\n    for b in range(min(n, k) - a + 1):\n        # print(a, b)\n        if a == 0:\n            pass\n        else:\n            q.extend(v[:a])\n        if b == 0:\n            pass\n        else:\n            q.extend(v[-b:])\n        q.sort()\n        pick = k - (a + b)\n        for i in range(min(pick, len(q))):\n            # print(i, q)\n            if q[0] < 0:\n                q.reverse()\n                q.pop()\n                q.reverse()\n            else:\n                break\n        s = sum(q)\n        # print(q, pick, q[:pick], s)\n        if ans < s:\n            ans = s\n        q.clear()\nprint(ans)\n","label":0}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s242620482","submission":"def main():\n    number = int(input())\n    queue = [\"a\"]\n    for i in range(number - 1):\n        now_queue = []\n        for now in queue:\n            limit = ord(max(now)) + 2\n            for j in range(ord(\"a\"), limit):\n                now_queue.append(now + chr(j))\n        queue = now_queue\n    for q in queue:\n        print(q)\n\n\nif __name__ == '__main__':\n    main()\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s834324506","submission":"number = int(input())\ntarget_list = input().split()\n\nloopFlg = True\nloopCnt = 0\n\nwhile loopFlg == True:\n  for i in range(number):\n    if int(target_list[i])%2 == 1:\n      loopFlg = False\n    target_list[i] = str(int(target_list[i])\/\/2)\n\n  if loopFlg == True:\n  \tloopCnt += 1\n\nprint(loopCnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s804597540","submission":"n=int(input())  \nA=list(map(int, input().split()))\na=[]\nfor i in range(n):\n  for j in range(10**9):\n    if A[i]%(2**(j+1))!=0:\n      a.append(j)\n      break \nprint(min(a))\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s195297500","submission":"N = int(input())\nA = list(map(int, input().split()))\n\nres = float('inf')\n\nfor i in A:\n    cnt = 0\n    while True:\n        if i % 2 == 1:\n            if cnt == 0:\n                print(0)\n                exit()\n            elif cnt < res:\n                res = cnt\n                break\n            else:\n                break\n        i = i \/\/ 2\n        cnt += 1\n\nprint(res)\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s693514073","submission":"N = int(input())\nA = list(map(int, input().split()))\n\ncounter = 0\nwhile not 1 in [a % 2 for a in A]:\n    A = [a \/\/ 2 for a in A]\n    counter += 1\nprint(counter)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s600424799","submission":"# -*- coding:utf-8 -*-\nN = int(input())\nA_list = list(map(int,input().split()))\n\nans_list = []\ntemp_ans = 0\n\nfor value in A_list:\n    temp_value = value\n    temp_ans = 0\n    while temp_value%2 == 0:\n        temp_value \/= 2\n        temp_ans += 1\n\n    ans_list.append(temp_ans)\n\nprint(min(ans_list))","label":0}
{"problem_id":"p03038","problem":"You have N cards. On the i-th card, an integer A_i is written.\nFor each j = 1, 2, ..., M in this order, you will perform the following operation once:\nOperation: Choose at most B_j cards (possibly zero). Replace the integer written on each chosen card with C_j.\nFind the maximum possible sum of the integers written on the N cards after the M operations.","submission_id":"s427414892","submission":"#!\/usr\/bin\/env python\nfrom collections import deque, defaultdict\nfrom itertools import combinations, combinations_with_replacement\nimport bisect\nfrom math import factorial, sqrt, log, ceil, floor\n\ndef main():\n    #N, M = map(int, input().split())\n    N, M = map(int, input().split())\n\n    As = list(map(int, input().split()))\n    As = sorted(As)\n    \"\"\"\n    queue = deque()\n    for i in range(N):\n        a = As[i]\n        pos = bisect.bisect_left(queue, a)\n        queue.insert(pos, a)\n    \"\"\"\n\n    B_C = []\n    for i in range(M):\n        B, C = map(int, input().split())\n        B_C.append((B, C))\n\n    B_C = sorted(B_C, key=lambda x: x[1], reverse=True)\n\n    total = 0\n    for B, C in B_C:\n        for i in range(B):\n            if not As or C <= As[0]:\n                break\n            As.pop(0)\n            total += C\n\n    if As:\n        total += sum(As)\n\n    print(total)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s117453144","submission":"#!\/usr\/bin\/env python3\nimport math\nimport sys\nsys.setrecursionlimit(10**6)\n\n\nn = int(input())\na = list(map(int, input().split()))\n\nans = 10**10\n\nfor i in a:\n    tmp = 0\n    while(i % 2 != 1):\n        tmp += 1\n        i = i\/\/2\n    # print(tmp)\n    ans = min(ans, tmp)\n\nprint(ans)\n","label":0}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s238878735","submission":"import bisect\n\n\ndef main():\n    N, D, A = list(map(int, input().split()))\n    monsters = [list(map(int, input().split())) for _ in range(N)]\n    monsters.sort()\n    X = [m[0] for m in monsters]\n    # \u7aef\u304b\u3089\u8caa\u6b32\u306b\u653b\u6483\u3057\u3066\u3044\u304f\n    ans = 0\n    damages = [0] * (N + 1)\n    for n, monster in enumerate(monsters):\n        x, h = monster\n        h = max(0, h - damages[n])\n        to_n = bisect.bisect_right(X, x + 2 * D)\n        cnt = (h + A - 1) \/\/ A  # ceil(h \/ A)\n        ans += cnt\n        damages[n] += A * cnt\n        damages[to_n] -= A * cnt\n        damages[n + 1] += damages[n]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s537520923","submission":"def main():\n    n = int(input())\n    ls = sorted(list(map(int, input().split())))\n    ans = 0\n\n    for i, li in enumerate(ls):\n        for j, lj in enumerate(ls[i+1:]):\n            if li == lj:\n                continue\n            for lk in ls[i+j+2:]:\n                if lj == lk:\n                    continue\n\n                if li + lj > lk:\n                    ans += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s786626137","submission":"n,k = map(int, input().split())\npn = list(map(int, input().split()))\nqn = [(i+1)\/2 for i in pn]\nans = sum(qn[:k])\nt=ans\nfor i in range(1, n-k+1):\n    t +=-qn[i-1]+qn[i+k-1]\n    ans = max(ans, t)\nprint(ans)","label":0}
{"problem_id":"p03254","problem":"There are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he\/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.","submission_id":"s623239618","submission":"n,x=map(int, input().split())\na=list(map(int, input().split()))\na.sort()\n\nif sum(a)==x:\n    print(n)\nelif sum(a)<x:\n    print(n-1)\nelse:\n    total=0\n    cnt=0\n    for a_i in a:\n        if total+a_i<=x:\n            total+=a_i\n            cnt+=1\n        else:\n            break\n    print(cnt)\n","label":0}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s864590710","submission":"sx,sy,tx,ty = map(int,input().split())\nans = ''\nif tx - sx > 0:\n  if ty - sy > 0:\n    x = ['R','L','U','D']\n  else:\n    x = ['R','L','D','U']\nelse:\n  if ty - sy > 0:\n    x = ['L','R','U','D']\n  else:\n    x = ['L','R','D','U']\nans += x[0]*abs(tx-sx)\nans += x[2]*abs(sy-ty)\nans += x[1]*abs(tx-sx)\nans += x[3]*abs(ty-sy)\nans += x[3] + x[0]*(abs(tx-sx)+1)\nans += x[2]*(abs(ty-sy)+1) + x[1]\nans += x[2] + x[1]*(abs(tx-sx)+1)\nans += x[3]*(abs(ty-sy)+1) + x[0]\nprint(ans)","label":0}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s379217615","submission":"n,k = list(map(int, input().split()))\nv = list(map(int, input().split()))\n\nans = -10**9\nfor back in range(n+1):\n    for left in range(min(k-back+1, n+1)):\n        for right in range(min(k-back-left+1, n-left+1)):\n            hand = []\n            hand.extend(v[:left])\n            if right>0:\n                hand.extend(v[-right:])\n            hand.sort()\n            ans = max(ans, sum(hand[back:]))\n\nprint(ans)","label":0}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s437216093","submission":"N, X, T = map(int, input().split())\n\nans = (N \/\/ X) * T\nif N % X != 0:\n    ans += T\n\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s781271124","submission":"N = int(input())\nls = list(map(int,input().split()))\nketa = []\nans = 'a'\nj = 0\nwhile ans == 'a':\n    for i in range(N):\n        if ls[i]%2 == 0:\n            ls[i] = ls[i]\/\/2\n        else:\n            ans = j\n            break\n    j += 1\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s798501649","submission":"def main():\n    n = int(input())\n    a = map(int, input().split())\n\n    ans = 0\n    is_even = True\n\n    while is_even:\n        list_tmp = []\n        for an in a:\n            if an % 2 == 0:\n                list_tmp.append(an \/ 2)\n            else:\n                is_even = False\n                break\n        if is_even:\n            a = list_tmp\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s725077649","submission":"from decimal import Decimal\na,b,c=map(int,input().split())\nif Decimal(a)**Decimal(0.5)+Decimal(b)**Decimal(0.5)<Decimal(c)**Decimal(0.5):\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":0}
{"problem_id":"p03597","problem":"We have an N \\times N square grid.\nWe will paint each square in the grid either black or white.\nIf we paint exactly A squares white, how many squares will be painted black?","submission_id":"s116416441","submission":"# \u5165\u529b\n# n, a = map(int, input().split())\nn = int(input())\na = int(input())\n\n# \u51e6\u7406\nanswer = n * n - a\n\n# \u51fa\u529b\nprint(answer)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s436577390","submission":"# coding: utf-8\nimport math\nN = input()\nA = list(map(int, input().split()))\n\ncount = 0\nwhile True:\n    for i, a in enumerate(A):\n        if a % 2 == 0:\n            A[i] = a \/ 2\n        else:\n            print(count)\n            exit()\n    count = count + 1\n\n","label":0}
{"problem_id":"p03261","problem":"Takahashi is practicing shiritori alone again today.\nShiritori is a game as follows:\n\nIn the first turn, a player announces any one word.\nIn the subsequent turns, a player announces a word that satisfies the following conditions:\nThat word is not announced before.\nThe first character of that word is the same as the last character of the last word announced.\n\n\n\nIn this game, he is practicing to announce as many words as possible in ten seconds.\nYou are given the number of words Takahashi announced, N, and the i-th word he announced, W_i, for each i. Determine if the rules of shiritori was observed, that is, every word announced by him satisfied the conditions.","submission_id":"s024573810","submission":"import sys\nN = int(input())\nW = [input() for _ in range(N)]\nli = [W[0]]\nfor i in range(1,N):\n  if W[i][0] != W[i-1][-1]:\n    print(\"No\")\n    sys.exit()\n  if W[i] in li:\n    print(\"No\")\n    sys.exit()\n  li.append(W[i])\nprint(\"Yes\")","label":0}
{"problem_id":"p02786","problem":"Caracal is fighting with a monster.\nThe health of the monster is H.\nCaracal can attack by choosing one monster. When a monster is attacked, depending on that monster's health, the following happens:\n\nIf the monster's health is 1, it drops to 0.\nIf the monster's health, X, is greater than 1, that monster disappears. Then, two new monsters appear, each with the health of \\lfloor X\/2 \\rfloor.\n\n(\\lfloor r \\rfloor denotes the greatest integer not exceeding r.)\nCaracal wins when the healths of all existing monsters become 0 or below.\nFind the minimum number of attacks Caracal needs to make before winning.","submission_id":"s609891514","submission":"n=int(input())\nans=0\nwhile n>1:\n  n=n\/\/2\n  ans+=1\n  \nans1=2**(ans+1)-1\nprint(ans1)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s271606722","submission":"N=int(input())\nA=list(map(int,input().split()))\ncount=0\n \nwhile all(a%2==0 for a in A):\n  A=[a\/\/2 for a in A]\n  count+=1\n \nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s716420804","submission":"n = int(input())\na = list(map(int, input().split()))\n\nfor i in range(100):\n    for j in range(len(a)):\n        if a[j]%2 == 0:\n            a[j] \/\/= 2\n        else:\n            print(i)\n            exit()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s721566638","submission":"import numpy as np\n\nN = int(input())\nA = list(map(int,input().split()))\n\nans = 0\n\ndef func1(n):\n  return n\/2\n\ndef func2(n):\n  return n%2\n\ni = 0\nwhile i == 0:\n  \n  x = list(map(func2,A))\n  \n  if sum(x) == 0:\n    ans += 1\n    A = list(map(func1,A))\n  else:\n    break\n\nprint(ans)\n\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s002464968","submission":"n=int(input())\nL=list(map(int,input().split()))\ncnt=0\nok=1\nwhile ok:\n  for i in range(n):\n    if L[i]%2==1:\n      ok=0\n      break\n    L[i]\/=2\n  if ok:cnt+=1\n\nprint(cnt)","label":0}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s554925231","submission":"\nimport operator\nclass SegmentTree:\n    def __init__(self, size, fn=operator.add, default=None, initial_values=None):\n        \"\"\"\n        :param int size:\n        :param callable fn: \u533a\u9593\u306b\u9069\u7528\u3059\u308b\u95a2\u6570\u3002\u5f15\u6570\u3092 2 \u3064\u53d6\u308b\u3002min, max, operator.xor \u306a\u3069\n        :param default:\n        :param list initial_values:\n        \"\"\"\n        default = default or 0\n\n        # size \u4ee5\u4e0a\u3067\u3042\u308b\u6700\u5c0f\u306e 2 \u51aa\u3092 size \u3068\u3059\u308b\n        n = 1\n        while n < size:\n            n *= 2\n        self._size = n\n        self._fn = fn\n\n        self._tree = [default] * (self._size * 2 - 1)\n        if initial_values:\n            i = self._size - 1\n            for v in initial_values:\n                self._tree[i] = v\n                i += 1\n            i = self._size - 2\n            while i >= 0:\n                self._tree[i] = self._fn(self._tree[i * 2 + 1], self._tree[i * 2 + 2])\n                i -= 1\n\n    def set(self, i, value):\n        \"\"\"\n        i \u756a\u76ee\u306b value \u3092\u8a2d\u5b9a\n        :param int i:\n        :param value:\n        :return:\n        \"\"\"\n        x = self._size - 1 + i\n        self._tree[x] = value\n\n        while x > 0:\n            x = (x - 1) \/\/ 2\n            self._tree[x] = self._fn(self._tree[x * 2 + 1], self._tree[x * 2 + 2])\n\n    def add(self, i, value):\n        \"\"\"\n        \u3082\u3068\u306e i \u756a\u76ee\u3068 value \u306b fn \u3092\u9069\u7528\u3057\u305f\u3082\u306e\u3092 i \u756a\u76ee\u306b\u8a2d\u5b9a\n        :param int i:\n        :param value:\n        :return:\n        \"\"\"\n        x = self._size - 1 + i\n        self.set(i, self._fn(self._tree[x], value))\n\n    def get(self, from_i, to_i=None, k=0, L=None, r=None):\n        \"\"\"\n        [from_i, to_i) \u306b fn \u3092\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059\n        :param int from_i:\n        :param int to_i:\n        :param int k: self._tree[k] \u304c\u3001[L, r) \u306b fn \u3092\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u6301\u3064\n        :param int L:\n        :param int r:\n        :return:\n        \"\"\"\n        if to_i is None:\n            return self._tree[self._size - 1 + from_i]\n\n        L = 0 if L is None else L\n        r = self._size if r is None else r\n\n        if from_i <= L and r <= to_i:\n            return self._tree[k]\n\n        if to_i <= L or r <= from_i:\n            return None\n\n        ret_L = self.get(from_i, to_i, k * 2 + 1, L, (L + r) \/\/ 2)\n        ret_r = self.get(from_i, to_i, k * 2 + 2, (L + r) \/\/ 2, r)\n        if ret_L is None:\n            return ret_r\n        if ret_r is None:\n            return ret_L\n        return self._fn(ret_L, ret_r)\n\n    def __len__(self):\n        return self._size\n\n\n\nfrom bisect import bisect_right\ndef resolve():\n    N, D, A = map(int, input().split())\n    AB = [list(map(int, input().split())) for _ in range(N)]\n    AB.sort()\n    X, _ = zip(*AB)\n    D = 2*D\n\n    seg = SegmentTree(N+10)\n    ans = 0\n    for i, (x, h) in enumerate(AB):\n        h = -(-h \/\/ A)\n        damage = seg.get(0, i+1)\n\n        if h < damage:\n            continue\n        ans += h - damage\n        seg.add(i, h-damage)\n        seg.add(bisect_right(X, x + D), - h + damage)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()\n","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s651912609","submission":"\nN = int(input())\nNs = list(map(int, input().split()))\nNs.sort()\nans = 0\n\nfor i in range(0, N - 2):\n\tfor j in range(i + 1, N - 1):\n\t\tfor k in range(j + 1, N):\n\t\t\tif(Ns[i] == Ns[j] or Ns[k] == Ns[j]):\n\t\t\t\tcontinue\n\n\t\t\tif(Ns[i] + Ns[j] > Ns[k] and Ns[j] + Ns[k] > Ns[i] and Ns[k] + Ns[i] > Ns[j]):\n\t\t\t\tans += 1\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s864498169","submission":"n=int(input())\n*a,=map(int,input().split())\nc=0\nwhile all([i%2==0 for i in a]):\n    a=[j\/2 for j in a]\n    c+=1\nprint(c)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s592137021","submission":"# ABC081\nN = int(input())\nA = list(map(int, input().split()))\n\ni = 1\nwhile True:\n    for a in A:\n        if a % (2**i) == 0:\n            pass\n        else:\n            print(i-1)\n            exit()\n    i += 1\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s130337190","submission":"def main():\n\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ans = 0\n    flg = True\n    while flg:\n        for i in range(len(nums)):\n            if nums[i] % 2 == 0:\n                num = nums[i] \/ 2\n                nums[i] = num\n            else:\n                flg = False\n                break\n        if flg:\n            ans += 1\n\n    print(ans)\n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s430952067","submission":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Apr 27 21:30:42 2020\n\"\"\"\n\nimport sys\n#import numpy as np\n\nsys.setrecursionlimit(10 ** 9)\n#def input():\n#    return sys.stdin.readline()[:-1]\nmod = 10**9+7\n\n#N = int(input())\nN, X = map(int,input().split())\n#A = list(map(int,input().split()))\n\nn = N\neat = X\n\ndef dfs(x):\n    x\n\nans = 0\n#print(ans,eat,n)\nwhile eat > 0 and n >= 0:\n    if eat == (pow(2,n+2) - 3 + 1) \/\/2:\n        ans += pow(2,n) - 1 + 1\n        eat = 0\n        n -= 1\n    elif eat > (pow(2,n+2) - 3 + 1) \/\/2:\n        ans += pow(2,n) - 1 + 1\n        eat -= (pow(2,n+2) - 2) \/\/2\n        n -= 1\n    else:\n        eat -= 1\n        n -= 1\n#    print(ans,eat,n)\n\nprint(ans)\n    \n","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s091199355","submission":"import sys\nfrom collections import defaultdict\n\nn, a, *x = map(int, sys.stdin.read().split())\nfor i in range(n): x[i] -= a\n\ndef main():\n  dp = defaultdict(int); dp[0] = 1\n  for i in range(n):\n    ndp = dp.copy()\n    for k, v in dp.items():\n      ndp[k+x[i]] += v\n    dp = ndp\n  print(dp[0] - 1)\n  \nif __name__ == '__main__':\n  main()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s924667560","submission":"def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    min_two_count = 2 ** 30\n\n    for i in range(len(a)):\n        temp_two_count = 0\n        while a[i] % 2 == 0:\n            temp_two_count += 1\n            a[i] = a[i] \/\/ 2\n\n        if min_two_count > temp_two_count:\n            min_two_count = temp_two_count\n\n    print(min_two_count)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s384621699","submission":"N=int(input())\na=list(map(int,input().split()))\nnum=1\nans=0\nfor i in range(1,N):\n    if a[i]==a[i-1]:\n        num+=1\n    else:\n        ans+=num\/\/2\n        num=1\nans+=num\/\/2\nprint(ans)","label":0}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s886755024","submission":"# coding: utf-8\n# Your code here!\n\nN,M=map(int,input().split())\nA=list(map(int,input().split()))\nA.sort(reverse=True)\nsum_A=sum(A)\ncount=0\nfor i in range(M):\n    if A[i]\/sum_A>=1\/(4*M):\n        count+=1\n\nif count==M:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":0}
{"problem_id":"p03307","problem":"You are given a positive integer N.\nFind the minimum positive integer divisible by both 2 and N.","submission_id":"s967984572","submission":"n=int(input())\nif(n%2==0):\n    n=n\nelse:\n    n=2*n\nprint(n)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s944348335","submission":"N = int(input())\nnums = list(map(int, input().split()))\n\ncnt = 0\n\nwhile True:\n    for i in range(N):\n        if nums[i] % 2 == 1:\n            result = \"Odd\"\n            break\n        else:\n            result = \"Even\"\n            nums[i] \/= 2\n    if result == \"Odd\": break\n    cnt += 1\nprint(cnt)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s431792617","submission":"n=int(input())\na=list(map(int,input().split()))\n\ncnt=0\nwhile 1:\n    for i in range(n):\n        if a[i]%2:\n            print(cnt)\n            exit()\n    else:\n        cnt+=1\n        for i in range(n):\n            a[i]\/\/=2","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s295655924","submission":"n=int(input())\nA=list(map(int,input().split()))\nans=0\nwhile True:\n  for i in range(n):\n    if A[i] %2 == 0:\n      A[i] \/\/= 2\n    else:\n      print(ans)\n      quit()\n  ans += 1","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s498399445","submission":"n = int(input())\nl = sorted(map(int,input().split()))\n\nans = 0\n\nfor a in range(n):\n    for b in range(a+1,n):\n        for c in range(b+1,n):\n            if  l[a] != l[b] != l[c] and l[a]+l[b] > l[c]:\n                ans += 1\nprint(ans)","label":0}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s716913010","submission":"import sys\nrs = lambda: sys.stdin.readline().strip()\nri = lambda: int(rs())\nrs_ = lambda: [_ for _ in rs().split()]\nri_ = lambda: [int(_) for _ in rs().split()]\n\nMOD = 10 ** 9 + 7\n\nN, K = ri_()\nA = ri_()\nans = 0\nfor i in range(N):\n    for j in range(N):\n        if A[i] > A[j]:\n            if i < j:\n                ans += (K * (K + 1) \/\/ 2) % MOD\n            elif i > j:\n                ans += (K * (K - 1) \/\/ 2) % MOD\nprint(ans % MOD)","label":0}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s348726661","submission":"s = input()\nt = input()\nans = 1000\nc = 0\n\n\nfor i in range(len(s)-len(t)+1):\n    for j in range(len(t)):\n        if s[i+j] == t[j]:\n            c += 1\n    ans = min(len(t) - c , ans)\n    c = 0\n\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s291331380","submission":"def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    cnt = 0\n    flag = 0\n\n    while flag == 0:\n        for i in range(N):\n            if A[i] % 2 != 1:\n                A[i] = A[i] \/\/ 2\n            else:\n                flag = 1\n                print(cnt)\n                return\n        cnt += 1\n\nmain()","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s224011886","submission":"n = int(input())\narr = list(map(int, input().split()))\n\nanswer = 0\nfor idx1 in range(0, len(arr) - 2):\n    for idx2 in range(idx1+1, len(arr) - 1):\n        for idx3 in range(idx2+1, len(arr)):\n            if arr[idx1] == arr[idx2] or arr[idx1] == arr[idx3] or arr[idx2] == arr[idx3]:\n                continue\n            if arr[idx1] + arr[idx2] > arr[idx3] and arr[idx1] + arr[idx3] > arr[idx2] and arr[idx2] + arr[idx3] > arr[idx1]:\n                answer += 1\n\nprint(answer)","label":0}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s691111231","submission":"n,*t=map(int,open(0))\nprint(n%2*'Hello World'or sum(t))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s194658803","submission":"s = int(input())\ns = input().rstrip().split(' ')\n\nresult = 0\n\n\ndef half(num):\n    count = 0\n    while ((num % 2) == 0) :\n        num = num \/ 2\n        count += 1\n    return count\n\n\nfor num in s:\n    num = int(num)\n    count = half(num)\n    if not result:\n        result = count\n\n    if count == 0:\n        result = 0\n        break\n\n    if count < result:\n        result = count\n\nprint(result)\n\n","label":0}
{"problem_id":"p02259","problem":"Write a program of the Bubble Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:","submission_id":"s125200474","submission":"numberOfArray=int(input())\narrayList=list(map(int,input().split()))\n\ndef bubbleSort():\n    frag=1\n    count=0\n    while frag:\n        frag=0\n        for i in range(1,numberOfArray):\n            if arrayList[i-1]>arrayList[i]:\n                arrayList[i-1],arrayList[i]=arrayList[i],arrayList[i-1]\n                frag=1\n                count+=1\n    arrayForReturn=str(arrayList[0])\n    for i2 in range(1,numberOfArray):\n        arrayForReturn+=\" \"+str(arrayList[i2])\n    print(arrayForReturn)\n    print(count)\n\n#------------------main--------------\nbubbleSort()\n","label":0}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s108103271","submission":"N = int(input())\nB = list(map(int, input().split()))\n#flag = True\nans = B[0]\nbefore = B[0]\nfor k in range(N-1):\n  if before > B[k]:\n    ans -= before\n    ans += B[k]+B[k]\n    before = B[k]\n  else:\n    ans += B[k]\n    before = B[k]\nprint(ans)\n#print('Yes')\n#print('No')","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s418425441","submission":"import math\nN = int(input())\nA = list(map(int,input().split()))\n\nfor i in range(N):\n    cnt = 0\n    while(A[i]%2==0):\n        A[i] = A[i]\/\/2\n        cnt += 1\n    A[i] = cnt \n\nprint(min(A))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s542715022","submission":"# 081B\nN = int(input())\nA = list(map(int, input().split())) \nc = 0\nb = 0\nwhile True:\n    for i in range(N):\n        if (A[i]%2) == 0:\n            A[i] = A[i]\/2\n        else:\n            c =1\n            break\n    if c == 1:\n        break\n    b += 1\n    \nprint(b)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s891442316","submission":"def divide(l):\n\tfor i in range(len(l)):\n\t\tif l[i] % 2 == 0:\n\t\t\tl[i] = int(l[i] \/ 2)\n\t\telse:\n\t\t\treturn False\n\t\t\t\n\treturn True\n\n\nn = int(input())\nl = list(map(int, input().split()))\n\ncount = 0\nwhile divide(l):\n\tcount += 1\n\t\t\nprint(count)","label":0}
{"problem_id":"p03450","problem":"There are N people standing on the x-axis.\nLet the coordinate of Person i be x_i.\nFor every i, x_i is an integer between 0 and 10^9 (inclusive).\nIt is possible that more than one person is standing at the same coordinate.\nYou will given M pieces of information regarding the positions of these people.\nThe i-th piece of information has the form (L_i, R_i, D_i).\nThis means that Person R_i is to the right of Person L_i by D_i units of distance, that is, x_{R_i} - x_{L_i} = D_i holds.\nIt turns out that some of these M pieces of information may be incorrect.\nDetermine if there exists a set of values (x_1, x_2, ..., x_N) that is consistent with the given pieces of information.","submission_id":"s736649244","submission":"import sys\nfrom collections import deque\n\nN, M = map(int, sys.stdin.readline().split())\n\nedges = [[] for _ in range(N)]\nfor _ in range(M):\n    l, r, d = map(int, sys.stdin.readline().split())\n    edges[l-1].append((r-1, d))\n    edges[r-1].append((l-1, -d))\n\nvisited = {}\n# \u305d\u306e\u4eba\u3078\u306e\u30d1\u30b9\u304c\u8907\u6570\u3042\u308a\u3001\u8ddd\u96e2\u304c\u7570\u306a\u308b\u5834\u5408\u306f\u77db\u76fe\nfor i in range(N):\n    if i in visited:\n        continue\n\n    # \u9023\u7d50\u30b0\u30e9\u30d5\u3054\u3068\u306b\u76f8\u5bfe\u7684\u306a\u8ddd\u96e2\u3092\u6c7a\u5b9a\n    # dist = [0 for _ in range(N)]\n    q = deque([(i, 0)])\n    while q:\n        l, c = q.popleft()\n        if l in visited:\n            if visited[l] != c:\n                print(\"No\")\n                sys.exit()\n            continue\n        \n        visited[l] = c\n        # dist[l] = c\n\n        for r, nd in edges[l]:\n            q.append((r, c+nd))\n    # print(dist)\n\nprint(\"Yes\")","label":0}
{"problem_id":"p02381","problem":"You have final scores of an examination for n students. Calculate standard deviation of the scores s1, s2 ... sn.","submission_id":"s730711561","submission":"import math\nwhile(True):\n    if input() == '0':\n        break\n    a = list(map(int, input().split()))\n    m = sum(a) \/ len(a)\n    b = 0\n    for i in a:\n        b += (i - m) ** 2.0\n    stddev = math.sqrt(b \/ len(a))\n    print(stddev)\n","label":0}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s458735339","submission":"import sys\ninput = sys.stdin.readline\n\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\n\ndef main():\n    mod=10**9+7\n    N=I()\n    a=LI()\n    b=[0]*N\n    \n    \n    for i in range(N-1,-1,-1):\n        temp=0\n        for j in range(i+1,N+1,i+1):\n            jj=j-1\n            if b[jj]:\n                temp+=1\n        temp=temp%2\n        if temp!=a[i]:\n            b[i]=1\n            \n    M=sum(b)\n    ans=[]\n    for i in range(N):\n        if b[i]:\n            ans.append(i+1)\n            \n    print(M)\n    print(' '.join(map(str, ans)))\n        \n\nmain()\n","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s958675617","submission":"from collections import deque\n\nh,n = map(int,input().split())\nab = []\nfor i in range(n):\n\ta,b = map(int,input().split())\n\tab.append([a,b])\n\nab.sort(key=lambda x: x[0]\/x[1], reverse=True)\n\nif h==9999 and n==10:\n\tprint(139815)\n\texit()\n\n\n#bubble sort\n#for i in range(n-1,-1,-1):\n#\tfor j in range(0,i):\n#\t\tif ab[j][0]*ab[j+1][1]<ab[j+1][0]*ab[j][1]:\n#\t\t\ttmp = ab[j]\n#\t\t\tab[j] = ab[j+1]\n#\t\t\tab[j+1] = tmp\n\nans = 0\nansk = float('inf')\n\ndef indexH(h,arr):\n\tli = []\n\tfor i in range(len(arr)):\n\t\tif arr[i][0]>=h:\n\t\t\tli.append(i)\n\treturn li[::-1]\n\ndef indexH2(h,arr):\n\td = deque()\n\tfor i in range(len(arr)):\n\t\tif arr[i][0]>=h:\n\t\t\td.appendleft(i)\n\treturn d\n\n\n\nwhile 1:\n\tif len(ab)==0:\n\t\tbreak\n\tmaxa = max(ab, key=lambda x:x[0])[0]\n\tif maxa<h:\n\t\tk = ab[0]\n\t\tx = (h-maxa)\/\/k[0]\n\t\tl = max(x,1)\n\t\th-=k[0]*l\n\t\tans+=k[1]*l\n\t\t#print(h,ans)\n\telse:\n\t\tc = 0\n\t\tindex = indexH2(h,ab)\n\t\t#print(h,index,ab,ab)\n\t\tfor i in index:\n\t\t\tansk = min(ansk,ans+ab[i][1])\n\t\t\tab.pop(i)\n\nprint(ansk)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s829376739","submission":"n = int(input())\nl = list(map(int,input().split()))\nans = 0\nmini = 10**8\nfor i in range(n):\n    num = 0\n    while l[i] %2==0:\n        num += 1\n        l[i] \/= 2\n    mini = min(mini,num)\nprint(mini)\n","label":0}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s409882107","submission":"N,X=map(int,input().split(' '))\nl = 1\np = 1\nL=[]\nP=[]\nfor i in range(N):\n    l = 2*l+3\n    p = 2*p+1\n    L.append(l)\n    P.append(p)\ndef pans(l,x):\n    if l==1:\n        return list('BPPPB'[:x]).count('P')\n    elif x<=L[l-2]+1:\n        return pans(l-1,x-1)\n    else:\n        return P[l-2]+1+pans(l-1,x-(2+L[l-2]))\nprint(pans(N,X))","label":0}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s389420896","submission":"from collections import Counter\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nMOD = 10 ** 9 + 7\nA_sort0 = sorted(A)\nA_sort = sorted(list(set(A)))\ncounter = Counter(A)\nans = 0\nfor i in range(len(A_sort)):\n    if i == 0:\n        continue\n    else:\n        q = A_sort0.index(A_sort[i])\n        ans += (q * (K * (K-1) \/\/ 2) * counter[A_sort[i]])  % MOD\n        index = A.index(A_sort[i])\n        cnt = 0\n        p = 0\n        for j in range(index, N):\n            if A_sort[i] > A[j]:\n                cnt += 1 * p\n            elif A_sort[i] == A[j]:\n                p += 1\n        ans = (ans + (cnt * K)) % MOD\nprint(ans)\n","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s778562238","submission":"def f(n, m):\n    s = list(map(int,input().split()))\n    t = list(map(int,input().split()))\n    dpi = [1] * (m + 1)\n    for i, sk in enumerate(s):\n        dpi1 = dpi[:]\n        cs = 0\n        for j, tk in enumerate(t):\n            if sk == tk:\n                cs = (cs + dpi[j]) % md\n            dpi1[j + 1] = (dpi1[j + 1] + cs) % md\n        dpi=dpi1\n#    for x in dp:\n#        print(*x)\n    print(dpi1[-1])\n\nmd = 10 ** 9 + 7\nn, m = map(int, input().split())\nf(n, m)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s148218485","submission":"N = int(input())\nA = list(map(int, input().split()))\n\n# N \u304c 2 \u3067\u4f55\u56de\u5272\u308c\u308b\u304b\ndef how_many_times(N):\n    exp = 0\n    while N % 2 == 0:\n        N \/\/= 2\n        exp += 1\n    return exp\n\nresult = min(map(how_many_times, A))\nprint(result)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s771466944","submission":"from math import gcd\nn = int(input())\na = list(map(int, input().split()))\nans = a[0]\nfor i in range(1, n):\n    ans = gcd(ans, a[i])\ncnt = 0\nwhile ans % 2 == 0:\n    ans \/\/= 2\n    cnt += 1\nprint(cnt)","label":0}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s145222334","submission":"import sys\nfrom sys import exit\nfrom collections import deque\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right #func(\u30ea\u30b9\u30c8,\u5024)\nfrom heapq import heapify, heappop, heappush\nfrom math import *\n\nsys.setrecursionlimit(10**6)\nINF = 10**20\nMOD = 10**9+7\n\ndef mint():\n    return map(int,input().split())\ndef lint():\n    return map(int,input().split())\ndef judge(x, l=['Yes', 'No']):\n    print(l[0] if x else l[1])\ndef lprint(l, sep='\\n'):\n    for x in l:\n        print(x, end=sep)\n\nN = int(input())\ns = [0]*N\nfor i in range(N):\n    s[i] = int(input())\ns.sort()\ns.append(sum(s))\n    \nif s[N]%10!=0:\n    print(s[N])\nelse:\n    i = 0\n    while i<N and s[i]%10==0:\n        i += 1\n    print(s[N]-s[i])","label":0}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s078742119","submission":"import math\nN,M=map(int,input().split())\ndef C(x):\n    if x>=2:\n        return math.factorial(x)\/\/(math.factorial(x-2)*2)\n    else:\n        return 0\nprint(C(N)+C(M))","label":0}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s764118377","submission":"n=input()\nli=list(map(int, n))\nsum=0\nfor i in range(len(li)):\n    sum+=li[i]\nif sum%9==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":0}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s111560536","submission":"def main():\n    S = input()\n\n    if S.endswith('s'):\n        answer = S + 'es'\n    else:\n        answer = S + 's'\n\n    print(answer)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s040740173","submission":"n = int(input())\na_list = list(map(int, input().split()))\n\nstatus = True\nexecute = 0\nwhile status:\n    for i in range(n):\n        if a_list[i] % 2 == 1:\n            status = False\n            break\n        else:\n            a_list[i] = a_list[i] \/ 2\n    if status:\n        execute += 1\nprint(execute)\n","label":0}
{"problem_id":"p02866","problem":"Given is an integer sequence D_1,...,D_N of N elements. Find the number, modulo 998244353, of trees with N vertices numbered 1 to N that satisfy the following condition:\n\nFor every integer i from 1 to N, the distance between Vertex 1 and Vertex i is D_i.","submission_id":"s625558257","submission":"mod = 998244353\nN = int(input())\nD = list(map(int,input().split()))\nfrom collections import Counter\nif D[0] != 0 or 0 in D[1:]:\n    print(0)\nelse:\n    dc1 = Counter(D[1:])\n    dc = [0 for i in range(max(D))]\n    for k,v in dc1.items():\n        dc[k-1] = v\n    ans = 1\n    for i in range(1,len(dc)):\n        if dc[i] == 0:\n            ans = 0\n            break\n        ans = (ans*(dc[i-1]**dc[i]))%mod\n    print(ans)","label":0}
{"problem_id":"p02677","problem":"Consider an analog clock whose hour and minute hands are A and B centimeters long, respectively.\nAn endpoint of the hour hand and an endpoint of the minute hand are fixed at the same point, around which each hand rotates clockwise at constant angular velocity. It takes the hour and minute hands 12 hours and 1 hour to make one full rotation, respectively.\nAt 0 o'clock, the two hands overlap each other. H hours and M minutes later, what is the distance in centimeters between the unfixed endpoints of the hands?","submission_id":"s774169205","submission":"from math import cos, sqrt, pi\n\n\nA, B, H, M = map(int, input().split())\nang_A = (H * 60 + M) \/ 360 * pi\nang_B = (H * 60 + M) \/ 30 * pi\nang_C = abs(ang_A - ang_B)\nif ang_C > pi:\n    ang_C = 2 * pi - ang_C\nC = sqrt(A**2 + B**2 - 2*A*B*cos(ang_C))\nprint(C)","label":0}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s833902401","submission":"S = input()\nT = input()\n\nlens = len(S)\nlent = len(T)\n\ncur_ans = 999999999999\n\nfor i in range(lens - lent + 1):\n    local_ans = 0\n    for j in range(lent):\n        if T[j] != S[i+j]:\n            local_ans += 1\n    \n    cur_ans = min(cur_ans, local_ans)\n\nprint(cur_ans)","label":0}
{"problem_id":"p02913","problem":"Given is a string S of length N.\nFind the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping.\nMore formally, find the maximum positive integer len such that there exist integers l_1 and l_2 ( 1 \\leq l_1, l_2 \\leq N - len + 1 ) that satisfy the following:\n\n\nl_1 + len \\leq l_2\n\n\nS[l_1+i] = S[l_2+i] (i = 0, 1, ..., len - 1)\n\n\nIf there is no such integer len, print 0.","submission_id":"s439336138","submission":"n=int(input())\ns=input()\n\nsuc=[0]*(n-1)\nans=0\nfor i,c in enumerate(s):\n    for j in range(n-1):\n        idx=(i+1+j)%n\n        if idx==0:\n            suc[j]=0#\u307e\u305f\u3050\u306e\u306f\u7981\u6b62\n        if c==s[idx]:\n            suc[j]+=1\n            suc[j]=min(suc[j],j+1,n-1-j)#\u6700\u5927j+1\u3092\u8d85\u3048\u308b\u3068\u91cd\u306a\u308b\u305f\u3081\n            ans=max(ans,suc[j])\n        else:\n            suc[j]=0\nprint(ans)","label":0}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s167341173","submission":"import math\nimport collections\nimport fractions\nimport itertools\nimport functools\nimport  operator\n\ndef solve():\n    n = int(input())\n    s = input()\n    l, r = 0, 0\n    for i in s:\n        if i == \"(\":\n            r += 1\n        else:\n            if r != 0:\n                r -= 1\n            else:\n                l += 1\n    ans = \"(\"*l + s + \")\"*r\n    print(ans)\n    return 0\n\nif __name__ == \"__main__\":\n    solve()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s424702855","submission":"n=int(input())\nc=list(map(int, input().split()))\nans=0\nf=0\n\nfor i in range(n):\n    if c[i]%2!=0:\n        print(0)\n        exit()\n\nwhile f==0:\n    for i in range(n):\n        c[i]=c[i]\/2\n        if c[i]%2!=0:\n            ans+=1\n            print(ans)\n            exit()\n    ans+=1","label":0}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s306259630","submission":"from itertools import permutations\n\n\nN, M, R = map(int, input().split())\nr = list(map(int, input().split()))\nINF = float('inf')\n\ngraph = [[INF for _ in range(N)] for _ in range(N)]\n\nfor _ in range(M):\n    a, b, c = map(int, input().split())\n    graph[a-1][b-1] = c\n    graph[b-1][a-1] = c\n\ndistance = [[float('inf') for _ in range(N)] for _ in range(N)]\n\nfor k in range(N):\n    for i in range(N):\n        for j in range(N):\n            graph[i][j] = min(graph[i][j], graph[i][k] + graph[k][j])\n\ntotal_min = INF\nfor i in permutations(r, len(r)):\n    total = 0\n    for j in range(len(r)-1):\n        total += graph[i[j]-1][i[j-1]-1]\n    if total < total_min:\n        total_min = total\n\nprint(total_min)\n\n","label":0}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s158950577","submission":"import math\ndef count(n, r):\n    return math.factorial(n) \/\/ math.factorial(n - r)\ndef main():\n  N, M = map(int, input().split())\n  if (N == 0 and M == 0) or (N == 1 and M == 1):\n    ans = 0\n  elif N == 0 or N == 1:\n    y = count(M, 2)\n    ans = y\n  elif M == 0 or M == 1:\n    x = count(N, 2)\n    ans = x\n  else:\n    x = count(N, 2)\n    y = count(M, 2)\n    ans = x + y\n  print(int(ans\/2))\n\nmain()\n\n","label":0}
{"problem_id":"p02960","problem":"Given is a string S. Each character in S is either a digit (0, ..., 9) or ?.\nAmong the integers obtained by replacing each occurrence of ? with a digit, how many have a remainder of 5 when divided by 13? An integer may begin with 0.\nSince the answer can be enormous, print the count modulo 10^9+7.","submission_id":"s307840054","submission":"import sys\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\n\ndef main():\n    S = readline().rstrip()\n    N = 13\n    dp = [0] * 13  # dp[k]: 13\u3067\u5272\u3063\u305f\u4f59\u308a\u304ck\u306e\u30d1\u30bf\u30fc\u30f3\u6570\n    dp[0] = 1\n    \n    mul = 1\n    for s in S[::-1]:\n        next_dp = [0] * N\n        if s == '?':\n            for k in range(10):\n                for j in range(N):\n                    next_dp[(k * mul + j) % N] += dp[j]\n                    next_dp[(k * mul + j) % N] %= MOD\n        else:\n            k = int(s)\n            for j in range(N):\n                next_dp[(k * mul + j) % N] += dp[j]\n                next_dp[(k * mul + j) % N] %= MOD\n        mul *= 10\n        mul %= N\n        dp = next_dp\n\n    print(dp[5])\n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s902583990","submission":"N = int(input())\nA = list(map(int, input().split()))\n\nans = 10 ** 16\ncnt = 0\nfor A in A:\n    while A % 2 == 0:\n        A = int(A \/ 2)\n        cnt += 1\n    ans = min(cnt, ans)\n    cnt = 0\n\nprint(ans)\n\n","label":0}
{"problem_id":"p03427","problem":"Find the maximum possible sum of the digits (in base 10) of a positive integer not greater than N.","submission_id":"s201094016","submission":"#print#!\/usr\/bin\/env python3\n#%% for atcoder uniittest use\nimport sys\ninput= lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**9)\ndef pin(type=int):return map(type,input().split())\ndef tupin(t=int):return tuple(pin(t))\ndef lispin(t=int):return list(pin(t))\n#%%code\nfrom collections import Counter\ndef resolve():\n    N=list(input())\n    a=sum(map(int,N))\n    for n in range(1,len(N)):\n        t=(N[:n]+[9]*(len(N)-n))\n        a=max(a,sum(map(int,t))-1)\n    print(a)\n        \n#%%submit!\nresolve()","label":0}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s621110281","submission":"import math\n#=input()\n#=int(input())\na,b,c=map(int,input().split())\n#=map(str,input().split())\n#=list(map(int,input().split()))\nif 4*a*b < (-a-b+c)**2 and a+b<=c:\n    print(\"Yes\")\nelse:\n    print(\"No\") ","label":0}
{"problem_id":"p03106","problem":"You are given positive integers A and B.\nFind the K-th largest positive integer that divides both A and B.\nThe input guarantees that there exists such a number.","submission_id":"s173217219","submission":"import math\nA,B,K=map(int,input().split())\nanslist=[]\nfor i in range(1,max(A,B)+1):\n    if (A%i==0)&(B%i==0):\n        anslist.append(i)\nprint(anslist[0-K])","label":0}
{"problem_id":"p02549","problem":"There are N cells arranged in a row, numbered 1, 2, \\ldots, N from left to right.\nTak lives in these cells and is currently on Cell 1. He is trying to reach Cell N by using the procedure described below.\nYou are given an integer K that is less than or equal to 10, and K non-intersecting segments [L_1, R_1], [L_2, R_2], \\ldots, [L_K, R_K].\nLet S be the union of these K segments.\nHere, the segment [l, r] denotes the set consisting of all integers i that satisfy l \\leq i \\leq r.\n\n\bWhen you are on Cell i, pick an integer d from S and move to Cell i + d. You cannot move out of the cells.\n\nTo help Tak, find the number of ways to go to Cell N, modulo 998244353.","submission_id":"s738889502","submission":"def main():\n    N, K = map(int, input().split())\n    MOD = 998244353\n\n    S = []\n    LR = []\n    for i in range(K):\n        l, r = map(int, input().split())\n        LR.append((l, r))\n    \n    LR.sort()\n    # for (l, r) in LR:\n    #     for x in range(l, min(r+1, N)):\n    #         S.append(x)\n\n    a = [0] * N\n    f = [0] * N\n    f[0] = 1\n    a[1] = -1\n\n    for i in range(N):\n        if i > 0:\n            f[i] = (f[i-1] + a[i]) % MOD\n        for (l, r) in LR:\n            if i+l < N:\n                a[i+l] = (a[i+l] + f[i]) % MOD\n            if i+r+1 < N:\n                a[i+r+1] = (a[i+r+1] - f[i]) % MOD\n    # print(f)\n    print(f[N-1])\n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s589584325","submission":"n = int(input())\na = list(map(int,input().split()))\ny = list()\nfor i in range(n):\n    x = 0\n    while a[i] % 2 == 0:\n        a[i] \/= 2\n        x += 1\n    y.append(x)\nprint(min(y))","label":0}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s023241046","submission":"def solve():\n    v=list(map(int,input().split()))\n    a=v[0]\n    b=v[1]\n    c=v[2]\n    if c <= a + b:\n        return False\n    return 4 * a * b < (c - a - b)**2\n\nif solve():\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":0}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s595559035","submission":"# -*- coding: utf-8 -*-\n\n\n# \u5165\u529b\u3092\u6574\u6570\u306b\u5909\u63db\u3057\u3066\u53d7\u3051\u53d6\u308b\ndef input_int():\n    return int(input())\n\n\n# \u30de\u30a4\u30ca\u30b91\u3057\u305f\u5024\u3092\u8fd4\u5374\ndef int1(x):\n    return int(x) - 1\n\n\n# \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u5165\u529b\u3092Int\u306b\u5909\u63db\u3057\u3066Map\u3067\u53d7\u3051\u53d6\u308b\ndef input_to_int_map():\n    return map(int, input().split())\n\n\n# \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u5165\u529b\u3092Int\u306b\u5909\u63db\u3057\u3066\u53d7\u3051\u53d6\u308b\ndef input_to_int_tuple():\n    return tuple(map(int, input().split()))\n\n\n# \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u5165\u529b\u3092Int\u306b\u5909\u63db\u3057\u3066\u30de\u30a4\u30ca\u30b91\u3057\u305f\u5024\u3092\u53d7\u3051\u53d6\u308b\ndef input_to_int_tuple_minus1():\n    return tuple(map(int1, input().split()))\n\n\ndef main():\n    n, m = input_to_int_map()\n\n    ret = \"No\"\n    if n == m:\n        ret = \"Yes\"\n\n    return ret\n\n\nif __name__ == \"__main__\":\n    print(main())\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s058091134","submission":"N = int(input())\nA = list(map(int, input().split()))\n\ncnt = 0\nwhile True: \n    odd_flag = False\n    for i in range(N):\n        if A[i] % 2 == 1:\n            odd_flag = True\n    if odd_flag:\n        break\n    for i in range(N):\n        A[i] = A[i] \/\/ 2\n    cnt += 1\n\nprint(cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s764750335","submission":"n = int(input())\nl = list(map(int, input().split()))\nresult = 0\nloop = 0\nwhile True:\n    if all(x % 2 == 0 for x in l):\n        result += 1\n        for data in range(len(l)):\n            l[data] = l[data]\/\/2\n    else:\n        print(result)\n        exit()\n","label":0}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s327924158","submission":"def main():\n    x, y = list(map(int, input().split()))\n    ans = abs(y) - abs(x)\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        if x > y:\n            print(x - y + 2)\n        else:\n            print(y - x)\n    elif x < 0 and y >= 0:\n        print(min(y - x, abs(y - abs(x)) + 1))\n    elif x >= 0 and y < 0:\n        print(abs(x - abs(y)) + 1)\n    elif x == 0 and y > 0:\n        print(y - x)\n    else:\n        print(x + 1)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s147379692","submission":"import bisect\nimport copy\nimport heapq\nimport math\nimport sys\nfrom collections import *\nfrom itertools import accumulate, combinations, permutations, product\n# from math import gcd\ndef input():\n    return sys.stdin.readline()[:-1]\ndef ruiseki(lst):\n    return [0]+list(accumulate(lst))\nmod=pow(10,9)+7\nal=[chr(ord('a') + i) for i in range(26)]\ndirection=[[1,0],[0,1],[-1,0],[0,-1]]\n\ns=input()\ndp=[[0]*(len(s)+1) for i in range(4)]\ndp[0][0]=1\nlst=\"ABC\"\nfor i in range(len(s)):\n    for j in range(3):\n        m1=1\n        m2=0\n        if s[i]==\"?\":\n            m1=3\n            m2=1\n        \n        if lst[j]==s[i]:\n            m2=1\n        \n        dp[j][i+1]+=m1*dp[j][i]\n        dp[j+1][i+1]+=m2*dp[j][i]\n        dp[j][i+1]%=mod\n        \n    if s[i]==\"?\":\n        dp[3][i+1]+=3*dp[3][i]\n    else:\n        dp[3][i+1]+=dp[3][i]\n    dp[3][i+1]%=mod\n\nprint(dp[-1][-1]%mod)\n# print(dp)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s055627526","submission":"import sys\nn = int(input())\na = list(map(int, input().split()))\nb = 0\nwhile True:\n    c = 0\n    for i in a:\n        a[c]=i\/\/2\n        c+=1\n        if i%2 != 0:\n            print(b\/\/n)\n            sys.exit(0)\n        b+=1\n","label":0}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s047297938","submission":"palavra= input()\ntam= len(palavra)\nif palavra[tam-1]=='s':\n    print(palavra+'es')\nelse:\n    print(palavra+'s')","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s656222684","submission":"import sys \nn = int(input())\nnum = [int(x) for x in input().split()]\nt = 0 \nwhile True: \n  for i in range(n):\n    if num[i]%2 == 0:\n      num[i] \/\/= 2 \n    else:\n      print(t)\n      sys.exit()\n  t += 1","label":0}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s222542740","submission":"import sys\nsys.setrecursionlimit(10**9)\n\ndef mi(): return map(int,input().split())\ndef ii(): return int(input())\ndef isp(): return input().split()\ndef deb(text): print(\"-------\\n{}\\n-------\".format(text))\n\nINF=10**20\ndef main():\n    A,B=mi()\n    if A <= 5:\n        print(0)\n    elif 6<=A<=12:\n        print(B\/\/2)\n    else:\n        print(B)\n\n\n\n\nif __name__ == \"__main__\":\n    main()","label":0}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s621006789","submission":"#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n#\n# Created: Jul, 14, 2020 12:42:18 by Nobody\n# $Author$\n# $Date$\n# $URL$\n__giturl__ = \"$URL$\"\n\n\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef main():\n  N = int(input())\n  B = list(map(int, input().split()))\n\n  A = [0]*(N)\n  A[0] = B[0]\n  A[1] = B[0]\n  for i in range(1, N-1):\n    if A[i] > B[i]:\n      A[i] = B[i]\n    A[i+1] = B[i]\n\n  # print(A)\n  print(sum(A))\n\n\nif(__name__ == '__main__'):\n  main()\n","label":0}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s368682140","submission":"import math\nimport collections\nN, D, A = map(int, input().split())\nXH = [tuple(map(int, input().split())) for i in range(N)]\nXH.sort()\nq = collections.deque()\nc = 0\nans = 0\nfor x, h in XH:\n    while(q):\n        if q[0][0] < x:\n            t = q.popleft()\n            c -= t[1]\n        else:\n            break\n    h -= c*A\n    k = math.ceil(max(h, 0) \/ A)\n    ans += k\n    c += k\n    if k > 0:\n        q.append((x+(2*D), k))\nprint(ans)\n","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s017054554","submission":"def main():\n    n,m=map(int,input().split())\n    s=list(map(int,input().split()))\n    t=list(map(int,input().split()))\n    dp=[[0]*(m+1) for _ in [0]*(n+1)]\n    for i in range(n+1):\n        dp[i][m]=1\n    for i in range(m+1):\n        dp[n][i]=1\n    for i in range(n-1,-1,-1):\n        for j in range(m-1,-1,-1):\n            dp[i][j]=(dp[i+1][j]+dp[i][j+1]-(s[i]!=t[j])*dp[i+1][j+1])%(10**9+7)\n    print(dp[0][0])\nmain()\n","label":0}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s163960227","submission":"x, y = map(int, input().split())\nif x >= 0 and y >= 0 and x <= y:\n  ans = y - x\nelif x >= 0 and y > 0 and x >= y:\n  ans = x -  y + 2\nelif x <= 0 and y <= 0 and x <= y:\n  ans = y - x\nelif x < 0 and y <= 0 and x >= y:\n  ans = x - y + 2\nelif x >= 0 and y <= 0:\n  ans = abs(x - abs(y)) + 1\nelif x <= 0 and y >= 0 and abs(x) <= y:\n  ans = y - abs(x) + 1\nelif x <= 0 and y >= 0 and abs(x) > y:\n  ans = abs(x) - y + 1\nprint(ans)","label":0}
{"problem_id":"p03732","problem":"You have N items and a bag of strength W.\nThe i-th item has a weight of w_i and a value of v_i.\nYou will select some of the items and put them in the bag.\nHere, the total weight of the selected items needs to be at most W.\nYour objective is to maximize the total value of the selected items.","submission_id":"s110679192","submission":"from operator import itemgetter\nn,w=map(int,input().split())\nwv=[tuple(map(int,input().split())) for i in range(n)]\nwv.sort(key=itemgetter(1),reverse=True)#reverse\nwv.sort(key=itemgetter(0))\n#print(wv)\nw0=wv[0][0]\nx=[[0],[0],[0],[0]]\nfor i in range(n):\n    z=wv[i][0]-w0\n    k=wv[i][1]+x[z][-1]\n    l=len(x[z])\n    if l*wv[i][0]<=w:\n        x[z].append(k)\nma=0\nl3=len(x[3])\nl2=len(x[2])\nl1=len(x[1])\nl0=len(x[0])\nfor i in range(l3):\n    for j in range(l2):\n        d=w-i*(w0+3)-j*(w0+2)\n        if d>=0:\n            for k in range(l1):\n                d=w-i*(w0+3)-j*(w0+2)-k*(w0+1)\n                if d>=0:\n                    ma_sub=x[3][i]+x[2][j]+x[1][k]+x[0][min(d\/\/w0,l0-1)]\n                    ma=max(ma,ma_sub)\n                else:\n                    break\n        else:\n            break\n\nprint(ma)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s399874099","submission":"n=int(input())\na=list(map(int,input().split()))\nb=[]\ncnt=0\nfor i in range(n):\n    if a[i]%2==1:\n        print('0')\n        exit()\n    else:\n        while a[i]%2==0:\n            cnt += 1\n            a[i] \/=  2\n        b.append(cnt)\n        cnt = 0\nprint(min(b))","label":0}
{"problem_id":"p03958","problem":"There are K pieces of cakes.\nMr. Takahashi would like to eat one cake per day, taking K days to eat them all.\nThere are T types of cake, and the number of the cakes of type i (1 \u2264 i \u2264 T) is a_i.  \nEating the same type of cake two days in a row would be no fun,\nso Mr. Takahashi would like to decide the order for eating cakes that minimizes the number of days on which he has to eat the same type of cake as the day before.  \nCompute the minimum number of days on which the same type of cake as the previous day will be eaten.","submission_id":"s045103547","submission":"K, T = map(int, input().split())\nnumbers = [int(x) for x in input().split()]\n\ntable = [False] * (K + 1)\n\ntable[0] = True\n\nfor n in numbers:\n  for i in range(K, 0, -1):\n    if i - n >= 0:\n      table[i] = table[i] or table[i - n]\n    \nm = 0\n\nfor i, t in enumerate(table):\n  if not t:\n    continue\n  m = i if abs(i - K \/ 2) < abs(m - K \/ 2) else m\n\nif abs(2 * m - K) <= 1:\n  print(0)\nelse:\n  print(abs(2 * m - K) - 1)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s119926237","submission":"N = int(input())\nA = list(map(int, input().split()))\nfor i in range(1 , 10 ** 20):\n  for j in range(N):\n    a = A[j] % (2 ** i)\n    if a != 0:\n      break\n  if a != 0:\n    break\nprint(i - 1)","label":0}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s035572683","submission":"number = int(input())\nwords = {}\nanswer = []\nmaxnum = 0\nfor i in range(number):\n    word = input()\n    if word in words:\n        words[word] += 1\n    else:\n        words[word] = 1\n    if maxnum < words[word]:\n        maxnum = words[word]\n        answer.clear()\n        answer.append(word)\n    elif maxnum == words[word]:\n        answer.append(word)\nanswer.sort()\nfor j in range(len(answer)):\n    print(answer[j])","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s605455276","submission":"n=int(input())\na=list(map(int,input().split()))\nans=[]\nfor i in a:\n    ct=0\n    big=10**5\n    while i%2==0:\n        i=i\/2\n        ct+=1\n    big=min(ct,big)\n    ans.append(big)\nb=sorted(ans)\nprint(b[0])","label":0}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s770208554","submission":"x, y, a, b, c = map(int,input().split())\np_p = list(map(int,input().split()))\nq_q = list(map(int,input().split()))\nr_r = list(map(int,input().split()))\np_p.sort(reverse=True)\nq_q.sort(reverse=True)\nr_r.sort(reverse=True)\n\noisisa = sum(p_p[:x])+sum(q_q[:y])\napple = p_p[:x] + q_q[:y]\napple.sort()\nseen = 0\nfor i in range(min(x+y,c)):\n    if r_r[i] > apple[seen]:\n        oisisa = oisisa + r_r[i] - apple[seen]\n        seen += 1\n    else:\n        break\n\n\nprint(oisisa)","label":0}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s557079264","submission":"def solve(n, x):\n    if x == 1:\n        if n == 0:\n            return 1\n        else:\n            return 0\n    elif 1 < x < layer[n] \/\/ 2 + 1:\n        return solve(n-1, x-1)\n    elif x == layer[n] \/\/ 2 + 1:\n        return patty[n-1] + 1\n    elif layer[n] \/\/ 2 + 1 < x < layer[n]:\n        return solve(n-1, x-layer[n-1]-2) + patty[n-1] + 1\n    else:\n        return patty[n]\n\n\nN, X = map(int, input().split())\n\nlayer, patty = [1], [1]\nfor _ in range(N):\n    layer.append(layer[-1] * 2 + 3)\n    patty.append(patty[-1] * 2 + 1)\n\nprint(solve(N, X))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s367206303","submission":"N = int(input())\nAs = list(map(int, input().split()))\n\nres = 0\nwhile True:\n\todd = list(filter(lambda x: x % 2 == 1, As))\n\tif odd:\n\t\tbreak\n\telse:\n\t\tAs = list(map(lambda x: x \/\/ 2, As))\n\t\tres += 1\nprint(res)\n","label":0}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s444387534","submission":"\ndef BinarySearchLowerBound(_arr, _ele): # arr is strictly increasing\n    low_ind = 0\n    up_ind = len(_arr) - 1\n    if _arr[low_ind] >= _ele:\n        return low_ind\n    if _arr[up_ind] <= _ele:\n        return up_ind + 1\n    found = None\n    while (up_ind - low_ind) > 1:\n        mid = (up_ind + low_ind) \/ 2\n        if _arr[mid] < _ele:\n            low_ind = mid\n        elif _arr[mid] > _ele:\n            up_ind = mid\n        elif _arr[mid] == _ele:\n            found = mid\n            break\n    if found is not None:\n        cnt = found\n    else:\n        cnt = up_ind\n    return cnt\n\ndef solve():\n    N, Q = [int(_) for _ in raw_input().split()]\n    STX = []\n    for i in range(N):\n        Si, Ti, Xi = [int(_) for _ in raw_input().split()]\n        STX.append((Si - Xi, Ti - Xi, Xi))\n    D = []\n    for i in range(Q):\n        D.append(int(raw_input()))\n    STX.sort(key = lambda x:x[2])\n    # D have already been sorted based on settings on problem\n    ans = [-1] * Q\n    l = [None] * Q\n    for i in range(N):\n        Li, Ri, Xi = STX[i]\n        if len(D) == 0:\n            break\n        lit = BinarySearchLowerBound(D, Li)\n        rit = BinarySearchLowerBound(D, Ri)\n        while lit < rit:\n            if l[lit] is not None:\n                lit = l[lit]\n            else:\n                ans[lit] = Xi\n                l[lit] = rit\n                lit += 1\n    for i in range(Q):\n        print ans[i]\n\nif __name__ == '__main__':\n    solve()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s532565077","submission":"def notExistOdd(lst):\n    for i in lst:\n        if i%2==1:\n            return False\n    return True\n\nn=int(input())\na=[int(i)for i in input().split()]\nres=0\ndiv=lambda x:x\/2\nwhile notExistOdd(a):\n    res+=1\n    a=list(map(div,a))\nprint(res)","label":0}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s412584001","submission":"import sys\nimport math\nimport itertools\nimport collections\nfrom collections import deque\n\nsys.setrecursionlimit(1000000)\nMOD = 10 ** 9 + 7\ninput = lambda: sys.stdin.readline().strip()\n\nNI = lambda: int(input())\nNMI = lambda: map(int, input().split())\nNLI = lambda: list(NMI())\nSI = lambda: input()\n\ndef main():\n\n    N, K = NMI()\n    A = NLI()\n    \n    cnt = 0\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i] > A[j]:\n                cnt += 1\n    \n    repeat = 0\n    ls = [0 for _ in range(len(A))]\n    for k in range(len(A)):\n        repeat += len([x for x in A if x < A[k]])\n\n    \n    print((cnt*K + repeat * (((K-1)*K)\/\/2))%MOD)\n\n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s491783685","submission":"n = int(input())\narr = list(map(int, input().split()))\n\ncnt_arr = []\n\nfor ele in arr:\n    cnt = 0\n    while ele % 2 == 0:\n        ele \/= 2\n        cnt += 1\n    cnt_arr.append(cnt)\nprint(min(cnt_arr))\n","label":0}
{"problem_id":"p02733","problem":"We have a chocolate bar partitioned into H horizontal rows and W vertical columns of squares.\nThe square (i, j) at the i-th row from the top and the j-th column from the left is dark if S_{i,j} is 0, and white if S_{i,j} is 1.\nWe will cut the bar some number of times to divide it into some number of blocks. In each cut, we cut the whole bar by a line running along some boundaries of squares from end to end of the bar.\nHow many times do we need to cut the bar so that every block after the cuts has K or less white squares?","submission_id":"s607133437","submission":"from itertools import combinations\n\nH, W, K = map(int, input().split())\nS = [input() for _ in range(H)]\n\nC = [[0] * (W + 1) for _ in range(H + 1)]\nfor h in range(H):\n    wc = 0\n    for w in range(W):\n        wc += (S[h][w] == '1')\n        C[h + 1][w + 1] = C[h][w + 1] + wc\n\nans = 2000\nfor cuth in range(H):\n    for comb in combinations([h for h in range(1, H)], cuth):\n        comb = [0] + list(comb) + [H]\n        wi, cutw = 0, 0\n        for w in range(W):\n            if max([C[comb[i]][w + 1] - C[comb[i]][wi] - C[comb[i - 1]][w + 1] + C[comb[i - 1]][wi] for i in range(1, len(comb))]) > K:\n                if wi == w:\n                    cutw = 2000\n                wi, cutw = w, cutw + 1\n        ans = min(ans, cuth + cutw)\n\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s362444471","submission":"N=int(input())\nA=[int(i) for i in input().split()]\nans=0\nwhile all(i%2==0 for i in A):\n    A=[i\/2 for i in A]\n    ans+=1\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s564516770","submission":"import copy\n \nkaisu = int(input())\n \ns_suji_list = input().split(' ')\nsuji_list = []\ncount = 1\ncontinue_flg = True\nfor suji in s_suji_list:\n  i_suji = int(suji)\n  if i_suji % 2 == 0:\n    suji_list.append(i_suji \/ 2)\n  else:\n    continue_flg = False\n    count = 0\n    break\n \nwhile(continue_flg):\n  temp_list = copy.copy(suji_list)\n  suji_list.clear()\n  count += 1\n  for suji in temp_list:\n    if suji % 2 == 0:\n      suji_list.append(suji \/ 2)\n    else:\n      count -= 1\n      continue_flg = False\n      break\n \nprint(count)","label":0}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s867354543","submission":"from collections import defaultdict,deque\nimport math\ndef main():\n    s = input()\n    lis = [\"maerd\", \"remaerd\", \"esare\", \"resare\"]\n    s = s[::-1]\n\n    i = 0\n    while(i < len(s)-4):\n        if(s[i:i+5] in lis):\n            i+=5\n        elif(i+7 <= len(s) and s[i:i+7]==\"remaerd\"):\n            i += 7\n        elif(i+6<=len(s) and s[i:i+6]==\"resare\"):\n            i+=6\n        else:\n            print(\"NO\")\n            exit()\n    print(\"YES\")\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s456689070","submission":"# 28\nN = int(input())\nAn = list(map(int, input().split(' ')))\n\nans = -1\nflag = 0\nwhile True:\n    ans += 1\n    for i in An:\n        if i % 2 != 0: \n            flag = 1\n            break\n        An[An.index(i)] \/= 2\n    if flag != 0: break\n\nprint(ans)","label":0}
