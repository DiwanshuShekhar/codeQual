{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s450694091","submission":"target = input()\nsum = 0\nfor each in target:\n  sum += int(each)\nif sum % 9 == 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":2}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s019655695","submission":"import sys\ninput=sys.stdin.readline\n\nN = int(input())\nL = list(map(int, input().split()))\n\nL.sort()\nans = 0\nfor i in range(0, 2*N, 2):\n    ans += min(L[i],L[i+1])\nprint(ans)\n","label":2}
{"problem_id":"p02233","problem":"Write a program which prints $n$-th fibonacci number for a given integer $n$. The $n$-th fibonacci number is defined by the following recursive formula:","submission_id":"s041099746","submission":"n = int(input())\nl = [0 for _ in range(10**4)]\ndef fib(n):\n    if n==0:\n      l[0]=1\n      return 1\n    if n==1:\n      l[1]=1\n      return 1\n    if l[n]!=0:\n      return l[n]\n    else:\n      l[n]=fib(n-1)+fib(n-2)\n      return fib(n-1)+fib(n-2)\n    \nprint(fib(n))\n","label":2}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s080825292","submission":"D, T, S = map(int, input().split())\n\nif (D \/ S) <= T:\n  print('Yes')\nelse:\n  print('No')","label":2}
{"problem_id":"p02258","problem":"You can obtain profits from foreign exchange margin transactions. For example,  if you buy 1000 dollar at a rate of 100 yen per dollar, and sell them at a rate of 108 yen per dollar, you can obtain (108 - 100) \u00d7 1000 = 8000 yen.","submission_id":"s797058703","submission":"s_max = -float('inf')\ns = 0\nfor i in range(int(input())):\n\tr = int(input())\n\tif i:\n\t\td = r - prev\n\t\ts = max(s, 0) + d\n\t\ts_max = max(s, s_max)\n\tprev = r\nprint(s_max)\n","label":2}
{"problem_id":"p03311","problem":"Snuke has an integer sequence A of length N.\nHe will freely choose an integer b.\nHere, he will get sad if A_i and b+i are far from each other.\nMore specifically, the sadness of Snuke is calculated as follows:\n\nabs(A_1 - (b+1)) + abs(A_2 - (b+2)) + ... + abs(A_N - (b+N))\n\nHere, abs(x) is a function that returns the absolute value of x.\nFind the minimum possible sadness of Snuke.","submission_id":"s187991060","submission":"#!\/usr\/bin\/env python\n# coding: utf-8\n\n# In[32]:\n\n\nimport numpy as np\n\n\n# In[22]:\n\n\nN = int(input())\nA = list(map(int, input().split()))\n\n\n# In[41]:\n\n\na = np.array(A)\nb = a - np.arange(1,N+1)\nc = np.median(b)\nd = abs(b-c).sum()\nprint(int(d))\n\n\n# In[ ]:\n\n\n\n\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s031714649","submission":"a=str(input())\nif a[-1]==\"s\":\n    print(a+\"es\")\nelse:\n    print(a+\"s\")","label":2}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s121608679","submission":"k = int(input())\nfrom collections import deque\n\nd = deque()\nc = 0\nfor i in range(1, 10):\n  d.append(i)\n\nwhile True:\n  tmp = d.popleft()\n  c += 1\n  if c == k:\n    ans = tmp\n    break\n  if tmp % 10 != 0:\n    d.append(tmp * 10 + (tmp % 10 - 1))\n  d.append(tmp * 10 + tmp % 10)\n  if tmp % 10 != 9:\n    d.append(tmp * 10 + (tmp % 10 + 1))\nprint(ans)\n","label":2}
{"problem_id":"p03556","problem":"Find the largest square number not exceeding N. Here, a square number is an integer that can be represented as the square of an integer.","submission_id":"s462756600","submission":"n=int(input())\n\nans=1\nloop = 3\nfor i in range (1,100000):\n        if i**2 <= n:\n                ans=i**2\n        \n        \n\nprint(ans)","label":2}
{"problem_id":"p03260","problem":"You are given integers A and B, each between 1 and 3 (inclusive).\nDetermine if there is an integer C between 1 and 3 (inclusive) such that A \\times B \\times C is an odd number.","submission_id":"s542244627","submission":"A,B=map(int,input().split())\nif A*B%2==1:print('Yes')\nelse:print('No')","label":2}
{"problem_id":"p02642","problem":"Given is a number sequence A of length N.\nFind the number of integers i \\left(1 \\leq i \\leq N\\right) with the following property:\n\nFor every integer j \\left(1 \\leq j \\leq N\\right) such that i \\neq j , A_j does not divide A_i.","submission_id":"s643244699","submission":"n = int(input())\na = list(map(int, input().split()))\na.sort()\ndata = [0 for _ in range(1000001)]\nfor x in a:\n    data[x] += 1\n\nans = 0\nfor i in range(1,1000001):\n    if not data[i]:continue\n    if data[i] == 1:ans += 1\n    j = i\n    while j < 1000001:\n        data[j] = 0\n        j += i\n\nprint(ans)","label":2}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s092051187","submission":"from math import ceil,floor,comb,factorial,gcd,pow,sqrt,log2,cos,sin,tan,pi,inf\nfrom itertools import accumulate,permutations,combinations,product,combinations_with_replacement\nfrom collections import deque,defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom operator import itemgetter\nfrom heapq import heappop,heappush\nfrom copy import deepcopy\nfrom time import time\nimport string\nimport sys\nsys.setrecursionlimit(10 ** 7)\ndef input() : return sys.stdin.readline().strip()\ndef INT()   : return int(input())\ndef MAP()   : return map(int,input().split())\ndef LIST()  : return list(MAP())\n\ns = input()\nw = s.count('W')\n\npos = 0\nans = 0\nfor i in range(len(s)):\n    if s[i] == 'W':\n        ans += i - pos\n        pos += 1\nprint(ans)","label":2}
{"problem_id":"p03328","problem":"In some village, there are 999 towers that are 1,(1+2),(1+2+3),...,(1+2+3+...+999) meters high from west to east, at intervals of 1 meter.\nIt had been snowing for a while before it finally stopped. For some two adjacent towers located 1 meter apart, we measured the lengths of the parts of those towers that are not covered with snow, and the results are a meters for the west tower, and b meters for the east tower.\nAssuming that the depth of snow cover and the altitude are the same everywhere in the village, find the amount of the snow cover.\nAssume also that the depth of the snow cover is always at least 1 meter.","submission_id":"s998474257","submission":"a,b = (int(T) for T in input().split())\nLeft = 0\nRight = 1\nfor Leng in range(1,1000):\n    Left += Leng\n    Right += Leng+1\n    if (Right-Left)==(b-a):\n        print(Left-a)\n        break","label":2}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s216102031","submission":"s = input()\nodd = s[::2]\neven = s[1::2]\nif 'L'  in odd or 'R'  in even:\n    print('No')\nelse:\n    print('Yes')","label":2}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s700772583","submission":"n,x,t=map(int,input().split())\n\ni=int(n\/x)\nj=int(n%x)\n\nif j==0:\n  print(t*i)\nelse:\n  print(t*i + t)","label":2}
{"problem_id":"p03786","problem":"Snuke found N strange creatures.\nEach creature has a fixed color and size. The color and size of the i-th creature are represented by i and A_i, respectively.\nEvery creature can absorb another creature whose size is at most twice the size of itself.\nWhen a creature of size A and color B absorbs another creature of size C and color D (C \\leq 2 \\times A), they will merge into one creature of size A+C and color B.\nHere, depending on the sizes of two creatures, it is possible that both of them can absorb the other.\nSnuke has been watching these creatures merge over and over and ultimately become one creature.\nFind the number of the possible colors of this creature.","submission_id":"s909572207","submission":"N=int(input())\nA=list(map(int,input().split()))\nA=sorted(A)\nnums=[]\nnum=0\nans=1\nfor a in A:\n    num+=a\n    nums.append(num)\nfor n in range(N-2,-1,-1):\n    if nums[n]*2>=A[n+1]:\n        ans+=1\n    else:\n        break\nprint(ans)\n","label":2}
{"problem_id":"p02779","problem":"Given is a sequence of integers A_1, A_2, ..., A_N.\nIf its elements are pairwise distinct, print YES; otherwise, print NO.","submission_id":"s915038241","submission":"\ndef solve():\n    if len(A) != len(set(A)):\n        print(\"NO\")\n    else:\n        print(\"YES\")\n\n\nif __name__ == \"__main__\":\n    N = int(input())\n    A = list(map(int, input().split()))\n    solve()  \n","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s789426323","submission":"n = int(input())\n\nans = 0\nfor div in range(1, int(n ** 0.5) + 1):\n    if (n - div) % div == 0 and div < (n - div) \/\/ div:\n        ans += (n - div) \/\/ div\n\nprint(ans)\n","label":2}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s691256224","submission":"n,m = map(int,input().split())\nif n > 1:\n    an = n*(n-1)\/2\nelse:\n    an = 0\nif m>1:\n    am = m*(m-1)\/2\nelse:\n    am = 0\nprint(int(an+am))","label":2}
{"problem_id":"p02639","problem":"We have five variables x_1, x_2, x_3, x_4, and x_5.\nThe variable x_i was initially assigned a value of i.\nSnuke chose one of these variables and assigned it 0.\nYou are given the values of the five variables after this assignment.\nFind out which variable Snuke assigned 0.","submission_id":"s259610584","submission":"nList = list(map(int, input().split()))\n\nprint(nList.index(0) + 1)\n","label":2}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s713598335","submission":"n,x = map(int,input().split())\nxi = list(map(int,input().split()))\n\nxi.sort()\ndiff = []\nfor i in range(n):\n    diff.append(abs(xi[i]-x))\n\nimport numpy\nprint(numpy.gcd.reduce(diff))\n","label":2}
{"problem_id":"p02823","problem":"2N players are running a competitive table tennis training on N tables numbered from 1 to N.\nThe training consists of rounds.\nIn each round, the players form N pairs, one pair per table.\nIn each pair, competitors play a match against each other.\nAs a result, one of them wins and the other one loses.\nThe winner of the match on table X plays on table X-1 in the next round,\nexcept for the winner of the match on table 1 who stays at table 1.\nSimilarly, the loser of the match on table X plays on table X+1 in the next round,\nexcept for the loser of the match on table N who stays at table N.\nTwo friends are playing their first round matches on distinct tables A and B.\nLet's assume that the friends are strong enough to win or lose any match at will.\nWhat is the smallest number of rounds after which the friends can get to play a match against each other?","submission_id":"s704959715","submission":"N, A, B = map(int, input().split())\n\nif (B - A)%2 == 0:\n  print((B - A) \/\/ 2)\n\nelse:\n  if A - 1 > N - B:\n    tmp = N - B\n    B = N\n    A = A + tmp + 1\n    print((B - A) \/\/ 2 + tmp + 1)\n\n  else:\n    tmp = A - 1\n    A = 1\n    B = B - tmp - 1\n    print((B - A) \/\/ 2 + tmp + 1)","label":2}
{"problem_id":"p03148","problem":"There are N pieces of sushi. Each piece has two parameters: \"kind of topping\" t_i and \"deliciousness\" d_i.\nYou are choosing K among these N pieces to eat.\nYour \"satisfaction\" here will be calculated as follows:\n\nThe satisfaction is the sum of the \"base total deliciousness\" and the \"variety bonus\".\nThe base total deliciousness is the sum of the deliciousness of the pieces you eat.\nThe variety bonus is x*x, where x is the number of different kinds of toppings of the pieces you eat.\n\nYou want to have as much satisfaction as possible.\nFind this maximum satisfaction.","submission_id":"s772529608","submission":"n, k = map(int, input().split())\ntd = sorted([list(map(int, input().split())) for i in range(n)], reverse=True, key=lambda x: x[1])\n\ntype = set()\nL = []\nSum = 0\nfor x in td[:k]:\n    Sum += x[1]\n    if x[0] not in type:\n        type.add(x[0])\n    else:\n        L.append(x[1])\n\nL = L[::-1]\ntype_cnt = len(type)\nans = Sum + type_cnt ** 2\nfor x in td[k:]:\n    if len(L)==0:break\n    if x[0] not in type:\n        type.add(x[0])\n        type_cnt += 1\n        Sum = Sum - L.pop(0) + x[1]\n        ans = max(ans, Sum + type_cnt ** 2)\nprint(ans)\n","label":2}
{"problem_id":"p02676","problem":"We have a string S consisting of lowercase English letters.\nIf the length of S is at most K, print S without change.\nIf the length of S exceeds K, extract the first K characters in S, append ... to the end of them, and print the result.","submission_id":"s045320153","submission":"k = int(input())\ns = input()\nlists = list(s)\nnews = list()\nif len(lists) <= k:\n    print(s)\nelse:\n    for i in range(k):\n        news.append(lists[i])\n    result = \"\".join(news)\n    print(result + \"...\")","label":2}
{"problem_id":"p03777","problem":"Two deer, AtCoDeer and TopCoDeer, are playing a game called Honest or Dishonest.\nIn this game, an honest player always tells the truth, and an dishonest player always tell lies.\nYou are given two characters a and b as the input. Each of them is either H or D, and carries the following information:\nIf a=H, AtCoDeer is honest; if a=D, AtCoDeer is dishonest.\nIf b=H, AtCoDeer is saying that TopCoDeer is honest; if b=D, AtCoDeer is saying that TopCoDeer is dishonest.\nGiven this information, determine whether TopCoDeer is honest.","submission_id":"s119202638","submission":"a,b = raw_input().split()\nif a == 'H':\n\tprint b\nelse:\n\th = {'H':'D', 'D':'H'}\n\tprint h[b]","label":2}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s372799906","submission":"N,M=map(int,input().split())\nif N==M:\n    print(\"Yes\")\nelse:print(\"No\")","label":2}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s756012118","submission":"N = input()\nans = \"No\"\n\nif N[0] == '7' or N[1] == '7' or N[2] == '7':\n  ans = \"Yes\"\n\nprint(ans)\n","label":2}
{"problem_id":"p03588","problem":"A group of people played a game. All players had distinct scores, which are positive integers.\nTakahashi knows N facts on the players' scores. The i-th fact is as follows: the A_i-th highest score among the players is B_i.\nFind the maximum possible number of players in the game.","submission_id":"s934503551","submission":"#B - Different Distribution\nN = int(input())\nA = [list(map(int, input().split())) for i in range(N)]\nA.sort(key=lambda x: x[1])\n\nprint((A[0][0])+A[0][1])","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s239401514","submission":"s = input()\n\nans = s + 'es' if s[-1]=='s' else s + 's'\n\nprint(ans)","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s784130331","submission":"S = input()\nprint('2018' + S[4:])","label":2}
{"problem_id":"p03053","problem":"You are given a grid of squares with H horizontal rows and W vertical columns, where each square is painted white or black.\nHW characters from A_{11} to A_{HW} represent the colors of the squares.\nA_{ij} is # if the square at the i-th row from the top and the j-th column from the left is black, and A_{ij} is . if that square is white.\nWe will repeatedly perform the following operation until all the squares are black:\n\nEvery white square that shares a side with a black square, becomes black.\n\nFind the number of operations that will be performed.\nThe initial grid has at least one black square.","submission_id":"s371308796","submission":"import sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\n\ndef solve(H, W, A):\n    WALL = - 10 ** 7\n    dist = [[WALL] + [-1] * W + [WALL] for _ in range(H + 2)]\n    dist[0] = dist[-1] = [WALL] * (W + 2)\n\n    queue = deque()\n    for h in range(H):\n        for w in range(W):\n            if A[h][w] == \"#\":\n                dist[h + 1][w + 1] = 0\n                queue.append((h + 1, w + 1))\n\n    while queue:\n        h, w = queue.popleft()\n        d = dist[h][w]\n        for i, j in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n            y, x = h + i, w + j\n            if dist[y][x] == -1:\n                dist[y][x] = d + 1\n                queue.append((y, x))\n\n    res = max(map(max, dist))\n    return res\n\n\ndef main():\n    H, W = map(int, input().split())\n    A = [None] * H\n    for i in range(H):\n        A[i] = list(input().rstrip())\n\n    ans = solve(H, W, A)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s049615114","submission":"S = input()\nif(S[len(S)-1] == 's'):print(S + 'es')\nelse :print(S + 's')","label":2}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s826313733","submission":"#\n# agc010 a\n#\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"3\n1 2 3\"\"\"\n        output = \"\"\"YES\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"5\n1 2 3 4 5\"\"\"\n        output = \"\"\"NO\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    e = 0\n    o = 0\n    for a in A:\n        if a % 2 == 0:\n            e += 1\n        else:\n            o += 1\n\n    if o % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n","label":2}
{"problem_id":"p03346","problem":"You are given a sequence (P_1,P_2,...,P_N) which is a permutation of the integers from 1 through N.\nYou would like to sort this sequence in ascending order by repeating the following operation:\n\nChoose an element in the sequence and move it to the beginning or the end of the sequence.\n\nFind the minimum number of operations required.\nIt can be proved that it is actually possible to sort the sequence using this operation.","submission_id":"s020137451","submission":"N,*P=map(int,open(0))\nids=[0]*N\nfor i in range(N):\n\tids[P[i]-1]=i\ntmp=inc=1\nfor i in range(N-1):\n\tif ids[i]<ids[i+1]:\n\t\ttmp+=1\n\t\tinc=max(tmp,inc)\n\telse:\n\t\ttmp=1\nprint(N-inc)","label":2}
{"problem_id":"p02772","problem":"You are an immigration officer in the Kingdom of AtCoder. The document carried by an immigrant has some number of integers written on it, and you need to check whether they meet certain criteria.\nAccording to the regulation, the immigrant should be allowed entry to the kingdom if and only if the following condition is satisfied:\n\nAll even numbers written on the document are divisible by 3 or 5.\n\nIf the immigrant should be allowed entry according to the regulation, output APPROVED; otherwise, print DENIED.","submission_id":"s919464161","submission":"# -*- coding: utf-8 -*-\nN = int(input())\nA = map(int, input().split())\n\nfor a in A:\n    if a % 2 == 0:\n        if a % 3 == 0 or a % 5 == 0:\n            continue\n        print(\"DENIED\")\n        exit()\nprint(\"APPROVED\")\n","label":2}
{"problem_id":"p03852","problem":"Given a lowercase English letter c, determine whether it is a vowel. Here, there are five vowels in the English alphabet: a, e, i, o and u.","submission_id":"s712183980","submission":"c=input()\nif c in \"aioue\":\n  print(\"vowel\")\nelse:\n  print(\"consonant\")\n","label":2}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s949390783","submission":"print(max([len(v) for v in input().split('S')]))\n","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s621665837","submission":"n = int(input())\nlis = list(map(int, input().split()))\n\nif lis.count(0) == n:\n    print('Yes')\nelif n % 3 != 0:\n    print('No')\nelif len(set(lis)) == 2:\n    if 0 in set(lis):\n        if lis.count(0) == n\/3:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\nelif len(set(lis)) == 3:\n    xor = 0\n    for  a in set(lis):\n        if lis.count(a) == n\/3:\n            xor ^= a\n        else:\n            print('No')\n            exit()\n    if xor == 0:\n        print('Yes')\n    else:\n        print('No')\nelse:\n    print('No')","label":2}
{"problem_id":"p03192","problem":"You are given an integer N that has exactly four digits in base ten.\nHow many times does 2 occur in the base-ten representation of N?","submission_id":"s139779800","submission":"input_num = str(input())\ncnt_2_in_str = lambda x: 1 if x == '2' else 0\nprint(sum(map(cnt_2_in_str,input_num)))\n","label":2}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s735986434","submission":"n = int(input())\nL = list(map(int, input().split()))\n\nL = sorted(L, reverse=True)\n\ncnt = 0\ni = 0\nwhile True:\n\tif i == 2*n:\n\t\tbreak\n\tcnt += min(L[i], L[i + 1])\n\ti += 2\n\nprint(cnt)","label":2}
{"problem_id":"p03693","problem":"AtCoDeer has three cards, one red, one green and one blue.\nAn integer between 1 and 9 (inclusive) is written on each card: r on the red card, g on the green card and b on the blue card.\nWe will arrange the cards in the order red, green and blue from left to right, and read them as a three-digit integer.\nIs this integer a multiple of 4?","submission_id":"s589044069","submission":"r,g,b = input().split(\" \")\nr = int(r)\ng = int(g)\nb = int(b)\ni = 100*r + 10*g + b\nx = i % 4\nif x==0:\n  print(\"YES\")\nelse:\n  print(\"NO\")","label":2}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s381073530","submission":"N = int(input())\nA = list(map(int,input().split()))\nprint(\"YES\" if sum(A)%2==0 else \"NO\")","label":2}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s116957914","submission":"import math\n\nn, s = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\nfor i in a:\n    ans = math.gcd(ans, abs(i - s))\nprint(ans)\n","label":2}
{"problem_id":"p02946","problem":"There are 2000001 stones placed on a number line. The coordinates of these stones are -1000000, -999999, -999998, \\ldots, 999999, 1000000.\nAmong them, some K consecutive stones are painted black, and the others are painted white.\nAdditionally, we know that the stone at coordinate X is painted black.\nPrint all coordinates that potentially contain a stone painted black, in ascending order.","submission_id":"s006263004","submission":"k, x = map(int, input().split())\nxMin = -1000000\nxMax =  1000000\n\nans = list(range(max(x-k+1, xMin), min(x+k, xMax+1)))\nfor a in ans:\n    print(a, end=' ')","label":2}
{"problem_id":"p02699","problem":"There are S sheep and W wolves.\nIf the number of wolves is greater than or equal to that of sheep, the wolves will attack the sheep.\nIf the wolves will attack the sheep, print unsafe; otherwise, print safe.","submission_id":"s022703109","submission":"s,w=map(int,input().split())\nprint(\"un\"*(w>=s)+\"safe\")","label":2}
{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s544037589","submission":"n=int(input())\na=int(input())\nn%=500\nprint('Yes' if n<=a else 'No')","label":2}
{"problem_id":"p03109","problem":"You are given a string S as input. This represents a valid date in the year 2019 in the yyyy\/mm\/dd format. (For example, April 30, 2019 is represented as 2019\/04\/30.)\nWrite a program that prints Heisei if the date represented by S is not later than April 30, 2019, and prints TBD otherwise.","submission_id":"s373991230","submission":"s = list(input())\ndel s[7]\ndel s[4]\nprint(\"Heisei\" if int(''.join(s)) <= 20190430 else \"TBD\")\n","label":2}
{"problem_id":"p02741","problem":"Print the K-th element of the following sequence of length 32:\n1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51","submission_id":"s284277697","submission":"k = int(input())\ns = '1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51'\n\narr = [int(x) for x in s.split(', ')]\nprint(arr[k - 1])\n","label":2}
{"problem_id":"p02852","problem":"Takahashi is playing a board game called Sugoroku.\nOn the board, there are N + 1 squares numbered 0 to N. Takahashi starts at Square 0, and he has to stop exactly at Square N to win the game.\nThe game uses a roulette with the M numbers from 1 to M. In each turn, Takahashi spins the roulette. If the number x comes up when he is at Square s, he moves to Square s+x. If this makes him go beyond Square N, he loses the game.\nAdditionally, some of the squares are Game Over Squares. He also loses the game if he stops at one of those squares. You are given a string S of length N + 1, representing which squares are Game Over Squares. For each i (0 \\leq i \\leq N), Square i is a Game Over Square if S[i] = 1 and not if S[i] = 0.\nFind the sequence of numbers coming up in the roulette in which Takahashi can win the game in the fewest number of turns possible. If there are multiple such sequences, find the lexicographically smallest such sequence. If Takahashi cannot win the game, print -1.","submission_id":"s064395665","submission":"import math\nfrom functools import reduce\nfrom collections import deque\nimport sys\nsys.setrecursionlimit(10**7)\n\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u5165\u529b\u3092\u8aad\u307f\u8fbc\u3093\u3067\u6570\u5024\u30ea\u30b9\u30c8\u306b\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\ndef get_nums_l():\n    return [ int(s) for s in input().split(\" \")]\n\n# \u6539\u884c\u533a\u5207\u308a\u306e\u5165\u529b\u3092n\u884c\u8aad\u307f\u8fbc\u3093\u3067\u6570\u5024\u30ea\u30b9\u30c8\u306b\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\ndef get_nums_n(n):\n    return [ int(input()) for _ in range(n)]\n\n# \u6539\u884c\u307e\u305f\u306f\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u5165\u529b\u3092\u3059\u3079\u3066\u8aad\u307f\u8fbc\u3093\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3057\u307e\u3059\u3002\ndef get_all_int():\n    return map(int, open(0).read().split())\n\ndef log(*args):\n    print(\"DEBUG:\", *args, file=sys.stderr)\n\nn,m = get_nums_l()\ns = input()\ns = s[::-1]\n\nnow = 0\nsteps = []\nwhile now < n:\n    for i in range(m,0,-1):\n        if now+i > n:\n            continue\n        if s[now+i] == \"0\":\n            now += i\n            steps.append(i)\n            break\n    else:\n        print(-1)\n        exit()\n\nprint(\" \".join(map(str, reversed(steps))))\n","label":2}
{"problem_id":"p02852","problem":"Takahashi is playing a board game called Sugoroku.\nOn the board, there are N + 1 squares numbered 0 to N. Takahashi starts at Square 0, and he has to stop exactly at Square N to win the game.\nThe game uses a roulette with the M numbers from 1 to M. In each turn, Takahashi spins the roulette. If the number x comes up when he is at Square s, he moves to Square s+x. If this makes him go beyond Square N, he loses the game.\nAdditionally, some of the squares are Game Over Squares. He also loses the game if he stops at one of those squares. You are given a string S of length N + 1, representing which squares are Game Over Squares. For each i (0 \\leq i \\leq N), Square i is a Game Over Square if S[i] = 1 and not if S[i] = 0.\nFind the sequence of numbers coming up in the roulette in which Takahashi can win the game in the fewest number of turns possible. If there are multiple such sequences, find the lexicographically smallest such sequence. If Takahashi cannot win the game, print -1.","submission_id":"s814314700","submission":"n,m = map(int,input().split())\ns = input()\ns = s[::-1]\nans = []\ncur = 0\nc = 0\n#while cur < n and c < 100:\nwhile cur < n:\n    d = n - cur\n    r = min(m,d)\n    cnt = 0\n    for i in range(r):\n        x = r - i\n        if s[cur + x] == '0':\n            ans.append(x)\n            cur += x\n            #print(x)\n            break\n        else:\n            cnt += 1\n    if cnt == r:\n        print(-1)\n        exit()\n    #c += 1\n    #print(cur,r)\n\n\nprint(*ans[::-1])","label":2}
{"problem_id":"p03705","problem":"Snuke has N integers. Among them, the smallest is A, and the largest is B.\nWe are interested in the sum of those N integers. How many different possible sums there are?","submission_id":"s376731831","submission":"import sys\n\ninput_methods=['clipboard','file','key']\nusing_method=0\ninput_method=input_methods[using_method]\n\ntin=lambda : map(int, input().split())\nlin=lambda : list(tin())\nmod=1000000007\n\n#+++++\n\ndef main():\n\t#a = int(input())\n\tn, a, b = tin()\n\t#s = input()\n\tif n == 1 and a != b:\n\t\treturn 0\n\t\t\n\tif n == 1:\n\t\treturn 1\n\t\t\n\tif a > b:\n\t\treturn 0\n\t\n\tmax_v = b * (n-1) + a\n\tmin_v = b + a *(n-1)\n\treturn max_v - min_v + 1\n\n\n\t\n\t\n\t\n#+++++\nisTest=False\n\ndef pa(v):\n\tif isTest:\n\t\tprint(v)\n\t\t\ndef input_clipboard():\n\timport clipboard\n\tinput_text=clipboard.get()\n\tinput_l=input_text.splitlines()\n\tfor l in input_l:\n\t\tyield l\n\nif __name__ == \"__main__\":\n\tif sys.platform =='ios':\n\t\tif input_method==input_methods[0]:\n\t\t\tic=input_clipboard()\n\t\t\tinput = lambda : ic.__next__()\n\t\telif input_method==input_methods[1]:\n\t\t\tsys.stdin=open('inputFile.txt')\n\t\telse:\n\t\t\tpass\n\t\tisTest=True\n\telse:\n\t\tpass\n\t\t#input = sys.stdin.readline\n\t\t\t\n\tret = main()\n\tif ret is not None:\n\t\tprint(ret)","label":2}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s906747619","submission":"import sys\nimport numpy as np\n# from numba import njit\n\n# @njit(cache=True)\ndef calcCycle(N,K,P,C,cycleIDs,cycleItemCnts,cycleTotalScores):\n\tcycleID = 0\n\n\tfor n in range(N):\n\n\t\tv = n\n\t\tcurrentCycleItemCnt = 0\n\t\tcurrentCycleTotal = 0\n\n\t\tif cycleIDs[v] != -1:\n\t\t\tcontinue\n\t\t\t# print(currentCycleItemCnt, currentCycleTotal)\n\t\telse:\n\t\t\twhile True:\n\t\t\t\t# \u5168\u9802\u70b9\u306b\u3064\u3044\u3066\u3001\u5c5e\u3059\u308b\u30b5\u30a4\u30af\u30eb\u3092\u8a08\u7b97\u3059\u308b\n\t\t\t\tcurrentCycleItemCnt += 1\n\t\t\t\tcurrentCycleTotal += C[v]\n\n\t\t\t\tv = P[v]\n\t\t\t\tif v == n:\n\t\t\t\t\t# \u30b5\u30a4\u30af\u30eb\u767a\u898b\n\t\t\t\t\tcycleIDs[v] = cycleID\n\t\t\t\t\tcycleItemCnts[cycleID] = currentCycleItemCnt\n\t\t\t\t\tcycleTotalScores[cycleID] = currentCycleTotal\n\t\t\t\t\tcycleID += 1\n\t\t\t\t\tbreak\n\n\t\t\t\t# \u4e00\u5fdc\u3001\u4e00\u5ea6\u30b5\u30a4\u30af\u30eb\u3092\u8a08\u7b97\u3057\u305f\u9802\u70b9\u306b\u3064\u3044\u3066\u306f\u3001\n\t\t\t\t# \u305d\u306e\u9802\u70b9\u306e\u5c5e\u3059\u308b\u30b5\u30a4\u30af\u30eb\u306e\u60c5\u5831\u3092\u30e1\u30e2\u3063\u3066\u304a\u304f\u3002\u3002\u3002\n\t\t\t\tcycleIDs[v] = cycleID\n\ndef upd(P,C,K,v,ans,currentCycleItemCnt,currentCycleTotal):\n\n\t# procCnt = 0\n\tcurrentCycleSumTmp = 0\n\n\tfor k in range(min(K,currentCycleItemCnt)):\n\n\t\t# \u9802\u70b9v\u306b\u30b3\u30de\u304c\u7f6e\u304b\u308c\u305f\u6642\u306e\u6700\u9ad8\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u3001\n\t\t# \u3053\u308c\u307e\u3067\u306e\u6700\u9ad8\u30b9\u30b3\u30a2\u3092\u4e0a\u56de\u3063\u305f\u3089\u3001\u3053\u308c\u307e\u3067\u306e\u6700\u9ad8\u30b9\u30b3\u30a2\u3092\u66f4\u65b0\u3059\u308b\n\n\t\tprocCnt = k+1\n\t\tcurrentCycleSumTmp += C[v]\n\n\t\tcycleLoopCnt = 0\n\t\tif 0 < currentCycleTotal:\n\t\t\tcycleLoopCnt = ( K - procCnt ) \/\/ currentCycleItemCnt\n\n\t\t# print(\"v=\", v, \"currentCycleSumTmp=\", currentCycleSumTmp, \"procCnt, cycleLoopCnt, currentCycleTotal=\", procCnt, cycleLoopCnt, currentCycleTotal)\n\t\tans = max( ans, currentCycleSumTmp + cycleLoopCnt * currentCycleTotal )\n\t\tv = P[v]\n\n\treturn ans\n\n\n\n\n\ndef main(ans,N,K,P,C,cycleIDs,cycleItemCnts,cycleTotalScores):\n\n\tfor n in range(N):\n\n\t\tv = n\n\t\tcurrentCycleItemCnt, currentCycleTotal = cycleItemCnts[ cycleIDs[v] ], cycleTotalScores[ cycleIDs[v] ]\n\n\t\t# ans=upd(P,C,K,v,ans,currentCycleItemCnt,currentCycleTotal)\n\t\tcurrentCycleSumTmp = 0\n\t\tfor k in range(min(K,currentCycleItemCnt)):\n\n\t\t\tprocCnt = k+1\n\t\t\tcurrentCycleSumTmp += C[v]\n\n\t\t\tcycleLoopCnt = 0\n\t\t\tif 0 < currentCycleTotal:\n\t\t\t\tcycleLoopCnt = ( K - procCnt ) \/\/ currentCycleItemCnt\n\n\t\t\t# print(\"v=\", v, \"currentCycleSumTmp=\", currentCycleSumTmp, \"procCnt, cycleLoopCnt, currentCycleTotal=\", procCnt, cycleLoopCnt, currentCycleTotal)\n\t\t\tans = max( ans, currentCycleSumTmp + cycleLoopCnt * currentCycleTotal )\n\t\t\tv = P[v]\n\n\n\tprint(int(ans))\n\nif sys.argv[-1]=='ONLINE_JUDGE':\n\t# from numba import njit\n\tfrom numba.pycc import CC\n\tcc=CC('my_module')\n\tcc.export('calcCycle','void(i8,i8,i8[:],i8[:],i8[:],i8[:],i8[:])')(calcCycle)\n\tcc.export('main','void(i8,i8,i8,i8[:],i8[:],i8[:],i8[:],i8[:])')(main)\n\t# cc.export('upd','i8(i8[:],i8[:],i8,i8,i8,i8,i8)')(upd)\n\t# cc.export('upd','UniTuple(i8,3)(i8[:],i8[:],i8,i8,i8,i8,i8)')(upd)\n\t# main=njit(main, cache=True)\n\tcc.compile()\n\texit(0)\n# from my_module import upd,calcCycle\nfrom my_module import main,calcCycle\n# from my_module import calcCycle\n\n\n\nif __name__ == \"__main__\":\n\tN,K = map(int,input().split())\n\tP = np.array( input().split(), np.int64 )\n\tP -= 1\n\tC = np.array( input().split(), np.int64 )\n\n\t# \u4e00\u5ea6\u8a08\u7b97\u3057\u305f\u30b5\u30a4\u30af\u30eb\u60c5\u5831\u3092\u4e00\u5fdc\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u3066\u304a\u304f\u3002\u3002\u3002\n\t# \u3042\u3093\u307e\u308a\u610f\u5473\u306a\u3055\u305d\u3046\n\tcycleIDs = np.full( N, -1, dtype=np.int64 )\n\tcycleItemCnts = np.full( N, -1, dtype=np.int64 )\n\tcycleTotalScores = np.full( N, -1, dtype=np.int64 )\n\n\tcalcCycle(N,K,P,C,cycleIDs,cycleItemCnts,cycleTotalScores)\n\n\t# print(cycleItemCnts)\n\n\tans = -1e18\n\tmain(ans,N,K,P,C,cycleIDs,cycleItemCnts,cycleTotalScores)\n\t#print(ans)\n\n\n","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s223875529","submission":"N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\npre = -1\ncont = 1\nfor a in A:\n    if a == pre:\n        cont += 1\n    else:\n        ans += cont \/\/ 2\n        cont = 1\n    pre = a\nif cont != 1:\n    ans += cont \/\/ 2\nprint(ans)","label":2}
{"problem_id":"p03695","problem":"In AtCoder, a person who has participated in a contest receives a color, which corresponds to the person's rating as follows:  \n\nRating 1-399 : gray\nRating 400-799 : brown\nRating 800-1199 : green\nRating 1200-1599 : cyan\nRating 1600-1999 : blue\nRating 2000-2399 : yellow\nRating 2400-2799 : orange\nRating 2800-3199 : red\n\nOther than the above, a person whose rating is 3200 or higher can freely pick his\/her color, which can be one of the eight colors above or not.\nCurrently, there are N users who have participated in a contest in AtCoder, and the i-th user has a rating of a_i.\nFind the minimum and maximum possible numbers of different colors of the users.","submission_id":"s129410549","submission":"li = [0]*9\n\nn = int(input())\na = list(map(int,input().split()))\n\nfor i in a:\n    if i\/\/400 > 7:\n        li[8] += 1\n    else:\n        li[i\/\/400] = 1\n\nprint(max(1,sum(li[:-1])),sum(li))","label":2}
{"problem_id":"p03556","problem":"Find the largest square number not exceeding N. Here, a square number is an integer that can be represented as the square of an integer.","submission_id":"s241976422","submission":"import math\nN = int(input())\n \na = math.sqrt(N)\na = int(a)\n \nprint(a*a)","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s576824008","submission":"n=int(input())\na=list(map(int,input().split()))\nl=[]\nt=0\n\nfor i in range(n-1):\n    if i==n-2:\n        if a[i+1]==a[i]:\n            t+=2\n            l.append(t)\n        else:\n            t+=1\n            l.append(t)\n            l.append(1)\n        continue      \n    if a[i+1]==a[i]:\n        t+=1\n    else:\n        t+=1\n        l.append(t)\n        t=0\n# print(l)\nans=0\nfor ll in l:\n    ans+=ll\/\/2\nprint(ans)","label":2}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s531787764","submission":"N, P = map(int, input().split())\nA = list(map(int, input().split()))\n\n# \u5947\u6570\u306e\u6570\u3092\u6570\u3048\u308b\nodd_cnt = 0\nfor a in A:\n    if a % 2 != 0:\n        odd_cnt += 1\n\n# \u5168\u3066\u306e\u304c\u5076\u6570\u306e\u6642\nif odd_cnt == 0:\n    if P == 0:\n        print(2**N)\n    else:\n        print(0)\n    exit(0)\n\nprint(2**(N-1))\n","label":2}
{"problem_id":"p03377","problem":"There are a total of A + B cats and dogs.\nAmong them, A are known to be cats, but the remaining B are not known to be either cats or dogs.\nDetermine if it is possible that there are exactly X cats among these A + B animals.","submission_id":"s000118868","submission":"def li():\n    return list(map(int, input().split()))\n\n\ndef mi():\n    return map(int, input().split())\n\n\ndef ii():\n    return int(input())\n\n\nA, B, X = mi()\n\nif X < A:\n    print(\"NO\")\nelif X - A <= B:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","label":2}
{"problem_id":"p02403","problem":"Draw a rectangle which has a height of H cm and a width of W cm. Draw a 1-cm square by single '#'.","submission_id":"s857080787","submission":"import sys\n\nwhile True:\n\th, w = [ int( val ) for val in sys.stdin.readline().split( \" \" ) ]\n\tif 0 ==h and 0 == w:\n\t\tbreak\n\tprint( \"{:s}\\n\".format( \"#\"*w )*h  )","label":2}
{"problem_id":"p04029","problem":"There are N children in AtCoder Kindergarten. Mr. Evi will arrange the children in a line, then give 1 candy to the first child in the line, 2 candies to the second child, ..., N candies to the N-th child. How many candies will be necessary in total?","submission_id":"s745253696","submission":"n=int(input())\nans=0\nfor i in range(n):\n  ans+=n-i\nprint(ans)","label":2}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s864844478","submission":"k = int(input())\n\nal = []\ndef f(d, v, al):\n    \n    al.append(v)\n    \n    if d == 10:\n        return\n    \n    for i in range(-1,2):\n        add = (v%10) + i\n        if add >= 0 and add <= 9:\n            f(d+1, v*10+add, al)\n            \n            \nfor i in range(1,10):\n    f(0, i, al)\n    \nal = sorted(al)\n\nprint(al[k-1])","label":2}
{"problem_id":"p03803","problem":"Alice and Bob are playing One Card Poker.\nOne Card Poker is a two-player game using playing cards.  \nEach card in this game shows an integer between 1 and 13, inclusive.\nThe strength of a card is determined by the number written on it, as follows:  \nWeak 2 < 3 < 4 < 5 < 6 < 7 < 8 < 9 < 10 < 11 < 12 < 13 < 1 Strong  \nOne Card Poker is played as follows:  \n\nEach player picks one card from the deck. The chosen card becomes the player's hand.\nThe players reveal their hands to each other. The player with the stronger card wins the game.\nIf their cards are equally strong, the game is drawn.  \n\nYou are watching Alice and Bob playing the game, and can see their hands.\nThe number written on Alice's card is A, and the number written on Bob's card is B.\nWrite a program to determine the outcome of the game.","submission_id":"s981787719","submission":"A,B=map(int,input().split())\n\ndef judge(a,b):\n  if a > b > 1 or (a == 1 and b != 1):\n    return \"Alice\"\n  elif a == b:\n    return \"Draw\"\n  else:\n    return \"Bob\"\n  \nprint(judge(A,B))\n","label":2}
{"problem_id":"p02553","problem":"Given are integers a,b,c and d.\nIf x and y are integers and a \\leq x \\leq b and c\\leq y \\leq d hold, what is the maximum possible value of x \\times y?","submission_id":"s200086292","submission":"a, b, c, d = map(int, input().split())\n\nac = a * c\nad = a * d\nbc = b * c\nbd = b * d\n\nmax_a = max(ac, ad)\nmax_b = max(bc, bd)\n\nprint(max(max_a, max_b))\n","label":2}
{"problem_id":"p02973","problem":"You are given a sequence with N integers: A = \\{ A_1, A_2, \\cdots, A_N \\}.\nFor each of these N integers, we will choose a color and paint the integer with that color. Here the following condition must be satisfied:\n\nIf A_i and A_j (i < j) are painted with the same color, A_i < A_j.\n\nFind the minimum number of colors required to satisfy the condition.","submission_id":"s882453040","submission":"#134_E\nimport bisect\nn=int(input())\na=[int(input()) for _ in range(n)][::-1]\n\nLIS = [a[0]]\nfor i in range(1, n):\n    if a[i] >= LIS[-1]:\n        LIS.append(a[i])\n    else:\n        LIS[bisect.bisect_right(LIS, a[i])] = a[i]\n\nprint(len(LIS))","label":2}
{"problem_id":"p02631","problem":"There are N Snuke Cats numbered 1, 2, \\ldots, N, where N is even.\nEach Snuke Cat wears a red scarf, on which his favorite non-negative integer is written.\nRecently, they learned the operation called xor (exclusive OR).\n\nWhat is xor?\n\nFor n non-negative integers x_1, x_2, \\ldots, x_n, their xor, x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is defined as follows:\n\n When x_1~\\textrm{xor}~x_2~\\textrm{xor}~\\ldots~\\textrm{xor}~x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even. \n\nFor example, 3~\\textrm{xor}~5 = 6.\n\n\nThey wanted to use this operation quickly, so each of them calculated the xor of the integers written on their scarfs except his scarf.\nWe know that the xor calculated by Snuke Cat i, that is, the xor of the integers written on the scarfs except the scarf of Snuke Cat i is a_i.\nUsing this information, restore the integer written on the scarf of each Snuke Cat.","submission_id":"s541470965","submission":"N=int(input())\na=list(map(int,input().split()))\nt=0\nfor i in a[1:]:\n    t^=i\nprint(t,end=\" \")\nfor i in range(N-1):\n    t^=a[i]\n    t^=a[i+1]\n    print(t,end=\" \")","label":2}
{"problem_id":"p03263","problem":"There is a grid of square cells with H horizontal rows and W vertical columns. The cell at the i-th row and the j-th column will be denoted as Cell (i, j).\nIn Cell (i, j), a_{ij} coins are placed.\nYou can perform the following operation any number of times:\nOperation: Choose a cell that was not chosen before and contains one or more coins, then move one of those coins to a vertically or horizontally adjacent cell.\nMaximize the number of cells containing an even number of coins.","submission_id":"s711063595","submission":"import sys\ninput = sys.stdin.readline  # NOQA\n\nimport numpy as np\n\n\ndef update_h_w(h, w, H, W):\n    # -->\n    if h % 2 == 0:\n        if w == W - 1:\n            h += 1\n        else:\n            w += 1\n    # <--\n    else:\n        if w == 0:\n            h += 1\n        else:\n            w -= 1\n    return h, w\n\n\ndef main():\n    H, W = map(int, input().split())\n    a = np.zeros((H, W), dtype=int)\n    for i in range(H):\n        a[i] = list(map(int, input().split()))\n\n    N = 0\n    ans = []\n    tmp = []\n    h, w = 0, 0\n    search_pair = False\n    while h < H:\n        if search_pair:\n            tmp.append((h + 1, w + 1))\n            if a[h, w] % 2 == 1:\n                search_pair = False\n                ans.append(tmp)\n                N += len(tmp) - 1\n                tmp = []\n        else:\n            if a[h, w] % 2 == 1:\n                search_pair = True\n                tmp.append((h + 1, w + 1))\n        h, w = update_h_w(h, w, H, W)\n\n    print(N)\n    for p in ans:\n        for i in range(len(p) - 1):\n            print(\" \".join(map(str, (p[i][0], p[i][1], p[i+1][0], p[i+1][1]))))\n\n\nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s821985681","submission":"\ndef resolve():\n    n, m = map(int, input().split())\n    print('Yes' if n == m else 'No')\n\nif __name__ == \"__main__\":\n    resolve()\n","label":2}
{"problem_id":"p03074","problem":"N people are arranged in a row from left to right.\nYou are given a string S of length N consisting of 0 and 1, and a positive integer K.\nThe i-th person from the left is standing on feet if the i-th character of S is 0, and standing on hands if that character is 1.\nYou will give the following direction at most K times (possibly zero):\nDirection: Choose integers l and r satisfying 1 \\leq l \\leq r \\leq N, and flip the l-th, (l+1)-th, ..., and r-th persons. That is, for each i = l, l+1, ..., r, the i-th person from the left now stands on hands if he\/she was standing on feet, and stands on feet if he\/she was standing on hands.\nFind the maximum possible number of consecutive people standing on hands after at most K directions.","submission_id":"s197776681","submission":"n, k = map(int, input().split())\ns = input()\nl=list()\ns = s.replace(\"10\",\"1,0\")\ns = s.replace(\"01\",\"0,1\")\n\nl = [len(i) for i in s.split(\",\")]\nr = 0\nans = 0\n\nif s[0] == \"1\":\n    r = min(k, len(l) - 1)\nelse:\n    r = min(k-1, len(l) - 1)\n\nt = l[r]\n\nfor j in range(1, k+1):\n    #print(r,j,t,l[r-j],l[r+j])\n    if r-j >= 0:\n        #print(\"r-j >= 0:\")\n        t += l[r-j]\n    if r+j < len(l):\n        #print(\"r+j < len(l):\")\n        t += l[r+j]\nans = t\nfor i in range(r+2, len(l) ,2):\n    for j in range(1, 3):\n        if i-j-k >= 0:\n            #print(\"l[i-j-k]\", i-j-k, l[i-j-k])\n            t -= l[i-j-k]\n        if i+j+k-2 < len(l):\n            #print(\"l[i+k+j]\", i+j+k-2, l[i+j+k-2])\n            t += l[i+j+k-2]\n    ans = max(ans, t)\nprint(ans)","label":2}
{"problem_id":"p02817","problem":"Given are two strings S and T consisting of lowercase English letters. Concatenate T and S in this order, without space in between, and print the resulting string.","submission_id":"s121273903","submission":"x=list(input().split())\nprint(x[1]+x[0])\n","label":2}
{"problem_id":"p03296","problem":"Takahashi lives in another world. There are slimes (creatures) of 10000 colors in this world. Let us call these colors Color 1, 2, ..., 10000.\nTakahashi has N slimes, and they are standing in a row from left to right. The color of the i-th slime from the left is a_i.\nIf two slimes of the same color are adjacent, they will start to combine themselves. Because Takahashi likes smaller slimes, he has decided to change the colors of some of the slimes with his magic.\nTakahashi can change the color of one slime to any of the 10000 colors by one spell.\nHow many spells are required so that no slimes will start to combine themselves?","submission_id":"s483390369","submission":"n = int(input())\na = list(map(int, input().split()))\nans, pre = 0, 0\nfor i in a:\n    if pre == i:\n        ans += 1\n        pre = 0\n    else:\n        pre = i\nprint(ans)\n","label":2}
{"problem_id":"p02814","problem":"Given are a sequence A= {a_1,a_2,......a_N} of N positive even numbers, and an integer M.\nLet a semi-common multiple of A be a positive integer X that satisfies the following condition for every k (1 \\leq k \\leq N):\n\nThere exists a non-negative integer p such that X= a_k \\times (p+0.5).\n\nFind the number of semi-common multiples of A among the integers between 1 and M (inclusive).","submission_id":"s478729013","submission":"import math\nimport sys\nfrom functools import reduce\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))\n\nfor i in range(N):\n  A[i] = A[i] \/\/ 2\n  \ndef lcm_base(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\n  \ndef lcm_list(numbers):\n    return reduce(lcm_base, numbers, 1)\n\nC = lcm_list(A)\nB = [0 for _ in range(N)]\n\nfor i in range(N):\n  B[i] = C \/\/ A[i]\n  if B[i] % 2 == 0:\n    print(0)\n    sys.exit()\n\nprint( (M \/\/ C + 1) \/\/ 2)","label":2}
{"problem_id":"p03340","problem":"There is an integer sequence A of length N.\nFind the number of the pairs of integers l and r (1 \\leq l \\leq r \\leq N) that satisfy the following condition:\n\nA_l\\ xor\\ A_{l+1}\\ xor\\ ...\\ xor\\ A_r = A_l\\ +\\ A_{l+1}\\ +\\ ...\\ +\\ A_r\n\nHere, xor denotes the bitwise exclusive OR.\n\nDefinition of XOR\nThe XOR of integers c_1, c_2, ..., c_m is defined as follows:\n\nLet the XOR be X. In the binary representation of X, the digit in the 2^k's place (0 \\leq k; k is an integer) is 1 if there are an odd number of integers among c_1, c_2, ...c_m whose binary representation has 1 in the 2^k's place, and 0 if that number is even.\n\nFor example, let us compute the XOR of 3 and 5. The binary representation of 3 is 011, and the binary representation of 5 is 101, thus the XOR has the binary representation 110, that is, the XOR is 6.","submission_id":"s481333484","submission":"N = int(input())\nA = list(map(int,input().split()))\n\n\nxor = [0]*(N+1)\ncum = [0]*(N+1)\nfor i in range(N):\n    xor[i] = xor[i-1]^A[i]\n    cum[i] = cum[i-1]+A[i]\n\nrlist = []\nr = 0\nfor l in range(N):\n    r = max(l+1,r)\n    while r < N and xor[r]^xor[l-1] == cum[r]-cum[l-1]:\n        r += 1\n    if r == N:\n        break\n    r -= 1\n    rlist.append(r)\nans = 0\nrlist += [N-1]*(N-len(rlist))\nfor l in range(N):\n    r = rlist[l]\n    ans += r-l+1\nprint(ans)","label":2}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s039966847","submission":"#                               #\n    # author : samars_diary #\n    # 13-09-2020 \u2502 11:26:57 #\n#                               #\n\nimport sys, os.path\n\n#if(os.path.exists('input.txt')):\n    #sys.stdin = open('input.txt',\"r\")\n    #sys.stdout = open('output.txt',\"w\")\n\nsys.setrecursionlimit(10 ** 5)\n\ndef i(): return sys.stdin.readline().strip()\ndef ii(): return int(sys.stdin.readline())\ndef li(): return list(sys.stdin.readline().strip())\ndef mii(): return map(int, sys.stdin.readline().split())\ndef lii(): return list(map(int, sys.stdin.readline().strip().split()))\n\n#print=sys.stdout.write\n\ndef solve():\n    d,t,s=mii()\n    if d\/s<=t:\n        print('Yes')\n    else: print('No')\nsolve()","label":2}
{"problem_id":"p03761","problem":"Snuke loves \"paper cutting\": he cuts out characters from a newspaper headline and rearranges them to form another string.\nHe will receive a headline which contains one of the strings S_1,...,S_n tomorrow.\nHe is excited and already thinking of what string he will create.\nSince he does not know the string on the headline yet, he is interested in strings that can be created regardless of which string the headline contains.\nFind the longest string that can be created regardless of which string among S_1,...,S_n the headline contains.\nIf there are multiple such strings, find the lexicographically smallest one among them.","submission_id":"s015409118","submission":"n=int(input())\nalfa=[chr(i) for i in range(97, 97+26)]\nwords={}\nfor alf in alfa:\n    words[alf]=0\nfor n_ in range(n):\n    S=input()\n    if n_==0:\n        for s in S:\n            words[s] = S.count(s)\n    else:\n        for k,v in words.items():\n            words[k]=min(v,S.count(k))\nanswer=''\nfor key,value in words.items():\n    answer+=key*value\nprint(answer)\n","label":2}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s623213511","submission":"import math\ndef ip():return int(input())\ndef inp():return map(int,input().split())\ndef inpstr():return map(str,input().split())\ndef linp():return list(map(int,input().split()))\ndef linpstr():return list(map(str,input().split()))\n\na,b,t=inp()\nprint(t\/\/a*b)","label":2}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s777023132","submission":"n, k = map(int, input().split())\nps = list(map(int, input().split()))\ncs = list(map(int, input().split()))\nps = [p-1 for p in ps]\n# doubling\u4f7f\u3046\nvers = []   # vers[b][i] \u9802\u70b9i\u304b\u30892^b\u56de\u79fb\u52d5\u3057\u305f\u6642\u306b\u3069\u306e\u9802\u70b9\u306b\u3044\u308b\u304b\nscore = []  # score[b][i]\u9802\u70b9i\u304b\u30892^b\u56de\u79fb\u52d5\u3057\u305f\u6642\u306b\u4f55\u70b9\u3082\u3089\u3048\u308b\u304b\nvers.append(ps)\nscore.append(cs)\n\nm = 31\n# \u30c0\u30d6\u30ea\u30f3\u30b0\nfor b in range(1, m+1):\n    p_bth = [0] * n\n    c_bth = [0] * n\n    for i in range(n):\n        p_bth[i] = vers[b-1][vers[b-1][i]]\n        c_bth[i] = score[b-1][i] + score[b-1][vers[b-1][i]]\n    vers.append(p_bth)\n    score.append(c_bth)\n\n# \u6841DP\nMIN = -(1 << 63) \nprv = [[MIN, 0] for _ in range(n)]\nnxt = [[MIN, MIN] for _ in range(n)] \nfor b in range(m, -1, -1):\n    for i in range(n):\n        if (k >> b) & 1:\n            nxt[vers[b][i]][0] = max(nxt[vers[b][i]][0], prv[i][0] + score[b][i])\n            nxt[vers[b][i]][1] = max(nxt[vers[b][i]][1], prv[i][1] + score[b][i])\n            nxt[i][0] = max(nxt[i][0], prv[i][0], prv[i][1])\n        else:\n            nxt[vers[b][i]][0] = max(nxt[vers[b][i]][0], prv[i][0] + score[b][i])\n            nxt[i][0] = max(nxt[i][0], prv[i][0])\n            nxt[i][1] = max(nxt[i][1], prv[i][1])\n    prv, nxt = nxt, prv\n\nans = max(max(x) for x in prv)\nif ans == 0:\n    ans = max(cs)\nprint(ans)","label":2}
{"problem_id":"p02724","problem":"Takahashi loves gold coins. He gains 1000 happiness points for each 500-yen coin he has and gains 5 happiness points for each 5-yen coin he has. (Yen is the currency of Japan.)\nTakahashi has X yen. If he exchanges his money so that he will gain the most happiness points, how many happiness points will he earn?\n(We assume that there are six kinds of coins available: 500-yen, 100-yen, 50-yen, 10-yen, 5-yen, and 1-yen coins.)","submission_id":"s874541719","submission":"# B Golden Coins\n\nX = int(input())\n\nhigh, mod = divmod(X, 500)\nlow, mod = divmod(mod, 5)\n\nans = high * 1000 + low * 5\nprint(ans)","label":2}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s402919205","submission":"def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    #from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby, product\n    from bisect import bisect_left,bisect_right\n    from heapq import heapify, heappop, heappush\n    from math import floor, ceil\n    #from operator import itemgetter\n\n    #inf = 10**17\n    #mod = 10**9 + 7\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    odd = 0\n    for i in a:\n        if i%2 == 1:\n            odd += 1\n    if odd%2 == 0:\n        print('YES')\n    else:\n        print('NO')\n\n\nif __name__ == '__main__':\n    main()","label":2}
{"problem_id":"p03774","problem":"There are N students and M checkpoints on the xy-plane.\nThe coordinates of the i-th student (1 \\leq i \\leq N) is (a_i,b_i), and the coordinates of the checkpoint numbered j (1 \\leq j \\leq M) is (c_j,d_j).\nWhen the teacher gives a signal, each student has to go to the nearest checkpoint measured in Manhattan distance. \nThe Manhattan distance between two points (x_1,y_1) and (x_2,y_2) is |x_1-x_2|+|y_1-y_2|.\nHere, |x| denotes the absolute value of x.\nIf there are multiple nearest checkpoints for a student, he\/she will select the checkpoint with the smallest index.\nWhich checkpoint will each student go to?","submission_id":"s187467628","submission":"import sys\ninput = lambda: sys.stdin.readline()\nexec(\"try:sys.stdin=open('input.txt','r');sys.stdout=open('output.txt','w')\\nexcept:pass\")\n\nn, m = map(int, input().split())\nstudent, point = [], []\nfor i in range(n):\n    student.append(list(map(int, input().split())))\nfor i in range(m):\n    point.append(list(map(int, input().split())))\ndist = []\nfor i in range(n):\n    temp = []\n    for j in range(m):\n        temp.append([j, abs(student[i][0] - point[j][0]) +\n                     abs(student[i][1] - point[j][1])])\n    dist.append(temp)\n# for dis in dist:\n#     print(dis)\ntot = []\nfor dis in dist:\n    ans = []\n    minn = min(dis, key=lambda i: i[1])\n    for i in dis:\n        if i[1] == minn[1]:\n            ans.append(i[0])\n    ans.sort()\n    print(ans[0] + 1)\n# print(tot)\n","label":2}
{"problem_id":"p03962","problem":"AtCoDeer the deer recently bought three paint cans.\nThe color of the one he bought two days ago is a, the color of the one he bought yesterday is b, and the color of the one he bought today is c.\nHere, the color of each paint can is represented by an integer between 1 and 100, inclusive.\nSince he is forgetful, he might have bought more than one paint can in the same color.\nCount the number of different kinds of colors of these paint cans and tell him.","submission_id":"s533634324","submission":"# A - AtCoDeer\u304f\u3093\u3068\u30da\u30f3\u30ad\ndef main():\n    abc = list(map(int, input().split()))\n\n    print(len(set(abc)))\n\n\nif __name__ ==  \"__main__\":\n    main()","label":2}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s373114749","submission":"a = int(input())\nprint(a**3)\n","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s500526693","submission":"a,b,c = input().split('\/')\na = '2018'\nprint(a + '\/' + b + '\/' + c)","label":2}
{"problem_id":"p02830","problem":"Given are strings s and t of length N each, both consisting of lowercase English letters.\nLet us form a new string by alternating the characters of S and the characters of T, as follows: the first character of S, the first character of T, the second character of S, the second character of T, ..., the N-th character of S, the N-th character of T. Print this new string.","submission_id":"s494287962","submission":"n = int(input())\na , b = input().split()\nans = \"\"\nfor i in range(n):\n  ans += a[i]\n  ans += b[i]\nprint(ans)\n","label":2}
{"problem_id":"p03993","problem":"There are N rabbits, numbered 1 through N.\nThe i-th (1\u2264i\u2264N) rabbit likes rabbit a_i.\nNote that no rabbit can like itself, that is, a_i\u2260i.\nFor a pair of rabbits i and j (i\uff1cj), we call the pair (i\uff0cj) a friendly pair if the following condition is met.\n\nRabbit i likes rabbit j and rabbit j likes rabbit i.\n\nCalculate the number of the friendly pairs.","submission_id":"s654789812","submission":"from collections import defaultdict\nn=int(input())\na=[int(i) for i in input().split()]\n\ndic = defaultdict(set)\nans=0\nfor i in range(n):\n    dic[a[i]].add(i+1)\n    if a[i] in dic[i+1]:\n        ans+=1\nprint(ans)","label":2}
{"problem_id":"p02804","problem":"For a finite set of integers X, let f(X)=\\max X - \\min X.\nGiven are N integers A_1,...,A_N.\nWe will choose K of them and let S be the set of the integers chosen. If we distinguish elements with different indices even when their values are the same, there are {}_N C_K ways to make this choice. Find the sum of f(S) over all those ways.\nSince the answer can be enormous, print it \\bmod (10^9+7).","submission_id":"s379642104","submission":"def build_combinations_counter(N=10**5, p=10**9+7):\n    fact = [1, 1]  # fact[n] = (n! mod p)\n    factinv = [1, 1]  # factinv[n] = ((n!)^(-1) mod p)\n    inv = [0, 1]  # mod p \u306b\u304a\u3051\u308bn\u306e\u9006\u5143 n^(-1)\n    for i in range(2, N + 1):\n        fact.append((fact[-1] * i) % p)\n        inv.append((-inv[p % i] * (p \/\/ i)) % p)\n        factinv.append((factinv[-1] * inv[-1]) % p)\n    \n    def cmb(n, r, p, fact, factinv):\n        if (r < 0) or (n < r):\n            return 0\n        r = min(r, n - r)\n        return fact[n] * factinv[r] * factinv[n-r] % p\n    \n    import functools\n    return functools.partial(cmb, p=p, fact=fact, factinv=factinv)\n\ndef resolve():\n    N, K = list(map(int, input().split()))\n    A = sorted(list(map(int, input().split())))\n    cmb = build_combinations_counter()\n    ans = 0\n    MOD = 10**9+7\n    for i in range(N):\n        if i >= K-1:\n            ans += cmb(i, K-1)*A[i]\n            ans %= MOD\n        if N-i-1 >= K-1: \n            ans -= cmb(N-i-1, K-1)*A[i]\n            ans %= MOD\n    print(ans)\n\n    \nif __name__ == \"__main__\":\n    resolve()\n\n","label":2}
{"problem_id":"p03723","problem":"Takahashi, Aoki and Snuke love cookies. They have A, B and C cookies, respectively. Now, they will exchange those cookies by repeating the action below:\n\nEach person simultaneously divides his cookies in half and gives one half to each of the other two persons.\n\nThis action will be repeated until there is a person with odd number of cookies in hand.\nHow many times will they repeat this action?\nNote that the answer may not be finite.","submission_id":"s033493840","submission":"a, b, c = map(int, input().split())\ncount = 0\nfor i in range(10**3):\n    if a%2 != 0 or b%2 != 0 or c%2 != 0:\n        print(count)\n        exit()\n    a, b, c = b\/2 + c\/2, a\/2 + c\/2, a\/2 + b\/2\n    count += 1\nprint(-1)","label":2}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s814078068","submission":"x,y=map(int,input().split())\n\nans=10**12\nif x<=y:\n  ans=min(ans,y-x)\nif -x<=y:\n  ans=min(ans,y+x+1)\nif x<=-y:\n  ans=min(ans,-y-x+1)\nif -x<=-y:\n  ans=min(ans,-y+x+2)\n\nprint(ans)\n","label":2}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s502626896","submission":"S = input()\nprint(['Yes', 'No']['L' in S[::2] or 'R' in S[1::2]])","label":2}
{"problem_id":"p03386","problem":"Print all the integers that satisfies the following in ascending order:\n\nAmong the integers between A and B (inclusive), it is either within the K smallest integers or within the K largest integers.","submission_id":"s017826980","submission":"A,B,K = map(int,input().split())\nc = 0\nS = []\nif B - A <= K:\n    for i in range(A,B+1):\n        print(i)\n    exit()\nfor i in range(A,B+1):\n    if c == K:\n        break\n    print(i)\n    S.append(i)\n    c += 1\nfor i in range(B-K+1,B+1):\n    if i not in S:        \n        print(i)\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s468237914","submission":"\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\n\ndef main():\n    mod=10**9+7\n    S=input()\n    if S[-1]==\"s\":\n        S+=\"es\"\n    else:\n        S+=\"s\"\n        \n    print(S)\n\nmain()\n","label":2}
{"problem_id":"p03110","problem":"Takahashi received otoshidama (New Year's money gifts) from N of his relatives.\nYou are given N values x_1, x_2, ..., x_N and N strings u_1, u_2, ..., u_N as input. Each string u_i is either JPY or BTC, and x_i and u_i represent the content of the otoshidama from the i-th relative.\nFor example, if x_1 = 10000 and u_1 = JPY, the otoshidama from the first relative is 10000 Japanese yen; if x_2 = 0.10000000 and u_2 = BTC, the otoshidama from the second relative is 0.1 bitcoins.\nIf we convert the bitcoins into yen at the rate of 380000.0 JPY per 1.0 BTC, how much are the gifts worth in total?","submission_id":"s171673996","submission":"N = int(input())\nans = 0.0\nfor _ in range(N):\n    xs, u = input().split()\n    x = float(xs)\n    if u == \"JPY\":\n        ans += x\n    else:\n        ans += x * 380000.0\nprint(ans)","label":2}
{"problem_id":"p03721","problem":"There is an empty array.\nThe following N operations will be performed to insert integers into the array.\nIn the i-th operation (1\u2264i\u2264N), b_i copies of an integer a_i are inserted into the array.\nFind the K-th smallest integer in the array after the N operations.\nFor example, the 4-th smallest integer in the array \\{1,2,2,3,3,3\\} is 3.","submission_id":"s006776502","submission":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep 28 01:21:16 2020\n\n@author: liang\n\"\"\"\n\n#\u30d0\u30b1\u30c4\u30bd\u30fc\u30c8O(n)\nN, K = map(int,input().split())\nnum = [0]*(10**5+1)\nfor i in range(N):\n    a, b = map(int,input().split())\n    num[a] += b\n\ntmp = 0\nfor i in range(10**5+ 1):\n    tmp += num[i]\n    if tmp >= K:\n        print(i)\n        break","label":2}
{"problem_id":"p03359","problem":"In AtCoder Kingdom, Gregorian calendar is used, and dates are written in the \"year-month-day\" order, or the \"month-day\" order without the year.\nFor example, May 3, 2018 is written as 2018-5-3, or 5-3 without the year.  \nIn this country, a date is called Takahashi when the month and the day are equal as numbers. For example, 5-5 is Takahashi.\nHow many days from 2018-1-1 through 2018-a-b are Takahashi?","submission_id":"s103642369","submission":"#!\/usr\/bin\/env python3\nimport sys, math, itertools, heapq, collections, bisect\ninput = lambda: sys.stdin.buffer.readline().rstrip().decode('utf-8')\nsys.setrecursionlimit(10**8)\ninf = float('inf')\nans = 1\ncount = 0\n\na,b=map(int,input().split())\nif a>b:\n    print(a-1)\nelse:\n    print(a)","label":2}
{"problem_id":"p02657","problem":"Compute A \\times B.","submission_id":"s845708501","submission":"N = [int(i) for i in input().split(' ')]\nprint(N[0] * N[1])","label":2}
{"problem_id":"p03712","problem":"You are given a image with a height of H pixels and a width of W pixels.\nEach pixel is represented by a lowercase English letter.\nThe pixel at the i-th row from the top and j-th column from the left is a_{ij}.\nPut a box around this image and output the result. The box should consist of # and have a thickness of 1.","submission_id":"s330993110","submission":"h, w = [int(x) for x in input().split()]\nc = \"#\"\ns = c * (w + 2)\nprint(s)\nfor _ in range(h):\n    print(c + input() + c)\nprint(s)","label":2}
{"problem_id":"p02732","problem":"We have N balls. The i-th ball has an integer A_i written on it.\nFor each k=1, 2, ..., N, solve the following problem and print the answer.  \n\nFind the number of ways to choose two distinct balls (disregarding order) from the N-1 balls other than the k-th ball so that the integers written on them are equal.","submission_id":"s977225054","submission":"from collections import Counter\nfrom scipy.special import comb\n\ns = input()\nA = list(map(int, input().split()))\n\nd = Counter(A)\n\nsum_c = 0\nfor v in d.values():\n    if v >= 2:\n        sum_c += comb(v, 2, exact=True)\n\nfor a in A:\n    x = sum_c - comb(d[a], 2, exact=True) + comb(d[a]-1, 2, exact=True)\n    print(x)","label":2}
{"problem_id":"p03776","problem":"You are given N items.\nThe value of the i-th item (1 \\leq i \\leq N) is v_i.\nYour have to select at least A and at most B of these items.\nUnder this condition, find the maximum possible arithmetic mean of the values of selected items.\nAdditionally, find the number of ways to select items so that the mean of the values of selected items is maximized.","submission_id":"s503527999","submission":"import math\n\ndef nCr(n,r):\n    return math.factorial(n) \/\/ (math.factorial(n-r) * math.factorial(r))\n\nN,A,B = map(int,input().split())\n\nv = list(map(int,input().split()))\n\nminlis = []\nmaxlis = []\n\nv.sort()\n\nfor i in range(N):\n\n    if i < N-A:\n        minlis.append(v[i])\n\n    else:\n        maxlis.append(v[i])\n\n\nave = sum(maxlis) \/ A\nprint (ave)\n\n\nx = min(maxlis)\n\nxinmax = 0\nxinmin = 0\n\nfor i in minlis:\n    if i == x:\n        xinmin += 1\n\nfor i in maxlis:\n    if i == x:\n        xinmax += 1\n\nif ave == x and xinmin != 0:\n\n    ans = 0\n\n    for i in range(xinmax + xinmin - A + 1):\n\n        i += A\n        if i > B:\n            break\n\n        ans += nCr(xinmin+xinmax,i)\n\n    print (ans)\n\nelse:\n\n    print (nCr(xinmin+xinmax,xinmax))","label":2}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s654648822","submission":"from collections import Counter\n\nn = int(input())\nxc = Counter()\nfor _ in range(n):\n    xc[input()] += 1\n\nmx = xc.most_common(1)[0][1]\nans = []\nfor k, v in xc.items():\n    if v == mx:\n        ans.append(k)\nans.sort()\nprint(*ans, sep=\"\\n\")\n","label":2}
{"problem_id":"p02960","problem":"Given is a string S. Each character in S is either a digit (0, ..., 9) or ?.\nAmong the integers obtained by replacing each occurrence of ? with a digit, how many have a remainder of 5 when divided by 13? An integer may begin with 0.\nSince the answer can be enormous, print the count modulo 10^9+7.","submission_id":"s230789885","submission":"\"\"\"\ndp[i][j] => \u4e0b\u304b\u3089i\u6841\u76ee\u307e\u3067\u898b\u308b\u3002\u3042\u307e\u308a\u304cj\u306b\u306a\u308b\u3088\u3046\u306a\u6570\u3002\n\"\"\"\nmod = 10**9 +7\nS = input()\nS = S[::-1]\nN = len(S)\ndp = [[0]*13 for _ in range(N+1)]\ndp[0][0] = 1\nby = 1\nfor i in range(N):\n    s = S[i]\n    for j in range(13):\n        if s == \"?\":\n            for k in range(10):\n                rest = k*by%13\n                dp[i+1][(j+rest)%13] += dp[i][j]\n                dp[i+1][(j+rest)%13] %= mod\n        else:\n            rest = int(s)*by%13\n            dp[i+1][(j+rest)%13] += dp[i][j]\n            dp[i+1][(j+rest)%13] %= mod\n    by = by*10%13\nprint(dp[-1][5])","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s903564944","submission":"import bisect,collections,copy,heapq,itertools,math,string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef M(): return map(int,sys.stdin.readline().rstrip().split())\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\ns = S()\nans = ''\nif s[-1] == 's':\n    ans = s + 'es'\nelse:\n    ans = s + 's'\nprint(ans)","label":2}
{"problem_id":"p02421","problem":"Taro and Hanako are playing card games. They have n cards each, and they compete n turns. At each turn Taro and Hanako respectively puts out a card.\n  The name of the animal consisting of alphabetical letters is written on each card, and the bigger one in lexicographical order becomes the winner of that turn. The winner obtains 3 points. In the case of a draw, they obtain 1 point each.","submission_id":"s918816469","submission":"n=int(input())\ntaro=0\nhanako=0\nfor i in range(n):\n    a,b=map(str,input().split())\n    if a>b:\n        taro+=3\n    elif a<b:\n        hanako+=3\n    else:\n        taro+=1\n        hanako+=1\n        \nprint(taro,hanako)\n","label":1}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s591547320","submission":"N = int(input())\ns1 = []\ns2 = []\n \nfor i in range(N):\n    a = int(input())\n    if a % 10 != 0:\n        s1.append(a)\n    else:\n        s2.append(a)\n\nif len(s1) == 0:\n    print(0)\nelse:\n    if sum(s1) % 10 == 0:\n        print(sum(s1)-min(s1)+sum(s2))\n    else:\n        print(sum(s1)+sum(s2))","label":1}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s577025087","submission":"s = input()\nif \"R\" not in s:\n  print(0)\nelif s[1] == \"S\":\n  print(1)\nelif s[0] == s[2] == \"R\":\n  print(3)\nelif s[0] == \"R\" or s[2] == \"R\":\n  print(2)\nelse:\n  print(1)","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s693812615","submission":"N = int(input())\nprint(N**3)\n","label":1}
{"problem_id":"p03130","problem":"There are four towns, numbered 1,2,3 and 4.\nAlso, there are three roads. The i-th road connects different towns a_i and b_i bidirectionally.\nNo two roads connect the same pair of towns. Other than these roads, there is no way to travel between these towns, but any town can be reached from any other town using these roads.\nDetermine if we can visit all the towns by traversing each of the roads exactly once.","submission_id":"s680030139","submission":"def ii():return int(input())\ndef iim():return map(int,input().split())\ndef iil():return list(map(int,input().split()))\ndef ism():return map(str,input().split())\ndef isl():return list(map(str,input().split()))\nl = []\nfor i in range(3):\n    a,b = iim()\n    l.append(a)\n    l.append(b)\n\nfor i in range(1,5):\n    if l.count(i) == 3:\n        print('NO')\n        exit()\nprint('YES')\n\n","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s208043012","submission":"def main():\n  n=int(input())\n  a= list(map(int,input().split()))\n  b= list(map(int,input().split()))\n  c= list(map(int,input().split()))\n  ans=b[a[0]-1]\n  for i in range(1,n):\n    ans+=b[a[i]-1]\n    if a[i]==a[i-1]+1:\n      ans+=c[a[i]-2]\n  print(ans)\n\nmain()","label":1}
{"problem_id":"p02836","problem":"Takahashi loves palindromes. Non-palindromic strings are unacceptable to him. Each time he hugs a string, he can change one of its characters to any character of his choice.\nGiven is a string S. Find the minimum number of hugs needed to make S palindromic.","submission_id":"s799787903","submission":"a = input()\nhl = int(len(a)\/2)\nfirst = a[:hl]\nlast = a[:hl+(len(a)%2-1):-1]\nans = 0\n# print(first)\n# print(last)\nfor fi,la in zip(first,last):\n    if fi != la :\n        ans += 1\nprint(ans)","label":1}
{"problem_id":"p02723","problem":"A string of length 6 consisting of lowercase English letters is said to be coffee-like if and only if its 3-rd and 4-th characters are equal and its 5-th and 6-th characters are also equal.\nGiven a string S, determine whether it is coffee-like.","submission_id":"s489606376","submission":"def main():\n    S = input()\n    cond = S[2] == S[3] and S[4] == S[5]\n    print('Yes' if cond else 'No')\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s560658787","submission":"x1, y1, x2, y2 = [int(w) for w in input().split()]\nb = x2 - x1\na = y2 - y1\n\nx3 = x2-a\ny3 = y2+b\n\nx4 = x3-b\ny4 = y3 - a\n\nprint(x3, y3, x4, y4)\n\n","label":1}
{"problem_id":"p03767","problem":"There are 3N participants in AtCoder Group Contest.\nThe strength of the i-th participant is represented by an integer a_i.\nThey will form N teams, each consisting of three participants.\nNo participant may belong to multiple teams.\nThe strength of a team is defined as the second largest strength among its members.\nFor example, a team of participants of strength 1, 5, 2 has a strength 2, and a team of three participants of strength 3, 2, 3 has a strength 3.\nFind the maximum possible sum of the strengths of N teams.","submission_id":"s446173125","submission":"n = int(input())\na = list(map(int, input().split()))\n\nprint(sum([x for i,x in enumerate(sorted(a,reverse=True)[:(n*2)]) if i%2==1]))","label":1}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s217972800","submission":"import sys\nimport os\nif sys.platform==\"darwin\":\n\tbase = os.path.dirname(os.path.abspath(__file__))\n\tname = os.path.normpath(os.path.join(base, '..\/Documents\/input.txt'))\n\t#print(name)\n\tsys.stdin = open(name)\n\nn = int(input())\nl = list(map(int,input().split()))\n\nl = sorted(l)\n#print(l)\n#print( l[::2] )\nprint( sum(l[::2]) )\n","label":1}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s111237559","submission":"#!\/usr\/bin\/env python3\ndef main():\n    from collections import defaultdict\n\n    N = int(input())\n    S = [input() for _ in range(N)]\n\n    d = defaultdict(int)\n    for s in S:\n        d[s] += 1\n    \n    # d = sorted(d.items())\n    d = sorted(d.items(), key=lambda d: d[1], reverse=True)\n    res = d[0][1]\n    lst = []\n    for i in d:\n        if res > i[1]:\n            break\n        lst.append(i[0])\n        res = i[1]\n    for i in sorted(lst):\n        print(i)\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02420","problem":"Your task is to shuffle a deck of n cards, each of which is marked by a alphabetical letter.","submission_id":"s695720144","submission":"while True:\n    sen = input()\n    if sen == '-':\n        break\n    m = int(input())\n    for i in range(m):\n        h = int(input())\n        s1 = sen[0:h]\n        s2 = sen[h:]\n        sen = s2 + s1\n    print(sen)","label":1}
{"problem_id":"p02549","problem":"There are N cells arranged in a row, numbered 1, 2, \\ldots, N from left to right.\nTak lives in these cells and is currently on Cell 1. He is trying to reach Cell N by using the procedure described below.\nYou are given an integer K that is less than or equal to 10, and K non-intersecting segments [L_1, R_1], [L_2, R_2], \\ldots, [L_K, R_K].\nLet S be the union of these K segments.\nHere, the segment [l, r] denotes the set consisting of all integers i that satisfy l \\leq i \\leq r.\n\n\bWhen you are on Cell i, pick an integer d from S and move to Cell i + d. You cannot move out of the cells.\n\nTo help Tak, find the number of ways to go to Cell N, modulo 998244353.","submission_id":"s690294011","submission":"N, K = map(int, input().split())\nMOD = 998244353\n\nlr = []\nfor _ in range(K):\n    l, r = map(int, input().split())\n    lr.append((l, r))\nlr.sort()\n\ndp = [0]*(N+1)\ndpsum = [0]*(N+1)\ndp[1] = 1\ndpsum[1] = 1\n\n# \u533a\u9593\u306e\u5408\u8a08\u3092\u8907\u6570\u56de\u6c42\u3081\u308b\uff1d\u7d2f\u7a4d\u548c\n# \u7d2f\u7a4d\u548c\u3092\u4f5c\u308a\u306a\u304c\u3089DP\u3092\u3059\u308b\nfor i in range(2, N+1):\n    # \u30de\u30b9i\u306b\u79fb\u52d5\u3067\u304d\u308b\u6570\u3092\u6c42\u3081\u308b\n    for l, r in lr:\n        # i\u306e\u5de6\u5074\u304b\u3089i\u3078\u79fb\u52d5\u3067\u304d\u308b\u533a\u9593\u3092\u6c42\u3081\u308b\u306e\u3067\u3001\n        # l\u3068r\u306f\u9006\u306b\u306a\u308b\n        li = max(i-r, 1)\n        ri = i-l\n\n        # \u53f3\u306e\u30de\u30b9\u304c0\u4ee5\u4e0b\u306a\u3089\u79fb\u52d5\u3067\u304d\u306a\u3044\u306e\u3067\u6b21\u3078\n        if ri < 1:\n            continue\n\n        dp[i] += dpsum[ri]-dpsum[li-1]\n        dp[i] %= MOD\n    dpsum[i] = dpsum[i-1]+dp[i]\nprint(dp[N])\n","label":1}
{"problem_id":"p03456","problem":"AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.","submission_id":"s553891897","submission":"a,b = map(str,input().split())\n\nA = int(str(a+b))\n\nB = int(A**0.5)\n\nif A == B*B:\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":1}
{"problem_id":"p03107","problem":"There are N cubes stacked vertically on a desk.\nYou are given a string S of length N. The color of the i-th cube from the bottom is red if the i-th character in S is 0, and blue if that character is 1.\nYou can perform the following operation any number of times: choose a red cube and a blue cube that are adjacent, and remove them. Here, the cubes that were stacked on the removed cubes will fall down onto the object below them.\nAt most how many cubes can be removed?","submission_id":"s603854655","submission":"S = input().strip()\ncnt0 = 0\ncnt1 = 0\nfor i in range(len(S)):\n    if S[i]==\"0\":\n        cnt0 += 1\n    else:\n        cnt1 += 1\nprint(min(cnt0,cnt1)*2)","label":1}
{"problem_id":"p02848","problem":"We have a string S consisting of uppercase English letters. Additionally, an integer N will be given.\nShift each character of S by N in alphabetical order (see below), and print the resulting string.\nWe assume that A follows Z. For example, shifting A by 2 results in C (A \\to B \\to C), and shifting Y by 3 results in B (Y \\to Z \\to A \\to B).","submission_id":"s484041176","submission":"a = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nn = int(input())\nss = input()\nprint(''.join([a[(a.index(s) + n) % 26] for s in ss]))","label":1}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s421386112","submission":"import sys\nsys.setrecursionlimit(1 << 25)\nread = sys.stdin.readline\nra = range\nenu = enumerate\n\n\ndef read_ints():\n    return list(map(int, read().split()))\n\n\ndef read_a_int():\n    return int(read())\n\n\ndef read_tuple(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(tuple(map(int, read().split())))\n    return ret\n\n\ndef read_col(H):\n    '''\n    H is number of rows\n    A\u5217\u3001B\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u3068\u304d\n    ex1)A,B=read_col(H)    ex2) A,=read_col(H) #\u4e00\u5217\u306e\u5834\u5408\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, read().split())))\n    return tuple(map(list, zip(*ret)))\n\n\ndef read_matrix(H):\n    '''\n    H is number of rows\n    '''\n    ret = []\n    for _ in range(H):\n        ret.append(list(map(int, read().split())))\n    return ret\n    # return [list(map(int, read().split())) for _ in range(H)] # \u5185\u5305\u8868\u8a18\u306fpypy\u3067\u306f\u9045\u3044\u305f\u3081\n\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\nfrom collections import defaultdict, Counter, deque\nfrom operator import itemgetter\nfrom itertools import product, permutations, combinations\nfrom bisect import bisect_left, bisect_right  # , insort_left, insort_right\n\n# https:\/\/atcoder.jp\/contests\/abc064\/tasks\/abc064_d\n# \u30ab\u30c3\u30b3\u3053\u3063\u304b\u3092\u5bfe\u5fdc\u3055\u305b\u305f\u3044 \u2192 \u524d\u304b\u5f8c\u308d\u306b\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u826f\u3044\n\n\ndef n_fusoku(S, target='('):  # \u9806\u65b9\u5411\u3067\u66f8\u3044\u3066\u304a\u304f (\u3092\u5148\u982d\u306b\u8ffd\u52a0\u3059\u3079\u304d\u500b\u6570\n    stack = []\n    ret = 0\n    for s in S:\n        if s == target:\n            stack.append(s)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                ret += 1  # \u4e0d\u8db3\u5206\n    return ret\n\n\nN = read_a_int()\nS = input()\nn_kakko = n_fusoku(S)\nn_kokka = n_fusoku(reversed(S), target=')')\nprint('(' * n_kakko + S + ')' * n_kokka)\n","label":1}
{"problem_id":"p02922","problem":"Takahashi's house has only one socket.\nTakahashi wants to extend it with some number of power strips, each with A sockets, into B or more empty sockets.\nOne power strip with A sockets can extend one empty socket into A empty sockets.\nFind the minimum number of power strips required.","submission_id":"s410451367","submission":"a,b=map(int,input().split())\nres=((b-1)-1+(a-1))\/\/(a-1)\nprint(res)","label":1}
{"problem_id":"p02989","problem":"Takahashi made N problems for competitive programming.\nThe problems are numbered 1 to N, and the difficulty of Problem i is represented as an integer d_i (the higher, the harder).\nHe is dividing the problems into two categories by choosing an integer K, as follows:\n\nA problem with difficulty K or higher will be for ARCs.\nA problem with difficulty lower than K will be for ABCs.\n\nHow many choices of the integer K make the number of problems for ARCs and the number of problems for ABCs the same?","submission_id":"s646911057","submission":"n = int(input())\ndif = list(map(int,input().split()))\nnew_dif = list(sorted(dif))\nif new_dif[n\/\/2-1] == new_dif[n\/\/2]:\n  print(0)\n  \nelse:\n  print(new_dif[n\/\/2]-new_dif[n\/\/2-1])","label":1}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s053603864","submission":"N = int(input())\nS = input()\nK = int(input())\n\nch = S[K-1]\n\nr = ''\nfor si in S:\n    if si == ch:\n        r += si\n    else:\n        r += '*'\n\nprint(r)","label":1}
{"problem_id":"p02552","problem":"Given is an integer x that is greater than or equal to 0, and less than or equal to 1.\nOutput 1 if x is equal to 0, or 0 if x is equal to 1.","submission_id":"s759343030","submission":"x = float(input())\nif float(x) == 0:\n  print(1)\nelif float(x)==1:\n  print(0)","label":1}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s555355194","submission":"x, k, d = map(int, input().split())\nx = abs(x)\nif k * d < x:\n    ans = x - k * d\nelse:\n    if (k - x \/\/ d) % 2 == 0:\n        ans = x % d\n    else:\n        ans = abs(x % d - d)\nprint(ans)\n","label":1}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s064089450","submission":"n, x = map(int, input().split())\n\ns = [1] * (n+1)\nfor i in range(1, n+1):\n    s[i] = 2 * s[i-1] + 3\n\ndp = [dict() for _ in range(n+1)]\ndp[0][1] = 1\ndp[0][0] = 0\n\n\ndef solve(i, j):\n    if j in dp[i]:\n        return dp[i][j]\n\n    if i == 0:\n        return dp[i][j]\n\n    if j == 0:\n        return 0\n\n    val = 0\n    if s[i] <= j:\n        val = solve(i-1, s[i-1]) * 2 + 1\n    elif s[i-1] + 2 <= j:\n        val = solve(i-1, s[i-1]) + 1 + solve(i-1, j-s[i-1]-2)\n    else:\n        val = solve(i-1, j-1)\n\n    dp[i][j] = val\n    return val\n\n\nprint(solve(n, x))\n","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s544480133","submission":"import os\nimport sys\nfrom atexit import register\nfrom io import BytesIO\nsys.stdin = BytesIO(os.read(0, os.fstat(0).st_size))\nsys.stdout = BytesIO()\nregister(lambda: os.write(1, sys.stdout.getvalue()))\ninput = lambda: sys.stdin.readline().rstrip('\\r\\n')\nraw_input = lambda: sys.stdin.readline().rstrip('\\r\\n')\n\n# (int(x) for x in input().split())\ns = input().strip()\nif s[-1] == 's':\n    print(s + 'es')\nelse:\n    print(s + 's')","label":1}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s700731537","submission":"# Author: cr4zjh0bp\n# Created: Tue Mar 17 19:50:06 UTC 2020\nimport sys\n \nstdin = sys.stdin\ninf = 1 << 60\nmod = 1000000007\n \nni      = lambda: int(ns())\nnin     = lambda y: [ni() for _ in range(y)]\nna      = lambda: list(map(int, stdin.readline().split()))\nnan     = lambda y: [na() for _ in range(y)]\nnf      = lambda: float(ns())\nnfn     = lambda y: [nf() for _ in range(y)]\nnfa     = lambda: list(map(float, stdin.readline().split()))\nnfan    = lambda y: [nfa() for _ in range(y)]\nns      = lambda: stdin.readline().rstrip()\nnsn     = lambda y: [ns() for _ in range(y)]\nncl     = lambda y: [list(ns()) for _ in range(y)]\nnas     = lambda: stdin.readline().split()\n\nfrom itertools import permutations\n\nn, m, R = na()\nr = na()\nabc = nan(m)\nadj = [[0 for _ in range(n)] for _ in range(n)]\nfor i in range(m):\n    a, b, c = abc[i]\n    a -= 1\n    b -= 1\n    adj[a][b] = c\n    adj[b][a] = c\n\ndist = [[inf for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        if i == j:\n            dist[i][j] = 0\n        elif adj[i][j]:\n            dist[i][j] = adj[i][j]\n\nfor i in range(n):\n    for j in range(n):\n        for k in range(n):\n            dist[j][k] = min(dist[j][k], dist[j][i] + dist[i][k])\n\nans = inf\nfor p in permutations(r):\n    res = 0\n    for i in range(R - 1):\n        f, t = p[i] - 1, p[i + 1] - 1\n        res += dist[f][t]\n    ans = min(ans, res)\n\nprint(ans)","label":1}
{"problem_id":"p02741","problem":"Print the K-th element of the following sequence of length 32:\n1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51","submission_id":"s155382346","submission":"import sys\nrline = sys.stdin.readline\n\n\ndef solve():\n    K = int(input())\n    lst = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51]\n    print(lst[K - 1])\n\n\nif __name__ == '__main__':\n    solve()\n","label":1}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s839590987","submission":"import sys\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\ndef main():\n    n, *a = map(int, read().split())\n    a.sort(reverse=True)\n    alice = sum(a[::2])\n    bob = sum(a[1::2])\n    print(alice - bob)\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s948774409","submission":"import sys\ninput = sys.stdin.readline\n\n\ndef readstr():\n    return input().strip()\n\n\ndef readint():\n    return int(input())\n\n\ndef readnums():\n    return map(int, input().split())\n\n\ndef readstrs():\n    return input().split()\n\n\ndef main():\n    x, y = readnums()\n    '''\n    x <= y\u304bx > y\u304b\n    x, y\u306e\u6b63\u8ca0\n    x, y\u306e\u5dee\n    x, y\n    1, 3 2\n    -1, 3 3\n    1, -3 3\n    -1, -3 4\n    3, 1 4\n    -3, 1 3\n    3, -1 3\n    -3, -1 2\n\n    10, 0 11\n    -10, 0 10\n    0, 10 10\n    0, -10 11\n    '''\n    ans = 0\n    if x == 0 or y == 0:\n        ans = abs(x - y) if x < 0 or y > 0 else abs(x - y) + 1\n    elif (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        ans = y - x if x <= y else abs(abs(x) - abs(y)) + 2\n    else:\n        ans = abs(abs(y) - abs(x)) + 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p02555","problem":"Given is an integer S.\nFind how many sequences there are whose terms are all integers greater than or equal to 3, and whose sum is equal to S.\nThe answer can be very large, so output it modulo 10^9 + 7.","submission_id":"s529319134","submission":"s=int(input())\ndp=[0,0,0,1]\nx=10**9+7\nfor i in range(4,s+1):\n    dp.append((dp[i-1]+dp[i-3])%x)\nprint(dp[s])","label":1}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s191576367","submission":"D,T,S=map(int,input().split())\nif 1<=D<=10000 and 1<=T<=10000 and 1<=S<=10000:\n  if (D\/S)>T:\n    print(\"No\")\n  else:\n    print(\"Yes\")","label":1}
{"problem_id":"p02578","problem":"N persons are standing in a row. The height of the i-th person from the front is A_i.\nWe want to have each person stand on a stool of some heights - at least zero - so that the following condition is satisfied for every person:\nCondition: Nobody in front of the person is taller than the person. Here, the height of a person includes the stool.\nFind the minimum total height of the stools needed to meet this goal.","submission_id":"s447428630","submission":"N = int(input())\nA = [int(x) for x in input().split()]\nSum = 0\nDff = 0\n\nfor i in range(N-1):\n    Dff = A[i] - A[i+1]\n    if Dff > 0:\n        A[i+1] += Dff\n        Sum += Dff\n    Dff = 0\n\nprint(Sum)","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s379007070","submission":"import sys\nN,M = map(int,input().split())\narray = list(map(int,input().split()))\n\nif not ( 1 <= M <= 100 and M <= N <= 100 ): sys.exit()\nif not (len(array) == len(set(array))): sys.exit()\n\ncount = 0\nstandard = sum(array) * (1\/(4*M))\nfor I in array:\n    if I >= standard:\n        count += 1\nprint('Yes') if count >= M else print('No')","label":1}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s181133891","submission":"#!\/usr\/bin python3\n# -*- coding: utf-8 -*-\n\nfrom bisect import bisect_left, bisect_right\n\nn, d, a = map(int, input().split())\nx = []\nxh = dict()\nfor _ in range(n):\n    xi, hi = map(int, input().split())\n    x.append(xi)\n    xh[xi] = hi\nx.sort()\n\nl = 0\nret = 0\nai = [0] * (n+1)\nanow = 0\nwhile l < n:\n    xl = x[l]\n    hl = xh[xl]\n    anow += ai[l]\n    hl -= a * anow\n    if hl > 0:\n        r = bisect_right(x, xl+2*d)\n        k = (hl+(a-1))\/\/a\n        ret += k\n        anow += k\n        ai[r] -= k\n    l += 1\nprint(ret)\n","label":1}
{"problem_id":"p03252","problem":"You are given strings S and T consisting of lowercase English letters.\nYou can perform the following operation on S any number of times:\nOperation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.\nDetermine if S and T can be made equal by performing the operation zero or more times.","submission_id":"s514193327","submission":"import collections as col\n \ns = list(input())\nt = list(input())\n \nc1 = col.Counter(s)\nc2 = col.Counter(t)\n \ncv1 = sorted(c1.values())\ncv2 = sorted(c2.values())\n \nif cv1 == cv2:\n    print('Yes')\nelse:\n    print('No')\n","label":1}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s510124451","submission":"def solve():\n  x, y = map(int, input().split())\n  ans = float('inf')\n  if y>=x:\n    ans = min(ans,y-x)\n  if y>=-x:\n    ans = min(ans,y+x+1)\n  if -y>=x:\n    ans = min(ans,-y-x+1)\n  if -y>=-x:\n    ans = min(ans,-y+x+2)\n  return ans\nprint(solve())","label":1}
{"problem_id":"p03455","problem":"AtCoDeer the deer found two positive integers, a and b.\nDetermine whether the product of a and b is even or odd.","submission_id":"s711490340","submission":"def solve(a, b):\n    if a * b % 2 == 0:\n        print('Even')\n    else:\n        print('Odd')\n\n\nif __name__ == '__main__':\n    a, b = map(int, input().split())\n    solve(a, b)\n","label":1}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s830184660","submission":"a,b,c=map(int,input().split())\nx=4*a*b\ny=(c-a-b)*(c-a-b)\nif c-a-b<0:\n  print('No')\nelse:\n  \n  if x<y:\n    print('Yes')\n  else:\n    print('No')","label":1}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s690317920","submission":"a = list(map(int, list(input())))\nsum = sum(a)\nif sum % 9 == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s227336252","submission":"N, M = map(int, input().split())\nA = list(map(int, input().split()))\ncnt = 0\ntotal = sum(A)\nfor a in A:\n    if a >= total \/ (4*M):\n        cnt += 1\n\nans = 'Yes' if cnt >= M else 'No'\nprint(ans)","label":1}
{"problem_id":"p02576","problem":"Takahashi loves takoyaki - a ball-shaped snack.\nWith a takoyaki machine, he can make at most X pieces of takoyaki at a time, taking T minutes regardless of the number of pieces to make.\nHow long does it take to make N takoyaki?","submission_id":"s909599038","submission":"N,X,T = map(int,input().split())\nif N % X == 0:\n    a = N \/ X\n    b = a * T\nelse:\n    a = N \/\/ X + 1\n    b = a * T\nprint(int(b))","label":1}
{"problem_id":"p03067","problem":"There are three houses on a number line: House 1, 2 and 3, with coordinates A, B and C, respectively.\nPrint Yes if we pass the coordinate of House 3 on the straight way from House 1 to House 2 without making a detour, and print No otherwise.","submission_id":"s565688651","submission":"A, B, C = map(int, input().split())\n\n\ndef main():\n    if A < C < B:\n        return \"Yes\"\n    elif A > C > B:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(main())\n","label":1}
{"problem_id":"p03814","problem":"Snuke has decided to construct a string that starts with A and ends with Z, by taking out a substring of a string s (that is, a consecutive part of s).\nFind the greatest length of the string Snuke can construct. Here, the test set guarantees that there always exists a substring of s that starts with A and ends with Z.","submission_id":"s879911473","submission":"N = input()\na = N.find(\"A\")\nz = N.rfind(\"Z\")\nprint(z - a + 1)","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s916786189","submission":"a = input()\nb = [x for x in a]\n\nif b[len(b) -1] == 's':\n    print(a+'es')\nelse:\n    print(a+'s')","label":1}
{"problem_id":"p02267","problem":"You are given a sequence of n integers S and a sequence of different q integers T. Write a program which outputs C, the number of integers in T which are also in the set S.","submission_id":"s601381103","submission":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\"\"\"\nLinear Search\nn ????????\u00b4??\u00b0???????????\u00b0??? S ??\u00a8???q ????????\u00b0????????\u00b4??\u00b0???????????\u00b0??? T ??????????????????\nT ?????????????????\u00b4??\u00b0????????\u00a7 S ?????????????????????????????\u00b0 C ???????????????????????\u00b0????????????????????????????????????\n\"\"\"\n\ndef main():\n    \"\"\" ????????? \"\"\"\n    n = int(input())\n    S = list(input().split())\n    q = int(input())\n    T = list(input().split())\n\n    cnt = {}\n    for i in range(n):\n        for j in range(q):\n            if S[i] == T[j]:\n                cnt[T[j]] = 1\n                break\n    print(len(cnt))\n\n\nif __name__ == '__main__':\n    main()","label":1}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s268938047","submission":"n,m=map(int,input().split())\na=n*(n-1)\/\/2\nb=m*(m-1)\/\/2\nprint(a+b)\n","label":1}
{"problem_id":"p03146","problem":"A sequence a=\\{a_1,a_2,a_3,......\\} is determined as follows:\n\n\nThe first term s is given as input.\n\n\nLet f(n) be the following function: f(n) = n\/2 if n is even, and f(n) = 3n+1 if n is odd.\n\n\na_i = s when i = 1, and a_i = f(a_{i-1}) when i > 1.\n\n\nFind the minimum integer m that satisfies the following condition:\n\nThere exists an integer n such that a_m = a_n (m > n).","submission_id":"s298138064","submission":"def f(x):\n    if x%2:\n        return 3*x + 1\n    else:\n        return x\/2\ns = int(input())\na = [s]\nfor i in range(1,10**6+2):\n    if f(a[i-1]) in a:\n        print(i+1)\n        break\n    a.append(f(a[i-1]))\n","label":1}
{"problem_id":"p02821","problem":"Takahashi has come to a party as a special guest.\nThere are N ordinary guests at the party. The i-th ordinary guest has a power of A_i.\nTakahashi has decided to perform M handshakes to increase the happiness of the party (let the current happiness be 0).\nA handshake will be performed as follows:\n\nTakahashi chooses one (ordinary) guest x for his left hand and another guest y for his right hand (x and y can be the same).\nThen, he shakes the left hand of Guest x and the right hand of Guest y simultaneously to increase the happiness by A_x+A_y.\n\nHowever, Takahashi should not perform the same handshake more than once. Formally, the following condition must hold:\n\nAssume that, in the k-th handshake, Takahashi shakes the left hand of Guest x_k and the right hand of Guest y_k. Then, there is no pair p, q (1 \\leq p < q \\leq M) such that (x_p,y_p)=(x_q,y_q).\n\nWhat is the maximum possible happiness after M handshakes?","submission_id":"s792744183","submission":"#\u964d\u9806\u30bd\u30fc\u30c8\u306e\u65b9\u304c\u3046\u307e\u304f\u3044\u304d\u305d\u3046\nn,m=map(int,input().split())\na=sorted(list(map(int,input().split())),reverse=True)\ncs=[]\nsum=0\nfor i in range(n):\n\tsum+=a[i]\n\tcs.append(sum)\n\n#\u548c\u304c\u5f15\u6570\u4ee5\u4e0a\u306e\u5834\u5408\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\ndef overX(x):\n\tcount=0\n\t#\u4e21\u624b\u304c\u9055\u3046\u4eba\u3092\u63e1\u308b\u3068\u304d\u306e\u307f\u8003\u3048\u308b\n\tif a[0]*2<x:\n\t\treturn 0\n\telse:\n\t\tfor i in range(n):\n\t\t\tif a[i]+a[0]<x:\n\t\t\t\tcount+=0\n\t\t\telse:\n\t\t\t\tlb, ub = 0, n\n\t\t\t\t#\u30d1\u30bf\u30fc\u30f3A\u306e\u306b\u3076\u305f\u3093\u3002\u5de6\u304cO\u306a\u306e\u3067[lb,ub)\u3067\u6301\u3064\u3002\n\t\t\t\twhile ub-lb>1:\n\t\t\t\t\tmid=(lb+ub)\/\/2\n\t\t\t\t\tif a[i]+a[mid]>=x:\n\t\t\t\t\t\tlb=mid\n\t\t\t\t\telse:\n\t\t\t\t\t\tub=mid\n\t\t\t\tcount+=lb+1\n\t\treturn count\n#print(overX(130))\n\n#overX>=m\u306a\u308b\u6700\u5927\u306ex\u3092\u63a2\u3059->x\u306f\u5c0f\u3055\u3044\u65b9\u304c\u5b9f\u73fe\u3057\u3084\u3059\u3044\u306e\u3067\u30d1\u30bf\u30fc\u30f3A->[lb,ub)\u3067\u3082\u3064\nlb=1 #\u5b9f\u73fe\u3057\u3084\u3059\u3044\u65b9\nub=2*10**5+1\nwhile ub-lb>1:\n\tmid=(ub+lb)\/\/2\n\tif overX(mid)>=m:\n\t\tlb=mid\n\telse:\n\t\tub=mid\n#ub=overX(x)>=m\u306a\u308b\u6700\u5c0f\u306ex\u3002\u3053\u308c\u4ee5\u4e0a\u5927\u304d\u304f\u3059\u308b\u3068m\u306b\u6e80\u305f\u306a\u304f\u306a\u308b\u3002\nmaxx=lb\n\nhp=0\n#maxx+1\u4ee5\u4e0a\u306e\u8981\u7d20\u3092\u3059\u3079\u3066\u305f\u3059\n#\u548c\u304cmaxx+1\u4ee5\u4e0a\u306b\u306a\u308b\u7d44\u307f\u5408\u308f\u305b\u306e\u6570\u3060\u3051hp\u3092\u52a0\u3048\u3001count\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\nif a[0]*2>=maxx+1:\n\tfor i in range(n):\n\t\tif a[i]+a[0]<maxx+1:\n\t\t\tbreak\n\t\telse:\n\t\t\tlb, ub = 0, n\n\t\t\t#\u30d1\u30bf\u30fc\u30f3A\u306e\u306b\u3076\u305f\u3093\u3002\u5de6\u304cO\u306a\u306e\u3067[lb,ub)\u3067\u6301\u3064\u3002\n\t\t\twhile ub-lb>1:\n\t\t\t\tmid=(lb+ub)\/\/2\n\t\t\t\tif a[i]+a[mid]>=maxx+1:\n\t\t\t\t\tlb=mid\n\t\t\t\telse:\n\t\t\t\t\tub=mid\n\t\t\t#a[0]\u304b\u3089a[lb]\u306f\u3001a[i]\u3068\u8db3\u3057\u305f\u6642\u306bx\u4ee5\u4e0a\u306b\u306a\u308a\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3002\n\t\t\thp+=a[i]*(lb+1)+cs[lb]\nhp+=(m-overX(maxx+1))*maxx\nprint(hp)","label":1}
{"problem_id":"p03214","problem":"Niwango-kun is an employee of Dwango Co., Ltd.\nOne day, he is asked to generate a thumbnail from a video a user submitted.\nTo generate a thumbnail, he needs to select a frame of the video according to the following procedure:\n\nGet an integer N and N integers a_0, a_1, ..., a_{N-1} as inputs. N denotes the number of the frames of the video, and each a_i denotes the representation of the i-th frame of the video.\nSelect t-th frame whose representation a_t is nearest to the average of all frame representations.\nIf there are multiple such frames, select the frame with the smallest index.\n\nFind the index t of the frame he should select to generate a thumbnail.","submission_id":"s556922743","submission":"n = int(input())\na = list(map(int, input().split()))\n\nsm = sum(a)\ndiff = 10000\nans = -1\nfor i, e in enumerate(a):\n    diff_now = abs(e * n - sm)\n    if diff_now < diff:\n        ans = i\n        diff = diff_now\n\nprint(ans)\n","label":1}
{"problem_id":"p03095","problem":"You are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.","submission_id":"s646562764","submission":"#\u89e3\u8aac\u53c2\u7167\u6e08\u307f\nn=int(input())\na=list(input())\nfrom collections import defaultdict\nd=defaultdict(int)\nfor i in a:\n    d[i]+=1\ncnt=[]\nfor i in d.values():\n    cnt.append(i+1)\nans=1\nmod=10**9+7\nfor i in cnt:\n    ans*=i\n    ans%=mod\nprint(ans-1)","label":1}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s051749720","submission":"N = input()\nif N == '2':\n    A = int(input())\n    B = int(input())\n    print(A+B)\nelse:\n    print('Hello World')","label":1}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s444112333","submission":"X, K, D = (int(x) for x in input().split())\n\nif X > 0:\n    div, mod = divmod(X, D)\n    if div >= K:\n        answer = X - K*D\n    else:\n        if (K - div)%2 == 0:\n            answer = X - div*D\n        else:\n            answer = abs(X - (div+1)*D)\nelif X < 0:\n    div, mod = divmod(-X, D)\n    if div >= K:\n        answer = abs(X + K*D)\n    else:\n        if (K - div)%2 == 0:\n            answer = abs(X + div*D)\n        else:\n            answer = X + (div+1)*D\nelse:\n    if K%2 == 0:\n        answer = 0\n    else:\n        answer = D\n\nprint(answer)\n","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s252762535","submission":"a = int(raw_input())\nprint a*a*a","label":1}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s223370301","submission":"from decimal import Decimal, getcontext\ngetcontext().prec = 50\na, b, c = map(Decimal, input().split())\nhalf = Decimal(\"0.5\")\nif a**half + b**half < c**half:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p02778","problem":"Given is a string S. Replace every character in S with x and print the result.","submission_id":"s359431231","submission":"import sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef solve():\n    n = len(input())\n    ans = 'x' * n\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n","label":1}
{"problem_id":"p02775","problem":"In the Kingdom of AtCoder, only banknotes are used as currency. There are 10^{100}+1 kinds of banknotes, with the values of 1, 10, 10^2, 10^3, \\dots, 10^{(10^{100})}. You have come shopping at a mall and are now buying a takoyaki machine with a value of N. (Takoyaki is the name of a Japanese snack.)\nTo make the payment, you will choose some amount of money which is at least N and give it to the clerk. Then, the clerk gives you back the change, which is the amount of money you give minus N.\nWhat will be the minimum possible number of total banknotes used by you and the clerk, when both choose the combination of banknotes to minimize this count?\nAssume that you have sufficient numbers of banknotes, and so does the clerk.","submission_id":"s940007931","submission":"s='0'\ns+=input()\nn=len(s)\ninf=float('inf')\ndp=[[inf]*2 for _ in range(n+1)]\ndp[0][0]=0\nfor i in range(n):\n  for j in range(2):\n    si=int(s[-i-1])\n    si+=j\n    for a in range(10):\n      ni=i+1\n      nj=0\n      b=a-si\n      if b<0:\n        nj=1\n        b+=10\n      dp[ni][nj]=min(dp[ni][nj],dp[i][j]+a+b)\nprint(dp[n][0])","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s557027399","submission":"n = int(input())\nprint(min(bin(int(i))[::-1].find(\"1\") for i in input().split()))","label":1}
{"problem_id":"p03095","problem":"You are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.","submission_id":"s913608658","submission":"import sys\n\n# import re\nimport math\nimport collections\n# import decimal\nimport bisect\nimport itertools\nimport fractions\n# import functools\nimport copy\nimport heapq\nimport decimal\n# import statistics\nimport queue\n\nsys.setrecursionlimit(10000001)\nINF = 10 ** 16\nMOD = 10 ** 9 + 7\n\nni = lambda: int(sys.stdin.readline())\nns = lambda: map(int, sys.stdin.readline().split())\nna = lambda: list(map(int, sys.stdin.readline().split()))\n\n\n# ===CODE===\n\n\ndef main():\n    n = ni()\n    s = input()\n\n    c = collections.Counter(s)\n\n    ans = 1\n    for v in c.values():\n        ans *= v + 1\n        ans %= MOD\n    ans = (ans - 1) % MOD\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s043136053","submission":"n=int(input())\ndic=dict()\nfor i in range(n):\n    s=input()\n    if s in dic:\n        dic[s]+=1\n    else:\n        dic[s]=1\nans=[]\nval=max(dic.values())\nfor kv in dic.items():\n    if kv[1]==val:\n        ans.append(kv[0])\nans=sorted(ans)\nfor a in ans:\n    print(a)\n","label":1}
{"problem_id":"p02777","problem":"We have A balls with the string S written on each of them and B balls with the string T written on each of them.\nFrom these balls, Takahashi chooses one with the string U written on it and throws it away.\nFind the number of balls with the string S and balls with the string T that we have now.","submission_id":"s007581797","submission":"s,t,a,b,u=open(0).read().split()\nif s==u:\n    print(int(a)-1,b)\nelif t==u:\n    print(a,int(b)-1)","label":1}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s250277693","submission":"N = int(input())\ndata = list(map(int, input().split()))\nAlice = 0\nBob = 0\ncount = 0\nwhile N > count:\n  high = data[0]\n  point = 0\n  for i in range(N):\n    if data[i] > high:\n      high = data[i]\n      point = i\n  if count % 2 == 0:\n    Alice += high\n  else:\n    Bob += high\n  data[point] = 0\n  count += 1\nprint(Alice - Bob)","label":1}
{"problem_id":"p02983","problem":"You are given two non-negative integers L and R.\nWe will choose two integers i and j such that L \\leq i < j \\leq R.\nFind the minimum possible value of (i \\times j) \\mbox{ mod } 2019.","submission_id":"s910762820","submission":"import sys\n\ndef read_str(): return sys.stdin.readline().strip()\ndef read_int(): return int(sys.stdin.readline().strip())\ndef read_ints(): return map(int, sys.stdin.readline().strip().split())\ndef read_str_split(): return list(sys.stdin.readline().strip())\ndef read_int_list(): return list(map(int, sys.stdin.readline().strip().split()))\n\ndef Main():\n    l, r = read_ints()\n    ans = 2020\n    if r - l >= 2019:\n        print(0)\n        exit()\n    for i in range(l, r + 1):\n        for j in range(l, i):\n            ans = min(ans, i * j % 2019)\n    print(ans)\n\nif __name__ == '__main__':\n    Main()\n","label":1}
{"problem_id":"p02802","problem":"Takahashi participated in a contest on AtCoder.\nThe contest had N problems.\nTakahashi made M submissions during the contest.\nThe i-th submission was made for the p_i-th problem and received the verdict S_i (AC or WA).\nThe number of Takahashi's correct answers is the number of problems on which he received an AC once or more.\nThe number of Takahashi's penalties is the sum of the following count for the problems on which he received an AC once or more: the number of WAs received before receiving an AC for the first time on that problem.\nFind the numbers of Takahashi's correct answers and penalties.","submission_id":"s011784674","submission":"import sys\ninput = sys.stdin.readline\n\nn, m = list(map(int, input().split()))\n\nsolved = [False] * (n + 1)\nwa = [0] * (n + 1)\n\nfor i in range(m):\n    p_str, s = input().split()\n    p = int(p_str)\n    if s == \"AC\":\n        solved[p] = True\n    else:\n        if not solved[p]:\n            wa[p] += 1\n\n\nac = 0\npe = 0\n\nfor i in range(1, n+1):\n    if solved[i]:\n        ac += 1\n        pe += wa[i]\n\nprint(ac, pe)","label":1}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s793118767","submission":"# F - Select Half\nN = int(input())\nA = list(map(int,input().split()))\n\nif N%2==0:\n    rec = [[0]*N for _ in range(2)]\n    rec[0][0] = A[0]\n    rec[1][1] = A[1]\n    for i in range(2,N):\n        rec[0][i] = rec[0][i-2]+A[i]\n        rec[1][i] = max(rec[0][i-3],rec[1][i-2])+A[i]\n    ans = max(rec[0][N-2],rec[1][N-1])\nelse:\n    rec = [[0]*N for _ in range(3)]\n    rec[0][0] = A[0]\n    rec[1][1] = A[1]\n    rec[0][2] = A[0]+A[2]\n    rec[2][2] = A[2]\n    for i in range(3,N):\n        rec[0][i] = rec[0][i-2]+A[i]\n        rec[1][i] = max(rec[0][i-3],rec[1][i-2])+A[i]\n        rec[2][i] = max(rec[0][i-4],rec[1][i-3],rec[2][i-2])+A[i]\n    ans = max(rec[0][N-3],rec[1][N-2],rec[2][N-1])\n    \nprint(ans)","label":1}
{"problem_id":"p02911","problem":"Takahashi has decided to hold fastest-finger-fast quiz games. Kizahashi, who is in charge of making the scoreboard, is struggling to write the program that manages the players' scores in a game, which proceeds as follows.\nA game is played by N players, numbered 1 to N. At the beginning of a game, each player has K points.\nWhen a player correctly answers a question, each of the other N-1 players receives minus one (-1) point. There is no other factor that affects the players' scores.\nAt the end of a game, the players with 0 points or lower are eliminated, and the remaining players survive.\nIn the last game, the players gave a total of Q correct answers, the i-th of which was given by Player A_i.\nFor Kizahashi, write a program that determines whether each of the N players survived this game.","submission_id":"s543031317","submission":"import sys\n\n\ninint = lambda: int(sys.stdin.readline())\ninintm = lambda: map(int, sys.stdin.readline().split())\ninintl = lambda: list(inintm())\ninstr = lambda: sys.stdin.readline()\ninstrm = lambda: map(str, sys.stdin.readline().split())\ninstrl = lambda: list(instrm())\n\nn,k,q = inintm()\nA = []\ncon = [0]*n\n\nborder = q-k\n\nfor _ in range(q):\n    A.append(inint())\n\nfor a in A:\n    con[a-1] += 1\n\nfor c in con:\n    if c > border:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n","label":1}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s342959874","submission":"n=int(input())\na=[list(map(int,input().split())) for _ in range(n)]\nx=y=t=0\nans='Yes'\nfor i in range(n):\n  c=a[i]\n  xy=c[1]+c[2]-(x+y)\n  if xy>c[0]-t:\n    ans='No'\n    break\n  else:\n    if xy%2!=(c[0]-t)%2:\n      ans='No'\n      break\n    elif abs(c[1]-x)+abs(c[2]-y)>c[0]-t:\n      ans='No'\n      break\n  x=c[1]\n  y=c[2]\n  t=c[0]\nprint(ans)","label":1}
{"problem_id":"p03456","problem":"AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.","submission_id":"s377891681","submission":"a, b = map(str, input().split())\nnum = int(a+b)\nflag = False\nfor i in range(1, 1001):\n    if i*i > num:\n        break\n    elif i*i == num:\n        print(\"Yes\")\n        flag = True\nif not flag:\n    print(\"No\")","label":1}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s677522284","submission":"N=str(input())\nif 'L' in N[0::2] or 'R' in N[1::2]:\n    print('No')\nelse:\n    print('Yes')","label":1}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s488272984","submission":"n = int(input())\ns = list(input())\n\ns=s[::-1]\nbalance = 0\ni = 0\nwhile i < len(s):\n    if s[i] == ')':\n        balance+=1\n    else:\n        balance-=1\n    if balance<0:\n        s.insert(0, ')')\n        balance+=1\n        i+=1\n    i+=1\n\n\nbalance = 0\ni = 0\ns=s[::-1]\nwhile i < len(s):\n    if s[i] == '(':\n        balance+=1\n    else:\n        balance-=1\n    if balance<0:\n        s.insert(0, '(')\n        balance+=1\n        i+=1\n    i+=1\n\nprint(''.join(s))\n    \n","label":1}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s127697371","submission":"inputted = list(map(int, input().split()))\nA = int(inputted[0])\nB = int(inputted[1])\n\nage = A\nfull_price = B\n\nis_full_price = age >= 13\nis_half_price = 6 <= age <= 12\n\nprice = 0\nif is_full_price:\n    price = full_price\nelif is_half_price:\n    price = int(full_price \/ 2)\n\nprint(price)\n","label":1}
{"problem_id":"p02687","problem":"AtCoder Inc. holds a contest every Saturday.\nThere are two types of contests called ABC and ARC, and just one of them is held at a time.\nThe company holds these two types of contests alternately: an ARC follows an ABC and vice versa.\nGiven a string S representing the type of the contest held last week, print the string representing the type of the contest held this week.","submission_id":"s476315251","submission":"# AtCoder \u793e\u306f\u3001\u6bce\u9031\u571f\u66dc\u65e5\u306b\u30b3\u30f3\u30c6\u30b9\u30c8\u3092\u958b\u50ac\u3057\u3066\u3044\u307e\u3059\u3002\n# \u30b3\u30f3\u30c6\u30b9\u30c8\u306b\u306f ABC \u3068 ARC \u306e 2\u3064\u306e\u7a2e\u985e\u304c\u3042\u308a\u3001\n# \u6bce\u9031\u3069\u3061\u3089\u304b\u4e00\u65b9\u304c\u958b\u50ac\u3055\u308c\u307e\u3059\u3002\n# ABC \u304c\u958b\u50ac\u3055\u308c\u305f\u6b21\u306e\u9031\u306b\u306f ARC \u304c\u958b\u50ac\u3055\u308c\u3001\n# ARC \u304c\u884c\u308f\u308c\u305f\u6b21\u306e\u9031\u306b\u306f ABC \u304c\u958b\u50ac\u3055\u308c\u307e\u3059\u3002\n# \u5148\u9031\u958b\u50ac\u3055\u308c\u305f\u30b3\u30f3\u30c6\u30b9\u30c8\u3092\u8868\u3059\u6587\u5b57\u5217 S \u304c\u4e0e\u3048\u3089\u308c\u308b\u306e\u3067\u3001\n# \u4eca\u9031\u958b\u50ac\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30b9\u30c8\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u51fa\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5236\u7d04\n# S\u306f'ABC' \u307e\u305f\u306f'ARC'\n\n# \u6a19\u6e96\u5165\u529b\u304b\u3089\u6587\u5b57\u5217 S \u3092\u53d6\u5f97\u3059\u308b\ns = input()\n\n# S \u3092\u305f\u3088\u308a\u306b\u3001\u4eca\u9031\u958b\u50ac\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30b9\u30c8\u3092\u51fa\u529b\u3059\u308b\nnext_contest = \"ret\"\nif s == \"ABC\":\n    next_contest = \"ARC\"\nelif s == \"ARC\":\n    next_contest = \"ABC\"\n\nprint(next_contest)\n","label":1}
{"problem_id":"p03018","problem":"You are given a string s consisting of A, B and C.\nSnuke wants to perform the following operation on s as many times as possible:\n\nChoose a contiguous substring of s that reads ABC and replace it with BCA.\n\nFind the maximum possible number of operations.","submission_id":"s309300629","submission":"S = list(input())\n\nans = 0\ncnt = 0\ni = len(S)-1\nwhile i >= 0:\n    if i > 0 and S[i] == \"C\" and S[i-1] == \"B\":\n        cnt += 1\n        i -= 2\n    elif S[i] == \"A\":\n        ans += cnt\n        i -= 1\n    else:\n        cnt = 0\n        i -= 1\nprint(ans)","label":1}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s857710281","submission":"n, k = map(int, input().split())\np = list(map(int, input().split()))\n\np = list(map(lambda x: (1+x)\/2, p))\ns = [0]\nnum = 0\nfor i in range(n):\n  num += p[i]\n  s.append(num)\nl = []\nfor i in range(n - k + 1):\n  l.append(s[i+k]-s[i])\n\nprint(max(l))\n","label":1}
{"problem_id":"p03311","problem":"Snuke has an integer sequence A of length N.\nHe will freely choose an integer b.\nHere, he will get sad if A_i and b+i are far from each other.\nMore specifically, the sadness of Snuke is calculated as follows:\n\nabs(A_1 - (b+1)) + abs(A_2 - (b+2)) + ... + abs(A_N - (b+N))\n\nHere, abs(x) is a function that returns the absolute value of x.\nFind the minimum possible sadness of Snuke.","submission_id":"s335135902","submission":"\ndef s0():return input()\ndef s1():return input().split()\ndef s2(n):return [input() for x in range(n)]\ndef s3(n):return [input().split() for _ in range(n)]\ndef s4(n):return [[x for x in s] for s in s2(n)]\ndef n0():return int(input())\ndef n1():return [int(x) for x in input().split()]\ndef n2(n):return [int(input()) for _ in range(n)]\ndef n3(n):return [[int(x) for x in input().split()] for _ in range(n)]\ndef t3(n):return [tuple(int(x) for x in input().split()) for _ in range(n)]\ndef p0(b,yes=\"Yes\",no=\"No\"): print(yes if b else no)\n# from sys import setrecursionlimit\n# setrecursionlimit(1000000)\n# from collections import Counter,deque,defaultdict\nimport itertools\nimport math\n# import networkx as nx\nfrom bisect import bisect_left,bisect_right\n# from heapq import heapify,heappush,heappop\nn=n0()\nA=n1()\n\nA2=[A[i-1]-i for i in range(1,n+1)]\nA2.sort()\n\nif n%2==1:\n    b=A2[n\/\/2]\n    ans=sum([abs(A[i-1]-i-b) for i in range(1,n+1)])\nelse:\n    b1=A2[n\/\/2-1]\n    b2=A2[n\/\/2]\n    ans1=sum([abs(A[i-1]-i-b1) for i in range(1,n+1)])\n    ans2=sum([abs(A[i-1]-i-b2) for i in range(1,n+1)])\n    ans=min(ans1,ans2)\nprint(ans)","label":1}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s033243313","submission":"import re\nsin = input()\nmatch = re.match(r\"^(dream|dreamer|erase|eraser)+$\",sin)\nprint(\"YES\" if match else \"NO\")","label":1}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s843045425","submission":"from itertools import permutations\nN, M, R = map(int, input().split())\nr = [int(c)-1 for c in input().split()]\ncost = [[float('inf')]*N for i in range(N)]\nfor i in range(M):\n  a, b, c = map(int, input().split())\n  cost[a-1][b-1] = c\n  cost[b-1][a-1] = c\ndef warshall_floyd(d,n):\n    #d[i][j]: i\u304b\u3089j\u3078\u306e\u6700\u77ed\u8ddd\u96e2\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j],d[i][k] + d[k][j])\n    return d\ndist = warshall_floyd(cost,N)\nls = list(permutations(r))\nans = -1\nfor l in ls:\n  m = 0\n  p = l[0]\n  flag = False\n  for q in l[1:]:\n    m += dist[p][q]\n    p = q\n  if ans==-1 or ans>m:\n    ans = m\nprint(ans)","label":1}
{"problem_id":"p02381","problem":"You have final scores of an examination for n students. Calculate standard deviation of the scores s1, s2 ... sn.","submission_id":"s612523834","submission":"while 1:\n n=int(input())\n if n==0:break\n s=list(map(int,input().split()))\n a=sum(s)\/n\n print((sum([x*x for x in s])\/n-a*a)**.5)\n","label":1}
{"problem_id":"p02265","problem":"Your task is to implement a double linked list.","submission_id":"s852231018","submission":"from collections import deque\n\ndq = deque()\n\nn = int(input())\n\nfor _ in range(n):\n    command = input()\n    if command[:6] == 'insert':\n        dq.appendleft(command[7:])\n    elif command[:10] == 'deleteLast':\n        dq.pop()\n    elif command[:11] == 'deleteFirst':\n        dq.popleft()\n    elif command[:6] == 'delete':\n        if (command[7:]) in dq:\n            dq.remove(command[7:])\nprint(\" \".join(dq))\n\n\n","label":1}
{"problem_id":"p00001","problem":"There is a data which provides heights (in meter) of mountains. The data is only for ten mountains.","submission_id":"s730287333","submission":"High = []\nfor i in range(10):\n    High.append(int(input()))\nfor i in range(3):\n    print(max(High))\n    High.remove(max(High))","label":1}
{"problem_id":"p04000","problem":"We have a grid with H rows and W columns. At first, all cells were painted white.\nSnuke painted N of these cells. The i-th ( 1 \\leq i \\leq N ) cell he painted is the cell at the a_i-th row and b_i-th column.\nCompute the following:\n\nFor each integer j ( 0 \\leq j \\leq 9 ), how many subrectangles of size 3\u00d73 of the grid contains exactly j black cells, after Snuke painted N cells?","submission_id":"s315817249","submission":"from collections import defaultdict\nimport sys\n\ninput = sys.stdin.readline\n\nh,w,n = map(int,input().split())\nd = defaultdict()\nans = [0]*10\n\nfor k in range(n):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if (a+i,b+j) in d:\n                d[(a+i,b+j)] += 1\n            else:\n                d[(a+i,b+j)] = 1\n\nfor k,v in d.items():\n    if 0 < k[0] < h-1 and 0 < k[1] < w-1:\n        ans[v] += 1\n\nans[0] = (h-2) * (w-2) - sum(ans)\n\nfor i in ans:\n    print(i)\n","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s002039925","submission":"x = input()\nn = int(x)*int(x)*int(x)\nprint(n)\n","label":1}
{"problem_id":"p02662","problem":"Given are a sequence of N positive integers A_1, A_2, \\ldots, A_N and another positive integer S.\nFor a non-empty subset T of the set \\{1, 2, \\ldots , N \\}, let us define f(T) as follows:\n\nf(T) is the number of different non-empty subsets \\{x_1, x_2, \\ldots , x_k \\} of T such that A_{x_1}+A_{x_2}+\\cdots +A_{x_k} = S.\n\nFind the sum of f(T) over all 2^N-1 subsets T of \\{1, 2, \\ldots , N \\}. Since the sum can be enormous, print it modulo 998244353.","submission_id":"s892174487","submission":"n,s=map(int,input().split())\na=list(map(int,input().split()))\nt=[[0]*(s+1) for i in range(n+1)]\nt[0][0]=1\nm=998244353\nfor i in range(n):\n    for j in range(s+1):\n        t[i+1][j]=t[i][j]*2\n        if j>=a[i]:\n            t[i+1][j]+=t[i][j-a[i]]\n        t[i+1][j]%=m\nprint(t[-1][-1])","label":1}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s103372279","submission":"x = input()\ns = 0\n\nfor i in range(len(x)):\n  s = s + int(x[i])\n\nif s % 9 == 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":1}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s333404852","submission":"N = int(input())\nS = []\nfor _ in range(N):\n    S.append(int(input()))\nS = sorted(S)\n\nans = sum(S)\nif ans % 10 != 0:\n    print(ans)\nelse:\n    for s in S:\n        if s % 10 != 0:\n            print(ans - s)\n            break\n    else:\n        print(0)","label":1}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s479434513","submission":"N = int(input())\ns = [int(input()) for _ in range(N)]\ns.sort()\nsu = sum(s)\n\nif su%10 != 0:\n    print(su)\n    exit()\n    \nfor i in s:\n    if i%10 != 0:\n        print(su - i)\n        exit()\nprint(0)","label":1}
{"problem_id":"p02577","problem":"An integer N is a multiple of 9 if and only if the sum of the digits in the decimal representation of N is a multiple of 9.\nDetermine whether N is a multiple of 9.","submission_id":"s484516837","submission":"N = input()\n\nSum = 0\nfor n in list(N):\n    Sum = Sum + int(n)\n\nANS = 'Yes' if Sum % 9 == 0 else 'No'\nprint(ANS)","label":1}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s944981871","submission":"s = list(input())\nfor i in range(len(s)):\n    if i % 2 == 0 and s[i] == \"L\":\n        print(\"No\")\n        exit()\n    if i % 2 != 0 and s[i] == \"R\":\n        print(\"No\")\n        exit()\nprint(\"Yes\")","label":1}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s950774136","submission":"import sys\nimport numpy as np\ndef input(): return sys.stdin.readline().rstrip()\n\ndef odd(A):\n    oddi=np.array(A[::2],dtype=np.int64)\n    eveni=np.array(A[1::2],dtype=np.int64)\n    left=np.cumsum(oddi[:-1]-eveni)\n    left=np.insert(left,0,0)\n    left=np.append(left,0)\n    right=np.cumsum(oddi[:0:-1]-eveni[::-1])[::-1]\n    right=np.insert(right,0,0)\n    right=np.append(right,0)\n    tmp=np.max(np.maximum.accumulate(left)+right)\n    return tmp+np.sum(eveni)\n\ndef even(A):\n    left=np.array([0]+A[::2],dtype=np.int64)\n    right=np.array(A[1::2]+[0],dtype=np.int64)[::-1]\n    return np.max(left.cumsum()+right.cumsum()[::-1])\n\ndef main():\n    n=int(input())\n    A=list(map(int, input().split()))\n    if n%2==1:\n        print(odd(A))\n    else:\n        print(even(A))\n\n\nif __name__ == '__main__':\n    main()","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s845069205","submission":"import sys\n\ns = input()\nif s[-1] == \"s\":\n    s += \"es\"\nelse:\n    s += \"s\"\nprint(s)\n","label":1}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s650908136","submission":"a,b=map(int, input().split())\nif a==1 or b==1:\n  print(1)\nelif a*b%2==0:\n  print(a*b\/\/2)\nelse:\n  print(a*b\/\/2+1)","label":1}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s111592939","submission":"def main():\n    n = int(input())\n    As = list(map(int, input().split()))\n    fours = 0\n    evens = 0\n    odds = 0\n    for A in As:\n        if A % 4 == 0:\n            fours += 1\n        elif A % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n\n    if fours+(evens)\/\/2 >= n\/\/2:\n        ans = 'Yes'\n    else:\n        ans = 'No'\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p02719","problem":"Given any integer x, Aoki can do the operation below.\nOperation: Replace x with the absolute difference of x and K.\nYou are given the initial value of an integer N. Find the minimum possible value taken by N after Aoki does the operation zero or more times.","submission_id":"s039303046","submission":"N,K=map(int,input().split())\nm=N\/\/K\nprint(min(abs(N-m*K),abs(N-(m+1)*K)))","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s794727013","submission":"def main():\n    n = list(str(input()))\n    if n[-1] == \"s\":\n        n.append(\"es\")\n    else :\n        n.append(\"s\")\n    print(''.join(n))\nmain()","label":1}
{"problem_id":"p03696","problem":"You are given a string S of length N consisting of ( and ). Your task is to insert some number of ( and ) into S to obtain a correct bracket sequence.\nHere, a correct bracket sequence is defined as follows:  \n\n() is a correct bracket sequence.\nIf X is a correct bracket sequence, the concatenation of (, X and ) in this order is also a correct bracket sequence.\nIf X and Y are correct bracket sequences, the concatenation of X and Y in this order is also a correct bracket sequence.\nEvery correct bracket sequence can be derived from the rules above.\n\nFind the shortest correct bracket sequence that can be obtained. If there is more than one such sequence, find the lexicographically smallest one.","submission_id":"s339463320","submission":"n = int(input())\ns = input()\nR, L = 0, 0\nfor i in range(len(s)):\n    if s[i] == '(':\n        R += 1\n    else:\n        if R:\n            R -= 1\n        else:\n            L += 1\n\nprint('('*L + s + ')'*R)\n","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s339507871","submission":"\nx = raw_input()\nprint(int(x)**3)","label":1}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s705443771","submission":"import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    from math import comb\n\n    n, p = map(int, readline().split())\n    a = list(map(int, readline().split()))\n\n    zero = 0\n    one = 0\n\n    for x in a:\n        if x % 2 == 0:\n            zero += 1\n        else:\n            one += 1\n\n    ans = 0\n    q = 2 ** zero\n\n    if p == 0:\n        for x in range(0, one + 1, 2):\n            ans += q * comb(one, x)\n    else:\n        for x in range(1, one + 1, 2):\n            ans += q * comb(one, x)\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s459010314","submission":"S=input()\nisOK=True\nfor i in range(len(S)):\n  if((i+1)%2==1):\n    if(S[i]==\"L\"):\n      isOK=False\n  else:\n    if(S[i]==\"R\"):\n      isOK=False\n      \nif(isOK):\n  print(\"Yes\")\nelse:\n  print(\"No\")\n","label":1}
{"problem_id":"p02988","problem":"We have a permutation p = {p_1,\\ p_2,\\ ...,\\ p_n} of {1,\\ 2,\\ ...,\\ n}.\nPrint the number of elements p_i (1 < i < n) that satisfy the following condition:\n\np_i is the second smallest number among the three numbers p_{i - 1}, p_i, and p_{i + 1}.","submission_id":"s974528397","submission":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\nn = ri()\nli = rl()\ncnt = 0\nfor i in range(1, n-1):\n  if li[i-1] < li[i] < li[i+1] or li[i-1] > li[i] > li[i+1]:\n    cnt += 1\nprint(cnt)\n\n\n\n\n\n\n\n\n","label":1}
{"problem_id":"p04012","problem":"Let w be a string consisting of lowercase letters.\nWe will call w beautiful if the following condition is satisfied:\n\nEach lowercase letter of the English alphabet occurs even number of times in w.\n\nYou are given the string w. Determine if w is beautiful.","submission_id":"s593265538","submission":"w = input()\nchar = [chr(ord('a') + i) for i in range(26)]\nfor c in char:\n    if w.count(c) % 2 != 0:\n        print('No')\n        break\nelse:\n    print('Yes')","label":1}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s082313813","submission":"n = int(input())\ns = []\nfor i in range(n):\n    s.append(int(input()))\nx = 0\nt = []\nfor i in range(n):\n    if s[i]%10 == 0:\n        t.append(i)\n        x += s[i]\ncnt = 0\nfor i in t:\n    del s[i-cnt]\n    cnt += 1\ns.sort()\nwhile sum(s)%10 == 0 and len(s)>0:\n    del s[0]\nif sum(s) == 0:\n    print(0)\nelse:\n    print(sum(s)+x)","label":1}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s244112445","submission":"N, X = map(int, input().split())\nSize = [1]\nPatty = [1]\n\nfor i in range(51):\n    Size.append(Size[-1] * 2 + 3)\n    Patty.append(Patty[-1] * 2 + 1)\n\n\ndef count_p(n, x):\n    if x == 0:\n        return 0\n    if n == 0:\n        return min(x, 1)\n    if (Size[n]+1) \/\/ 2 > x:\n        return count_p(n-1, x-1)\n    elif (Size[n]+1) \/\/ 2 == x:\n        return Patty[n-1] + 1\n    else:\n        return Patty[n-1] + 1 + count_p(n-1, x - ((Size[n]+1) \/\/ 2))\n\n\nprint(count_p(N, X))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s685237168","submission":"n = int(input())\nl = list(map(int, input().split()))\ncount = 0\n\nwhile True:\n    if [i for i in l if i % 2 != 0]:\n        break\n    l = [i \/ 2 for i in l]\n    count += 1\nprint(count)","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s863353349","submission":"import sys\nfrom sys import exit\nfrom collections import deque\nfrom bisect import bisect_left, bisect_right, insort_left, insort_right #func(\u30ea\u30b9\u30c8,\u5024)\nfrom heapq import heapify, heappop, heappush\nfrom itertools import product, permutations, combinations, combinations_with_replacement\nfrom math import *\n\nsys.setrecursionlimit(10**6)\nINF = 10**20\neps = 1.0e-20\nMOD = 10**9+7\n\ndef lcm(x,y):\n    return x*y\/\/gcd(x,y)\ndef lgcd(l):\n    return reduce(gcd,l)\ndef llcm(l):\n    return reduce(lcm,l)\ndef mint():\n    return map(int,input().split())\ndef lint():\n    return list(map(int,input().split()))\ndef ilint():\n    return int(input()), list(map(int,input().split()))\ndef judge(x, l=['Yes', 'No']):\n    print(l[0] if x else l[1])\ndef lprint(l, sep='\\n'):\n    for x in l:\n        print(x, end=sep)\ndef ston(c, c0='a'):\n    return ord(c)-ord(c0)\ndef ntos(x, c0='a'):\n    return chr(x+ord(c0))\nclass counter(dict):\n    def __init__(self, *args):\n        super().__init__(args)\n    def add(self,x):\n        self.setdefault(x,0)\n        self[x] += 1\n\nN,M = mint()\nS,T = input(),input()\nl,g = lcm(N,M),gcd(N,M)\nans = True\nfor i in range(g):\n    if S[i*l\/\/M]!=T[i*l\/\/N]:\n        ans = False\n        break\nprint(l if ans else -1)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s947759658","submission":"n=int(input())\nn_list=list(map(int,input().split()))\ncount=0\n\ndef check(list):\n    for i in range(n):\n        if(n_list[i]%2!=0):\n            return False\n    return True\n\n    \n\nwhile(check(n_list)):\n    n_list=[k\/2 for k in n_list]\n    count+=1\nprint(count)  ","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s483713098","submission":"n=int(input())\na=list(map(int,input().split()))\ni,c=0,0\nwhile True:\n    if a[i]%2==0:\n        a[i]=a[i]\/2\n        i=i+1\n    else:\n        print(c)\n        break\n    if i==n-1:\n        i=0\n        c+=1","label":0}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s346254514","submission":"inp=input().split()\nn=int(inp[0])\nm=int(inp[1])\narr=[]\npares=0\nimpares=0\ncount=1\nnums=0\n\ndef binary(arr, menor, mayor, x): \n    if mayor >= menor: \n        med = (mayor + menor) \/\/ 2\n        if arr[med] == x: \n            return med \n\n        elif arr[med] > x: \n            return binary(arr, menor, med - 1, x) \n  \n        else: \n            return binary(arr, med + 1, mayor, x) \n    else: \n        return -1\n\nwhile len(arr)<(m+n):\n    if count%2==0 and pares<n:\n        arr.append(count)\n        pares+=1\n    elif count%2!=0 and impares<m:\n        arr.append(count)\n        impares+=1\n    count+=1\nsums=[]\n\n\nfor x in arr:\n   for y in arr:\n        if(x+y)%2==0 and binary(sums, 0, len(sums)-1, [y,x])==-1 and x!=y:\n            sums.append([x,y])\n            nums+=1\nprint(nums)\n","label":0}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s793815288","submission":"def p(S):\n    str = \"\"\n    for s in S:\n        str += chr(ord(\"a\")+int(s))\n    print(str)\n\nN = int(input())\nS = [0]*N\n\ndef up(i):\n    if i == 0:\n        return True\n    S[i] += 1\n    if S[i] == max(S[:i]) + 2:\n        S[i] = 0\n        return up(i-1)\n    return False\n\nwhile True:\n    p(S)\n    if up(N-1):\n        break\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s572371757","submission":"n = int(input())\nA = list(map(int, input().split()))\n\nA = [i for i in A if i%2==0]\nif len(A) != n:\n    print(0)\n    exit()\ncnt = 0\nwhile len(A) == n:\n    A = [i\/\/2 for i in A if i%2==0]\n    cnt += 1\nprint(cnt-1)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s411125341","submission":"n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nc = 0\nwhile True:\n    for i in range(n):\n        if a[i] % 2 == 0:\n            c += 1\n    if c == n:\n        for i in range(n):\n            a[i] = a[i] \/\/ 2\n        ans += 1\n        c = 0\n    else:\n        print(ans)\n        exit()\n","label":0}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s119519202","submission":"import numpy as np\n\ndef main():\n    n, k = map(int, input().split())\n    A = np.array(list(map(int, input().split())))\n    MOD = 10 ** 9 + 7\n    #\u8ee2\u5012\u6570\u3001A\u306e\u4e2d\u3067\n    C1 = np.array([0] * n)\n    C2 = np.array([0] * n)\n    for i in range(n):\n        C1[i] = np.count_nonzero(A[i:] < A[i])\n        C2[i] = np.count_nonzero(A < A[i])\n    c1,c2 = C1.sum(),C2.sum()\n    ans = 0\n\t\n    ans += c1 * k % MOD\n    ans += c2 * (k * (k - 1) \/\/ 2 % MOD)\n\n    print(ans % MOD)\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s218015289","submission":"N,K = map(int,input().split())\nP = list(map(int,input().split()))\n\n# \u7d2f\u7a4d\u548c \ns = [0] * (N+1)\nfor i in range(N):# O(N)\n    s[i+1] = s[i] + P[i]\n\n# [j,j+K) \u306e\u548c\u306e\u6700\u5927\u5024\u3068 j \u3092\u4fdd\u6301 \nm = 0\nmidx = 0\nfor j in range(N-K+1):# O(N)\n    v = s[j+K] - s[j]\n    if v > m:\n        m = v\n        midx = j\n        \nE = 0\nfor k in range(midx,midx+K):# O(K)\n    x = P[k]\n    E += (1\/x)*(x*(x+1)\/2)\nprint(E)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s022226999","submission":"\nn = int(input())\na_list = list(map(int, input().split()))\n\nans = 0\n\n_break = False\n\nwhile _break == False:\n    \n    for i in range(n):\n\n        # print(\"i : {0}\".format(i))\n\n        # \u5bfe\u8c61\u304c\u5076\u6570\n        if a_list[i] % 2 == 0 :\n\n            a_list[i] = a_list[i] \/ 2\n\n            # \u6700\u5f8c\u307e\u3067\u56de\u308a\u304d\u3063\u305f\u3089+1\n            if i == n - 1 :\n                ans += 1\n        # \u5bfe\u8c61\u304c\u5947\u6570\u3000\u2192 \u7d42\u4e86\n        else :\n            _break = True\n            break\n\nprint(ans)","label":0}
{"problem_id":"p02381","problem":"You have final scores of an examination for n students. Calculate standard deviation of the scores s1, s2 ... sn.","submission_id":"s347631511","submission":"from math import *\nwhile True:\n    n = 0\n    n = int(input())\n    if n == 0:\n        break\n    else :\n        sco = map(int,raw_input().split())\n        for i in range(n):\n            ave=0.0\n            for i in sco:\n                ave += i\n            ave \/= n\n            dev = 0.0\n            for i in sco:\n                dev += (i-ave)*(i-ave)\n            dev \/= n\n        print sqrt(dev)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s782072055","submission":"n = int(input())\na_l = list(map(int, input().split()))\nans = float('inf')\nfor a in a_l:\n    c = 0\n    while a%2 == 0:\n        a = a\/2\n        c += 1\n    ans = min(ans,c)\nprint(ans)","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s126370350","submission":"# coding: utf-8\nn = int(input())\nL = list(map(int,input().split()))\nl=[]\nA=[]\nans=0\nfor i in range(n-2):\n    for j in range(i+1, n-1):\n        for k in range(j+1, n):\n            a=L[i]\n            b=L[j]\n            c=L[k]\n            if a!=b and b!=c and c!=a and a+b>c and b+c>a and c+a>b:\n                #print(i+1,j+1,k+1)\n                #print(a,b,c)\n                ans += 1\n#print(L)\n#print()\nprint(ans)","label":0}
{"problem_id":"p02959","problem":"There are N+1 towns. The i-th town is being attacked by A_i monsters.\nWe have N heroes. The i-th hero can defeat monsters attacking the i-th or (i+1)-th town, for a total of at most B_i monsters.\nWhat is the maximum total number of monsters the heroes can cooperate to defeat?","submission_id":"s965729730","submission":"n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nsum = 0\nfor i in range(n):\n    if(b[i] > a[i]):\n        b[i] -= a[i]\n        sum += a[i]\n        a[i] = 0;\n      \n        if(b[i] > a[i+1]):\n          sum += a[i+1]\n          a[i+1] = 0;\n        else:\n          a[i+1] -= b[i]\n          sum += b[i]\n    else:\n        sum += b[i]\nprint(sum)","label":0}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s779299435","submission":"def wczytaj_liste():\n    ciag = input()\n    rozdzielona_lista = ciag.split()\n    odp = []\n    for wyraz in rozdzielona_lista:\n        liczba = int(wyraz)\n        odp.append(liczba)\n    return odp\n\ndef F_symulacja():\n    N, D, A = wczytaj_liste()\n    monstery = []\n    for i in range(N):\n        x, h = wczytaj_liste()\n        monstery.append((x, h))\n    monstery.sort()\n    wynik = 0\n    while len(monstery) > 0:\n        x, h = monstery[0]\n        if h <= 0:\n            monstery.pop(0)\n            continue\n        bomba_x = x + D\n        wynik += 1\n        for i in range(len(monstery)):\n            x_i, h_i = monstery[i]\n            if bomba_x - D <= x_i <= bomba_x + D:\n                monstery[i] = (x_i, h_i - A)\n\n    print(wynik)\n\ndef zabij(H, A):\n    if H % A == 0:\n        return H \/\/ A\n    else:\n        return H \/\/ A + 1\n\ndef F():\n    N, D, A = wczytaj_liste()\n    monstery = []\n    for i in range(N):\n        x, h = wczytaj_liste()\n        monstery.append((x, h))\n    monstery.sort()\n\n    wynik = 0\n    gdzie_sie_koncza_bomby = []\n    skonczone = 0\n    ile_tu_spadlo = 0\n    for x, h in monstery:\n        while len(gdzie_sie_koncza_bomby) > skonczone:\n            bomby_do, ile_bomb = gdzie_sie_koncza_bomby[skonczone]\n            if bomby_do < x:\n                ile_tu_spadlo -= ile_bomb\n                skonczone += 1\n            else:\n                break\n        if h - ile_tu_spadlo * A > 0:\n            zrzucam_tutaj = zabij(h - ile_tu_spadlo * A, A)\n            wynik += zrzucam_tutaj\n            ile_tu_spadlo += zrzucam_tutaj\n            gdzie_sie_koncza_bomby.append((x + 2 * D, zrzucam_tutaj))\n    print(wynik)\n\nF()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s808352054","submission":"def dev(n):\n    return int(n \/ 2)\n\nN = int(input())\nli = list(map(int, input().split()))\nflag = True\nan = 0\nwhile True:\n for i in range(N):\n    if li[i] % 2 != 0:\n      flag = False\n if flag:\n  li = list(map(dev, li))\n  an += 1\n else:\n     break\nprint(an)","label":0}
{"problem_id":"p02646","problem":"Two children are playing tag on a number line. (In the game of tag, the child called \"it\" tries to catch the other child.) The child who is \"it\" is now at coordinate A, and he can travel the distance of V per second.\nThe other child is now at coordinate B, and she can travel the distance of W per second.\nHe can catch her when his coordinate is the same as hers.\nDetermine whether he can catch her within T seconds (including exactly T seconds later).\nWe assume that both children move optimally.","submission_id":"s833264552","submission":"A, V = map(int, input().split())\nB, W = map(int, input().split())\nT = int(input())\n\nlange = abs(B - A)\ns = V - W\n\nres = 0\n\nif s != 0:\n    tmp = lange \/ s\n    if tmp <= T and tmp >= 0:\n        res = 1\n\nif (res == 0):\n    print(\"NO\")\nelse:\n    print(\"YES\")","label":0}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s079903681","submission":"S = str(input())\ni = 0\nerror = 0\n\nwhile i < len(S) and error == 0:\n\n    if i + 5 > len(S):\n        error = -1\n        break\n\n    if S[i: i + 5] == 'dream':\n        i += 5\n        if i + 2 <= len(S):\n            if S[i: i + 2] == 'er':\n                if (i + 2) == len(S):\n                    i += 2\n                elif S[i + 2] != 'a':\n                    i += 2\n    elif S[i: i + 5] == 'erase':\n        i += 5\n        if i + 1 <= len(S):\n            if S[i] == 'r':\n                if (i + 1) == len(S):\n                    i += 1\n                elif S[i + 1] != 'a':\n                    i += 1\n    else:\n        error = -1\n        break\n\nif error == 0:\n    print('YES')\nelse:\n    print('NO')","label":0}
{"problem_id":"p03564","problem":"Square1001 has seen an electric bulletin board displaying the integer 1.\nHe can perform the following operations A and B to change this value:\n\nOperation A: The displayed value is doubled.\nOperation B: The displayed value increases by K.\n\nSquare1001 needs to perform these operations N times in total.\nFind the minimum possible value displayed in the board after N operations.","submission_id":"s195002914","submission":"n = int(input())\nk = int(input())\n\ncnt = 1\ntmp = 0\nfor i in range(n):\n    cnt = min(cnt*2, cnt + k)\nprint(cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s763535350","submission":"import sys\n\nn = int(input())\na = map(int, input().split())\nans = sys.maxsize\nfor an in a:\n  cnt = 0\n  while an % 2 == 0:\n    an \/= 2\n    cnt += 1\n  if cnt < ans:\n    ans = cnt\nprint(ans)","label":0}
{"problem_id":"p03612","problem":"You are given a permutation p_1,p_2,...,p_N consisting of 1,2,..,N.\nYou can perform the following operation any number of times (possibly zero):\nOperation: Swap two adjacent elements in the permutation.\nYou want to have p_i \u2260 i for all 1\u2264i\u2264N.\nFind the minimum required number of operations to achieve this.","submission_id":"s534307627","submission":"n = int(input())\np = list(map(int,input().split()))\ncnt_1 = 0\ncnt_2 = 0\nTF = False\nfor i in range(n):\n    if (i + 1) == p[i]:\n        if TF:\n            TF = False\n            cnt_2 += 1\n            cnt_1 -= 1\n        else:\n            TF = True\n            cnt_1 += 1\n    else:\n        TF = False\nprint(cnt_1 + cnt_2)","label":0}
{"problem_id":"p03724","problem":"Takahashi is not good at problems about trees in programming contests, and Aoki is helping him practice.\nFirst, Takahashi created a tree with N vertices numbered 1 through N, and wrote 0 at each edge.\nThen, Aoki gave him M queries. The i-th of them is as follows:\n\nIncrement the number written at each edge along the path connecting vertices a_i and b_i, by one.\n\nAfter Takahashi executed all of the queries, he told Aoki that, for every edge, the written number became an even number.\nHowever, Aoki forgot to confirm that the graph Takahashi created was actually a tree, and it is possible that Takahashi made a mistake in creating a tree or executing queries.\nDetermine whether there exists a tree that has the property mentioned by Takahashi.","submission_id":"s545074860","submission":"def examB():\n    N, M = LI()\n    cur = [0]*N\n    for i in range(M):\n        a, b = LI()\n        cur[a-1] +=1\n        cur[b-1] +=1\n    ans = \"YES\"\n    for j in cur:\n        if j%2==1:\n            ans = \"NO\"\n            break\n    print(ans)\n\n\nimport sys,copy,bisect,itertools,math\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nmod = 10**9 + 7\ninf = float('inf')\n\nexamB()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s987886855","submission":"import sys\n\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nread = sys.stdin.buffer.read\nsys.setrecursionlimit(10 ** 7)\nINF = float('inf')\n\nN = int(input())\nA = list(map(int, input().split()))\n\n\nans = INF\nfor a in A:\n    cnt = 0\n    while True:\n        q, mod = divmod(a, 2)\n        if mod != 0:\n            break\n        cnt += 1\n        a = q\n    ans = min(ans, cnt)\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s012980422","submission":"n = int(input())\narr = list(map(int, input().split()))\n\nanswer = 0\nwhile True:\n    for index in range(len(arr)):\n        if arr[index] % 2 != 0:\n            print(answer)\n            exit()\n        arr[index] \/\/= 2\n    answer += 1","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s013135216","submission":"import numpy as np\nn = int(input())\na_list = np.array(list(map(int, input().split())))\n\ncounter = 0\nwhile True:\n    if np.sum(a_list % 2) > 0:\n        break\n    counter += 1\n    a_list = a_list \/ 2\nprint(counter)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s852966428","submission":"N=int(input())\nan=list(map(int,input().split()))\nn=0\nwhile(all(a%2==0 for a in an)):\n    an=[a\/\/2 for a in an]\n    n+=1\nprint(n)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s874350289","submission":"N = int(input())\nA = list(map(int,input().split()))\ncnt = 0\nwhile(1):\n  exit = False\n  for i in range(len(A)):\n    if(A[i]%2 == 1): \n      exit = True\n  if(exit == True): break\n  for i in range(len(A)):\n    A[i] \/= 2\n  cnt += 1\nprint(cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s304036552","submission":"n = int(input())\na = [int(s) for s in input().split()]\n\nans = 0\nparity = True\nwhile parity:\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] = a[i] \/ 2\n        else:\n            parity = False\n    if parity:\n        ans += 1 \nprint(ans)","label":0}
{"problem_id":"p03438","problem":"You are given two integer sequences of length N: a_1,a_2,..,a_N and b_1,b_2,..,b_N.\nDetermine if we can repeat the following operation zero or more times so that the sequences a and b become equal.\nOperation: Choose two integers i and j (possibly the same) between 1 and N (inclusive), then perform the following two actions simultaneously:\n\nAdd 2 to a_i.\nAdd 1 to b_j.","submission_id":"s700511361","submission":"n = int(input())\n\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\na_sum = sum(a)\nb_sum = sum(b)\n\nif a_sum > b_sum:\n    print(\"No\")\n    exit(0)\n\nless_a_cnt = 0\nless_b_cnt = 0\n\nfor i in range(n):\n    if a[i] < b[i]:\n        less_a_cnt += int((b[i] - a[i]) \/ 2)\n    else:\n        less_b_cnt += a[i] - b[i]\n\nif less_a_cnt < less_b_cnt:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s298419855","submission":"def main():\n  h,n=map(int,input().split())\n  dp=[10**9]*(h+1)\n  dp[h]=0\n  for i in range(n):\n    a,b=map(int,input().split())\n    for j in range(h,0,-1):\n      nxt=j-a\n      if nxt<0:\n        nxt=0\n      if dp[nxt]>dp[j]+b:\n        dp[nxt]=dp[j]+b\n  print(dp[0])\nmain()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s476171912","submission":"import sys\n\nread=sys.stdin.read\nn, *a=map(int,read().split())\n\nf=1\nc=0\nwhile f:\n  for i,x in enumerate(a):\n    if x%2:\n      f=0\n      break\n    a[i]=x\/\/2\n  else:\n    c+=1\nprint(c)\n","label":0}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s066854821","submission":"import sys\nfrom itertools import permutations\nsys.setrecursionlimit(10 ** 6)\ninput = sys.stdin.readline\n\nN, M, R = [int(x) for x in input().strip().split()]\nr = [int(x) for x in input().strip().split()]\nG = [[float('inf')] * N for _ in range(N)]\nfor m in range(M):\n    a, b, c = [int(x) for x in input().strip().split()]\n    G[a-1][b-1] = c\n    G[b-1][a-1] = c\n\nfor n in range(N):\n    G[n][n] = 0\n\nfor k in range(N):\n    for i in range(N):\n        for j in range(N):\n            G[i][j] = min(G[i][j], G[i][k] + G[k][j])\n\nans = float('inf')\nfor rr in permutations(r):\n    ans_ = 0\n    for i in range(len(rr)-1):\n        ans_ += G[rr[i]-1][rr[i+1]-1]\n    ans = min(ans, ans_)\nprint(ans)    ","label":0}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s579438563","submission":"INF = 10**10\n\nN,M,R = map(int,input().split())\nr = list(map(int,input().split()))\n\ndp = [[INF]*(N+1) for i in range(N+1)]\nfor i in range(N+1):\n    dp[i][i]=0\n\nfor i in range(M):\n    a,b,c=map(int,input().split())\n    dp[a][b]=c\n    dp[b][a]=c\n\nfor k in range(1,N+1):\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            dp[i][j]=min(dp[i][j],dp[i][k]+dp[k][j])\n\nans = INF\nimport itertools\nfor it in itertools.permutations(r):\n    tmpans = 0\n    for i in range(1,R):\n        tmpans+=dp[it[i-1]][it[i]]\n    ans = min(ans,tmpans)\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s413446503","submission":"import sys\nn=int(input())\na = list(map(int,input().split()))\nb=0\nwhile(True):\n  for i in range(n):\n    if(a[i]%2!=0):\n      print(b)\n      sys.exit()\n    a[i]=a[i]\/\/2\n  b+=1\nprint(b)","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s062031641","submission":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\nimport math\nimport bisect\nimport heapq\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165g\n#\n# \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u7cfb\n# int min_y = max(0, i - 2), max_y = min(h - 1, i + 2);\n# int min_x = max(0, j - 2), max_x = min(w - 1, j + 2);\n#\n#\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\n#mod = 998244353\nINF = float('inf')\nfrom sys import stdin\nreadline = stdin.readline\ndef readInts():\n  return list(map(int,readline().split()))\ndef readTuples():\n    return tuple(map(int,readline().split()))\ndef I():\n    return int(readline())\nh,n = readInts()\nA = [readInts() for _ in range(n)]\ndp = [INF] * (h+1)\ndp[h] = 0\nfor idx in range(h,-1,-1):\n    for i in range(n):\n        a,b = A[i]\n        dp[max(0,idx-a)] = min(dp[max(0,idx-a)], dp[idx] + b)\nprint(dp[0])\n","label":0}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s236488646","submission":"\ndef submit():\n    n, x = map(int, input().split())\n\n    L = [0 for _ in range(n + 1)] # \u7dcf\u679a\u6570\n    P = [0 for _ in range(n + 1)] # \u30d1\u30c6\u30a3\u679a\u6570\n    L[0] = 1\n    P[0] = 1\n\n    for i in range(n):\n        L[i + 1] = 3 + 2 * L[i]\n        P[i + 1] = 1 + 2 * P[i]\n\n    def search(l, r):\n        if l == 0:\n            return 1\n        if r == 1:\n            return 0\n\n        r -= 1 # \u30d1\u30f3\u3092\u98df\u3079\u308b\n        if L[l - 1] > r:\n            return search(l - 1, r)\n        if L[l - 1] == r:\n            return P[l - 1]\n        if L[l - 1] + 1 == r:\n            return 1 + P[l - 1]\n\n        r -= L[l - 1] + 1 # \u4e0b\u534a\u5206\u3092\u98df\u3079\u308b\n        if L[l - 1] > r:\n            return search(l - 1, r) + 1 + P[l - 1]\n        if L[l - 1] == r or L[l - 1] + 1 == r:\n            return 1 + 2 * P[l - 1]\n        \n    print(search(n, x))\n\n\nsubmit()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s221218887","submission":"N=int(input())\nA=list(map(int,input().split()))\nans_list = []\n\nfor n in A:\n    temp = n\n    count = 0\n    while temp % 2 == 0:\n        temp \/= 2\n        count = count + 1\n    ans_list.append(count)\n    \nprint(min(ans_list))","label":0}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s899101213","submission":"import sys\nreadline = sys.stdin.readline\nfrom heapq import heapify, heappush, heappop\n\ndef main():\n    N, K = map(int, readline().rstrip().split())\n    V = list(map(int, readline().rstrip().split()))\n    V_rev = V[::-1]\n    res = 0\n    for x in range(min(N, K)+1):\n        for y in range(min(N, K)-x+1):\n            z = K - x - y\n            temp = V[:x] + V_rev[:y]\n            heapify(temp)\n            for _ in range(z):\n                if temp:\n                    m = heappop(temp)\n                    if m >= 0:\n                        heappush(temp, m)\n                        break\n                else:\n                    break\n\n            res = max(res, sum(temp))\n    \n    print(res)\n\n\nif __name__ == '__main__':\n    main()","label":0}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s381955752","submission":"N = int(input())\nA = {}\nfor i in range(N):\n  s = input()\n  if s in A:\n    A[s] += 1\n  else:\n    A[s] = 1\ns_max = max(A.values())\nfor j in sorted(k for k in A if A[k] == s_max):\n  print(j)","label":0}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s309051751","submission":"# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n\ndef gcd(a, b):\n    \"\"\"\u6700\u5927\u516c\u7d04\u6570\"\"\"\n    a, b = (a, b) if a >= b else (b, a)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\n# from decorator import stop_watch\n# \n# \n# @stop_watch\ndef solve(N, A):\n    L = [0] * N\n    L[0] = A[0]\n    for i in range(1, N):\n        L[i] = gcd(A[i], L[i - 1])\n    R = [0] * N\n    R[-1] = A[-1]\n    for i in range(1, N):\n        R[-(i + 1)] = gcd(A[-(i + 1)], R[-i])\n    ans = 0\n    for i in range(N):\n        if i == 0:\n            ans = max(ans, R[i + 1])\n        elif i == N - 1:\n            ans = max(ans, L[i - 1])\n        else:\n            ans = max(ans, gcd(L[i - 1], R[i + 1]))\n    print(ans)\n\n\nif __name__ == '__main__':\n    # S = input()\n    N = int(input())\n    # N, M = map(int, input().split())\n    A = [int(i) for i in input().split()]\n    # B = [int(i) for i in input().split()]\n    # AB = [[int(i) for i in input().split()] for _ in range(N)]\n    solve(N, A)\n\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s033952023","submission":"N = int(input())\nA = list(map(int, input().split()))\ncount = 0\nwhile all(A[i]%2 == 0 for i in range(N)):\n    A = [A[i]\/2 for i in range(N)]\n    count += 1\nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s882731688","submission":"N = int(input())\nAs = list(map(int,input().split()))\ncount = 0\nwhile all(a%2==0 for a in As):\n  As = [a\/2 for a in As]\n  count = count + 1\nprint(count)","label":0}
{"problem_id":"p03254","problem":"There are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he\/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.","submission_id":"s993267671","submission":"n, x = map(int, input().split())\na = sorted(list(map(int, input().split())))\n\ncnt = 0\nflag = False\nfor i in a:\n    if i <= x:\n        x -= i\n        cnt += 1\n        if x == 0:\n            break\n    else:\n        break\nelse:\n    cnt -= 1\nprint(cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s713080214","submission":"n=int(input())\na=list(map(int, input().split()))\nfor i in range(32):\n    x=2**i\n    res=0\n    for j in a:\n        if j%x !=0:\n            res=1\n    if res==1:\n        print(i-1)\n        break\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s801188822","submission":"n = int(input())\na = list(map(int,input().split()))\n\ndef devide(a,c,n):\n    even = True\n    for i in range(n):\n        if a[i] % 2 != 0:\n           even = False\n        else:\n            a[i] = int(a[i] \/ 2)\n    return devide(a,c+1,n) if even else c\nprint(devide(a,0,n))","label":0}
{"problem_id":"p03945","problem":"Two foxes Jiro and Saburo are playing a game called 1D Reversi. This game is played on a board, using black and white stones. On the board, stones are placed in a row, and each player places a new stone to either end of the row. Similarly to the original game of Reversi, when a white stone is placed, all black stones between the new white stone and another white stone, turn into white stones, and vice versa.\nIn the middle of a game, something came up and Saburo has to leave the game. The state of the board at this point is described by a string S. There are |S| (the length of S) stones on the board, and each character in S represents the color of the i-th (1 \u2266 i \u2266 |S|) stone from the left. If the i-th character in S is B, it means that the color of the corresponding stone on the board is black. Similarly, if the i-th character in S is W, it means that the color of the corresponding stone is white.\nJiro wants all stones on the board to be of the same color. For this purpose, he will place new stones on the board according to the rules. Find the minimum number of new stones that he needs to place.","submission_id":"s950061337","submission":"S = input()\n\ns_ = S[0]\n\nans = 0\nfor s in S[1:]:\n    if s != s_:\n        ans += 1\n    s_ = s\n\nprint(ans)","label":0}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s799648449","submission":"s = input()\nS = ''.join(list(reversed(s)))\nN = len(S)\n\ni = 0\nwhile True:\n    l = N - i\n    if l>=5 and (S[i:i+5]=='maerd' or S[i:i+5]=='esare'):\n        i += 5\n    elif l>=6 and S[i:i+6]=='resare':\n        i += 6\n    elif l>=7 and S[i:i+7]=='remaerd':\n        i += 7\n    else:\n        print(\"NO\")\n        exit()\n    if i == N:\n        print('YES')\n        exit()\n","label":0}
{"problem_id":"p03254","problem":"There are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he\/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.","submission_id":"s914456244","submission":"import sys\n\nsys.setrecursionlimit(10 ** 8)\n\ninput = sys.stdin.readline\n\n\ndef main():\n    N, X = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n\n    A.sort()\n    ans = 0\n    for a in A:\n        if X >= a:\n            ans += 1\n            X -= a\n\n    if X != 0 and ans == N:\n        ans -= 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s389806735","submission":"N = int(input())\nans = 0\n\nfor a in range(1,N):\n    ans += N \/\/ a\n    if N%a == 0:\n        ans -= 1\nprint(ans)","label":0}
{"problem_id":"p02733","problem":"We have a chocolate bar partitioned into H horizontal rows and W vertical columns of squares.\nThe square (i, j) at the i-th row from the top and the j-th column from the left is dark if S_{i,j} is 0, and white if S_{i,j} is 1.\nWe will cut the bar some number of times to divide it into some number of blocks. In each cut, we cut the whole bar by a line running along some boundaries of squares from end to end of the bar.\nHow many times do we need to cut the bar so that every block after the cuts has K or less white squares?","submission_id":"s147696777","submission":"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\nfrom collections import deque\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\nmod = 10**9 + 7\n\nDR = [1, -1, 0, 0]\nDC = [0, 0, 1, -1]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef s(): return input()\n\ndef cuts(H):\n    for i in range(1<<H):\n        yield bin(i)[2:].zfill(H)\n\ndef main():\n    H, W, K = LI()\n    S = []\n    for _ in range(H):\n        S.append(s())\n    ans = inf\n    for cut in cuts(H-1):\n        p = sum([1 for x in cut if x == '1'])\n        cnt = p\n        lines = [[0 for _ in range(W)] for __ in range(p+1)]\n        cumr = 0\n        for c in range(W):\n            n_line = 0\n            for r in range(H):\n                if S[r][c] == '1':\n                    cumr += 1\n                if r >= H-1:\n                    continue\n                if cut[r] == '1':\n                    lines[n_line][c] += cumr\n                    n_line += 1\n                    cumr = 0\n            lines[-1][c] = cumr\n            cumr = 0\n\n        ng = False\n        cumsum = [[0 for _ in range(W+1)] for __ in range(p+1)]\n\n        for i in range(p+1):\n            line = lines[i]\n            for j in range(W):\n                cumsum[i][j+1] = line[j] + cumsum[i][j]\n\n        before = 0\n        for j in range(1, W+1):\n            # import pdb\n            # pdb.set_trace()\n            for i in range(p+1):\n                if ng:\n                    break\n                if cumsum[i][j] - cumsum[i][before] > K:\n                    if j - before == 1:\n                        ng = True\n                    cnt += 1\n                    before = j - 1\n                    break\n        if ng:\n            continue\n        ans = min(ans, cnt)\n    print(ans)\nmain()\n\n","label":0}
{"problem_id":"p02760","problem":"We have a bingo card with a 3\\times3 grid. The square at the i-th row from the top and the j-th column from the left contains the number A_{i, j}.\nThe MC will choose N numbers, b_1, b_2, \\cdots, b_N. If our bingo sheet contains some of those numbers, we will mark them on our sheet.\nDetermine whether we will have a bingo when the N numbers are chosen, that is, the sheet will contain three marked numbers in a row, column, or diagonal.","submission_id":"s440151850","submission":"A = [list(map(int, input().split())) for i in range(3)]\nN = int(input())\n\nfor k in range(N):\n    B = int(input())\n    for l in range(3):\n        for m in range(3):\n            if A[l][m] == B:\n                A[l][m] = 0\n\nif (A[0][0] == A[0][1] == A[0][2] == 0) or (A[1][0] == A[1][1] == A[1][2] == 0) or (A[2][0] == A[2][1] == A[2][2] == 0):\n    print (\"Yes\")\nelif (A[0][0] == A[1][0] == A[2][0] == 0) or (A[0][1] == A[1][1] == A[2][1] == 0) or (A[0][2] == A[1][2] == A[2][2] == 0):\n    print (\"Yes\")\nelif (A[0][0] == A[1][1] == A[2][2] == 0) or (A[0][2] == A[1][1] == A[2][0] == 0):\n    print (\"Yes\")\nelse:\n    print (\"No\")","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s121696822","submission":"n = int(input())\na = list(map(int, input().split()))\n\nt = True\nx = -1\n\nwhile t == True:\n  x += 1\n  for i in a:\n    if i%2 == 0:\n      continue\n    else:\n      t = False\n  a = list(map(lambda x:x\/2, a))  \n\n      \nprint(x)","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s809710624","submission":"n,a = map(int,input().split())\nx = list(map(int,input().split()))\n\ndpp = [0]*3000\ndpm = [0]*3000\n\np = []\nm = []\nn0 = 0\n\nfor i in range(n):\n    x1 = x[i] - a\n    if x1 == 0:\n        n0 += 1\n    elif x1 > 0:\n        p.append(x1)\n    else:\n        m.append(-x1)\n\nfor i in p:\n    for j in range(2600,0,-1):\n        if dpp[j] >= 1:\n            dpp[j+i] += dpp[j]\n    dpp[i] += 1\n\nfor i in m:\n    for j in range(2600,0,-1):\n        if dpm[j] >= 1:\n            dpm[j+i] += dpm[j]\n    dpm[i] += 1\n\nans = 0\n\nfor i in range(3000):\n    ans += dpp[i] * dpm[i]\n\nans *= pow(2,n0)\nans += pow(2,n0) - 1\n\nprint(ans)\n","label":0}
{"problem_id":"p02883","problem":"Takahashi will take part in an eating contest. Teams of N members will compete in this contest, and Takahashi's team consists of N players numbered 1 through N from youngest to oldest. The consumption coefficient of Member i is A_i.\nIn the contest, N foods numbered 1 through N will be presented, and the difficulty of Food i is F_i. The details of the contest are as follows:\n\nA team should assign one member to each food, and should not assign the same member to multiple foods.\nIt will take x \\times y seconds for a member to finish the food, where x is the consumption coefficient of the member and y is the difficulty of the dish.\nThe score of a team is the longest time it takes for an individual member to finish the food.\n\nBefore the contest, Takahashi's team decided to do some training. In one set of training, a member can reduce his\/her consumption coefficient by 1, as long as it does not go below 0. However, for financial reasons, the N members can do at most K sets of training in total.\nWhat is the minimum possible score of the team, achieved by choosing the amounts of members' training and allocating the dishes optimally?","submission_id":"s933075887","submission":"import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    n, k = list(map(int, readline().split()))\n    a = list(map(int, readline().split()))\n    f = list(map(int, readline().split()))\n\n    a.sort()\n    f.sort(reverse=True)\n\n    x = [p * q for p, q in zip(a, f)]\n    mx = max(x)\n    ng = -1\n    ok = mx\n    import math\n\n    while abs(ok - ng) > 1:\n        mid = (ng + ok) \/\/ 2\n        rem = k\n        for p, q in zip(a, f):\n            r = math.floor(mid \/ q)\n            h = max(0, p - r)\n            rem -= h\n        if rem >= 0:\n            ok = mid\n        else:\n            ng = mid\n\n    print(ok)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s754383009","submission":"# abc175_b.py\nN = int(input())\nL = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    for j in range(i+1,N):\n        for k in range(j+1,N):\n            if L[i]!=L[j] and L[k]!=L[j] and L[i]!=L[k]:\n                if L[i] + L[j] > L[k] and L[k] + L[j] > L[i] and L[i] + L[k] > L[j]:\n                    ans +=1\n                    # print(L[i] , L[j] , L[k],\"\/\/\/\",i,j,k)\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s474006877","submission":"import sys\ndef input(): return sys.stdin.readline().strip()\n\ndef pow_two(n):\n    ret = 0\n    while n % 2 == 0:\n        n \/\/= 2\n        ret += 1\n    return ret\n\ndef main():\n    n = int(input())\n    A = list(map(int, input().split()))\n    ans = 10**10\n    for a in A: ans = min(ans, pow_two(a))\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s067659510","submission":"n = int(input())\na = list(map(int, input().split(' ')))\nsum = 0\nfor i in range(n):\n    sum += a[i]\nif sum % 2 == 0:\n    print('YES')\nelse:\n    print('NO')\n","label":0}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s544069303","submission":"from bisect import bisect_left, bisect_right\nimport sys\ninput = sys.stdin.readline\n\ndef solve():\n    def makeBIT(numEle):\n        numPow2 = 2 ** (numEle-1).bit_length()\n        data = [0] * (numPow2+1)\n        return data, numPow2\n    def setInit(As):\n        for iB, A in enumerate(As, 1):\n            data[iB] = A\n        for iB in range(1, numPow2):\n            i = iB + (iB & -iB)\n            data[iB] -= data[i]\n    def addValue(iA, A):\n        iB = iA + 1\n        while iB > 0:\n            data[iB] += A\n            iB -= iB & -iB\n    def getValue(iA):\n        iB = iA + 1\n        ans = 0\n        while iB <= numPow2:\n            ans += data[iB]\n            iB += iB & -iB\n        return ans\n\n\n    N, D, A = map(int, input().split())\n    XHs = [tuple(map(int, input().split())) for _ in range(N)]\n\n    XHs.sort()\n    Xs, Hs = [], []\n    for X, H in XHs:\n        Xs.append(X)\n        Hs.append(H)\n\n    data, numPow2 = makeBIT(N)\n    setInit(Hs)\n\n    ans = 0\n    for i in range(N):\n        rest = getValue(i)\n        if rest <= 0: continue\n        pos = Xs[i] + D\n        iR = bisect_right(Xs, pos + D) - 1\n        num = -(-rest \/\/ A)\n        ans += num\n        damage = num*A\n        addValue(iR, -damage)\n\n    print(ans)\n\n\nsolve()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s103116267","submission":"N = int(input())\nA = list(map(int,input().split()))\ncmin = 104\nfor i in range(N):\n    cnt = 1\n    while A[i]%(2**cnt)==0:\n        cnt += 1\n    cmin = min(cmin,cnt-1)\nprint(cmin)","label":0}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s145914123","submission":"import sys\n\n\n# \\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n\n    N,K=map(int,input().split())\n    A=list(map(int,input().split()))\n\n    current = sum(A[:K])\n    ans =(current+K)\/2\n\n    for i in range(1,N-K+1):\n        current = current - A[i-1] + A[i+K-1]\n        ans = max(ans, (current+K)\/2 )\n    print(ans)\n\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03222","problem":"Amidakuji is a traditional method of lottery in Japan.\nTo make an amidakuji, we first draw W parallel vertical lines, and then draw horizontal lines that connect them. The length of each vertical line is H+1 [cm], and the endpoints of the horizontal lines must be at 1, 2, 3, ..., or H [cm] from the top of a vertical line.\nA valid amidakuji is an amidakuji that satisfies the following conditions:\n\nNo two horizontal lines share an endpoint.\nThe two endpoints of each horizontal lines must be at the same height.\nA horizontal line must connect adjacent vertical lines.\n\n\nFind the number of the valid amidakuji that satisfy the following condition, modulo 1\\ 000\\ 000\\ 007: if we trace the path from the top of the leftmost vertical line to the bottom, always following horizontal lines when we encounter them, we reach the bottom of the K-th vertical line from the left.\nFor example, in the following amidakuji, we will reach the bottom of the fourth vertical line from the left.","submission_id":"s390814329","submission":"def isok(n):\n    for i in range(w-2):\n        if n >> i & 1 and n >> (i+1) & 1:\n            return False\n    return True\nmod = 10**9+7\nh,w,k = map(int,input().split())\nh += 1\nif w == 1:\n    print(1)\n    exit()\nif w == 2:\n    print(2**(h-2))\n    exit()\ndp = [[0]*(w+1) for _ in range(h+1)]\ndp[1][1] = 1\namida = [0]*(w)\nnoamida = [0]*(w+1)\nfor i in range(2**(w-1)):\n    if isok(i):\n        for j in range(w-1):\n            amida[j+1] += i >> j & 1\n        for j in range(w-2):\n            if i >> j & 1 == 0 and i >> (j+1) & 1 == 0:\n                noamida[j+2] += 1\n        if i >> 0 & 1 == 0:\n                noamida[1] += 1\n        if i >> (w-2) & 1 == 0:\n                noamida[w] += 1\nfor i in range(1,h):\n    dp[i+1][1] = (dp[i][2]*amida[1]+dp[i][1]*noamida[1]) % mod\n    dp[i+1][w] = (dp[i][w-1]*amida[w-1]+dp[i][w]*noamida[w]) % mod\n    for j in range(2,w):\n        dp[i+1][j] = (dp[i][j-1]*amida[j-1]+dp[i][j+1]*amida[j]+dp[i][j]*noamida[j]) % mod\nprint(dp[h][k])","label":0}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s513301251","submission":"s=input()\nl=list(s)\n#print(l)\nif(l[-1]=='s'):\n\tl.append('e')\n\tl.append('s')\nelse:\n\tl.append('s')\n#print(l)\nstr1=\"\"\n\nfor i in l:\n\tstr1+=i\nprint(str1)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s663726545","submission":"n = int(input())\na = list(map(int,input().split()))\nans = 0\nflag = False\n\nwhile flag == False:\n    for i in range(n):\n        if a[i]%2 == 0:\n            a[i] \/= 2\n        else:\n            flag = True\n            break\n    else:\n        ans += 1\n\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s176619990","submission":"N = int(input())\nA = list(map(int, input().split()))\nans = 0\nwhile all(a%2 == 0 for a in A):\n  A = [a\/2 for a in A]\n  ans += 1\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s207959972","submission":"N = int(input())\nA = list(map(int, input().split()))\n\nimport numpy as np\nA_np = np.array(A)\n\nans = 0\n\nwhile True:\n    A_np = A_np \/ 2\n    if len(np.nonzero(A_np%1)[0]) > 0:\n        break\n    else:\n        ans += 1\n        \nprint(ans)","label":0}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s971331653","submission":"def f(num,N,S):\n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"]\n    if N == num:\n        for i in S:\n          print(i)\n        return\n    else:\n        tmp = []\n        length = len(S)\n        for i in S:\n            ttmp = sorted(list(i))\n            for j in range(alphabet.index(ttmp[-1])+2):\n                tmp.append(i+alphabet[j])\n        f(num+1,N,tmp)\n \nN = int(input())\nf(1,N,[\"a\"])","label":0}
{"problem_id":"p02813","problem":"We have two permutations P and Q of size N (that is, P and Q are both rearrangements of (1,~2,~...,~N)).\nThere are N! possible permutations of size N. Among them, let P and Q be the a-th and b-th lexicographically smallest permutations, respectively. Find |a - b|.","submission_id":"s583300728","submission":"import math\n\nn = int(input())\np = list(map(int,input().split()))\nq = list(map(int,input().split()))\na = 0\nb = 0\n\nfor i in range(0,n,1):\n    a += (p[i]-1)*math.factorial(n-i-1)\n    b += (q[i]-1)*math.factorial(n-i-1)\n    for  j in range(i+1,n,1):\n        if p[j] > p[i]:\n            p[j] -= 1\n        if q[j] > q[i]:\n            q[j] -= 1\n\nprint(abs(a-b))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s174389715","submission":"N  = int(input())\nx = map(int,input().split())\ncount=0\ncheck = 0\nNEW_x=[]\n\ndef roop(N,x):\n    global check\n    global NEW_x\n    for i in x:\n        s = i\/\/2\n        if i%2==0:\n            check +=1\n            \n            NEW_x.append(s)\n\n\n        else:\n            NEW_x.append(s)\n\nroop(N,x)\n\nwhile True:\n  \n    x = NEW_x\n    NEW_x = []\n    if check ==N:\n        check=0\n        count+=1\n        roop(N,x)\n    else:\n        break\n\nprint(count)","label":0}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s917069100","submission":"def num_to_str(n):\n    return chr(97 + n)\n\ndef str_to_num(s):\n    return ord(s) - 97\n\ndef dfs(s,m,n,N,ans):\n    if n == N:\n        ans.append(s)\n        return\n    for i in range(m+2):\n        dfs(s+num_to_str(i),max(m,i),n+1,N,ans)\n\ndef main():\n    N = int(input())\n    ans = []\n    dfs('a',0,1,N,ans)\n    ans.sort()\n    for a in ans:\n        print(a)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p03608","problem":"There are N towns in the State of Atcoder, connected by M bidirectional roads.\nThe i-th road connects Town A_i and B_i and has a length of C_i.\nJoisino is visiting R towns in the state, r_1,r_2,..,r_R (not necessarily in this order).\nShe will fly to the first town she visits, and fly back from the last town she visits, but for the rest of the trip she will have to travel by road.\nIf she visits the towns in the order that minimizes the distance traveled by road, what will that distance be?","submission_id":"s329740342","submission":"\"\"\"ABC073D joisino's travel\n\"\"\"\nfrom itertools import permutations\nN,M,R=map(int, input().split())\nr = list(map(lambda x: int(x)-1, input().split()))\nINF = float(\"inf\")\nD = [[INF]*(N) for _ in range(N)]\nfor _ in range(M):\n    a,b,c=map(int, input().split())\n    D[a-1][b-1]=c\n    D[b-1][a-1]=c\n    \ndef warshall_floyd(adj_mat: list):\n    \"\"\"\n    \u30ef\u30fc\u30b7\u30e3\u30eb\u30d5\u30ed\u30a4\u30c9\n    \u96a3\u63a5\u884c\u5217\u3092\u53d7\u3051\u53d6\u308b(\u96a3\u63a5\u3057\u3066\u3044\u306a\u3044\u30ce\u30fc\u30c9\u306fINF\u3001\u81ea\u8eab\u3078\u306e\u30b3\u30b9\u30c8\u306f0)\n    \u5168\u70b9\u306e\u9593\u306e\u6700\u77ed\u8ddd\u96e2\u3092\u3042\u3089\u308f\u3059\u884c\u5217\u3092\u8fd4\u3059(V * V)\n    O(|V|**3)\n    \u30cd\u30b9\u30c8\u6df1\u304f\u306a\u3089\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\n    \"\"\"\n    V = len(adj_mat)\n    for k in range(V): # \u7d4c\u7531\u70b9\n        for i in range(V): # \u51fa\u767a\u70b9\n            for j in range(V): # \u7d42\u70b9\n                adj_mat[i][j] = min(\n                    adj_mat[i][j],\n                    adj_mat[i][k] + adj_mat[k][j]\n                )\n    return adj_mat\nD = warshall_floyd(D)\nans = INF\nfor tpl in permutations(r, len(r)):\n    tmp = 0\n    for i in range(len(tpl)-1):\n        tmp += D[tpl[i]][tpl[i+1]]\n    ans = min(ans, tmp)\nprint(ans)","label":0}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s998464020","submission":"n,k = map(int,input().split())\na = list(map(int,input().split()))\n\ngen=10**9+7\n\ncount=0\nfor i in range(n):\n  for j in range(i+1,n):\n    if a[i]>a[j]:\n      count+=1\n\nkaburi = 0\nsorta=sorted(a)\nscnt=0\nfor i in range(n-1):\n  if sorta[i]==sorta[i+1]:\n    scnt+=1\n  if sorta[i]!=sorta[i+1]:\n    kaburi+=scnt*(scnt+1)\/\/2\n    scnt=0\nkaburi+=scnt*(scnt+1)\/\/2\n\nprint((k*count+(n*(n-1)\/\/2-kaburi)*k*(k-1)\/\/2)%gen)","label":0}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s960887184","submission":"n, x = map(int, input().split())\na = list(map(int, input().split()))\nans = sum(a)\na = [i if i <= x else x for i in a]\nfor i in range(n-1):\n    if a[i]+a[i+1] > x:\n        a[i+1] = x-a[i]\nprint(ans-sum(a))","label":0}
{"problem_id":"p03137","problem":"We will play a one-player game using a number line and N pieces.\nFirst, we place each of these pieces at some integer coordinate.\nHere, multiple pieces can be placed at the same coordinate.\nOur objective is to visit all of the M coordinates X_1, X_2, ..., X_M with these pieces, by repeating the following move:\nMove: Choose a piece and let x be its coordinate. Put that piece at coordinate x+1 or x-1.\nNote that the coordinates where we initially place the pieces are already regarded as visited.\nFind the minimum number of moves required to achieve the objective.","submission_id":"s915184171","submission":"n, m = map(int, input().split())\nx = list(map(int, input().split()))\nx.sort()\n\nl = []\nfor i in range(-1,m-1):\n    l.append(abs(x[i]- x[i+1]))\n\nl.sort(reverse=True)\nprint(l[0] - sum(l[1:n]))","label":0}
{"problem_id":"p02381","problem":"You have final scores of an examination for n students. Calculate standard deviation of the scores s1, s2 ... sn.","submission_id":"s714783385","submission":"while True:\n    if input()==\"0\":\n        break\n    data = list(map(float,input().split()))\n    ave = sum(data)\/len(data)\n    std_div = (sum([(ave-i)**2 for i in data]) \/len(data))**(1\/2)\n    print(std_div)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s372580720","submission":"N=int(input())\na=[int(x) for x in input().split()]\nb=a\nt=-1\ns=0\nwhile s==0:\n  for i in range(N):\n    if b[i]%2!=0:\n      s=1\n    b[i]=b[i]\/2\n  t=t+1\n    \nprint(t)","label":0}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s993885299","submission":"S=str(input())\nT=str(input())\n\n\nU=[0]*(len(S)-len(T)+1)\nc=[0]*(len(S)-len(T)+1)\nfor j in range(len(S)-len(T)+1):\n    U[j]=S[j:j+len(T)]\n    for i in range(len(T)):\n        if U[j][i]==T[i] :c[j]=c[j]+1\n\nprint(len(T)-max(c))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s718848625","submission":"n = int(input())\na = list(map(int, input().split()))\nc = 0\nwhile True:\n  a = [i\/\/2 for i in a if i%2 == 0]\n  if len(a) < n:\n    break\n  c += 1\nprint(c)","label":0}
{"problem_id":"p03254","problem":"There are N children, numbered 1, 2, ..., N.\nSnuke has decided to distribute x sweets among them.\nHe needs to give out all the x sweets, but some of the children may get zero sweets.\nFor each i (1 \\leq i \\leq N), Child i will be happy if he\/she gets exactly a_i sweets.\nSnuke is trying to maximize the number of happy children by optimally distributing the sweets.\nFind the maximum possible number of happy children.","submission_id":"s412992916","submission":"n, x = map(int, input().split())\nlst = [0] + sorted(list(map(int, input().split())))\nfor i in range(n):\n  lst[i + 1] += lst[i]\nfor i in range(n):\n  if lst[i] <= x < lst[i + 1]:\n    print(i)\n    exit()\nif x == lst[n]:\n  print(n)\nelse:\n  print(n - 1)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s284064991","submission":"n = int(input())\na = map(int, input().split())\n\nans = 0\nisEven = True\n\nwhile isEven:\n  list_tmp = []\n  for an in a:\n    q, mod = divmod(an, 2)\n    if mod ==0:\n      list_tmp.append(q)\n    else:\n      isEven = False\n      break;\n  a = list_tmp\n  ans += 1\n\nprint(ans - 1)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s945635167","submission":"n = input()\nl = [int(x) for x in input().split()]\ncnt = 0\nwhile len([True for x in l if x%2==0]) == len(l):\n  l = [x\/2 for x in l]\n  cnt += 1\nprint(cnt)","label":0}
{"problem_id":"p03450","problem":"There are N people standing on the x-axis.\nLet the coordinate of Person i be x_i.\nFor every i, x_i is an integer between 0 and 10^9 (inclusive).\nIt is possible that more than one person is standing at the same coordinate.\nYou will given M pieces of information regarding the positions of these people.\nThe i-th piece of information has the form (L_i, R_i, D_i).\nThis means that Person R_i is to the right of Person L_i by D_i units of distance, that is, x_{R_i} - x_{L_i} = D_i holds.\nIt turns out that some of these M pieces of information may be incorrect.\nDetermine if there exists a set of values (x_1, x_2, ..., x_N) that is consistent with the given pieces of information.","submission_id":"s591739395","submission":"class UF_weighed:\n    def __init__(self, n):\n        self.n = n\n        self.par = list(range(n+1))\n        self.rank = [0]*(n+1)\n        self.size = [1]*(n+1)\n        self.diff_w = [0]*(n+1)\n\n    def find(self, x):\n        if self.par[x] == x: return x\n        p = self.find(self.par[x])\n        self.diff_w[x] += self.diff_w[self.par[x]]\n        self.par[x] = p\n        return self.par[x]\n\n    def weight(self, x):\n        self.find(x)\n        return self.diff_w[x]\n\n    def diff(self, x, y):\n        if not self.same(x, y): return None\n        return self.weight(y) - self.weight(x)\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def merge(self, x, y, w):\n        w += self.weight(x) - self.weight(y)\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return False\n        if self.rank[x] < self.rank[y]:\n            x, y, w = y, x, -w\n        self.par[y] = x\n        self.size[x] += self.size[y]\n        if self.rank[x] == self.rank[y]:\n            self.rank[x] += 1\n        self.diff_w[y] = w\n        return True\n      \ndef main():\n  n,m = map(int, input().split())\n  uf = UF_weighed(n+1)\n  for _ in range(m):\n    a, b, c = map(int, input().split())\n    if uf.same(a, b) and uf.diff(a, b) != c:\n      return 'No'\n    uf.merge(a, b, c)\n  return 'Yes'\n\nprint(main())\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s445680257","submission":"N = int(input())\nA = list(map(int, input().split()))\n\ncounter = 0\nwhile True:\n  hasOdd = 0\n  for i in range(N):\n    if A[i] % 2 == 1:\n      hasOdd += 1\n\n  if hasOdd > 0:\n    break\n\n  A = [i \/ 2 for i in A]\n  counter += 1\nprint(str(counter))","label":0}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s449888919","submission":"pa = [1]\natu = [1]\n\nfor i in range(50):\n    pa.append(pa[i]*2+1)\n    atu.append(atu[i]*2+3)\n    \ndef f(n,x):\n    if x == 1:\n        if n == 0:\n            return 1\n        else:\n            return 0\n    elif 2 <= x <= atu[n-1]+1:\n        return f(n-1,x-1)\n    elif x == atu[n-1]+2:\n        return pa[n-1]+1\n    elif atu[n-1]+3 <= x <= 2*atu[n-1]+2:\n        return pa[n-1]+f(n-1,x-atu[n-1]-2)+1\n    elif x == 2*atu[n-1]+3:\n        return 2*pa[n-1]+1\n        \nn ,x = map(int,input().split())\nprint(f(n,x))","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s547004736","submission":"import sys\nfrom fractions import gcd\n\ninput = sys.stdin.readline\n\n\ndef lcm(a, b):\n    return (a * b) \/\/ gcd(a, b)\n\n\ndef main():\n    N, M = map(int, input().split())\n    S = input().rstrip()\n    T = input().rstrip()\n\n    L = lcm(N, M)\n    n = L \/\/ N\n    m = L \/\/ M\n\n    ans = L\n    i = 0\n    while i < L \/\/ (n * m):\n        if S[m * i] != T[n * i]:\n            ans = -1\n            break\n        i += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":0}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s420784322","submission":"import sys\n\nN = int(input()); A = list(map(int,input().split()))\n\nif N == 2:\n    print(max(A))\n    sys.exit()\n\ndp = [0,max(A[:3]),A[0]+A[2]]\ntmp1 = dp[:]\ntmp2 = [0,max(A[:2]),0]\nflag1 = False\nflag2 = True if A[0] < A[2] and A[1] < A[2] else False\nflag3 = False\n\nfor i in range(3,N):\n    b = A[i]\n    if i%2 == 0:\n        dp[0] = max(tmp2[0],tmp1[0]+b)\n        flag1 = True if tmp2[0] < tmp1[0]+b else False\n        if flag3:\n            dp[1] = max(tmp2[1],tmp1[1]+b)\n            flag2 = True if tmp2[1] < tmp1[1]+b else False \n        else:\n            dp[1] = max(tmp2[1],tmp2[0]+b,tmp1[1]+b)\n            flag2 = True if tmp2[1] < tmp2[0]+b or tmp2[1] < tmp1[1]+b else False \n        dp[2] += A[i]\n        tmp1 = dp[:]\n    else:\n        if flag1:\n            dp[0] = max(tmp1[1],tmp2[0]+b)\n            flag3 = True if tmp1[1] < tmp2[0]+b else False\n        else:\n            dp[0] = max(tmp1[1],tmp1[0]+b,tmp2[0]+b)\n            flag3 = True if tmp1[1] < tmp1[0]+b or tmp1[1] < tmp2[0]+b else False\n        if flag2:\n            dp[1] = max(tmp1[2],tmp2[1]+b)\n        else:\n            dp[1] = max(tmp1[2],tmp1[1]+b,tmp2[1]+b)\n        tmp2 = dp[:]\n        \nprint (dp[1])","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s511463819","submission":"import sys\nimport math\nimport itertools\nimport collections\nimport heapq\nimport re\nimport numpy as np\nfrom functools import reduce\n\nrr = lambda: sys.stdin.readline().rstrip()\nrs = lambda: sys.stdin.readline().split()\nri = lambda: int(sys.stdin.readline())\nrm = lambda: map(int, sys.stdin.readline().split())\nrl = lambda: list(map(int, sys.stdin.readline().split()))\ninf = float('inf')\nmod = 10**9 + 7\n\nn = ri()\nli = rl()\ncnt = 0\nwhile all([i % 2 == 0 for i in li]):\n    li = [i \/\/ 2 for i in li]\n    cnt += 1\nprint(cnt)\n\n\n\n\n\n\n\n\n\n\n\n\n","label":0}
{"problem_id":"p03417","problem":"There is a grid with infinitely many rows and columns. In this grid, there is a rectangular region with consecutive N rows and M columns, and a card is placed in each square in this region.\nThe front and back sides of these cards can be distinguished, and initially every card faces up.\nWe will perform the following operation once for each square contains a card:\n\nFor each of the following nine squares, flip the card in it if it exists: the target square itself and the eight squares that shares a corner or a side with the target square.\n\nIt can be proved that, whether each card faces up or down after all the operations does not depend on the order the operations are performed.\nFind the number of cards that face down after all the operations.","submission_id":"s699020544","submission":"n,m=map(int,input().split())\nif n>=2 and m>=2:\n    print((m-2)*(n-2))\nelif n==1:\n    if m==1:\n        print(1)\n    else:\n        print(m-2)\nelif m==1:\n    if n==1:\n        print(1)\n    else:\n        print(n-2)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s728054294","submission":"N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(N):\n    ans_sub = 0\n    while A[i]%2 == 0:\n        A[i]\/=2\n        ans_sub += 1\n    \n    if i == 0:\n        ans = ans_sub\n    else:\n        ans = min(ans_sub, ans)\n\nprint(ans)","label":0}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s010340052","submission":"N, x = map(int,input().split())\na = list(map(int,input().split()))\n\nans = 0\nfor k in range(1,N):\n    if a[k-1] + a[k] > x:\n        t = (a[k-1] + a[k]) - x\n        ans += t\n        if a[k] >= t:\n            a[k] -= t\n        else:\n            a[k-1] -= t-a[k]\n            a[k] = 0\nprint(ans)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s798052276","submission":"N = int(input())\nA = list(map(int, input().split()))\n\n# \u64cd\u4f5c\u56de\u6570\ncounter = 0\n\n# \u64cd\u4f5c\u304c\u884c\u3048\u306a\u304f\u306a\u308b\u307e\u3067\u64cd\u4f5c\u3092\u884c\u3046\nwhile True:\n    # \/\/ \u64cd\u4f5c\u304c\u884c\u3048\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    can_do = True\n    for i in range(N):\n        if A[i] % 2 == 1:\n            can_do = False\n\n    # \u64cd\u4f5c\u3092\u884c\u3048\u306a\u3044\u306a\u3089\u3070\u3001\u30eb\u30fc\u30d7\u3092\u6253\u3061\u5207\u308b\n    if not can_do:\n        break\n\n    # \u64cd\u4f5c\u3092\u884c\u3048\u308b\u306a\u3089\u3070\u3001\u64cd\u4f5c\u3092\u884c\u3046\n    for i in range(N):\n        A[i] \/\/= 2\n\n    # \u64cd\u4f5c\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\n    counter += 1\n\nprint(counter)","label":0}
{"problem_id":"p03837","problem":"You are given an undirected connected weighted graph with N vertices and M edges that contains neither self-loops nor double edges.\nThe i-th (1\u2264i\u2264M) edge connects vertex a_i and vertex b_i with a distance of c_i.\nHere, a self-loop is an edge where a_i = b_i (1\u2264i\u2264M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1\u2264i<j\u2264M).\nA connected graph is a graph where there is a path between every pair of different vertices.\nFind the number of the edges that are not contained in any shortest path between any pair of different vertices.","submission_id":"s006373485","submission":"#!\/usr\/bin\/env python3\nimport sys\n\ndef solve(N: int, M: int, a: \"List[int]\", b: \"List[int]\", c: \"List[int]\"):\n    import numpy as np    \n    from scipy.sparse import csr_matrix    \n    from scipy.sparse.csgraph import floyd_warshall\n    omat = csr_matrix((c, (a, b)), shape=(N+1, N+1), dtype=np.int32)\n    smat = floyd_warshall(omat, directed=False)\n    return ((smat-omat) < 0).sum()\n\n\n# Generated by 1.1.7.1 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    M = int(next(tokens))  # type: int\n    a = [int()] * (M)  # type: \"List[int]\"\n    b = [int()] * (M)  # type: \"List[int]\"\n    c = [int()] * (M)  # type: \"List[int]\"\n    for i in range(M):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n        c[i] = int(next(tokens))\n    print(solve(N, M, a, b, c))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    #test()\n    main()\n","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s425772752","submission":"from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nimport math\nimport bisect\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor\nfrom operator import mul\nfrom functools import reduce\n\n\nINF = float('inf')\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS(): return sys.stdin.readline().split()\ndef S(): return sys.stdin.readline().strip()\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 1000000007\n\n\nn, m = LI()\ns = LI()\nt = LI()\ndp = [[1] * (m + 1) for _ in range(n + 1)]\n\n\nfor i in range(n):\n    for j in range(m):\n        if s[i] == t[j]:\n            dp[i + 1][j + 1] = (dp[i + 1][j] + dp[i][j + 1]) % mod\n        else:\n            dp[i + 1][j + 1] = (dp[i][j + 1] + dp[i + 1][j] - dp[i][j]) % mod\n\n\n\nprint(dp[n][m])","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s635287629","submission":"n,*x=map(int,open(0).read().split())\ny=[x[0]-i for i in x]\nm=n*max(x)\ndp=[[0]*(m*2+1) for _ in range(n+1)]\ndp[0][0]=1\nfor i in range(1,n+1):\n\tfor s in range(-m,m):\n\t\tdp[i][s]=dp[i-1][s]+dp[i-1][s-y[i]]\nprint(dp[n][0]-1)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s237995337","submission":"n=int(input())\na=[int(i)for i in input().split()]\nd=lambda x:x\/2\n\ndef devide(x,lst):\n    global d\n    for i in lst:\n        if i%2 ==1:\n            return x\n    return devide(x+1,list(map(d,lst)))\n\nprint(devide(0,a))","label":0}
{"problem_id":"p02571","problem":"Given are two strings S and T.\nLet us change some of the characters in S so that T will be a substring of S.\nAt least how many characters do we need to change?\nHere, a substring is a consecutive subsequence. For example, xxx is a substring of yxxxy, but not a substring of xxyxx.","submission_id":"s495400940","submission":"S = list(str(input()))\nT = list(str(input()))\ns = 0\nt = 0\nlen_s = len(S)\nlen_t = len(T)\ni = 0\nans = []\n\nwhile i < len_s-len_t+1:\n    cnt = 0\n    #print(S[i:i+len_t])\n    for ss, tt in zip(S[i:i+len_t], T):\n        #print(ss,tt)\n        if ss != tt:\n            cnt +=1\n    ans.append(cnt)\n    i += 1\n\n#print(ans)\nprint(min(ans))","label":0}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s769773718","submission":"N, X = map(int, input().split())\ndim, ans = [0] * 51, [0] * 51\ndim[0], ans[0] = 1, 1\nfor i in range(1, 51):\n    dim[i] = 2 * dim[i - 1] + 3\n    ans[i] = 2 ** (i + 1) - 1\ndef paty(n, x):\n    if n == 0: return x\n    elif x == 0: return 0\n    else:\n        if x == dim[n]: return ans[n]\n        elif x == dim[n - 1] + 2: return ans[n - 1] + 1\n        elif x <= dim[n - 1] + 1: return paty(n - 1, x - 1)\n        else: return ans[n - 1] + 1 + paty(n - 1, x - (dim[n - 1] + 2))\nprint(paty(N, X))","label":0}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s087115514","submission":"n = int(input())\nA = list(map(int,input().split()))\nA_g = [i for i in A if i % 2 == 0]\nA_k = [i for i in A if i % 2 == 1]\n\nif len(A_k) % 2 == 1:\n    print('NO')\nelse:\n    print('YES')","label":0}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s840459593","submission":"N,K=map(int,input().split())\nv=list(map(int,input().split()))\nans=0\n\nfor i in range(min(N,K)+1): #i\u500b\u306e\u5b9d\u77f3\u3092\u5f97\u308b\n    for a in range(i+1): #\u5de6\u304b\u3089a\u500b\u306e\u5b9d\u77f3\u3092\u5f97\u308b\n        b=i-a #\u53f3\u304b\u3089b\u500b\u306e\u5b9d\u77f3\u3092\u5f97\u308b\n        val=sorted(v[:a]+v[N-b:]) #\u5b9d\u77f3\u306e\u4fa1\u5024\u306e\u5408\u8a08\n        s=sum(val)\n#        print(val)\n        for j in range(0,min(K-i,len(val))): #j\u500b\u306e\u5b9d\u77f3\u3092\u6368\u3066\u308b\u3001\u4e0a\u9650\u306fk-i\u304b\u5f97\u305f\u5b9d\u77f3\u306e\u500b\u6570i\n            if j<len(val):\n#                print(\"#\",a,b,min(K-i,len(val)),val)\n                if val[j]<0: #\u8ca0\u306e\u5b9d\u77f3\u3092\u6368\u3066\u308b\n                    s-=val[j]\n            else:\n                break\n#        print(a,b,min(K-i,len(val)),val,sum(val))\n        ans=max(ans,s)\nprint(ans)\n","label":0}
