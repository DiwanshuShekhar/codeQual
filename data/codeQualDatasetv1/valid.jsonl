{"problem_id":"p03433","problem":"E869120 has A 1-yen coins and infinitely many 500-yen coins.\nDetermine if he can pay exactly N yen using only these coins.","submission_id":"s616482438","submission":"def resolve():\n  n = int(input())\n  a = int(input())\n  if n % 500 <= a:\n    print('Yes')\n  else:\n    print(\"No\")\n\n  return\n\nif __name__ == \"__main__\":\n  resolve()\n","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s536634646","submission":"s = input()\na = 's'\nif s[-1] == 's':\n    a = 'es'\ns = s + a\nprint(s)","label":2}
{"problem_id":"p03029","problem":"We have A apples and P pieces of apple.\nWe can cut an apple into three pieces of apple, and make one apple pie by simmering two pieces of apple in a pan.\nFind the maximum number of apple pies we can make with what we have now.","submission_id":"s817311739","submission":"def main():\n    a, p = map(int, input().split())\n    ap = a * 3 + p \n    pp = ap \/\/ 2\n    print(pp)\n    \nif __name__ == '__main__':\n    main()","label":2}
{"problem_id":"p02607","problem":"We have N squares assigned the numbers 1,2,3,\\ldots,N. Each square has an integer written on it, and the integer written on Square i is a_i.\nHow many squares i satisfy both of the following conditions?\n\nThe assigned number, i, is odd.\nThe written integer is odd.","submission_id":"s914268756","submission":"N,*A=map(int,open(0).read().split());print(len([i for i in A[::2]if i%2]))","label":2}
{"problem_id":"p02263","problem":"Reverse Polish notation is a notation where every operator follows all of its operands. For example, an expression (1+2)*(5+4) in the conventional Polish notation can be represented as 1 2 + 5 4 + * in the Reverse Polish notation. One of advantages of the Reverse Polish notation is that it is parenthesis-free.","submission_id":"s128892410","submission":"import sys\n\ndef isEmpty(S):\n  if len(S) == 0:\n    return True\n  \ndef isFull(S):\n  if len(S) >= 101:\n    return True\n\ndef push(x):\n  if isFull(S):\n    print 'Error'\n  S.append(x)\n  \ndef pop(top):\n  if isEmpty(S):\n    print 'error'\n  k = S[top]\n  S.pop()\n  return k\n\nS = []\ntop = -1\n\nx = sys.stdin.readline().strip()\nx_list = x.split(\" \")\n\nfor i in range(0, len(x_list)):\n  if x_list[i] == '*':\n    a = int(pop(top))\n    top -= 1\n    b = int(pop(top))\n    top -= 1\n    push(a * b)\n    top += 1\n    \n  elif x_list[i] == '+':\n    a = int(pop(top))\n    top -= 1\n    b = int(pop(top))\n    top -= 1\n    push(a + b)\n    top += 1\n    \n  elif x_list[i] == '-':\n    a = int(pop(top))\n    top -= 1\n    b = int(pop(top))\n    top -= 1\n    push(b - a)\n    top += 1\n    \n  else:\n    push(x_list[i])\n    top += 1\n    \na = int(pop(top))\nprint a","label":2}
{"problem_id":"p03665","problem":"There are N bags of biscuits. The i-th bag contains A_i biscuits.\nTakaki will select some of these bags and eat all of the biscuits inside.\nHere, it is also possible to select all or none of the bags.\nHe would like to select bags so that the total number of biscuits inside is congruent to P modulo 2.\nHow many such ways to select bags there are?","submission_id":"s494348530","submission":"# AGC017 A Biscuits\n\nn, p = map(int, input().split())\na_list = [int(x)%2 for x in input().split()]\n\ndp = [[0] * 2 for x in range(n+1)]\nif a_list[0] == 0:\n    dp[0][0] = 1\nelse:\n    dp[0][1] = 1\n\nfor i in range(n):\n    _a = a_list[i]\n    if _a == 0:\n        dp[i+1][0] = dp[i][0]*2\n        dp[i+1][1] = dp[i][1]*2\n    else:\n        dp[i+1][0] = dp[i][1]+dp[i][0]\n        dp[i+1][1] = dp[i][1]+dp[i][0]\n        \nprint(dp[n][p])        ","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s448555047","submission":"def main():\n    s = input()\n    ans = \"2018\" + s[4:]\n    print(ans)\n\nif __name__ == \"__main__\":\n    main()","label":2}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s178568804","submission":"import sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\n\ndef dfs(N):\n    alphabet = \"abcdefghij\"\n    stack = deque([\"a\"])\n    while stack:\n        s = stack.pop()\n        if len(s) == N:\n            print(s)\n            continue\n        suffixes = []\n        for al in alphabet:\n            suffixes.append(al)\n            if al not in s:\n                break\n        for suffix in reversed(suffixes):\n            stack.append(\"\".join((s, suffix)))\n\n\ndef main():\n    N = int(input())\n\n    dfs(N)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p02255","problem":"Write a program of the Insertion Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:","submission_id":"s372692622","submission":"#!\/usr\/bin\/env python\n# encoding: utf-8\n\nfrom __future__ import print_function\n\n\nclass Solution:\n    \"\"\"\n    @param prices: Given an integer array\n    @return: Maximum profit\n    \"\"\"\n\n    @staticmethod\n    def insertion_sort():\n        # write your code here\n        array_length = int(input())\n        unsorted_array = [int(x) for x in input().split()]\n\n        for i in range(array_length):\n            v = unsorted_array[i]\n            j = i - 1\n            while j >= 0 and unsorted_array[j] > v:\n                unsorted_array[j + 1] = unsorted_array[j]\n                j -= 1\n            unsorted_array[j + 1] = v\n            print(\" \".join(map(str, unsorted_array)))\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    solution.insertion_sort()","label":2}
{"problem_id":"p03697","problem":"You are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.","submission_id":"s671887096","submission":"import sys\nimport itertools\nsys.setrecursionlimit(1000000000)\nfrom heapq import heapify,heappop,heappush,heappushpop\nimport math\nimport collections\nMOD = 10**9 + 7\n\na,b = map(int,input().split())\nif a+b>=10:\n    print(\"error\")\nelse:\n    print(a+b)","label":2}
{"problem_id":"p03294","problem":"You are given N positive integers a_1, a_2, ..., a_N.\nFor a non-negative integer m, let f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) + ... + (m\\ mod\\ a_N).\nHere, X\\ mod\\ Y denotes the remainder of the division of X by Y.\nFind the maximum value of f.","submission_id":"s324190919","submission":"import sys\nimport numpy as np\ninput = sys.stdin.readline\n\n\ndef log(*args):\n    print(*args, file=sys.stderr)\n\n\ndef main():\n    np.set_printoptions(threshold=20)\n    N = int(input())\n    a = list(map(int, input().rstrip().split()))\n    ans = 0\n    for v in a:\n        ans += v - 1\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p03524","problem":"Snuke has a string S consisting of three kinds of letters: a, b and c.\nHe has a phobia for palindromes, and wants to permute the characters in S so that S will not contain a palindrome of length 2 or more as a substring. Determine whether this is possible.","submission_id":"s684955282","submission":"\ndef myAnswer(S:str)-> str:\n   #len(S)\u304c2\u306e\u6642\u7a2e\u985e\u6570\u304c\uff11\u4ee5\u5916\u306a\u3089OK\n   dic = {\"a\":0,\"b\":0,\"c\":0}\n   for s in S:\n      dic[s]+= 1\n   # print(dic)\n   dic2 = sorted(dic.values(),reverse = True)\n   sub = dic2[0] - dic2[1] + dic2[1] - dic2[2]\n   # print(dic2)\n   if(sub >=2):\n      return \"NO\"\n   else:\n      return \"YES\"\ndef modelAnswer():\n   return\ndef main():\n   S = (input())\n   print(myAnswer(S))\nif __name__ == '__main__':\n   main()\n\n\n","label":2}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s524611392","submission":"n = int(input())\nlis = list(map(int,input().split()))\nlis.sort()\nS = 0\nfor i in range(n):\n    S += lis[2*i]\nprint(S)\n","label":2}
{"problem_id":"p02863","problem":"Takahashi is at an all-you-can-eat restaurant.\nThe restaurant offers N kinds of dishes. It takes A_i minutes to eat the i-th dish, whose deliciousness is B_i.\nThe restaurant has the following rules:\n\nYou can only order one dish at a time. The dish ordered will be immediately served and ready to eat.\nYou cannot order the same kind of dish more than once.\nUntil you finish eating the dish already served, you cannot order a new dish.\nAfter T-0.5 minutes from the first order, you can no longer place a new order, but you can continue eating the dish already served.\n\nLet Takahashi's happiness be the sum of the deliciousness of the dishes he eats in this restaurant.\nWhat is the maximum possible happiness achieved by making optimal choices?","submission_id":"s695037808","submission":"import numpy as np\nn,t = map(int,input().split())\nl = [list(map(int,input().split())) for i in range(n)]\nl.sort()\ndp = np.array([0]*t)\nans = 0\nfor a,b in l:\n    ans = max(ans,dp[-1]+b)\n    dp[a:] = np.maximum(dp[a:],dp[:-a]+b)\n    \n    \nprint(max(ans,dp[-1]))","label":2}
{"problem_id":"p02913","problem":"Given is a string S of length N.\nFind the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping.\nMore formally, find the maximum positive integer len such that there exist integers l_1 and l_2 ( 1 \\leq l_1, l_2 \\leq N - len + 1 ) that satisfy the following:\n\n\nl_1 + len \\leq l_2\n\n\nS[l_1+i] = S[l_2+i] (i = 0, 1, ..., len - 1)\n\n\nIf there is no such integer len, print 0.","submission_id":"s989655700","submission":"def z_algorithm(s):\n    res = [0 for _ in range(len(s))]\n    res[0] = len(s)\n    i, j = 1, 0\n    while i < len(s):\n        while i + j < len(s) and s[j] == s[i + j]:\n            j += 1\n        res[i] = j\n        if j == 0:\n            i += 1\n            continue\n        k = 1\n        while k < j and k + res[k] < j:\n            res[i + k] = res[k]\n            k += 1\n        i += k\n        j -= k\n    return res\n\nN = int(input())\nS = input()\n\nres = 0\n\nfor i in range(N):\n    z = z_algorithm(S[i:])\n    for j in range(N - i):\n        res = max(res, min(j, z[j]))\n\nprint(res)","label":2}
{"problem_id":"p02269","problem":"Your task is to write a program of a simple dictionary which implements the following instructions:","submission_id":"s149133134","submission":"import sys\n\ndict = {}\nn = int(input())\nl = []\nline = map(lambda x:x.split(), sys.stdin.readlines())\ns = \"\"\nfor (c,arg) in line:\n    if c == \"insert\":\n        dict[arg] = 0\n    elif c == \"find\":\n        if arg in dict:\n            s += \"yes\\n\"\n        else:\n            s += \"no\\n\"\nprint(s,end=\"\")","label":2}
{"problem_id":"p02314","problem":"Find the minimum number of coins to make change for n cents using coins of denominations d1, d2,.., dm. The coins can be used any number of times.","submission_id":"s666119792","submission":"W,N = map(int,input().split())\n \ntable = [10000000]*(W+1)\n \ntable[0] = 0\n \ncoin_list = list(map(int,input().split()))\n \nfor coin in coin_list:\n    for i in range(coin,W+1):\n        table[i] = min(table[i],table[i-coin]+1)\n \n \nprint(\"%d\"%(table[W]))\n","label":2}
{"problem_id":"p02722","problem":"Given is a positive integer N.\nWe will choose an integer K between 2 and N (inclusive), then we will repeat the operation below until N becomes less than K.\n\nOperation: if K divides N, replace N with N\/K; otherwise, replace N with N-K.\n\nIn how many choices of K will N become 1 in the end?","submission_id":"s115456231","submission":"N = int(input())\nimport math\n\nans = []\n\nfor i in range(1,round((N-1)**0.5)+1):\n  if (N-1)%i == 0:\n    ans.append(i)\n    if (N-1)\/\/i != i:\n      ans.append((N-1)\/\/i)\n\nans.remove(1)\nans.append(N)\nfor i in range(2,round(N**0.5)+1):\n  if N%i == 0:\n    n = N\n    while n%i==0:\n      n\/\/=i\n    if n%i==1:\n      ans.append(i)\n\nprint(len(ans))\n","label":2}
{"problem_id":"p03434","problem":"We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he\/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.","submission_id":"s035975304","submission":"n = int(input())\na = sorted((map(int, input().split())))\na.reverse()\nprint(sum(a[0::2]) - sum(a[1::2]))","label":2}
{"problem_id":"p02823","problem":"2N players are running a competitive table tennis training on N tables numbered from 1 to N.\nThe training consists of rounds.\nIn each round, the players form N pairs, one pair per table.\nIn each pair, competitors play a match against each other.\nAs a result, one of them wins and the other one loses.\nThe winner of the match on table X plays on table X-1 in the next round,\nexcept for the winner of the match on table 1 who stays at table 1.\nSimilarly, the loser of the match on table X plays on table X+1 in the next round,\nexcept for the loser of the match on table N who stays at table N.\nTwo friends are playing their first round matches on distinct tables A and B.\nLet's assume that the friends are strong enough to win or lose any match at will.\nWhat is the smallest number of rounds after which the friends can get to play a match against each other?","submission_id":"s825936950","submission":"n,a,b = map(int,input().split())\n\nd = abs(b-a)\nif(d % 2 == 0):\n    print(d\/\/2)\nelse:\n    c = min(a-1,n-b)\n    c += 1\n    d = abs(b-a-1)\n    print(c + d \/\/ 2)","label":2}
{"problem_id":"p02903","problem":"We have a square grid with H rows and W columns.\nSnuke wants to write 0 or 1 in each of the squares.\nHere, all of the following conditions have to be satisfied:\n\nFor every row, the smaller of the following is A: the number of 0s contained in the row, and the number of 1s contained in the row. (If these two numbers are equal, \u201cthe smaller\u201d should be read as \u201ceither\u201d.)\nFor every column, the smaller of the following is B: the number of 0s contained in the column, and the number of 1s contained in the column.\n\nDetermine if these conditions can be satisfied by writing 0 or 1 in each of the squares. If the answer is yes, show one way to fill the squares so that the conditions are satisfied.","submission_id":"s837916504","submission":"h, w, a, b = map(int, input().split())\n\nfor i in range(b):\n    ans = '0'*a + '1'*(w-a)\n    print(ans)\nfor i in range(h-b):\n    ans = '1'*a + '0'*(w-a)\n    print(ans)","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s777087631","submission":"# This code is generated by [Atcoder_base64](https:\/\/github.com\/kyomukyomupurin\/AtCoder_base64)\nimport base64\nimport subprocess\nimport zlib\n\n\nexe_bin = \"c%1E9eQ+Da6<>Wgb`nQc5{D>BLqu?j1NdUaA8{Zql5II>;siIAgZW4nSvp(S$dZvx!46CtCXhiBLOo0eLZLGrm@;KL(}wA^!+$jxLdy)(&`u#!K9ZJ?N>IQp6w&}z-`?#?cdI+ThT$)7CVuyR_ukvLZ};}R@1B1Y?CrMOY=|`n`W_-&W3|TnDL&Ou6alOaErg#JqP1uN@J^i^PtVzmw5r&Trq^cIc%FU-8L3T2E0A@2q{c`Q@)q@oul}{vzqMWiJx%-dR~Yr|RBw>#4N`eV-BgcJHa;i)AEG!<yO5DODeZexiIVHnOEjLRy~s$J-uFRo0s8XIP3dmhpH*C@slSY}dDs+}hgzFA#iI>zIguG}7;kHBXl)kKNnx|<lbgzJ-!-7hllivme6FP!x&QhVfwzA8z=sPq6;8bLn)lVYTd%%hlE^MYrFkO}wt?m{YNPgeb!Ym%N@lXGJwf&P<^qlNCir=qx%_~I9h==8f80VoZ(;v^3wdlI-)@2b&BD$)#8$GgowBgA)?!?43p-a@;15{%GXVWAMXQkCt7*CEf|^7ce$z!7?qLfJ)>&GKMlQRItgTjr@yKX0fzwJjrC^M3PiQBON-1eXPAgI>w6imwOh}>dP+ZdPncum-Uul*S(Rfd!U-9`Ov2Y42sj#f1dm_Q$Zory`!f82zlW8R-g-3frIMj%P{jFG4ZHmYVxY*UNw8_ad22rWGCm}0czTg4Cqw&52+-+Y=dLj|Qx5!EiT#w4h;1C(f_&6SuQt4zO9G8^|e4tS^?`y@ZV=O1qQcC&CZuafyZ^CgiA3HT4Vf>L~Mp3U)X*2u%VXhO|*vS^W8;ozkI5Ix&^Z7PwLLeh2Mtb_2aeoUA`EW2uCU7JIcgXzt5FSX}A}6AFx0KF|O5|pQO)Si5WIv9?_T%BO97kX(E<v23gD?&&(zvWpW>_WxI|%cLi9THnqhXkp?VX*tNoYjddwV)M@n)g9c(qw*L7jtxfsP*R6Ph%5a1ex>h0Q(#yH(GTC1{78%Ax+W!wysd`;i@0BC^*zkapi*+}mvM?<rg9dFlJ^#9|`3skndI(HVNb5&qZ8@)EKmZn0}vX0^PK?2Lh;yi?r+*?#?(U+;%ER3+L;<!?TBzn$!mgOtzyXrrCHAx9{$Y`nLMc$i`DH@dI0_f#W&uZSFu==;Bq!)Ga8<u&4rKebMy3s7mlC+)Njuh!vbb+}81=X7|D4xiQGZXJG3hcDIPZt53_;bI-m_8;=P*Y8to{~`Et9e#+~uSBJHAZd5$aEA_`)ZtDYeq4v^e~+2c;rjRZFLZdN4nLv8t91AiI((rHpVr}vbod{1_!1p19{yLAc(me~6<#FXIjz_Wr^LfgSIwY8%M}0>Hf)2RHS7FvMfey|$)7Di+pwANBt-dBDt{^A$x_HqtNePxlThVPsQhZelMv;nRDK!ZNoewuD!+*EBqaGmDsLw|aW_Av^5<)TCn3n+r1JkEJQ;evPvzeRet43NYoOm(fU&iS+1I1uQRjwwGS+NYUA=EQ*9hX`u}-&mtUY)Ej63_9_-w_xm0EzrXS?duK#N&t-N~*xH_DOz#iOA*2vl<&D9u7ohi<!|kXEkCb*Z-6Q+A^8Ozy7`5b;<`L}i~6v+w6FCIUcTo+C!K)rp5^+~U?VN<}UYh;Ldv+FMs26`QJ67c-k6{B1Yvoyom3ryBN9!?$UM7nTe^2LkW>Jog*D-Rv`(>3in1PG1B%T(ho==(eZGSYf(zCsdX8zb^;=*owDR(h^edK3$dXAUc!2cYCrg>=U#95D&jG+ZXCRR&h}EV2MK|?GJ%eVZ{;9{gByz9GC&|SjA(+;MQ|u_Dy9KEUoL8YfEd%-on{op=RA3YMA%VkX2RULH}mWksqjLHqL>*_~e{J%+88W=B^TLC&d@$6b~4@h#IUW2CeKJYQG)Uj~dVRKP`i+0pd?J4EsEAx#vGC6mlXA;bg^iAZH`$hlt(>Gg`ce_}=_*fyFPs7&J=eCj-|8_Vi?53Je4wHXB~6QHS2}7SR4c_OqVsN4*>0RG+OUKXc^n{}cj#=evs6_cAlkn?2u~{irMZexOkM3e25N-1=(fZ88Bj><!!)*c;dvz%!Gj4nLTo&#L-#YVQ{*4Rnp;%3iuR3_>@@$u+n-4b%g)8m6lr=4u<zL7?Obj=`u-104rC2zU<Y6y5A<>GNYdxEtBV-L^H=l~t3rN;kpD87&7kFVpQG=JE*DQTZo6DHKi+0hhbm<+-|M@hw${&{eCiytJuqJ<}&=BR}}A-`~ide<S?A3w&n#XYq`9u&-C`t@6RGOTB0f>+^D?_3H#%i-31N2u#4`K4K5JJck|Ku0H#37r8uu1YA{t#mED<Nu1sQd4U+-;d1YDX<iVYULi4r{v`r*xZFRscep(FID#(kF=vOX{_YCV)p%rq=xRG$xzpuOx!MA*#(=B7!{r4zknaFnWE^$iiy!Rh-;;%ct!51jY{!GPcWvlS`{$i?=i7XnZ}V-w&A0hB-{#wVn{V@NzI}U*<xg2sljTSC-z)X>DVvc$V>75D4^7T7vrp5DRg`D>+clJDIndRVvV1K&6SK4Pf9DEGLXXqKCOcP7(c~n{IkNA3EJt`d<yr33L+J`+Y%KQ~qxnR3rk$mf<pWp_b0wwq3yt_}rP1#;8XuO+Wc^==jB=k8wDH*}G)MV9YOg?f=I1Qs*VFs|qr5&>`%O0Xy_j#^G|+n}9j5dErAH{ekJ3je{T-zzDSc6&)cqQb<?mVB-r0GDw|-zKlTb3=EkcXX*wB<wIo}U`Z9-%7Mh*QkwjD4lZ6;r8$@i3yDegduDef$;Un5>oT(?GiL2-Q>@yg=78}X{*dNJY)i|f*eFDkBIBfhx!92@a!)M$z?L1#^I7n(K2Yl{1V5qG0grufog{eTf)hU#5r_;NH^V}{oj_a7s^qPXuE@e54Xy#t<pwoe#wc)Go2c<Fnw5no+~k?q2X{$1d4@-4?szA({^R-pJLs?I7jvEEzMC#}`OPJr6EsoIElQhbWT_fUM6!{fByajxH6)$8(jK1}U2a`X5rRla;)to(mom0yPLHkn^D`Ipt7<?H7?)lT{ReyskiE%U$1rs2GwYiz_$`FilF-$*^k!_E612l=jAzE0ZIx`NXBXOI1Mi#mq`HuE}=doARN>@wZ+xQI^JqZab-5r6ESvVHXvz%K%veV1hKFPoFtDSxh4TGV6sEb!|cnxCwGi{<2l7V;0N^5y$g*sl4{$A8qq&T|%cyTiQRBjnKLm!C(6I`6B{q4h>Q?9lKse;nrh-b>@qN8>3`{9z0E8Haft%NYy#kE#7>YM;G+DxKzaENh+ScD6am+HxU3wZncd+v_y<CvJfsv9ON<xG$bbh2yw8nHm)$V`B(!@4coY(2H?8GlYAzx(QMT(%XiyoRkx?f+8s;tz?FWg$ODY*I;E7M@SJ(8etqw;*ofA2<%3cWGaornQ;_Jj*i78MT!brTDP{D3z6at8HZD;@C23;N@@ZPr^2HWj%G$jCqPBVVd9EG6yxsQft^7d+|@;DfAIEQ12`yBQ0&@`aMyLa0y}#;;hsS`Y6R4RkzyRK>F(|ihHxm*(HjJ-QZ%fD5$?H0t<*{2Oj?S5aXF9QuP+)g)~V2Yv<OA3YcXP9zaWY4H=0i3SQsoxsOwrGB@GMabw;|X8r~IBzr>q0*5;Hn$i2|cPBtUoWc8B41!3#AP^x6?akH;fCsh_@SR!l{;h}VzU7Oci@!D$9QY4*Gm!xSOnBT7}Rr=f-H$yoUbVTc)be)g~u2{Ba>Po48ieC!5%7fhsi+4nc1^aeHOpEa>3hqpc<&54SAw4mwgol7CDUHV1m7D;RV@OCO6-j`=G$`Q_%8ev4!cazzM;qiQQn^?-9YaENA_4X^s-(0#2O!FFGGSma+)GLEFcG9zV{wIa36n!Eg^?s&z@q{`)nE##q`F54QjG3bv1qEqf%QlPOXCq~Ou>peexbDaXg1h2^cfzNBXFS_gr$T8*hWWTzcbs+zj`Bi0`dxC?<cD|Yu0QWe=*X|=1iZjWA<|L{Bg_2>9cbkqjg`PPrkQ*1ZQ)m&(430)>E9lH}$mwr0qgl?t<y_^~`7KfJy$trqgG62J-v6zIK_NCmFq+J9qN&+lRE=0~2HCPDXkE?Ht{Yv|I+`+4+>wDOB>`fy&2!5NR<j=3^?2l;v0W__6WdLG?Q*&(6DyviuIwUumL$57O6gm-1VTvOExL{QPG*eRh6k^aLmG=IBp2eRj@fl#f>xM}NlYv)}(2{WCZJZX=5x;q=+>_l)xC1AhFEA>;GQ&NqzmX$fBcaZcar?+L8*f6wW&d;y~|Zo%{M{3EB&@(PSD=j8e4hnzo2S1fN=`uhZp=i|-K-#?L7Kg#skxwLPsxxc*r2dMOHkyiTq586K+*aA+E`E{I*iO-M5)|KvmUjLtR`o;4SCG0ul^;xsiglI8-RNq7O{oMNXbNZDwt$#kz$MiRHxLMxY?2j}=s(+j=VDcUkQ2G9`Q0Ke8oxMb(zvLDyzkZfl=pVgYqi#-t*Z)66!oec\"\n\nopen(\".\/kyomu\", 'wb').write(zlib.decompress(base64.b85decode(exe_bin)))\nsubprocess.run([\"chmod +x .\/kyomu\"], shell=True)\nsubprocess.run([\".\/kyomu\"], shell=True)","label":2}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s585163444","submission":"n,x = map(int,input().split())\nnarr = list(map(int,input().split()))\nc=0\nfor i in range(1,n):\n    total = narr[i]+narr[i-1]\n    if(total <= x):\n        continue\n    else:\n        c += (total - x)\n        narr[i] = max(0,narr[i]-(total-x))\nprint(c)\n","label":2}
{"problem_id":"p02716","problem":"Given is an integer sequence A_1, ..., A_N of length N.\nWe will choose exactly \\left\\lfloor \\frac{N}{2} \\right\\rfloor elements from this sequence so that no two adjacent elements are chosen.\nFind the maximum possible sum of the chosen elements.\nHere \\lfloor x \\rfloor denotes the greatest integer not greater than x.","submission_id":"s086032999","submission":"n = int(input())\na = list(map(int, input().split()))\nINF = 10 ** 18\nif n % 2:\n    dp = [[[-INF,-INF,-INF] for i in range(2)] for i in range(n+1)]\n    dp[0][0][0] = 0\n    # \u521d\u671f\u5316\u6761\u4ef6\u8003\u3048\u308b\n    for i,v in enumerate(a):\n        for j in range(2):\n            if j:\n                dp[i+1][0][0] = max(dp[i+1][0][0],dp[i][1][0])\n                dp[i+1][0][1] = max(dp[i+1][0][1],dp[i][1][1])\n                dp[i+1][0][2] = max(dp[i+1][0][2],dp[i][1][2])\n            else:\n                dp[i+1][1][0] = max(dp[i+1][1][0],dp[i][0][0] + v)\n                dp[i+1][0][1] = max(dp[i+1][0][1],dp[i][0][0])\n                dp[i+1][1][1] = max(dp[i+1][1][1],dp[i][0][1] + v)\n                dp[i+1][0][2] = max(dp[i+1][0][2],dp[i][0][1])\n                dp[i+1][1][2] = max(dp[i+1][1][2],dp[i][0][2] + v)\n    print(max(max(dp[n][0]),max(dp[n][1][1:])))\nelse:\n    odd_sum,even_sum = 0,0\n    cumsum = []\n    for k,v in enumerate(a):\n        if k % 2:\n            odd_sum += v\n            cumsum.append(odd_sum)\n        else:\n            even_sum += v\n            cumsum.append(even_sum)\n    ans = max(cumsum[n-2],cumsum[n-1])\n    for i in range(2,n,2):\n        ans = max(ans, cumsum[i-2]+cumsum[n-1]-cumsum[i-1])\n    print(ans)","label":2}
{"problem_id":"p02994","problem":"You have N apples, called Apple 1, Apple 2, Apple 3, ..., Apple N. The flavor of Apple i is L+i-1, which can be negative.\nYou can make an apple pie using one or more of the apples. The flavor of the apple pie will be the sum of the flavors of the apples used.\nYou planned to make an apple pie using all of the apples, but being hungry tempts you to eat one of them, which can no longer be used to make the apple pie.\nYou want to make an apple pie that is as similar as possible to the one that you planned to make. Thus, you will choose the apple to eat so that the flavor of the apple pie made of the remaining N-1 apples will have the smallest possible absolute difference from the flavor of the apple pie made of all the N apples.\nFind the flavor of the apple pie made of the remaining N-1 apples when you choose the apple to eat as above.\nWe can prove that this value is uniquely determined.","submission_id":"s399988730","submission":"n, l = (int(xi) for xi in input().split())\n\na = int(n*(l-1)+n*(n+1)\/2)\n\n# print(a)\nif 0<1-l<n+1: print(a)\nif 1-l<1: print(a-(l+1-1))\nif n<1-l: print(a-(l+n-1))\n","label":2}
{"problem_id":"p03722","problem":"There is a directed graph with N vertices and M edges.\nThe i-th edge (1\u2264i\u2264M) points from vertex a_i to vertex b_i, and has a weight c_i.\nWe will play the following single-player game using this graph and a piece.\nInitially, the piece is placed at vertex 1, and the score of the player is set to 0.\nThe player can move the piece as follows:\n\nWhen the piece is placed at vertex a_i, move the piece along the i-th edge to vertex b_i. After this move, the score of the player is increased by c_i.\n\nThe player can end the game only when the piece is placed at vertex N.\nThe given graph guarantees that it is possible to traverse from vertex 1 to vertex N.\nWhen the player acts optimally to maximize the score at the end of the game, what will the score be?\nIf it is possible to increase the score indefinitely, print inf.","submission_id":"s359855299","submission":"import sys\n\nINF = 10 ** 15\n\nn, m = map(int, sys.stdin.readline().split())\nabc = map(int, sys.stdin.read().split())\nabc = list(zip(*[abc] * 3))\n\ndef main():\n    dist = [INF] * n\n    dist[0] = 0\n    for _ in range(n - 1):\n        for a, b, c in abc:\n            a -= 1; b -= 1; c = -c\n            if dist[a] == INF:\n                continue\n            dist[b] = min(dist[b], dist[a] + c)\n\n    res = dist[n-1]\n\n    for _ in range(n - 1):\n        for a, b, c in abc:\n            a -= 1; b -= 1; c = -c\n            if dist[a] == INF:\n                continue\n            dist[b] = min(dist[b], dist[a] + c)\n\n    if dist[n-1] == res:\n        return -res\n    else:\n        return 'inf'\n\nif __name__ == '__main__':\n    ans = main()\n    print(ans)","label":2}
{"problem_id":"p03043","problem":"Snuke has a fair N-sided die that shows the integers from 1 to N with equal probability and a fair coin. He will play the following game with them:\n\nThrow the die. The current score is the result of the die.\nAs long as the score is between 1 and K-1 (inclusive), keep flipping the coin. The score is doubled each time the coin lands heads up, and the score becomes 0 if the coin lands tails up.\nThe game ends when the score becomes 0 or becomes K or above. Snuke wins if the score is K or above, and loses if the score is 0.\n\nYou are given N and K. Find the probability that Snuke wins the game.","submission_id":"s992648741","submission":"n,k=map(int,input().split())\np=0\nfor i in range(1,n+1):\n  if i<k: p+=4*0.5**len(bin(~-k\/\/i))\n  else: p+=1\nprint(p\/n)","label":2}
{"problem_id":"p03075","problem":"In AtCoder city, there are five antennas standing in a straight line. They are called Antenna A, B, C, D and E from west to east, and their coordinates are a, b, c, d and e, respectively.\nTwo antennas can communicate directly if the distance between them is k or less, and they cannot if the distance is greater than k.\nDetermine if there exists a pair of antennas that cannot communicate directly.\nHere, assume that the distance between two antennas at coordinates p and q (p < q) is q - p.","submission_id":"s631008847","submission":"l = []\nfor i in range(5):\n    l.append(int(input()))\nk = int(input())\nok = True\nfor i in range(5):\n    for j in range(5):\n        if i == j: continue\n        diff = abs(l[i] - l[j])\n        if diff > k:\n            ok = False\nif ok: print('Yay!')\nelse: print(':(')","label":2}
{"problem_id":"p02747","problem":"A Hitachi string is a concatenation of one or more copies of the string hi.\nFor example, hi and hihi are Hitachi strings, while ha and hii are not.\nGiven a string S, determine whether S is a Hitachi string.","submission_id":"s011167653","submission":"s=input()\nif s==\"hi\" or s==\"hihi\" or s==\"hihihi\" or s==\"hihihihi\" or s==\"hihihihihi\":\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":2}
{"problem_id":"p03457","problem":"AtCoDeer the deer is going on a trip in a two-dimensional plane.\nIn his plan, he will depart from point (0, 0) at time 0, then for each i between 1 and N (inclusive), he will visit point (x_i,y_i) at time t_i.\nIf AtCoDeer is at point (x, y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x-1,y), (x,y+1) and (x,y-1).\nNote that he cannot stay at his place.\nDetermine whether he can carry out his plan.","submission_id":"s296493725","submission":"A = [[0,0]]\nN = int(input())\nfor _ in range(N):\n    t,x,y = map(int,input().split())\n    A.append([t,x+y])\nfor i in range(1,N+1):\n    \n    if A[i][0]-A[i-1][0] >= abs(A[i][1]-A[i-1][1]) and (A[i][0]-A[i-1][0])%2 == (A[i][1]-A[i-1][1])%2:\n        continue\n    else:\n        print('No')\n        exit()\nprint('Yes')\n","label":2}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s499900940","submission":"import bisect\nimport math\nfrom functools import reduce\n\ndef gcd(*numbers):\n    return reduce(math.gcd, numbers)\n  \n\nn, x = map(int,input().split())\na = list(map(int,input().split()))\n\nindex = bisect.bisect_left(a, x)\na.insert(index, x)\nd = [0]*(n)\nfor i in range(n):\n    d[i] = a[i+1] - a[i]\nans = gcd(*d)\nprint(ans)","label":2}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s024864568","submission":"data = input()\nMOD = 10**9 + 7\nSLen = len(data)\ntargets = \"ABC\"\narray = [[0 for i in range(SLen + 1)] for _ in range(4)]\narray[0][0] = 1\nfor i in range(SLen):\n    for j in range(4):\n        if data[i] == '?':\n            if j < 3:\n                array[j + 1][i + 1] = (array[j + 1][i + 1] + array[j][i]) % MOD\n            array[j][i + 1] = (array[j][i + 1] + array[j][i] * 3) % MOD\n        else:\n            if j < 3 and data[i] == targets[j]:\n                array[j + 1][i + 1] = (array[j + 1][i + 1] + array[j][i]) % MOD\n            array[j][i + 1] = (array[j][i + 1] + array[j][i]) % MOD\n\nprint(array[3][SLen])\n","label":2}
{"problem_id":"p03606","problem":"Joisino is working as a receptionist at a theater.\nThe theater has 100000 seats, numbered from 1 to 100000.\nAccording to her memo, N groups of audiences have come so far, and the i-th group occupies the consecutive seats from Seat l_i to Seat r_i (inclusive).\nHow many people are sitting at the theater now?","submission_id":"s722145115","submission":"N = int(input())\nLR = [list(map(int, input().split())) for _ in range(N)]\ncnt = 0\n\nfor lr in LR:\n  cnt += lr[1] + 1 - lr[0]\nprint(cnt)","label":2}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s676573367","submission":"alpha = \"abcdefghij\"\nn = int(input())\ndef dfs(s,k):\n    if len(s) == n:\n        print(s)\n    else:\n        for i in range(k+1):\n            if i == k:\n                dfs(s+alpha[i],k+1)\n            else:\n                dfs(s+alpha[i],k)\ndfs(\"\",0)","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s553334915","submission":"s = input()\nprint(\"2018\" + s[4:])","label":2}
{"problem_id":"p02408","problem":"Taro is going to play a card game. However, now he has only n cards, even though there should be 52 cards (he has no Jokers).","submission_id":"s625955670","submission":"import sys\n\ndef to_str(symbol, num):\n    return '{0} {1}'.format(symbol, num)\n\nif __name__ == '__main__':\n    symbols = ['S','H','C','D']\n    cards = [to_str(x,y) for x in symbols for y in range(1,14)]\n    n = int(input())\n    if n == 52: sys.exit()\n    for i in range(n):\n        cards.remove(input())\n    print('\\n'.join(cards))","label":2}
{"problem_id":"p02394","problem":"Write a program which reads a rectangle and a circle, and determines whether the circle is arranged inside the rectangle. As shown in the following figures, the upper right coordinate $(W, H)$ of the rectangle and the central coordinate $(x, y)$ and radius $r$ of the circle are given.","submission_id":"s138719025","submission":"def main():\n    W,H,x,y,r=map(int,input().split())\n    if x-r>=0 and y-r>=0 and W>=x+r and H>=y+r:\n        print('Yes')\n    else:\n        print('No')\n\nif __name__=='__main__':\n    main()\n","label":2}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s975400294","submission":"S = list(input())\ncntb = 0\ncntw = 0\nfor i in range(len(S)):\n    if S[i] == \"B\":\n        cntb +=1\n    if S[i] == \"W\":\n        cntw += cntb\nprint(cntw)","label":2}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s638071158","submission":"import fractions\n\nn,x=map(int,input().split())\nl=list(map(int,input().split()))\n\nl.append(x)\nsl=sorted(l)\n\nlis=[sl[i+1]-sl[i] for i in range(n)]\n\nans=0\nfor i in range(0, n):\n    ans = fractions.gcd(ans, lis[i])\n    \nprint(ans)\n\n","label":2}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s222984862","submission":"has_seven = \"7\" in input()\nif has_seven:\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s886567319","submission":"a = input()\nif a[-1] == \"s\" :print(a+\"es\")\nelse :print(a+\"s\")","label":2}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s866071958","submission":"n = int(input())\ns = {}\nmaxvalue = -1\nfor i in range(n):\n    sn = input()\n    if(s.get(sn) == None):\n        s[sn] = 0\n    else:\n        s[sn] += 1\n    maxvalue = max(maxvalue,s[sn])\n\nanswers = []\nfor key in s.keys():\n    if s[key] == maxvalue:\n        answers.append(key)\n\nanswers.sort()\n\nfor ans in answers:\n    print(ans)","label":2}
{"problem_id":"p03853","problem":"There is an image with a height of H pixels and a width of W pixels. Each of the pixels is represented by either . or *. The character representing the pixel at the i-th row from the top and the j-th column from the left, is denoted by C_{i,j}.\nExtend this image vertically so that its height is doubled. That is, print a image with a height of 2H pixels and a width of W pixels where the pixel at the i-th row and j-th column is equal to C_{(i+1)\/2,j} (the result of division is rounded down).","submission_id":"s276615718","submission":"# Vicfred\n# https:\/\/atcoder.jp\/contests\/abc049\/tasks\/abc049_b\n# simulation\nh, w = list(map(int, input().split()))\nfor _ in range(h):\n    line = input()\n    print(line)\n    print(line)\n\n","label":2}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s392934001","submission":"#\u518d\u5e30\ndef gcd(a, b):\n\tif b==0:\n\t\treturn a\n\treturn gcd(b, a%b)\n#\u30eb\u30fc\u30d7\ndef gcd(a,b):\n  while b:\n    a,b = b,a%b\n  return abs(a)\n\ndef solve(x_list):\n\tans=0\n\tfor x in x_list:\n\t\tans=gcd(ans, x)\n\treturn ans\n\nN, X = map(int, input().split())\nx_list=list(abs(int(x)-X) for x in input().split())\n\nprint(solve(x_list))","label":2}
{"problem_id":"p02715","problem":"Consider sequences \\{A_1,...,A_N\\} of length N consisting of integers between 1 and K (inclusive).\nThere are K^N such sequences. Find the sum of \\gcd(A_1, ..., A_N) over all of them.\nSince this sum can be enormous, print the value modulo (10^9+7).\nHere \\gcd(A_1, ..., A_N) denotes the greatest common divisor of A_1, ..., A_N.","submission_id":"s962147018","submission":"mod=10**9+7\nn,k= map(int, input().split())\nx=[0]*(k+1)\ny=0\n\n# \u6700\u5927\u516c\u7d04\u6570\u304c\u305d\u306e\u6570\u306b\u306a\u308b\u7d44\u5408\u305b\u3067\u5834\u5408\u308f\u3051\u3001\u5f8c\u308d\u304b\u3089\u57cb\u3081\u3066\u91cd\u8907\u3092\u5f15\u304f\nfor i in range(k,0,-1):\n    m=k\/\/i\n    x[i]=pow(k\/\/i,n,mod)\n    for j in range(1,m):\n        x[i]-=x[i*(j+1)]\n        x[i]%=mod\n\nans=0\nfor i in range(1,k+1):\n    ans+=x[i]*i\n    ans%=mod\n\nprint(ans)","label":2}
{"problem_id":"p02721","problem":"Takahashi has decided to work on K days of his choice from the N days starting with tomorrow.\nYou are given an integer C and a string S. Takahashi will choose his workdays as follows:\n\nAfter working for a day, he will refrain from working on the subsequent C days.\nIf the i-th character of S is x, he will not work on Day i, where Day 1 is tomorrow, Day 2 is the day after tomorrow, and so on.\n\nFind all days on which Takahashi is bound to work.","submission_id":"s908297340","submission":"n,k,c = map(int,input().split())\ns = input()\nforth = set()\nreverse = set()\ncur = 0\ntired = 0\nfor i in range(n):\n    if s[i] == \"o\":\n        if tired == 0:\n            cur += 1\n            tired = c\n            forth.add(i+1)\n        else:\n            if tired > 0:\n                tired -= 1\n    else:\n        if tired > 0:\n            tired -= 1\nif cur > k:\n    exit()\ns = s[::-1]\ncur = 0\ntired = 0\nfor i in range(n):\n    if s[i] == \"o\":\n        if tired == 0:\n            cur += 1\n            tired = c\n            reverse.add(n-i)\n        else:\n            if tired > 0:\n                tired -= 1\n    else:\n        if tired > 0:\n            tired -= 1\nans = forth & reverse\nans = list(ans)\nans.sort()\nfor i in ans:\n    print(i)","label":2}
{"problem_id":"p03547","problem":"In programming, hexadecimal notation is often used.\nIn hexadecimal notation, besides the ten digits 0, 1, ..., 9, the six letters A, B, C, D, E and F are used to represent the values 10, 11, 12, 13, 14 and 15, respectively.\nIn this problem, you are given two letters X and Y. Each X and Y is A, B, C, D, E or F.\nWhen X and Y are seen as hexadecimal numbers, which is larger?","submission_id":"s368908139","submission":"import bisect,collections,copy,heapq,itertools,math,string\nimport sys\ndef S(): return sys.stdin.readline().rstrip()\ndef M(): return map(str,sys.stdin.readline().rstrip().split())\ndef I(): return int(sys.stdin.readline().rstrip())\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\ndef LS(): return list(sys.stdin.readline().rstrip().split())\nx, y = M()\nif x < y:\n    print('<')\nelif x > y:\n    print('>')\nelse:\n    print('=')","label":2}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s261033912","submission":"s = list(map(int, input().split()))\nx = s[2]-s[0]\ny = s[3]-s[1]\nl = [s[2]-y, s[3]+x, s[0]-y, s[1]+x]\nfor i in l:\n    print(i)","label":2}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s696213181","submission":"import sys\nfrom itertools import islice, tee\n\n\ndef resolve(in_):\n    H, W = map(int, next(in_).split())\n    h0, h1 = divmod(H, 2)\n    w0, w1 = divmod(W, 2)\n\n    if H == 1 or W == 1:\n        return 1\n\n    answer = h0 * w0 * 2\n    if h1:\n        answer += w0\n    if w1:\n        answer += h0\n    if h1 and w1:\n        answer += 1\n\n    return answer\n\n\ndef main():\n    answer = resolve(sys.stdin.buffer)\n    print(answer)\n\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p02886","problem":"It's now the season of TAKOYAKI FESTIVAL!\nThis year, N takoyaki (a ball-shaped food with a piece of octopus inside) will be served. The deliciousness of the i-th takoyaki is d_i.\nAs is commonly known, when you eat two takoyaki of deliciousness x and y together, you restore x \\times y health points.\nThere are \\frac{N \\times (N - 1)}{2} ways to choose two from the N takoyaki served in the festival. For each of these choices, find the health points restored from eating the two takoyaki, then compute the sum of these \\frac{N \\times (N - 1)}{2} values.","submission_id":"s021490246","submission":"N = int(input())\nD = list(map(int,input().split()))\ncnt = 0\nfor i in range(N):\n    cnt += D[i]**2\ntot = 0\nfor i in range(N):\n    tot += D[i]\ntot = tot**2\ntot -= cnt\nprint(tot\/\/2)","label":2}
{"problem_id":"p02841","problem":"In this problem, a date is written as Y-M-D. For example, 2019-11-30 means November 30, 2019.\nIntegers M_1, D_1, M_2, and D_2 will be given as input.\nIt is known that the date 2019-M_2-D_2 follows 2019-M_1-D_1.\nDetermine whether the date 2019-M_1-D_1 is the last day of a month.","submission_id":"s474218335","submission":"import numpy as np\nm1, d1 = map(int, input().split())\nm2, d2 = map(int, input().split())\nx = [30] * 13\nx[1] = x[3] = x[5] = x[7] = x[8] = x[10] = x[12] = 31\nx[2] = 28\nx[0] = 0\nprint('1' if x[m1] == d1 else '0')\n","label":2}
{"problem_id":"p03945","problem":"Two foxes Jiro and Saburo are playing a game called 1D Reversi. This game is played on a board, using black and white stones. On the board, stones are placed in a row, and each player places a new stone to either end of the row. Similarly to the original game of Reversi, when a white stone is placed, all black stones between the new white stone and another white stone, turn into white stones, and vice versa.\nIn the middle of a game, something came up and Saburo has to leave the game. The state of the board at this point is described by a string S. There are |S| (the length of S) stones on the board, and each character in S represents the color of the i-th (1 \u2266 i \u2266 |S|) stone from the left. If the i-th character in S is B, it means that the color of the corresponding stone on the board is black. Similarly, if the i-th character in S is W, it means that the color of the corresponding stone is white.\nJiro wants all stones on the board to be of the same color. For this purpose, he will place new stones on the board according to the rules. Find the minimum number of new stones that he needs to place.","submission_id":"s758029144","submission":"l = list(input())\nn = len(l)\n\nseg = []\nfor i in range(n-1):\n    if l[i] != l[i+1]:\n        seg.append(i)\nprint(len(seg))\n","label":2}
{"problem_id":"p02646","problem":"Two children are playing tag on a number line. (In the game of tag, the child called \"it\" tries to catch the other child.) The child who is \"it\" is now at coordinate A, and he can travel the distance of V per second.\nThe other child is now at coordinate B, and she can travel the distance of W per second.\nHe can catch her when his coordinate is the same as hers.\nDetermine whether he can catch her within T seconds (including exactly T seconds later).\nWe assume that both children move optimally.","submission_id":"s413400523","submission":"A,V = [int(i) for i in input().split() ]\nB,W = [int(i) for i in input().split() ]\nT = int(input()) \n\nprint (\"YES\" if V-W > 0 and abs(A-B) \/ (V-W) <= T else \"NO\" ) \n","label":2}
{"problem_id":"p03705","problem":"Snuke has N integers. Among them, the smallest is A, and the largest is B.\nWe are interested in the sum of those N integers. How many different possible sums there are?","submission_id":"s055346335","submission":"import sys, math\nfrom functools import lru_cache\nimport numpy as np\nimport heapq\nfrom collections import defaultdict\nsys.setrecursionlimit(10**9)\nMOD = 10**9+7\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\ndef mi():\n    return map(int, input().split())\n\ndef ii():\n    return int(input())\n\ndef i2(n):\n    tmp = [list(mi()) for i in range(n)]\n    return [list(i) for i in zip(*tmp)]\n\n\ndef lcm(a, b):\n    return a*b\/\/math.gcd(a, b)\n\n\ndef main():\n    N, A, B = mi()\n    if A > B or (N == 1 and A != B):\n        print(0)\n        return\n\n    print((B-A)*(N-2)+1)\n\nif __name__ == '__main__':\n    main()\n","label":2}
{"problem_id":"p03157","problem":"There is a grid with H rows and W columns, where each square is painted black or white.\nYou are given H strings S_1, S_2, ..., S_H, each of length W.\nIf the square at the i-th row from the top and the j-th column from the left is painted black, the j-th character in the string S_i is #; if that square is painted white, the j-th character in the string S_i is ..\nFind the number of pairs of a black square c_1 and a white square c_2 that satisfy the following condition:\n\nThere is a path from the square c_1 to the square c_2 where we repeatedly move to a vertically or horizontally adjacent square through an alternating sequence of black and white squares: black, white, black, white...","submission_id":"s846039009","submission":"from collections import defaultdict\n\ndef find(tab, a):\n    if tab[a] == -1: return a\n    tab[a] = find(tab, tab[a])\n    return tab[a]\n\ndef union(tab, a, b):\n    pa, pb = (find(tab, a), find(tab, b))\n    if pa!=pb:\n        tab[pb] = pa\n\nH,W=map(int,input().split())\nS=[input() for _ in range(H)]\nN=H*W\ntab = [-1]*N\n\nfor y in range(H):\n    for x in range(W):\n        for dx,dy in [(-1,0),(1,0),(0,1),(0,-1)]:\n            xx=x+dx\n            yy=y+dy\n            if xx < 0 or xx>=W or yy<0 or yy>=H:\n                continue\n            src = W*y+x\n            dst = W*yy+xx\n            if S[y][x]!=S[yy][xx]:\n                union(tab, src, dst)\ndic = defaultdict(lambda: {\"#\":0,\".\":0})\nfor i in range(N):\n    p = find(tab, i)\n    t = S[i\/\/W][i%W]\n    dic[p][t]+=1\n\nans = 0\nfor d in dic.values():\n    ans += (d[\"#\"]*d[\".\"])\nprint(ans)\n","label":2}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s336471358","submission":"import sys\ninput = sys.stdin.readline\ndef main():\n    A, B, T = map(int, input().split())\n    BIS = int((T+0.5)\/\/A * B)\n    print(BIS)\n\nif __name__ == '__main__':\n    main()","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s246777118","submission":"import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\ns = input()\nif s[-1]==\"s\":\n    s += \"es\"\nelse:\n    s += \"s\"\nprint(s)","label":2}
{"problem_id":"p03775","problem":"You are given an integer N.\nFor two positive integers A and B, we will define F(A,B) as the larger of the following: the number of digits in the decimal notation of A, and the number of digits in the decimal notation of B.\nFor example, F(3,11) = 2 since 3 has one digit and 11 has two digits.\nFind the minimum value of F(A,B) as (A,B) ranges over all pairs of positive integers such that N = A \\times B.","submission_id":"s549328987","submission":"n = int(input())\nans = 10**100\nfor a in range(1,int(n**(0.5))+2):\n    if n%a == 0:\n        b = n\/\/a\n        f = len(str(b))\n        ans = min(ans,f)\nprint(ans)","label":2}
{"problem_id":"p02803","problem":"Takahashi has a maze, which is a grid of H \\times W squares with H horizontal rows and W vertical columns.\nThe square at the i-th row from the top and the j-th column is a \"wall\" square if S_{ij} is #, and a \"road\" square if S_{ij} is ..\nFrom a road square, you can move to a horizontally or vertically adjacent road square.\nYou cannot move out of the maze, move to a wall square, or move diagonally.\nTakahashi will choose a starting square and a goal square, which can be any road squares, and give the maze to Aoki.\nAoki will then travel from the starting square to the goal square, in the minimum number of moves required.\nIn this situation, find the maximum possible number of moves Aoki has to make.","submission_id":"s153957346","submission":"import math\nimport itertools\nfrom collections import deque\nimport bisect\nimport heapq\n\ndef IN(): return int(input())\ndef sIN(): return input()\ndef lIN(): return list(input())\ndef MAP(): return map(int,input().split())\ndef LMAP(): return list(map(int,input().split()))\ndef TATE(n): return [input() for i in range(n)]\nans = 0\n\ndef bfs(sx,sy):\n    d = [[-1] * w for i in range(h)]\n    MAX = 0\n\n    dx = [1, 0, -1, 0]\n    dy = [0, 1, 0, -1]\n\n    que = deque([])\n    que.append((sx, sy))#\u30b9\u30bf\u30fc\u30c8\u5ea7\u6a19\u306e\u8a18\u9332\n    d[sx][sy] = 0#\u30b9\u30bf\u30fc\u30c8\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3078\u306e\u6700\u77ed\u8ddd\u96e2\u306f0\n\n    while que:#\u4e2d\u8eab\u304c\u306a\u304f\u306a\u308b\u307e\u3067\n        p = que.popleft()\n       \n        for m in range(4):#\u73fe\u5728\u5730\u304b\u30894\u65b9\u5411\u306e\u79fb\u52d5\u3092\u8003\u3048\u308b\n            nx = p[0] + dx[m]\n            ny = p[1] + dy[m]\n\n            if 0 <= nx < h and 0 <= ny < w:\n              if maze[nx][ny] != \"#\" and d[nx][ny] == -1:\n                que.append((nx, ny))#\u2191\u683c\u5b50\u70b9\u304b\u3089\u3067\u306a\u3044\uff06\u58c1\u3067\u306a\u3044\uff06\u307e\u3060\u901a\u3063\u3066\u306a\u3044\n                d[nx][ny] = d[p[0]][p[1]] + 1\n\n    for k in range(h):\n      MAX = max(max(d[k]),MAX)\n      \n    return MAX\n\nh, w = map(int, input().split())\nmaze = [lIN() for i in range(h)]\n\nfor i in range(h):#sx\u5ea7\u6a19\u6307\u5b9a0~h-1\n  for j in range(w):#sy\u5ea7\u6a19\u6307\u5b9a0~w-1\n    if maze[i][j] == '.':\n      ans = max(bfs(i,j),ans)\n      \nprint(ans)","label":2}
{"problem_id":"p03855","problem":"There are N cities. There are also K roads and L railways, extending between the cities.\nThe i-th road bidirectionally connects the p_i-th and q_i-th cities, and the i-th railway bidirectionally connects the r_i-th and s_i-th cities.\nNo two roads connect the same pair of cities. Similarly, no two railways connect the same pair of cities.\nWe will say city A and B are connected by roads if city B is reachable from city A by traversing some number of roads. Here, any city is considered to be connected to itself by roads.\nWe will also define connectivity by railways similarly.\nFor each city, find the number of the cities connected to that city by both roads and railways.","submission_id":"s186438687","submission":"import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**8)\n\nclass UnionFind():\n    def __init__(self, n):\n        self.par = [-1 for i in range(n)]\n\n    def root(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            self.par[x] = self.root(self.par[x]) # contraction\n            return self.par[x]\n\n    def unite(self, x, y):\n        x, y = self.root(x), self.root(y)\n        if x != y:\n            if self.par[x] > self.par[y]: # merge technique\n                x, y = y, x\n            self.par[x] += self.par[y]\n            self.par[y] = x\n\n    def same(self, x, y):\n        return self.root(x) == self.root(y)\n\n    def size(self, x):\n        return -self.par[self.root(x)]\n\nn, k, l = map(int, input().split())\nuf_r = UnionFind(n)\nfor i in range(k):\n    p, q = map(int, input().split())\n    p -= 1\n    q -= 1\n    uf_r.unite(p, q)\nuf_t = UnionFind(n)\nfor i in range(l):\n    r, s = map(int, input().split())\n    r -= 1\n    s -= 1\n    uf_t.unite(r, s)\n\nroot_r = defaultdict(set)\nroot_t = defaultdict(set)\nfor i in range(n):\n    root_r[uf_r.root(i)].add(i)\n    root_t[uf_t.root(i)].add(i)\n\nans = []\nmemo = defaultdict(int)\nfor i in range(n):\n    memo[(uf_r.root(i), uf_t.root(i))] += 1\nfor i in range(n):\n    ans.append(memo[(uf_r.root(i), uf_t.root(i))])\n\nprint(*ans)\n","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s397126286","submission":"N = input()\na_list = [int(_c) for _c in input().split(\" \")]\n\nxor = 0\nfor a in a_list:\n    xor = xor ^ a\n\nif xor == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":2}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s804410775","submission":"N,X = map(int,input().split())\nx = list(map(int,input().split()))\nx.append(X)\nx.sort()\nMindif = x[1]-x[0]\nimport math\nfor i in range(1,N):\n    Mindif = math.gcd(Mindif,x[i+1]-x[i])\nprint(Mindif)","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s789803915","submission":"# N\u304c3\u306e\u500d\u6570\u304b\u3064\u3001\u914d\u5217\u304c\u300ca\u304cm\u500b\u3068b\u304cm\u500b\u3068c\u304cm\u500b\u300d\u304b\u3064\u3001a^b == c \u306a\u3089True\n\nn = int(input())\nnums = list(map(int, input().split()))\n\nif max(nums) == 0:\n    print('Yes')\n    exit()\n\nif n % 3:\n    print('No')\n    exit()\n\nm = n \/\/ 3\nnums.sort()\nfor i in range(m-1):\n    if nums[i] != nums[i+1] or nums[m+i] != nums[m+i+1] or nums[2*m+i] != nums[2*m+i+1]:\n        print('No')\n        exit()\n\nif nums[0] ^ nums[m] == nums[2*m]:\n    print('Yes')\nelse:\n    print('No')\n","label":2}
{"problem_id":"p03033","problem":"There is an infinitely long street that runs west to east, which we consider as a number line.\nThere are N roadworks scheduled on this street.\nThe i-th roadwork blocks the point at coordinate X_i from time S_i - 0.5 to time T_i - 0.5.\nQ people are standing at coordinate 0. The i-th person will start the coordinate 0 at time D_i, continue to walk with speed 1 in the positive direction and stop walking when reaching a blocked point.\nFind the distance each of the Q people will walk.","submission_id":"s213822188","submission":"# -*- coding: utf-8 -*-\n\"\"\"\nE - Roadwork\nhttps:\/\/atcoder.jp\/contests\/abc128\/tasks\/abc128_e\n\n\"\"\"\nimport sys\n\nfrom heapq import heappop, heappush\n\ndef solve(N, Q):\n    events = []\n    for _ in range(N):\n        s, t, x = map(int, input().split())\n        events.append((s-x, 1, x))\n        events.append((t-x, -1, x))\n    events.sort(reverse=True)\n    D = [int(input()) for _ in range(Q)]\n\n    blocked = set()\n    ans = []\n    hq = []\n    for d in D:\n        while events and events[-1][0] <= d:\n            t, e, x = events.pop()\n            if e == -1:\n                blocked.discard(x)\n            else:\n                blocked.add(x)\n                heappush(hq, x)\n        if blocked:\n            while hq and hq[0] not in blocked:\n                heappop(hq)\n            ans.append(hq[0] if hq else -1)\n        else:\n            ans.append(-1)\n    return ans\n\n\ndef main(args):\n    N, Q = map(int, input().split())\n    ans = solve(N, Q)\n    print(*ans, sep='\\n')\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n","label":2}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s129350343","submission":"MOD = 10**9 + 7\nS = input()\n\nl = len(S)\nnAB = [0]*(l+1)\nnA = [0]*(l+1)\nnB = [0]*(l+1)\nnC = [0]*(l+1)\nnABC = [0]*(l+1)\n\nadd = 1\nfor i,s in enumerate(S):\n    if s == '?':\n        nA[i+1] = 3*nA[i] + add\n        nB[i+1] = 3*nB[i] + add\n        nC[i+1] = 3*nC[i] + add\n        nAB[i+1] = 3*nAB[i] + nA[i]\n        nABC[i+1] = 3*nABC[i] + nAB[i]\n        add = (add * 3) % MOD\n    if s == 'A':\n        nA[i+1] = nA[i] + add\n        nB[i+1] = nB[i]\n        nC[i+1] = nC[i]\n        nAB[i+1] = nAB[i]\n        nABC[i+1] = nABC[i]\n    if s == 'B':\n        nA[i+1] = nA[i]\n        nB[i+1] = nB[i] + add\n        nC[i+1] = nC[i]\n        nAB[i+1] = nAB[i] + nA[i]\n        nABC[i+1] = nABC[i]\n    if s == 'C':\n        nA[i+1] = nA[i]\n        nB[i+1] = nB[i]\n        nC[i+1] = nC[i] + add\n        nAB[i+1] = nAB[i]\n        nABC[i+1] = nABC[i] + nAB[i]\n    nA[i+1] = nA[i+1] % MOD\n    nB[i+1] = nB[i+1] % MOD\n    nC[i+1] = nC[i+1] % MOD\n    nAB[i+1] = nAB[i+1] % MOD\n    nABC[i+1] = nABC[i+1] % MOD\n\nprint(nABC[l] % MOD)\n\n","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s268881945","submission":"def main():\n    date = list(str(input()))\n    date[3] = '8'\n    ans = ''\n    for i in date:\n        ans = ans + i\n    print(ans)\n\nmain()","label":2}
{"problem_id":"p02689","problem":"There are N observatories in AtCoder Hill, called Obs. 1, Obs. 2, ..., Obs. N. The elevation of Obs. i is H_i.\nThere are also M roads, each connecting two different observatories. Road j connects Obs. A_j and Obs. B_j.\nObs. i is said to be good when its elevation is higher than those of all observatories that can be reached from Obs. i using just one road.\nNote that Obs. i is also good when no observatory can be reached from Obs. i using just one road.\nHow many good observatories are there?","submission_id":"s472441121","submission":"n,m = list(map(int, input(\"\").split()))\nh = list(map(int, input(\"\").split()))\n\np = [1] * n\n\nfor i in range(m):\n  a,b = map(int, input().split())\n  if h[a-1] <= h[b-1]:\n    p[a-1]=0\n\n  if h[a-1] >= h[b-1]:\n    p[b-1]=0\n\nprint(sum(p))","label":2}
{"problem_id":"p03745","problem":"You are given an array A of length N.\nYour task is to divide it into several contiguous subarrays.\nHere, all subarrays obtained must be sorted in either non-decreasing or non-increasing order.\nAt least how many subarrays do you need to divide A into?","submission_id":"s852023583","submission":"if __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().split()))\n\n    dp = [[10 ** 9 for j in range(2)] for i in range(n)]\n    dp[0][0] = 1 # increase\n    dp[0][1] = 1 # decrease\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i][0] = min(dp[i-1][0], dp[i-1][1] + 1)\n            dp[i][1] = min(dp[i-1][0], dp[i-1][1]) + 1\n        elif arr[i] < arr[i-1]:\n            dp[i][0] = min(dp[i-1][0], dp[i-1][1]) + 1\n            dp[i][1] = min(dp[i-1][0] + 1, dp[i-1][1])\n        else:\n            dp[i][0] = dp[i-1][0]\n            dp[i][1] = dp[i-1][1]\n    # print(dp)\n    print(min(dp[-1]))","label":2}
{"problem_id":"p03998","problem":"Alice, Bob and Charlie are playing Card Game for Three, as below:\n\nAt first, each of the three players has a deck consisting of some number of cards. Each card has a letter a, b or c written on it. The orders of the cards in the decks cannot be rearranged.\nThe players take turns. Alice goes first.\nIf the current player's deck contains at least one card, discard the top card in the deck. Then, the player whose name begins with the letter on the discarded card, takes the next turn. (For example, if the card says a, Alice takes the next turn.)\nIf the current player's deck is empty, the game ends and the current player wins the game.\n\nYou are given the initial decks of the players.\nMore specifically, you are given three strings S_A, S_B and S_C. The i-th (1\u2266i\u2266|S_A|) letter in S_A is the letter on the i-th card in Alice's initial deck. S_B and S_C describes Bob's and Charlie's initial decks in the same way.\nDetermine the winner of the game.","submission_id":"s831191789","submission":"a = list(input())\nb = list(input())\nc = list(input())\n\ntgt = a.pop(0)\n\nwhile True:\n    if tgt == 'a':\n        if a:\n            tgt = a.pop(0)\n        else:\n            ans = 'A'\n            break\n    elif tgt == 'b':\n        if b:\n            tgt = b.pop(0)\n        else:\n            ans = 'B'\n            break\n    else:\n        if c:\n            tgt = c.pop(0)\n        else:\n            ans = 'C'\n            break\nprint(ans)","label":2}
{"problem_id":"p02238","problem":"Depth-first search (DFS) follows the strategy to search \u201ddeeper\u201d in the graph whenever possible. In DFS, edges are recursively explored out of the most recently discovered vertex $v$ that still has unexplored edges leaving it. When all of $v$'s edges have been explored, the search \u201dbacktracks\u201d to explore edges leaving the vertex from which $v$ was discovered.","submission_id":"s369482250","submission":"#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\n\nWHITE = 0\nGRAY = 1\nBLACK = 2\n\n\ndef dbg_record(records):\n    for index, record in enumerate(records):\n        print(\"???????????????: %d\" % index)\n        if isinstance(record, dict):\n            print(\"??\\??????: %d\" % record.get(\"visit\", -1))\n            print(\"?????????: %d\" % record.get(\"leave\", -1))\n        else:\n            print(\"?????????\")\n        print(\"\")\n\n\ndef dfs(matrix):\n    def internal_dfs(node_id, current_time):\n        if state[node_id] == WHITE:\n            # ?\u00a8??????????\n            state[node_id] = GRAY\n            stack.append(node_id)\n            records[node_id] = {\"visit\": current_time}  # ?\u00a8??????????????\u00a8????\n\n            # ?\u00ac?????\u00a8????????????\u00a8?????\u00a7????????????????????\u00a2???\n            next_id = None\n            for index in range(len(matrix)):\n                if matrix[node_id][index] == 1 and state[index] == WHITE:\n                    next_id = index\n                    break\n\n            if next_id is not None:\n                return internal_dfs(next_id, current_time + 1)\n            elif 0 < len(stack):\n                # ?\u00ac?????\u00a8????????????\u00a8?????\u00a7?????????????????????????????????????????\u00b0?????????\n                return internal_dfs(stack.pop(), current_time + 1)\n        elif state[node_id] == GRAY:\n            # ????????????\n\n            # ?\u00ac?????\u00a8????????????\u00a8?????\u00a7????????????????????\u00a2???\n            next_id = None\n            for index in range(len(matrix)):\n                if matrix[node_id][index] == 1 and state[index] == WHITE:\n                    next_id = index\n                    break\n\n            if next_id is not None:\n                stack.append(node_id)\n                return internal_dfs(next_id, current_time)\n            elif 0 < len(stack):\n                # ?\u00ac?????\u00a8????????????\u00a8?????\u00a7?????????????????????????????????????????\u00b0?????????\n                state[node_id] = BLACK\n                records[node_id][\"leave\"] = current_time  # ????????????????\u00a8????\n                return internal_dfs(stack.pop(), current_time + 1)\n            else:  # ??????????\u00a7????????????\u00a3???????????\u00a8??? (node_id should be 0)\n                state[node_id] = BLACK\n                records[node_id][\"leave\"] = current_time\n                return current_time\n        elif state[node_id] == BLACK:\n            print(\"Black!!\")\n\n    state = [WHITE] * len(matrix)  # White, Gray, Black\n    records = [None] * len(matrix)  # Save time when the node is processed\n    stack = []\n    current_time = 0\n\n    while True:\n        node_id = None\n        for index, record in enumerate(records):\n            if record is None:\n                node_id = index\n                break\n\n        if node_id is None:\n            break\n        else:\n            current_time = internal_dfs(node_id, current_time + 1)\n\n    return records\n\n\nif __name__ == \"__main__\":\n    # ??????????????????\n    # lines = [\n    #     \"6\",\n    #     \"1 2 2 3\",\n    #     \"2 2 3 4\",\n    #     \"3 1 5\",\n    #     \"4 1 6\",\n    #     \"5 1 6\",\n    #     \"6 0\",\n    # ]\n    lines = sys.stdin.readlines()\n\n    # Create n * n matrix\n    dimension = int(lines[0])\n    matrix = []\n    for x in range(dimension):\n        matrix.append([0] * dimension)\n\n    # Set edge info\n    for index, line in enumerate(lines[1:]):\n        for edge in [int(x) for x in line.strip().split(\" \")[2:]]:\n            matrix[index][edge - 1] = 1\n\n    records = dfs(matrix)\n    for index, line in enumerate(records):\n        if line is not None:\n            print(\"%d %d %d\" % (index + 1, line.get(\"visit\", -1), line.get(\"leave\", -1)))\n        else:\n            print(\"%d None None\" % (index + 1))","label":2}
{"problem_id":"p03563","problem":"Takahashi is a user of a site that hosts programming contests.\nWhen a user competes in a contest, the rating of the user (not necessarily an integer) changes according to the performance of the user, as follows:  \n\nLet the current rating of the user be a.\nSuppose that the performance of the user in the contest is b.\nThen, the new rating of the user will be the avarage of a and b.\n\nFor example, if a user with rating 1 competes in a contest and gives performance 1000, his\/her new rating will be 500.5, the average of 1 and 1000.\nTakahashi's current rating is R, and he wants his rating to be exactly G after the next contest.\nFind the performance required to achieve it.","submission_id":"s316288422","submission":"R = int(input())\nG = int(input())\na = R\n\nb = G * 2 - a\n\nprint(b)\n","label":2}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s500857740","submission":"n,m=map(int,input().split());print(\"YNeos\"[n>m::2])","label":2}
{"problem_id":"p03345","problem":"Takahashi, Nakahashi and Hikuhashi have integers A, B and C, respectively.\nAfter repeating the following operation K times, find the integer Takahashi will get minus the integer Nakahashi will get:\n\nEach of them simultaneously calculate the sum of the integers that the other two people have, then replace his own integer with the result.\n\nHowever, if the absolute value of the answer exceeds 10^{18}, print Unfair instead.","submission_id":"s198564236","submission":"A,B,C,K=list(map(str,input().split()))\nif K[-1]=='0' or K[-1]=='2' or K[-1]=='4' or K[-1]=='6' or K[-1]=='8':\n    ans=int(A)-int(B)\n    if len(str(ans))>18:\n        print('unfair')\n    else:\n        print(ans)\nelse:\n    ans=int(B)-int(A)\n    if len(str(ans))>18:\n        print('unfair')\n    else:\n        print(ans)","label":2}
{"problem_id":"p03325","problem":"As AtCoder Beginner Contest 100 is taking place, the office of AtCoder, Inc. is decorated with a sequence of length N, a = {a_1, a_2, a_3, ..., a_N}.\nSnuke, an employee, would like to play with this sequence.\nSpecifically, he would like to repeat the following operation as many times as possible:\nFor every i satisfying 1 \\leq i \\leq N, perform one of the following: \"divide a_i by 2\" and \"multiply a_i by 3\".  \nHere, choosing \"multiply a_i by 3\" for every i is not allowed, and the value of a_i after the operation must be an integer.\n\nAt most how many operations can be performed?","submission_id":"s860131852","submission":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate, product # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165g\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\nn = I()\nA = readInts()\nans = 0\nfor v in A:\n    while v%2 == 0:\n        ans += 1\n        v\/\/=2\nprint(ans)\n","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s941573037","submission":"from sys import stdin\n\n\ndef main():\n    N = int(input())\n    a_list = [int(x) for x in stdin.readline().rstrip().split()]\n    a_set = set(a_list)\n\n    if len(a_set) == 1:\n        if sum(a_set) == 0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n    elif len(a_set) == 2:\n        a_1, _2 = sorted(a_set)\n        if a_1 == 0:\n            if a_list.count(a_1) * 3 == N:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n\n    elif len(a_set) == 3:\n        a_1, a_2, a_3 = a_set\n        if a_list.count(a_1) == a_list.count(a_2) and a_list.count(a_2) == a_list.count(a_3):\n            if a_1 ^ a_2 == a_3:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p03659","problem":"Snuke and Raccoon have a heap of N cards. The i-th card from the top has the integer a_i written on it.\nThey will share these cards.\nFirst, Snuke will take some number of cards from the top of the heap, then Raccoon will take all the remaining cards.\nHere, both Snuke and Raccoon have to take at least one card.\nLet the sum of the integers on Snuke's cards and Raccoon's cards be x and y, respectively.\nThey would like to minimize |x-y|.\nFind the minimum possible value of |x-y|.","submission_id":"s333446549","submission":"N = int(input())\nA = list(map(int, input().split()))\n\nx = A[0]\ny = sum(A[1:])\nans = abs(y - x)\nfor i in range(1, N - 1):\n    x += A[i]\n    y -= A[i]\n    ans = min(ans, abs(y - x))\nprint(ans)\n","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s975218350","submission":"from collections import Counter\n\nN = int(input())\nA = list(map(int, input().split()))\n\nif A.count(0) == N:\n    print(\"Yes\")\n    exit()\n\nd = Counter(A)\nif len(d.keys()) > 3:\n    print(\"No\")\n    exit()\nelif len(d.keys()) == 3:\n    a, b, c = d.keys()\n    if d[a] == d[b] == d[c] and a ^ b ^ c == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    exit()\nelif len(d.keys()) == 2:\n    a, b = d.keys()\n    if a * b != 0:\n        print(\"No\")\n    else:\n        if a != 0:\n            d[a], d[b] = d[b], d[a]  # a\u30920\u306b\u3059\u308b\n        if d[a] * 3 == N and 3 * d[b] == 2 * N:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    exit()\nprint(\"No\")\n\n","label":2}
{"problem_id":"p03295","problem":"There are N islands lining up from west to east, connected by N-1 bridges.\nThe i-th bridge connects the i-th island from the west and the (i+1)-th island from the west.\nOne day, disputes took place between some islands, and there were M requests from the inhabitants of the islands:\nRequest i: A dispute took place between the a_i-th island from the west and the b_i-th island from the west. Please make traveling between these islands with bridges impossible.\nYou decided to remove some bridges to meet all these M requests.\nFind the minimum number of bridges that must be removed.","submission_id":"s757027327","submission":"n, m = map(int, input().split())\nX = []\nfor i in range(m):\n    a, b = map(int, input().split())\n    a, b = a-1, b-1\n    X.append((b,a))\nX.sort()\n\npre_b = -1\nans = 0\nfor i in range(m):\n    b, a = X[i]\n    if a >= pre_b:\n        ans += 1\n        pre_b = b\nprint(ans)\n","label":2}
{"problem_id":"p02660","problem":"Given is a positive integer N. Consider repeatedly applying the operation below on N:\n\nFirst, choose a positive integer z satisfying all of the conditions below:\nz can be represented as z=p^e, where p is a prime number and e is a positive integer;\nz divides N;\nz is different from all integers chosen in previous operations.\n\n\nThen, replace N with N\/z.\n\nFind the maximum number of times the operation can be applied.","submission_id":"s383962500","submission":"from collections import Counter\n \nN = int(input())\n \ndef prime_factorize(n):\n    a = []\n    while n % 2 == 0:\n        a.append(2)\n        n \/\/= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a.append(f)\n            n \/\/= f\n        else:\n            f += 2\n    if n != 1:\n        a.append(n)\n    return a\n\na = prime_factorize(N)\nnum = list(Counter(a).values())\n\nans = 0\nfor i in num:\n    j = 1\n    while i - j >= 0:\n        ans += 1\n        i -= j\n        j += 1\n \nprint(ans)","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s358497855","submission":"x = input()\nif x.endswith(\"s\") == True:\n  x = x + \"es\"\nelse:\n  x = x + \"s\"\nprint(x)","label":2}
{"problem_id":"p03087","problem":"You are given a string S of length N consisting of A, C, G and T. Answer the following Q queries:\n\nQuery i (1 \\leq i \\leq Q): You will be given integers l_i and r_i (1 \\leq l_i < r_i \\leq N). Consider the substring of S starting at index l_i and ending at index r_i (both inclusive). In this string, how many times does AC occurs as a substring?","submission_id":"s271217670","submission":"import bisect\ndef main():\n    N, Q = map(int, input().split())\n    S = input()\n    ll = []\n    t = -1\n    for i, v in enumerate(S):\n        if v == 'A':\n            t = i\n        elif v == 'C':\n            if t == i-1:\n                ll.append(i)\n                t = -1\n    for _ in range(Q):\n        l, r = map(int, input().split())\n        l -= 1\n        r -= 1\n        li = bisect.bisect_right(ll, l)\n        ri = bisect.bisect_right(ll, r)\n        print(ri-li)\nmain()\n","label":2}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s154924770","submission":"# D - String Equivalence \ndef dfs(s, mx):\n    if len(s)==n:\n        print(s)\n        return\n    for c in range(ord('a'),ord(mx)+1):\n        dfs(s+chr(c),(chr(ord(mx)+1) if ord(mx)==c else mx))\n\nn=int(input())\ndfs('','a')\n","label":2}
{"problem_id":"p03252","problem":"You are given strings S and T consisting of lowercase English letters.\nYou can perform the following operation on S any number of times:\nOperation: Choose two distinct lowercase English letters c_1 and c_2, then replace every occurrence of c_1 with c_2, and every occurrence of c_2 with c_1.\nDetermine if S and T can be made equal by performing the operation zero or more times.","submission_id":"s366277892","submission":"s = input()\nt = input()\nd = {}\nd2 = {}\nfor i in range(len(s)):\n  if t[i] in d:\n    if d[t[i]] != s[i]:\n      print(\"No\")\n      break\n  if s[i] in d2:\n    if d2[s[i]] != t[i]:\n      print(\"No\")\n      break\n  else:\n    d[t[i]] = s[i]\n    d2[s[i]] = t[i]\nelse:\n  print(\"Yes\")\n","label":2}
{"problem_id":"p03944","problem":"There is a rectangle in the xy-plane, with its lower left corner at (0, 0) and its upper right corner at (W, H). Each of its sides is parallel to the x-axis or y-axis. Initially, the whole region within the rectangle is painted white.\nSnuke plotted N points into the rectangle. The coordinate of the i-th (1 \u2266 i \u2266 N) point was (x_i, y_i).\nThen, he created an integer sequence a of length N, and for each 1 \u2266 i \u2266 N, he painted some region within the rectangle black, as follows:\n\nIf a_i = 1, he painted the region satisfying x < x_i within the rectangle.\nIf a_i = 2, he painted the region satisfying x > x_i within the rectangle.\nIf a_i = 3, he painted the region satisfying y < y_i within the rectangle.\nIf a_i = 4, he painted the region satisfying y > y_i within the rectangle.\n\nFind the area of the white region within the rectangle after he finished painting.","submission_id":"s326443729","submission":"W,H,N=map(int,input().split())\n# W\u306fx\u8ef8\u3001H\u306fy\u8ef8\nx_s=0\nx_g=W\ny_s=0\ny_g=H\n\nfor i in range(N):\n  x,y,a=map(int,input().split())\n  # a\u304c1\u306a\u3089x\u306e\u59cb\u70b9\u304cxi\u306b\u306a\u308b\n  # a\u304c2\u306a\u3089x\u306e\u7d42\u70b9\u304cxi\u306b\u306a\u308b\n  # a\u304c3\u306a\u3089y\u306e\u59cb\u70b9\u304cyi\u306b\u306a\u308b\n  # a\u304c4\u306a\u3089y\u306e\u59cb\u70b9\u304cyi\u306b\u306a\u308b\n  if a==1:\n    if x_s<x:x_s=x\n  elif a==2:\n    if x_g>x:x_g=x\n  elif a==3:\n    if y_s<y:y_s=y\n  else:\n    if y_g>y:y_g=y\nif (x_g-x_s) <= 0 or (y_g-y_s)<= 0:\n  print(0)\nelse:\n  print((x_g-x_s)*(y_g-y_s))\n","label":2}
{"problem_id":"p02806","problem":"Niwango created a playlist of N songs.\nThe title and the duration of the i-th song are s_i and t_i seconds, respectively.\nIt is guaranteed that s_1,\\ldots,s_N are all distinct.\nNiwango was doing some work while playing this playlist. (That is, all the songs were played once, in the order they appear in the playlist, without any pause in between.)\nHowever, he fell asleep during his work, and he woke up after all the songs were played.\nAccording to his record, it turned out that he fell asleep at the very end of the song titled X.\nFind the duration of time when some song was played while Niwango was asleep.","submission_id":"s527034979","submission":"N=int(input())\ns,t=zip(*[input().split() for i in range(N)])\nX=input()\nprint(sum(map(int,t[s.index(X)+1:])))","label":2}
{"problem_id":"p03379","problem":"When l is an odd number, the median of l numbers a_1, a_2, ..., a_l is the (\\frac{l+1}{2})-th largest value among a_1, a_2, ..., a_l.\nYou are given N numbers X_1, X_2, ..., X_N, where N is an even number.\nFor each i = 1, 2, ..., N, let the median of X_1, X_2, ..., X_N excluding X_i, that is, the median of X_1, X_2, ..., X_{i-1}, X_{i+1}, ..., X_N be B_i.\nFind B_i for each i = 1, 2, ..., N.","submission_id":"s896152928","submission":"N=int(input())\n*X,=map(int,input().split())\nY=sorted(X)\n\nmr=Y[N\/\/2]\nml=Y[N\/\/2-1]\n\nfor x in X:\n    if mr<=x:\n        print(ml)\n    else:\n        print(mr)","label":2}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s522891131","submission":"s=input();t=input()\nc=0\nfor i in range(3):\n  c += (s[i] == t[i])\nprint(c)","label":2}
{"problem_id":"p02383","problem":"Write a program to simulate rolling a dice, which can be constructed by the following net.","submission_id":"s661861079","submission":"dice=input().split()\nprocess=input()\n\ndo = {'N': (2,6,3,4,1,5),'S': (5,1,3,4,6,2),'E':(4,2,1,6,5,3),'W': (3,2,6,1,5,4)}\n\nfor x in process:\n    dice=[dice[y-1] for y in do[x]]\nprint(dice[0])\n","label":2}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s404889563","submission":"def resolve():\n    n,m = map(int,input().split())\n    print('Yes' if n==m else 'No')\nresolve()","label":2}
{"problem_id":"p03147","problem":"In a flower bed, there are N flowers, numbered 1,2,......,N. Initially, the heights of all flowers are 0.\nYou are given a sequence h=\\{h_1,h_2,h_3,......\\} as input. You would like to change the height of Flower k to h_k for all k (1 \\leq  k \\leq N), by repeating the following \"watering\" operation:\n\nSpecify integers l and r. Increase the height of Flower x by 1 for all x such that l \\leq x \\leq r.\n\nFind the minimum number of watering operations required to satisfy the condition.","submission_id":"s420248850","submission":"n = int(input())\nh = list(map(int,input().split()))\n\nans = 0\npre = 0\nfor i in h:\n    if pre < i:\n        ans += i-pre\n\n    pre = i\n\nprint(ans)\n","label":2}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s883277446","submission":"a,b = map(int, input().split())\nif a>=13:print(b)\nelif 6<=a<13:print(int(b\/2))\nelse:print(0)","label":2}
{"problem_id":"p03609","problem":"We have a sandglass that runs for X seconds. The sand drops from the upper bulb at a rate of 1 gram per second. That is, the upper bulb initially contains X grams of sand.\nHow many grams of sand will the upper bulb contains after t seconds?","submission_id":"s875219205","submission":"X,t= map(int,input().split())\n\nif (X-t)>0:\n\tprint(X-t)\n    \nif (X-t)<=0:\n  \tprint('0')\n  ","label":2}
{"problem_id":"p03697","problem":"You are given two integers A and B as the input. Output the value of A + B.\nHowever, if A + B is 10 or greater, output error instead.","submission_id":"s708635858","submission":"def main():\n    a, b = map(int, input().split())\n\n    if a + b >= 10:\n        print(\"error\")\n    else:\n        print(a + b)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":2}
{"problem_id":"p02975","problem":"Snuke has N hats. The i-th hat has an integer a_i written on it.\nThere are N camels standing in a circle.\nSnuke will put one of his hats on each of these camels.\nIf there exists a way to distribute the hats to the camels such that the following condition is satisfied for every camel, print Yes; otherwise, print No.\n\nThe bitwise XOR of the numbers written on the hats on both adjacent camels is equal to the number on the hat on itself.\n\n\nWhat is XOR?\n\nThe bitwise XOR x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n of n non-negative integers x_1, x_2, \\ldots, x_n is defined as follows:\n\n- When x_1 \\oplus x_2 \\oplus \\ldots \\oplus x_n is written in base two, the digit in the 2^k's place (k \\geq 0) is 1 if the number of integers among x_1, x_2, \\ldots, x_n whose binary representations have 1 in the 2^k's place is odd, and 0 if that count is even.\n\nFor example, 3 \\oplus 5 = 6.","submission_id":"s472030406","submission":"from collections import Counter\nimport sys\ninput = sys.stdin.readline\n\nn = int(input())\na = list(map(int, input().split()))\n\nc = Counter(a)\n\nif c[0] == n:\n    print(\"Yes\")\nelif len(c) == 2 and c[0]*3 == n:\n    print(\"Yes\")\nelif len(c) == 3 and len(set(c.values())) == 1:\n    a, b, c = c.keys()\n    if (a ^ b ^ c) == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nelse:\n    print(\"No\")\n","label":2}
{"problem_id":"p02711","problem":"Given is a three-digit integer N. Does N contain the digit 7?\nIf so, print Yes; otherwise, print No.","submission_id":"s487719129","submission":"print(\"Yes\" if input().count(\"7\") > 0 else \"No\")","label":2}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s083840508","submission":"s = []\ns =  input()\n\nif s[-1:] == \"s\":\n  s += \"es\"\n  print(s)\nelse:\n  s += \"s\"\n  print(s)\n","label":2}
{"problem_id":"p03050","problem":"Snuke received a positive integer N from Takahashi.\nA positive integer m is called a favorite number when the following condition is satisfied:\n\nThe quotient and remainder of N divided by m are equal, that is, \\lfloor \\frac{N}{m} \\rfloor = N \\bmod m holds.\n\nFind all favorite numbers and print the sum of those.","submission_id":"s782787027","submission":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7 \n#mod = 998244353\nfrom decimal import *\n#import numpy as np\n#decimal.getcontext().prec = 10\n\nN = INT()\n\nans = 0\nm = INF\nr = 1\n\nwhile r < m:\n\tm = (N-r)\/r\n\tif (N-r)%r == 0 and r < m:\n\t\tans += m\n\tr += 1\n\nprint(int(ans))","label":2}
{"problem_id":"p03469","problem":"On some day in January 2018, Takaki is writing a document. The document has a column where the current date is written in yyyy\/mm\/dd format. For example, January 23, 2018 should be written as 2018\/01\/23.\nAfter finishing the document, she noticed that she had mistakenly wrote 2017 at the beginning of the date column. Write a program that, when the string that Takaki wrote in the date column, S, is given as input, modifies the first four characters in S to 2018 and prints it.","submission_id":"s283890252","submission":"li = input().split(\"\/\")\nli[0]=\"2018\"\nans = li[0]+\"\/\"+li[1]+\"\/\"+li[2]\nprint(ans)","label":2}
{"problem_id":"p03760","problem":"Snuke signed up for a new website which holds programming competitions.\nHe worried that he might forget his password, and he took notes of it.\nSince directly recording his password would cause him trouble if stolen,\nhe took two notes: one contains the characters at the odd-numbered positions, and the other contains the characters at the even-numbered positions.\nYou are given two strings O and E. O contains the characters at the odd-numbered positions retaining their relative order, and E contains the characters at the even-numbered positions retaining their relative order.\nRestore the original password.","submission_id":"s576243035","submission":"O = input()\nE = input()\nnum = len(O) + len(E)\nans = [O[i\/\/2] if i % 2 == 0 else E[i\/\/2] for i in range(num)]\nprint(''.join(ans))\n","label":2}
{"problem_id":"p03962","problem":"AtCoDeer the deer recently bought three paint cans.\nThe color of the one he bought two days ago is a, the color of the one he bought yesterday is b, and the color of the one he bought today is c.\nHere, the color of each paint can is represented by an integer between 1 and 100, inclusive.\nSince he is forgetful, he might have bought more than one paint can in the same color.\nCount the number of different kinds of colors of these paint cans and tell him.","submission_id":"s497805599","submission":"ary = list(map(int, input().split()))\nprint(len(set(ary)))","label":2}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s407779472","submission":"N, M = map(int, input().split())\nA = list(map(int, input().split()))\ncnt = 0\nsum_A = sum(A)\nA.sort(reverse=True)\nfor a in A:\n    if a >= sum_A \/ (4 * M):\n        cnt += 1\n    else:\n        break\nif cnt >= M:\n    print('Yes')\nelse:\n    print('No')","label":1}
{"problem_id":"p02664","problem":"For a string S consisting of the uppercase English letters P and D, let the doctoral and postdoctoral quotient of S be the total number of occurrences of D and PD in S as contiguous substrings. For example, if S = PPDDP, it contains two occurrences of D and one occurrence of PD as contiguous substrings, so the doctoral and postdoctoral quotient of S is 3.\nWe have a string T consisting of P, D, and ?.\nAmong the strings that can be obtained by replacing each ? in T with P or D, find one with the maximum possible doctoral and postdoctoral quotient.","submission_id":"s651669431","submission":"S = list(input())\n\nfor i in range(len(S)):\n    if S[i] == \"?\":\n        S[i] = \"D\"\n\nS = \"\".join(S)\nprint(S)","label":1}
{"problem_id":"p04031","problem":"Evi has N integers a_1,a_2,..,a_N. His objective is to have N equal integers by transforming some of them.\nHe may transform each integer at most once. Transforming an integer x into another integer y costs him (x-y)^2 dollars. Even if a_i=a_j (i\u2260j), he has to pay the cost separately for transforming each of them (See Sample 2).\nFind the minimum total cost to achieve his objective.","submission_id":"s338706407","submission":"from statistics import mean \nimport math\nn=int(input())\narr=[int(x) for x in input().split()]\na=math.ceil(mean(arr))\nb=math.floor(mean(arr))\ns1=0\ns2=0\nfor x in arr:\n    s1=s1+((x-a)**2)\n    s2=s2+((x-b)**2)\nprint(min(s1,s2))\n","label":1}
{"problem_id":"p03290","problem":"A programming competition site AtCode provides algorithmic problems.\nEach problem is allocated a score based on its difficulty.\nCurrently, for each integer i between 1 and D (inclusive), there are p_i problems with a score of 100i points.\nThese p_1 + \u2026 + p_D problems are all of the problems available on AtCode.\nA user of AtCode has a value called total score.\nThe total score of a user is the sum of the following two elements:\n\nBase score: the sum of the scores of all problems solved by the user.\nPerfect bonuses: when a user solves all problems with a score of 100i points, he\/she earns the perfect bonus of c_i points, aside from the base score (1 \u2264 i \u2264 D).\n\nTakahashi, who is the new user of AtCode, has not solved any problem.\nHis objective is to have a total score of G or more points.\nAt least how many problems does he need to solve for this objective?","submission_id":"s102305235","submission":"import sys \nsys.setrecursionlimit(10**8)\n\ndef dfs(i,sum,count,nokori):\n  global ans\n  if i==d:\n    if sum<g:\n      use=max(nokori)\n      n=min(pc[use-1][0],-(-(g-sum)\/\/(100*use)))\n      count +=n\n      sum +=n*100*use\n\n    if sum>=g:\n      ans=min(ans,count)\n\n  else:\n    dfs(i+1,sum,count,nokori)\n    dfs(i+1,sum+pc[i][0]*100*(i+1)+pc[i][1],count+pc[i][0],nokori-{i+1})\n\nd,g=map(int,input().split())\npc=[list(map(int,input().split())) for i in range(d)]\nans=float('inf')\n\ndfs(0,0,0,set(range(1,d+1)))\n\nprint(ans)  ","label":1}
{"problem_id":"p02854","problem":"Takahashi, who works at DISCO, is standing before an iron bar.\nThe bar has N-1 notches, which divide the bar into N sections. The i-th section from the left has a length of A_i millimeters.\nTakahashi wanted to choose a notch and cut the bar at that point into two parts with the same length.\nHowever, this may not be possible as is, so he will do the following operations some number of times before he does the cut:\n\nChoose one section and expand it, increasing its length by 1 millimeter. Doing this operation once costs 1 yen (the currency of Japan).\nChoose one section of length at least 2 millimeters and shrink it, decreasing its length by 1 millimeter. Doing this operation once costs 1 yen.\n\nFind the minimum amount of money needed before cutting the bar into two parts with the same length.","submission_id":"s514896729","submission":"'''\n\u53c2\u8003\nhttps:\/\/qiita.com\/c-yan\/items\/f7c99c8f8ec418a58c42\n\n\u68d2\u306e\u5168\u9577\u3092L\u3001\u5207\u65ad\u7b87\u6240\u3092C\u3068\u3059\u308b\u3068\u3001\u304b\u304b\u308b\u30b3\u30b9\u30c8\u306f|2C-L|\u3068\u306a\u308b\n\uff08\u5de6\u7aef\u304b\u3089\u5207\u65ad\u7b87\u6240\u307e\u3067\u306e\u9577\u3055\u30922\u500d\u3057\u3001\u5143\u306e\u68d2\u306e\u5168\u9577\u3092\u5f15\u3044\u305f\u3082\u306e\u306e\u7d76\u5bfe\u5024\uff09\n\u2235\n\u30fbC\u304cL\/2\u3088\u308a\u3082\u5de6\u306b\u3042\u308b\u5834\u5408\uff08=\u68d2\u306e\u5de6\u7aef\u304b\u3089C\u307e\u3067\u306e\u9577\u3055\u306e\u307b\u3046\u304c\u77ed\u3044\uff09\n\u21d2C\u3088\u308a\u3082\u5de6\u5074\u306b2C-L\u8db3\u3059\u304b\u3001\u53f3\u5074\u30922C-L\u6e1b\u3089\u3059\n\u30fbC\u304cL\/2\u3088\u308a\u3082\u53f3\u306b\u3042\u308b\u5834\u5408\uff08=\u68d2\u306e\u5de6\u7aef\u304b\u3089C\u307e\u3067\u306e\u9577\u3055\u306e\u307b\u3046\u304c\u9577\u3044\uff09\n\u21d2C\u3088\u308a\u3082\u5de6\u5074\u30922C-L\u6e1b\u3089\u3059\u304b\u3001\u53f3\u5074\u306b2C-L\u8db3\u3059\n\n\u4e0e\u3048\u3089\u308c\u305f\u30ea\u30b9\u30c8A\u306e\u3046\u3061\u3001\u3069\u306e\u5730\u70b9\u3092C\u3068\u3059\u308b\u304b\u306f\n\u30ea\u30b9\u30c8A\u306e\u5148\u982d\u306e\u8981\u7d20\u304b\u3089N-1\u500b\u306e\u8981\u7d20\u3092\u305d\u308c\u305e\u308c\u8abf\u3079\u3001\n\u5148\u982d\u8981\u7d20\u304b\u3089\u73fe\u5728\u306e\u8981\u7d20\u307e\u3067\u306e\u5408\u8a08\uff08\u7d2f\u7a4d\u548c\uff09\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\u3092\u5225\u9014\u4f5c\u6210\u3001\n\u305d\u306e\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066|2C-L|\u304c\u6700\u5c0f\u3068\u306a\u308b\u30b1\u30fc\u30b9\u3092\u8abf\u3079\u308b\n'''\nN = int(input())\nA = list(map(int, input().split()))\nL = sum(A)\n#tmp = []\ntmp = A[:-1]\n\nfor i in range(1, N-1):\n#    tmp.append(sum(A[:i+1]))       # \u5b9f\u884c\u6642\u9593\u8d85\u904e\u3057\u3066\u3057\u307e\u3046\u305f\u3081\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n    tmp[i] += tmp[i-1]\n\ncost = min(abs(c*2-L) for c in tmp)\nprint(cost)\n","label":1}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s733785562","submission":"N = int(input())\nS = input()\nK = int(input())\nans = \"\"\nfor i in S:\n  if i != S[K - 1]: ans += \"*\"\n  else: ans += S[K - 1]  \nprint(ans)  ","label":1}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s032095552","submission":"s = str(input())\n\nwlist = [i for i in range(len(s)) if s[i] == 'W']\nans, cnt = 0, 0\nfor i in wlist:\n    ans += i - cnt\n    cnt += 1\nprint(ans)","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s580340036","submission":"word = input()\n\nif word[-1] == 's':\n  countable = word + 'es'\nelse:\n  countable = word + 's'\n  \nprint(countable)","label":1}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s543148747","submission":"import os\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\n\nsys.setrecursionlimit(10 ** 9)\nINF = float(\"inf\")\nIINF = 10 ** 18\nMOD = 10 ** 9 + 7\n# MOD = 998244353\n\n\nS = sys.stdin.buffer.readline().decode().rstrip()\n\na = 0\nab = 0\nabc = 0\nq = 0\nfor i, s in enumerate(S):\n    if s == 'C':\n        abc += ab\n    if s == 'B':\n        ab += a\n    if s == 'A':\n        a += pow(3, q, MOD)\n    if s == '?':\n        abc = abc * 3 + ab\n        ab = ab * 3 + a\n        a = a * 3 + pow(3, q, MOD)\n        q += 1\n    a %= MOD\n    ab %= MOD\n    abc %= MOD\n    # print(s, a, ab, abc)\nprint(abc)\n","label":1}
{"problem_id":"p04043","problem":"Iroha loves Haiku. Haiku is a short form of Japanese poetry. A Haiku consists of three phrases with 5, 7 and 5 syllables, in this order.\nTo create a Haiku, Iroha has come up with three different phrases. These phrases have A, B and C syllables, respectively. Determine whether she can construct a Haiku by using each of the phrases once, in some order.","submission_id":"s638221379","submission":"lst = list(map(int, input().split()))\nslst = sorted(lst)\nif slst == [5, 5, 7]:\n  print(\"YES\")\nelse:\n  print(\"NO\")","label":1}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s599945229","submission":"n=int(input())\na=[*map(int,input().split())]\nfrom math import *\nl,r=[0]*n,[0]*n\nfor i in range(1,n):\n  l[i]=gcd(l[i-1],a[i-1])\n  r[~i]=gcd(r[-i],a[-i])\nm=0\nfor i in range(n):\n  m=max(m,gcd(l[i],r[i]))\nprint(m)","label":1}
{"problem_id":"p02742","problem":"We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:","submission_id":"s688063001","submission":"def resolve():\n    H,W = map(int,input().split())\n    if H == 1 or W == 1:\n        print(1)\n    else:\n        ans = (H * W + 1) \/\/ 2\n        print(ans)\nresolve()","label":1}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s299365319","submission":"n,m = map(int,input().split())\nans=\"No\"\nif n==m :\n    ans=\"Yes\"\nprint(ans)\n\n","label":1}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s720438417","submission":"def resolve():\n    # \u6574\u6570 1 \u3064\n    n = int(input())\n    # \u6574\u6570\u8907\u6570\u500b\n    # a, b = map(int, input().split())\n    # \u6574\u6570 N \u500b (\u6539\u884c\u533a\u5207\u308a)\n    # N = [int(input()) for i in range(N)]\n    # \u6574\u6570 N \u500b (\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a)\n    A = list(map(int, input().split()))\n    # \u6574\u6570 (\u7e26 H \u6a2a W \u306e\u884c\u5217)\n    # A = [list(map(int, input().split())) for i in range(H)]\n\n    cnt = 0\n    for x in A:\n        if x % 2 == 1:\n            cnt += 1\n\n    if cnt % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nresolve()","label":1}
{"problem_id":"p03786","problem":"Snuke found N strange creatures.\nEach creature has a fixed color and size. The color and size of the i-th creature are represented by i and A_i, respectively.\nEvery creature can absorb another creature whose size is at most twice the size of itself.\nWhen a creature of size A and color B absorbs another creature of size C and color D (C \\leq 2 \\times A), they will merge into one creature of size A+C and color B.\nHere, depending on the sizes of two creatures, it is possible that both of them can absorb the other.\nSnuke has been watching these creatures merge over and over and ultimately become one creature.\nFind the number of the possible colors of this creature.","submission_id":"s223071592","submission":"N = int(input())\nA = list(map(int, input().split()))\nA.sort()\n\nru = [A[0]]\nfor i in range(1, N):\n    ru.append(A[i]+ru[-1])\n\nx = 0\nfor i in range(N-1, 0, -1):\n    if ru[i-1]*2 < A[i]:\n        x = i\n        break\n\nprint(N-x)","label":1}
{"problem_id":"p03456","problem":"AtCoDeer the deer has found two positive integers, a and b.\nDetermine whether the concatenation of a and b in this order is a square number.","submission_id":"s867751530","submission":"import math\na, b = input().split()\nab = int(a + b)\nresult = math.sqrt(ab)\nvalue = result % 1\nif result * result == ab and value == 0:\n  print('Yes')\nelse:\n  print('No')","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s433459927","submission":"def sep():\n    return map(int,input().strip().split(\" \"))\ndef lis():\n    return list(sep())\n\n\ns=input()\nif s[-1]==\"s\":\n    print(s+\"es\")\nelse:\n    print(s+\"s\")","label":1}
{"problem_id":"p02647","problem":"We have N bulbs arranged on a number line, numbered 1 to N from left to right.\nBulb i is at coordinate i.\nEach bulb has a non-negative integer parameter called intensity.\nWhen there is a bulb of intensity d at coordinate x, the bulb illuminates the segment from coordinate x-d-0.5 to x+d+0.5.\nInitially, the intensity of Bulb i is A_i. We will now do the following operation K times in a row:\n\nFor each integer i between 1 and N (inclusive), let B_i be the number of bulbs illuminating coordinate i. Then, change the intensity of each bulb i to B_i.\n\nFind the intensity of each bulb after the K operations.","submission_id":"s390688761","submission":"from itertools import accumulate\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(k):\n   b = [0] * n\n   for i in range(n):\n      b[max(0, i-a[i])] += 1\n      tmp = i + a[i] + 1\n      if tmp < n:\n         b[tmp] -= 1\n   a = list(accumulate(b))\n   if a == [n] * n:\n      break\n\nprint(*a)\n","label":1}
{"problem_id":"p03400","problem":"Some number of chocolate pieces were prepared for a training camp.\nThe camp had N participants and lasted for D days.\nThe i-th participant (1 \\leq i \\leq N) ate one chocolate piece on each of the following days in the camp: the 1-st day, the (A_i + 1)-th day, the (2A_i + 1)-th day, and so on.\nAs a result, there were X chocolate pieces remaining at the end of the camp. During the camp, nobody except the participants ate chocolate pieces.\nFind the number of chocolate pieces prepared at the beginning of the camp.","submission_id":"s807087810","submission":"\n\nn = int(raw_input())\nd,x = map(int, raw_input().split())\nais = [int(raw_input()) for _ in range(n)]\n\ndef f(ai,d):\n\treturn 1 + (d-1)\/(ai)\n\nprint x + sum([f(ai,d) for ai in ais] or [0])","label":1}
{"problem_id":"p02420","problem":"Your task is to shuffle a deck of n cards, each of which is marked by a alphabetical letter.","submission_id":"s305785355","submission":"while True:\n\n    string = str(input())\n    box = \"\"\n    \n    \n    if string == \"-\":\n        break\n    \n    shuffle = int(input())\n\n    h = [0]*shuffle\n\n    for a in range(shuffle):\n        h[a] = int(input())\n\n    for b in range(shuffle):\n        box = string[0:h[b]]\n        string = string[h[b]:]\n        string = string+box\n        box = \"\"\n\n    print(string)\n","label":1}
{"problem_id":"p02789","problem":"Takahashi is participating in a programming contest, AXC001. He has just submitted his code to Problem A.\nThe problem has N test cases, all of which must be passed to get an AC verdict.\nTakahashi's submission has passed M cases out of the N test cases.\nDetermine whether Takahashi's submission gets an AC.","submission_id":"s945302680","submission":"A, B = map(int, input().split())\n\nif (A == B):\n  print(\"Yes\")\nelse:\n  print(\"No\")","label":1}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s810328943","submission":"n = int(input())\na = list(map(int,input().split()))\n\nb = list(map(lambda x : x%2 , a))\nif sum(b)%2 :\n  print('NO')\nelse:\n  print('YES')","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s884784786","submission":"N = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    ans += B[A[i] - 1]\n    if i>=1 and A[i] - A[i-1] == 1:\n        ans += C[A[i-1] - 1]\n\nprint(ans)","label":1}
{"problem_id":"p02416","problem":"Write a program which reads an integer and prints sum of its digits.","submission_id":"s895267546","submission":"while True:\n    X = input()\n    if X == \"0\":\n        break\n    num = sum([int(x) for x in X])\n    print(str(num))\n","label":1}
{"problem_id":"p03265","problem":"There is a square in the xy-plane. The coordinates of its four vertices are (x_1,y_1),(x_2,y_2),(x_3,y_3) and (x_4,y_4) in counter-clockwise order.\n(Assume that the positive x-axis points right, and the positive y-axis points up.)\nTakahashi remembers (x_1,y_1) and (x_2,y_2), but he has forgot (x_3,y_3) and (x_4,y_4).\nGiven x_1,x_2,y_1,y_2, restore x_3,y_3,x_4,y_4. It can be shown that x_3,y_3,x_4 and y_4 uniquely exist and have integer values.","submission_id":"s576426600","submission":"X1,Y1,X2,Y2 = list(map(int,input().split()))\n\nX3 = X2 + -1*(Y2-Y1)\nY3 = Y2 + (X2-X1)\nX4 = X3 + -1*(Y3-Y2)\nY4 = Y3 + (X3-X2)\nprint(X3,Y3,X4,Y4)\n","label":1}
{"problem_id":"p03836","problem":"Dolphin resides in two-dimensional Cartesian plane, with the positive x-axis pointing right and the positive y-axis pointing up.\nCurrently, he is located at the point (sx,sy). In each second, he can move up, down, left or right by a distance of 1.\nHere, both the x- and y-coordinates before and after each movement must be integers.\nHe will first visit the point (tx,ty) where sx < tx and sy < ty, then go back to the point (sx,sy), then visit the point (tx,ty) again, and lastly go back to the point (sx,sy).\nHere, during the whole travel, he is not allowed to pass through the same point more than once, except the points (sx,sy) and (tx,ty).\nUnder this condition, find a shortest path for him.","submission_id":"s992671886","submission":"sx, sy, tx, ty = map(int,input().split())\n\nans = \"U\"*(ty-sy)\nans += \"R\"*(tx-sx)\nans += \"D\"*(ty-sy)\nans += \"L\"*(tx-sx)\n\nans += \"L\"\nans += \"U\"*(ty+1-sy)\nans += \"R\"*(tx+1-sx)\nans += \"DR\"\nans += \"D\"*(ty-sy+1)\nans += \"L\"*(tx-sx+1)\nans += \"U\"\n\nprint(ans)","label":1}
{"problem_id":"p03698","problem":"You are given a string S consisting of lowercase English letters. Determine whether all the characters in S are different.","submission_id":"s579785634","submission":"s = input()\nl = list(s)\n\nflag = True\nfor i in range(len(l) - 1):\n    if l[i] in l[i + 1:]:\n        flag = False\n\nif flag:\n    print('yes')\nelse:\n    print('no')","label":1}
{"problem_id":"p03427","problem":"Find the maximum possible sum of the digits (in base 10) of a positive integer not greater than N.","submission_id":"s408316517","submission":"N = input()\ntmp = len(N) - 1\nNL = list(N)\nif len(N) == 1:\n    print(int(N))\nelif all(x == \"9\" for x in NL[1:]):\n    print(int(N[0]) + tmp * 9)\nelse:\n    print(int(N[0]) - 1 + tmp * 9)","label":1}
{"problem_id":"p02780","problem":"We have N dice arranged in a line from left to right. The i-th die from the left shows p_i numbers from 1 to p_i with equal probability when thrown.\nWe will choose K adjacent dice, throw each of them independently, and compute the sum of the numbers shown. Find the maximum possible value of the expected value of this sum.","submission_id":"s318219377","submission":"N, K = map(int, input().split())\nP = [(int(x)+1)\/2 for x in input().split()]\n\ntotal=ans=sum(P[:K])\nfor n in range(K,N):\n  total+=P[n]-P[n-K]\n  ans=max(ans, total)\n\nprint(ans)\n","label":1}
{"problem_id":"p04047","problem":"Snuke is having a barbeque party.\nAt the party, he will make N servings of Skewer Meal.\n\n\nExample of a serving of Skewer Meal\n\nHe has a stock of 2N skewers, all of which will be used in Skewer Meal. The length of the i-th skewer is L_i.\nAlso, he has an infinite supply of ingredients.\nTo make a serving of Skewer Meal, he picks 2 skewers and threads ingredients onto those skewers.\nLet the length of the shorter skewer be x, then the serving can hold the maximum of x ingredients.\nWhat is the maximum total number of ingredients that his N servings of Skewer Meal can hold, if he uses the skewers optimally?","submission_id":"s744518769","submission":"N,*L=map(int, open(0).read().split())\nL=sorted(L)\nprint(sum(map(min, L[::2], L[1::2])))","label":1}
{"problem_id":"p03291","problem":"The ABC number of a string T is the number of triples of integers (i, j, k) that satisfy all of the following conditions:\n\n1 \u2264 i < j < k \u2264 |T| (|T| is the length of T.)\nT_i = A (T_i is the i-th character of T from the beginning.)\nT_j = B\nT_k = C\n\nFor example, when T = ABCBC, there are three triples of integers (i, j, k) that satisfy the conditions: (1, 2, 3), (1, 2, 5), (1, 4, 5). Thus, the ABC number of T is 3.\nYou are given a string S. Each character of S is A, B, C or ?.\nLet Q be the number of occurrences of ? in S. We can make 3^Q strings by replacing each occurrence of ? in S with A, B or C. Find the sum of the ABC numbers of all these strings.\nThis sum can be extremely large, so print the sum modulo 10^9 + 7.","submission_id":"s275141780","submission":"from collections import deque,defaultdict,Counter\nfrom itertools import accumulate\nimport bisect\nfrom heapq import heappop,heappush\nfrom fractions import gcd\nfrom copy import deepcopy\nimport math\nMod = 1000000007\n\n\n\ndef main(): #startline-------------------------------------------\n    S = input()\n    N = len(S)\n    p = [0,0,0,1]\n    for i in range(N):\n        if S[i] == \"A\":\n            p[0] += p[3]\n            p[0] %= Mod\n        elif S[i] == \"B\":\n            p[1] += p[0]\n            p[1] %= Mod\n        elif S[i] == \"C\":\n            p[2] += p[1]\n            p[2] %= Mod\n        elif S[i] == \"?\":\n            p[2] = p[2]*3 + p[1]\n            p[1] = p[1]*3 + p[0]\n            p[0] = p[0]*3 + p[3]\n            p[3] *= 3\n            for l in range(4):\n                p[l] %= Mod\n\n    print(p[2])\nif __name__ == \"__main__\":\n    main() #endline===============================================\n\n\n\n\ndef sieve_of_eratosthenes(n):\n    if not isinstance(n,int):\n        raise TypeError(\"n is not int\")\n    if n<2:\n        raise ValueError(\"n < 2 is not effective\")\n    prime = [1]*(n+1)\n    for i in range(2,int(math.sqrt(n))):\n        if prime[i] == 1:\n            for j in range(2*i,n):\n                if j%i == 0:\n                    prime[j] = 0\n    res = []\n    for i in range(2,n):\n        if prime[i] == 1:\n            res.append(i)\n    return res\n\nclass UnionFind:\n    def __init__(self,n):\n        self.parent = [i for i in range(n+1)]\n        self.rank = [0 for i in range(n+1)]\n    \n    def findroot(self,x):\n        if x == self.parent[x]:\n            return x\n        else:\n            y = self.parent[x]\n            y = self.findroot(self.parent[x])\n            return y\n    \n    def union(self,x,y):\n        px = self.findroot(x)\n        py = self.findroot(y)\n        if px < py:\n            self.parent[py] = px\n        else:\n            self.parent[px] = py\n\n    def same_group_or_no(self,x,y):\n        return self.findroot(x) == self.findroot(y)","label":1}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s342784034","submission":"def e_common_subsequence(N, M, S, T, MOD=10**9 + 7):\n    # dp[i][j]: S[i], T[j] \u307e\u3067\u8003\u616e\u3057\u305f\u3068\u304d\u3001\u3053\u306e2\u3064\u3092\u30da\u30a2\u306b\u3057\u305f\u3068\u304d\u306e\u5834\u5408\u306e\u6570\n    dp = [[0] * (M + 1) for _ in range(N + 1)]\n\n    total = [[0] * (M + 1) for _ in range(N + 1)]\n    for i in range(N + 1):\n        total[i][0] = 1\n    for j in range(M + 1):\n        total[0][j] = 1\n\n    ans = 1  # \u7a7a\u306e\u5217\u306f\u5e38\u306b\u7b49\u3057\u3044\u5217\u3067\u3042\u308b\n    for i in range(N):\n        for j in range(M):\n            if S[i] == T[j]:\n                dp[i + 1][j + 1] = (total[i][j] % MOD)\n                ans += dp[i + 1][j + 1]\n            total[i + 1][j + 1] = (total[i][j + 1] + total[i + 1][j]\n                                   - total[i][j] + dp[i + 1][j + 1] + MOD) % MOD\n    return ans % MOD\n\nN, M = [int(i) for i in input().split()]\nS = [int(i) for i in input().split()]\nT = [int(i) for i in input().split()]\nprint(e_common_subsequence(N, M, S, T))","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s572273574","submission":"N = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\nwhile(all([x%2==0 for x in A])):\n  A = [x\/2 for x in A]\n  count += 1\n  \nprint(count)","label":1}
{"problem_id":"p02928","problem":"We have a sequence of N integers A~=~A_0,~A_1,~...,~A_{N - 1}.\nLet B be a sequence of K \\times N integers obtained by concatenating K copies of A. For example, if A~=~1,~3,~2 and K~=~2, B~=~1,~3,~2,~1,~3,~2.\nFind the inversion number of B, modulo 10^9 + 7.\nHere the inversion number of B is defined as the number of ordered pairs of integers (i,~j)~(0 \\leq i < j \\leq K \\times N - 1) such that  B_i > B_j.","submission_id":"s265970451","submission":"import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\nn,k = list(map(int, input().split()))\na = list(map(int, input().split()))\nv = 0\nv2 = 0\nM = 10**9+7\nfor i in range(n):\n    v += sum(a[i]<a[j] for j in range(i))\n    v2 += sum(a[i]<a[j] for j in range(n))\n#     print(v,v2)\nans = v*k\nans += v2*(k-1)*k\/\/2\nprint(ans%M)","label":1}
{"problem_id":"p02574","problem":"We have N integers. The i-th number is A_i.\n\\{A_i\\} is said to be pairwise coprime when GCD(A_i,A_j)=1 holds for every pair (i, j) such that 1\\leq i < j \\leq N.\n\\{A_i\\} is said to be setwise coprime when \\{A_i\\} is not pairwise coprime but GCD(A_1,\\ldots,A_N)=1.\nDetermine if \\{A_i\\} is pairwise coprime, setwise coprime, or neither.\nHere, GCD(\\ldots) denotes greatest common divisor.","submission_id":"s746022410","submission":"import math,itertools,fractions,heapq,collections,bisect,sys,queue,copy\n\nsys.setrecursionlimit(10**7)\ninf=10**20\nmod=10**9+7\ndd=[(-1,0),(0,1),(1,0),(0,-1)]\nddn=[(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\n# def LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef LS(): return sys.stdin.readline().split()\ndef S(): return input()\n\ndef main():\n  N=I()\n  A=LI()\n\n  g=0\n  for x in A:\n    g=math.gcd(g,x)\n  if g>1:\n    return 'not coprime'\n\n  sosu=[0]*1000100\n  for x in A:\n    if x==1:\n      continue\n    sosu[x]+=1\n    if sosu[x]>1:\n      return 'setwise coprime'\n    for y in range(2,int(math.sqrt(x))+1):\n      if x%y!=0:\n        continue\n      z=x\/\/y\n      if y==z:\n        sosu[y]+=1\n        if sosu[y]>1:\n          return 'setwise coprime'\n      else:\n        sosu[y]+=1\n        if sosu[y]>1:\n          return 'setwise coprime'\n        sosu[z]+=1\n        if sosu[z]>1:\n          return 'setwise coprime'\n\n  return 'pairwise coprime'\n\n# main()\nprint(main())\n","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s451031010","submission":"n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\nans = 0\nprev = -10\nfor i in range(n):\n    ind = a[i] - 1\n    ans += b[ind]\n    if prev + 1 == ind:\n        ans += c[prev]\n    prev = ind\nprint(ans)","label":1}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s005416808","submission":"import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    S = input().rstrip()\n\n    S = S[::-1]\n    idx = 0\n    ans = \"YES\"\n    while idx <= len(S) - 1:\n        is_ok = False\n        if S[idx:idx + 5] in (\"maerd\", \"esare\"):\n            is_ok = True\n            idx += 5\n        if S[idx:idx + 6] == \"resare\":\n            is_ok = True\n            idx += 6\n        if S[idx:idx + 7] == \"remaerd\":\n            is_ok = True\n            idx += 7\n\n        if not is_ok:\n            ans = \"NO\"\n            break\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","label":1}
{"problem_id":"p02718","problem":"We have held a popularity poll for N items on sale. Item i received A_i votes.\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\nIf M popular items can be selected, print Yes; otherwise, print No.","submission_id":"s335767613","submission":"n, m = map(int,input().split())\na = list(map(int,input().split()))\ntotal = sum(a)\n\npopular = [x for x in a if x*4*m >= total]\n\nif len(popular) >= m:\n    print(\"Yes\")\nelse: \n    print(\"No\")\n","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s702286944","submission":"import math\n\na = input()\nif a.endswith('s'):\n    print(a + \"es\")\nelse:\n    print(a + 's')","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s195607378","submission":"import sys\nsys.setrecursionlimit(10**9)\n\ndef mi(): return map(int,input().split())\ndef ii(): return int(input())\ndef isp(): return input().split()\ndef deb(text): print(\"-------\\n{}\\n-------\".format(text))\n\nINF=10**20\ndef main():\n    N=ii()\n    A=list(mi())\n    B=list(mi())\n    C=list(mi())\n\n    pre = INF\n    ans = 0\n    for i in range(N):\n        a = A[i]\n        b = B[a-1]\n        ans += b\n        if a == pre + 1:\n            ans += C[a-2]\n        \n        pre = a\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s214822344","submission":"n = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nprint(sum(b + [c[a[i] - 1] for i in range(n - 1) if a[i + 1] - a[i] == 1]))","label":1}
{"problem_id":"p02846","problem":"Takahashi and Aoki are training for long-distance races in an infinitely long straight course running from west to east.\nThey start simultaneously at the same point and moves as follows towards the east:\n\nTakahashi runs A_1 meters per minute for the first T_1 minutes,  then runs at A_2 meters per minute for the subsequent T_2 minutes, and alternates between these two modes forever.\nAoki runs B_1 meters per minute for the first T_1 minutes,  then runs at B_2 meters per minute for the subsequent T_2 minutes, and alternates between these two modes forever.\n\nHow many times will Takahashi and Aoki meet each other, that is, come to the same point? We do not count the start of the run. If they meet infinitely many times, report that fact.","submission_id":"s998126062","submission":"def sumitb2019_f():\n    t1, t2 = map(int, input().split())\n    a1, a2 = map(int, input().split())\n    b1, b2 = map(int, input().split())\n\n    p = (a1 - b1) * t1\n    q = (a2 - b2) * t2\n    if p > 0:\n        p *= -1\n        q *= -1\n\n    if p + q < 0:\n        ans = 0\n    elif p + q == 0:\n        ans = 'infinity'\n    else:\n        s, t = divmod(-p, p + q)\n        if t == 0: ans = s * 2\n        else: ans = s * 2 + 1\n    print(ans)\n\nif __name__ == '__main__':\n    sumitb2019_f()","label":1}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s733144396","submission":"X,Y,A,B,C = map(int,input().split())\nr = sorted(list(map(int,input().split())),reverse=True)[:X]\ng = sorted(list(map(int,input().split())),reverse=True)[:Y]\nw = list(map(int,input().split()))\n\nnew = sorted(r+g+w,reverse=True)\nprint(sum(new[:X+Y]))","label":1}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s916528198","submission":"s = input()\nt = input()\nc = sum([ 1 for i,j in zip(s,t) if i == j])\nprint(c)","label":1}
{"problem_id":"p03207","problem":"In some other world, today is the day before Christmas Eve.\nMr. Takaha is buying N items at a department store. The regular price of the i-th item (1 \\leq i \\leq N) is p_i yen (the currency of Japan).\nHe has a discount coupon, and can buy one item with the highest price for half the regular price. The remaining N-1 items cost their regular prices. What is the total amount he will pay?","submission_id":"s730414338","submission":"N = int(input())\np = [int(input()) for _ in range(N)]\np.sort()\np[-1] = p[-1]\/2\nprint(int(sum(p)))\n","label":1}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s553784260","submission":"inp=input()\nlist =inp.split()\nage, cost=list[0], list[1]\nage=int(age)\ncost=int(cost)\nif age>=13:\n  cost=cost\nelif age<13 and age>5:\n  cost=cost*0.5\nelse:\n  cost=0\nprint(int(cost))","label":1}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s576885667","submission":"from collections import deque\nN=int(input())\nd=deque()\nd.append(\"a\")\ndall=deque()\ndall.append(d)\ni=0\nwhile i<N-1:\n    length=len(dall)\n    j=0\n    while j<length:\n        l=dall.popleft()\n        llen=len(set(l))\n        for k in range(llen+1):\n            q = deque()\n            for m in range(len(l)):\n                c = l.popleft()\n                q.append(c)\n                l.append(c)\n            q.append(chr(ord(\"a\")+k))\n            dall.append(q)\n        #print(dall)\n        #input()\n        j=j+1\n    i=i+1\n    #print(dall)\n    #input()\n#print(len(dall))\nans=[]\nfor i in range(len(dall)):\n    print(\"\".join(dall[i]))","label":1}
{"problem_id":"p03637","problem":"We have a sequence of length N, a = (a_1, a_2, ..., a_N).\nEach a_i is a positive integer.\nSnuke's objective is to permute the element in a so that the following condition is satisfied:\n\nFor each 1 \u2264 i \u2264 N - 1, the product of a_i and a_{i + 1} is a multiple of 4.\n\nDetermine whether Snuke can achieve his objective.","submission_id":"s035284769","submission":"N = int(input())\nA = list(map(int,input().split()))\n\ntwo = 0\nfour = 0\nodd = 0\n\nfor a in A:\n  if a % 4 == 0:\n    four += 1\n  elif a % 2 == 0:\n    two += 1\n\nN -= max(0, two - 1)\n\nprint(\"Yes\" if four >= N \/\/ 2 else \"No\")","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s932505213","submission":"N = int(input())\nA = list(map(lambda x: int(x) -1, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\ncnt = 0\nprev_food = -10\nfor a in A:\n    cnt += B[a]\n    if prev_food == a-1:\n        cnt += C[a-1]\n    prev_food = a\nprint(cnt)","label":1}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s571939781","submission":"def dv(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n\/\/i)\n    return divisors\nN = int(input())\nA = list(map(int,input().split()))\nl=[]\ncnt = 0\nfor i in set(dv(A[0])+dv(A[1])):\n    cnt = 0\n    for j in range(len(A)):\n        if A[j]%i == 0:\n            cnt += 1\n    if cnt >= N-1:\n        l.append(i)\nprint(max(l))","label":1}
{"problem_id":"p02899","problem":"Takahashi is a teacher responsible for a class of N students.\nThe students are given distinct student numbers from 1 to N.\nToday, all the students entered the classroom at different times.\nAccording to Takahashi's record, there were A_i students in the classroom when student number i entered the classroom (including student number i).\nFrom these records, reconstruct the order in which the students entered the classroom.","submission_id":"s013728092","submission":"n = int(input())\nalist = list(map(int,input().split()))\nnumb = [0]*n\nfor i in range(n):\n    numb[alist[i]-1] = i+1\nfor i in range(n):\n    print(numb[i],end=(' '))","label":1}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s663492572","submission":"import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    from collections import Counter\n\n    N = int(readline())\n    c = Counter()\n\n    for _ in range(N):\n        s = input()\n        c[s] += 1\n\n    _, cnt = c.most_common(1)[0]\n\n    res = []\n    for key, val in c.items():\n        if val == cnt:\n            res.append(key)\n\n    res.sort()\n\n    for x in res:\n        print(x)\n\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p02584","problem":"Takahashi, who lives on the number line, is now at coordinate X. He will make exactly K moves of distance D in the positive or negative direction.\nMore specifically, in one move, he can go from coordinate x to x + D or x - D.\nHe wants to make K moves so that the absolute value of the coordinate of the destination will be the smallest possible.\nFind the minimum possible absolute value of the coordinate of the destination.","submission_id":"s881898386","submission":"X, K, D = map(int, input().split())\n\n\ndef sign(x):\n    return 1 if x >= 0 else -1\n\n\nif abs(X) >= D * K:\n    ans = X - sign(X) * D * K\nelse:\n    l = abs(X) \/\/ D\n    mod = abs(X) % D\n\n    residual = K - l\n\n    if residual % 2 == 0:\n        ans = mod\n    else:\n        ans = mod - sign(mod) * D\n\nprint(abs(ans))\n\n\n","label":1}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s311315781","submission":"from math import gcd\n\nN, X = map(int, input().split())\nxs = list(map(int, input().split()))\n\naX = list(map(lambda x: abs(x-X), xs))\n\nans = aX[0]\nfor i in range(1, N):\n    ans = gcd(ans, aX[i])\nprint(ans)\n","label":1}
{"problem_id":"p02837","problem":"There are N people numbered 1 to N. Each of them is either an honest person whose testimonies are always correct or an unkind person whose testimonies may be correct or not.\nPerson i gives A_i testimonies. The j-th testimony by Person i is represented by two integers x_{ij} and y_{ij}. If y_{ij} = 1, the testimony says Person x_{ij} is honest; if y_{ij} = 0, it says Person x_{ij} is unkind.\nHow many honest persons can be among those N people at most?","submission_id":"s691056870","submission":"n=int(input())\nstate=[[] for _ in range(n)]\nfor _ in range(n):\n    a=int(input())\n    for i in range(a):\n        x,y=map(int,input().split())\n        state[_].append([x,y])\nans=0\nfor i in range(2**n):\n    temp=[0]*n\n    for j in range(n):\n        if i&1: temp[j]=1\n        i>>=1\n    flag=1\n    for k,s in enumerate(temp):\n        if s==0: continue\n        for st in state[k]:\n            if temp[st[0]-1]!=st[1]:\n                flag=0\n                break\n            if not flag: break\n    if flag:\n        cnt=temp.count(1)\n        if cnt>ans: ans=cnt\nprint(ans)","label":1}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s396776378","submission":"import sys\nsys.setrecursionlimit(10 ** 8)\nMOD = 10 ** 9 + 7\ndef Z(): return int(input())\ndef ZZ(): return [int(_) for _ in input().split()]\n\ndef main():\n    N, M = ZZ()\n    MAX_E = 50\n\n    fact = [1] * (N+MAX_E+1) # fact[n] = n!\n    ifact = [1] * (N+MAX_E+1)\n\n    for i in range(1, N+MAX_E+1):\n        fact[i] = i * fact[i-1]\n        fact[i] %= MOD\n    ifact[N+MAX_E] = pow(fact[N+MAX_E], MOD-2, MOD)\n    for i in range(N+MAX_E)[::-1]: ifact[i] = ((i+1) * ifact[i+1]) % MOD\n\n    def combination(n, r):\n        if r < 0 or r > n: return 0\n        return (fact[n] * ifact[n-r] * ifact[r]) % MOD\n\n    def prime_factor(num):\n        i = 2\n        ret = []\n        while i*i <= num:\n            if num%i != 0:\n                i += 1\n                continue\n            cc = 0\n            while num%i == 0:\n                num \/\/= i\n                cc += 1\n            ret.append([i, cc])\n            i += 1\n        if num != 1: ret.append([num, 1])\n        return ret\n\n    ps = prime_factor(M)\n    ans = 1\n    for p, e in ps:\n        ans *= combination(N + e - 1, N - 1)\n        ans %= MOD\n    print(ans)\n\n    return\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p03838","problem":"Snuke has a calculator. It has a display and two buttons.\nInitially, the display shows an integer x.\nSnuke wants to change this value into another integer y, by pressing the following two buttons some number of times in arbitrary order:\n\nButton A: When pressed, the value on the display is incremented by 1.\nButton B: When pressed, the sign of the value on the display is reversed.\n\nFind the minimum number of times Snuke needs to press the buttons to achieve his objective.\nIt can be shown that the objective is always achievable regardless of the values of the integers x and y.","submission_id":"s429172093","submission":"X, Y = map(int, input().split())\n\nif 0 <= X < Y or X < Y <= 0:\n    print(Y-X)\nelif 0 < Y < X or Y < X < 0:\n    print(2+X-Y)\nelif X < 0 < Y or Y < 0 < X:\n    print(1+abs(X+Y))\n\nif X == 0 and Y < 0:\n    print(abs(Y)+1)\nelif Y == 0 and X > 0:\n    print(abs(X)+1)\n","label":1}
{"problem_id":"p03264","problem":"Find the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive). The order does not matter.","submission_id":"s301823893","submission":"K=int(input())\nif K%2==0:\n    print(int(K\/2*K\/2))\nelse:\n    print(int((K-1)\/2*((K-1)\/2+1)))","label":1}
{"problem_id":"p03067","problem":"There are three houses on a number line: House 1, 2 and 3, with coordinates A, B and C, respectively.\nPrint Yes if we pass the coordinate of House 3 on the straight way from House 1 to House 2 without making a detour, and print No otherwise.","submission_id":"s162977635","submission":"A,B,C=map(int,input().split())\nif min(A,B)<C<max(A,B):\n    print('Yes')\nelse:\n    print('No')","label":1}
{"problem_id":"p03238","problem":"In 2020, AtCoder Inc. with an annual sales of more than one billion yen (the currency of Japan) has started a business in programming education.\nOne day, there was an exam where a one-year-old child must write a program that prints Hello World, and a two-year-old child must write a program that receives integers A, B and prints A+B.\nTakahashi, who is taking this exam, suddenly forgets his age.\nHe decides to write a program that first receives his age N (1 or 2) as input, then prints Hello World if N=1, and additionally receives integers A, B and prints A+B if N=2.\nWrite this program for him.","submission_id":"s754826002","submission":"print(\"Hello World\") if input() == \"1\" else print(int(input()) + int(input()) )","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s834036504","submission":"def triple(x):\n    return x*x*x\n\nx=int(input())\nprint(triple(x))","label":1}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s566681894","submission":"from math import gcd\nN = int(input())\nA = list(map(int, input().split()))\ng = A[0]\nfor i in range(1, N):\n  g = gcd(g, A[i])\nans = 0\nwhile g % 2 == 0:\n  g \/\/= 2\n  ans += 1\nprint(ans)","label":1}
{"problem_id":"p02582","problem":"We have weather records at AtCoder Town for some consecutive three days. A string of length 3, S, represents the records - if the i-th character is S, it means it was sunny on the i-th day; if that character is R, it means it was rainy on that day.\nFind the maximum number of consecutive rainy days in this period.","submission_id":"s673576901","submission":"import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef main():\n    S = input()\n    if S == \"RRR\":\n        print(3)\n    elif ((S[0] != 'R') ^ (S[2] != 'R')) and S[1]=='R':\n        print(2)\n    elif S == \"SSS\":\n        print(0)\n    else:\n        print(1)\n\nif __name__=='__main__':\n    main()","label":1}
{"problem_id":"p03862","problem":"There are N boxes arranged in a row.\nInitially, the i-th box from the left contains a_i candies.\nSnuke can perform the following operation any number of times:\n\nChoose a box containing at least one candy, and eat one of the candies in the chosen box.\n\nHis objective is as follows:\n\nAny two neighboring boxes contain at most x candies in total.\n\nFind the minimum number of operations required to achieve the objective.","submission_id":"s341924666","submission":"# -*- coding: utf-8 -*-\nimport sys\nsys.setrecursionlimit(10**9)\nINF=10**18\nMOD=10**9+7\ninput=lambda: sys.stdin.readline().rstrip()\nYesNo=lambda b: bool([print('Yes')] if b else print('No'))\nYESNO=lambda b: bool([print('YES')] if b else print('NO'))\nint1=lambda x:int(x)-1\n\ndef main():\n    N,x=map(int,input().split())\n    a=list(map(int,input().split()))\n    ans=0\n    for i in range(N):\n        ans+=max(a[i]-x,0)\n        a[i]=min(a[i],x)\n    for i in range(N-1):\n        if a[i]+a[i+1]>x:\n            ans+=a[i]+a[i+1]-x\n            a[i+1]=x-a[i]\n    print(ans)\n\nif __name__ == '__main__':\n    main()\n","label":1}
{"problem_id":"p03032","problem":"Your friend gave you a dequeue D as a birthday present.\nD is a horizontal cylinder that contains a row of N jewels.\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\nIn the beginning, you have no jewel in your hands.\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n\nOperation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n\nOperation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nOperation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.","submission_id":"s963502634","submission":"N, K = map(int, input().split())\nV = list(map(int, input().split()))\n\nans = 0\nfor l in range(N + 1):\n    for r in range(N + 1):\n        if l + r > N:\n            continue\n        k = K - (l + r)\n        if k < 0:\n            continue\n\n        A = V[:l] + V[N - r:]\n        A.sort(reverse=True)\n        while k > 0 and A and A[-1] < 0:\n            A.pop()\n            k -= 1\n        ans = max(ans, sum(A))\nprint(ans)\n","label":1}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s796907195","submission":"S = input()\nT = input()\n\nans = 0\nfor i in [0, 1, 2]:\n  if S[i] == T[i]:\n    ans = ans + 1\nprint(ans)","label":1}
{"problem_id":"p02685","problem":"There are N blocks arranged in a row. Let us paint these blocks.\nWe will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.\nFind the number of ways to paint the blocks under the following conditions:\n\nFor each block, use one of the M colors, Color 1 through Color M, to paint it. It is not mandatory to use all the colors.\nThere may be at most K pairs of adjacent blocks that are painted in the same color.\n\nSince the count may be enormous, print it modulo 998244353.","submission_id":"s410873347","submission":"import sys\nreadline = sys.stdin.readline\n\ndef main():\n  N, M, K = map(int, readline().split())\n  p = 998244353\n\n  cnt = 0\n  c = 1\n  for i in range(K+1):\n    cnt += c * M * pow(M-1, N-1-i, p)\n    cnt %= p\n    c *= (N - i - 1) * pow(i+1, p-2, p)\n    c %= p\n  print(cnt)\n\nif __name__ == '__main__':\n  main()","label":1}
{"problem_id":"p03035","problem":"Takahashi, who is A years old, is riding a Ferris wheel.\nIt costs B yen (B is an even number) to ride the Ferris wheel if you are 13 years old or older, but children between 6 and 12 years old (inclusive) can ride it for half the cost, and children who are 5 years old or younger are free of charge. (Yen is the currency of Japan.)\nFind the cost of the Ferris wheel for Takahashi.","submission_id":"s556072538","submission":"A,B = map(int,input().split())\nL = B \/\/ 2\nif A >= 13:\n  print(B)\nelif A <= 12 and A >= 6:\n  print(L)\nelif A <= 6:\n  print(0)","label":1}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s402409297","submission":"S_list = list(input())\n\nfor i in range(0, len(S_list), 2):\n    if S_list[i] == 'R' or S_list[i] == 'U' or S_list[i] == 'D':\n        pass\n    else:\n        print('No')\n        exit()\n\nfor i in range(1, len(S_list), 2):\n    if S_list[i] == 'L' or S_list[i] == 'U' or S_list[i] == 'D':\n        pass\n    else:\n        print('No')\n        exit()\n\nprint('Yes')\n","label":1}
{"problem_id":"p02727","problem":"You are going to eat X red apples and Y green apples.\nYou have A red apples of deliciousness p_1,p_2, \\dots, p_A, B green apples of deliciousness q_1,q_2, \\dots, q_B, and C colorless apples of deliciousness r_1,r_2, \\dots, r_C.\nBefore eating a colorless apple, you can paint it red or green, and it will count as a red or green apple, respectively.\nFrom the apples above, you will choose the apples to eat while making the sum of the deliciousness of the eaten apples as large as possible.\nFind the maximum possible sum of the deliciousness of the eaten apples that can be achieved when optimally coloring zero or more colorless apples.","submission_id":"s004348747","submission":"x,y,a,b,c = map(int,input().split())\np = list(map(int,input().split()))\nq = list(map(int,input().split()))\nr = list(map(int,input().split()))\n\np.sort(reverse=True)\nq.sort(reverse=True)\napples = p[:x] + q[:y] + r\napples.sort(reverse=True)\nprint(sum(apples[:x+y]))","label":1}
{"problem_id":"p02647","problem":"We have N bulbs arranged on a number line, numbered 1 to N from left to right.\nBulb i is at coordinate i.\nEach bulb has a non-negative integer parameter called intensity.\nWhen there is a bulb of intensity d at coordinate x, the bulb illuminates the segment from coordinate x-d-0.5 to x+d+0.5.\nInitially, the intensity of Bulb i is A_i. We will now do the following operation K times in a row:\n\nFor each integer i between 1 and N (inclusive), let B_i be the number of bulbs illuminating coordinate i. Then, change the intensity of each bulb i to B_i.\n\nFind the intensity of each bulb after the K operations.","submission_id":"s106200961","submission":"N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nfor _ in range(K):\n    B = [0]*(N+1)\n    for i in range(N):\n        l = max(0, i-A[i])\n        r = min(N-1, i+A[i])\n        B[l] += 1\n        B[r+1] -= 1\n    for i in range(N):\n        B[i+1] += B[i]\n    A = B[:N]\n    if all([x == N for x in A]):\n        break\nprint(*A)","label":1}
{"problem_id":"p03632","problem":"Alice and Bob are controlling a robot. They each have one switch that controls the robot.\nAlice started holding down her button A second after the start-up of the robot, and released her button B second after the start-up.\nBob started holding down his button C second after the start-up, and released his button D second after the start-up.\nFor how many seconds both Alice and Bob were holding down their buttons?","submission_id":"s814942018","submission":"# -*- coding: utf-8 -*-\n\na, b, c, d = map(int, input().split())\n\nstart = max(a, c)\nend = min(b, d)\n\nresult = end - start\nif result < 0:\n    result = 0\n\nprint(result)","label":1}
{"problem_id":"p03437","problem":"You are given positive integers X and Y.\nIf there exists a positive integer not greater than 10^{18} that is a multiple of X but not a multiple of Y, choose one such integer and print it.\nIf it does not exist, print -1.","submission_id":"s282330557","submission":"from fractions import gcd\nx, y = map(int, input().split())\nif gcd(x,y) == y:\n  print(-1)\nelse:\n  print((y-1)*x)","label":1}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s649367173","submission":"N = int(input())\nS = []\n\nfor i in range(N):\n  S.append(int(input()))\n  \nS.sort()\nans = sum(S)\n\nif ans % 10 != 0:\n  print(ans)\n  exit()\n  \nfor i in range(N):\n  if S[i] % 10 != 0:\n    ans -= S[i]\n    print(ans)\n    exit()\n\nprint(0)\n","label":1}
{"problem_id":"p03658","problem":"Snuke has N sticks.\nThe length of the i-th stick is l_i.\nSnuke is making a snake toy by joining K of the sticks together.\nThe length of the toy is represented by the sum of the individual sticks that compose it.\nFind the maximum possible length of the toy.","submission_id":"s086253413","submission":"n,k=map(int, input().split())\nl=list(map(int, input().split()))\nl.sort()\nt=0\nfor i in range(k):\n  t+=l[n-1-i]\nprint(t)\n","label":1}
{"problem_id":"p03633","problem":"We have N clocks. The hand of the i-th clock (1\u2264i\u2264N) rotates through 360\u00b0 in exactly T_i seconds.\nInitially, the hand of every clock stands still, pointing directly upward.\nNow, Dolphin starts all the clocks simultaneously.\nIn how many seconds will the hand of every clock point directly upward again?","submission_id":"s231039761","submission":"import math\n\ndef calc_lcm(x, y):\n    return (x * y) \/\/ math.gcd(x, y)\n\nN,*T = map(int,open(0).read().split())\n\nlcm = 1\n\nfor i in T:\n  lcm = calc_lcm(lcm,i)\nprint(lcm)","label":1}
{"problem_id":"p02767","problem":"There are N people living on a number line.\nThe i-th person lives at coordinate X_i.\nYou are going to hold a meeting that all N people have to attend.\nThe meeting can be held at any integer coordinate. If you choose to hold the meeting at coordinate P, the i-th person will spend (X_i - P)^2 points of stamina to attend the meeting.\nFind the minimum total points of stamina the N people have to spend.","submission_id":"s215779133","submission":"import sys\n\nN = next(sys.stdin.buffer)\nX = tuple(map(int, next(sys.stdin.buffer).split()))\n\nmin_x = min(X)\nmax_x = max(X)\n\nstamina = min(sum((p - x) ** 2 for x in X) for p in range(min_x, max_x + 1))\n\nprint(stamina)\n","label":1}
{"problem_id":"p03200","problem":"There are N Reversi pieces arranged in a row. (A Reversi piece is a disc with a black side and a white side.)\nThe state of each piece is represented by a string S of length N.\nIf S_i=B, the i-th piece from the left is showing black;\nIf S_i=W, the i-th piece from the left is showing white.\nConsider performing the following operation:\n\nChoose i (1 \\leq i < N) such that the i-th piece from the left is showing black and the (i+1)-th piece from the left is showing white, then flip both of those pieces. That is, the i-th piece from the left is now showing white and the (i+1)-th piece from the left is now showing black.\n\nFind the maximum possible number of times this operation can be performed.","submission_id":"s727157767","submission":"s = list(input())\n\nans = 0\n\ncntB = 0\n\nfor i in range(len(s)):\n    if s[i] == 'B':\n        cntB += 1\n    else:\n        ans += cntB\n\nprint(ans)","label":1}
{"problem_id":"p03262","problem":"There are N cities on a number line. The i-th city is located at coordinate x_i.\nYour objective is to visit all these cities at least once.\nIn order to do so, you will first set a positive integer D.\nThen, you will depart from coordinate X and perform Move 1 and Move 2 below, as many times as you like:\n\nMove 1: travel from coordinate y to coordinate y + D.\nMove 2: travel from coordinate y to coordinate y - D.\n\nFind the maximum value of D that enables you to visit all the cities.\nHere, to visit a city is to travel to the coordinate where that city is located.","submission_id":"s358705316","submission":"import math\n\nN, X = map(int, input().split())\nx = sorted(list(map(int, input().split())) + [X])\nX = -x[0] + x[1]\nfor i in range(N):\n    X = math.gcd(X, x[i] - x[i + 1])\nprint(X)\n","label":1}
{"problem_id":"p03813","problem":"Smeke has decided to participate in AtCoder Beginner Contest (ABC) if his current rating is less than 1200, and participate in AtCoder Regular Contest (ARC) otherwise.\nYou are given Smeke's current rating, x. Print ABC if Smeke will participate in ABC, and print ARC otherwise.","submission_id":"s125194425","submission":"#!\/usr\/bin\/env python\ncurrent_rating = raw_input()\nif int(current_rating) < 1200:\n\tprint(\"ABC\")\nelse:\n\tprint(\"ARC\")","label":1}
{"problem_id":"p02546","problem":"In the Kingdom of AtCoder, people use a language called Taknese, which uses lowercase English letters.\nIn Taknese, the plural form of a noun is spelled based on the following rules:\n\nIf a noun's singular form does not end with s, append s to the end of the singular form.\nIf a noun's singular form ends with s, append es to the end of the singular form.\n\nYou are given the singular form S of a Taknese noun. Output its plural form.","submission_id":"s928765216","submission":"a = input()\narr = list(a)\nif arr[-1] == \"s\":\n  arr.insert(len(arr), \"es\")\n  print(\"\".join(arr))\nelse:\n  arr.insert(len(arr), \"s\")\n  print(\"\".join(arr))","label":1}
{"problem_id":"p02678","problem":"There is a cave.\nThe cave has N rooms and M passages. The rooms are numbered 1 to N, and the passages are numbered 1 to M. Passage i connects Room A_i and Room B_i bidirectionally. One can travel between any two rooms by traversing passages. Room 1 is a special room with an entrance from the outside.\nIt is dark in the cave, so we have decided to place a signpost in each room except Room 1. The signpost in each room will point to one of the rooms directly connected to that room with a passage.\nSince it is dangerous in the cave, our objective is to satisfy the condition below for each room except Room 1.\n\nIf you start in that room and repeatedly move to the room indicated by the signpost in the room you are in, you will reach Room 1 after traversing the minimum number of passages possible.\n\nDetermine whether there is a way to place signposts satisfying our objective, and print one such way if it exists.","submission_id":"s691665218","submission":"from collections import deque\nn,m = map(int,input().split())\n\ngraph = [[] for _ in range(n)]\n\nfor _ in range(m):\n    a,b = map(int,input().split())\n    graph[a-1].append(b-1)\n    graph[b-1].append(a-1)\n    \n#\u90e8\u5c4b\u304b\u30891\u307e\u3067\u306e\u8ddd\u96e2(\u6df1\u3055)\ndist = [-100 for _ in range(n)]\ndist[0] = 0\n\n#\u5e45\u512a\u5148\u63a2\u7d22\u3067dist\u3092\u66f4\u65b0\n#p\u306b\u4eca\u3044\u308b\u4f4d\u7f6e\u3092\u683c\u7d0d\np = deque()\np.append(0)\n\nwhile len(p) > 0:\n    now = p.pop()\n    for i in graph[now]:\n        if dist[i] != -100:\n            continue\n        p.appendleft(i)\n        dist[i] = now\n        \nprint('Yes')\nfor i in range(1,n):\n    print(dist[i]+1)","label":1}
{"problem_id":"p02916","problem":"Takahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.","submission_id":"s807345611","submission":"N = int(input())\nA = list(map(int,input().split()))\nB = list(map(int,input().split()))\nC = list(map(int,input().split()))\n\nm = 0\nfor i in range(N):\n    if A[i-1] == A[i]-1 and i != 0:\n        m += B[A[i]-1] + C[A[i-1]-1]\n    else:\n        m += B[A[i]-1]\nprint(m)","label":1}
{"problem_id":"p02910","problem":"Takahashi will do a tap dance. The dance is described by a string S where each character is L, R, U, or D. These characters indicate the positions on which Takahashi should step. He will follow these instructions one by one in order, starting with the first character.\nS is said to be easily playable if and only if it satisfies both of the following conditions:\n\nEvery character in an odd position (1-st, 3-rd, 5-th, \\ldots) is R, U, or D.\nEvery character in an even position (2-nd, 4-th, 6-th, \\ldots) is L, U, or D.\n\nYour task is to print Yes if S is easily playable, and No otherwise.","submission_id":"s993602534","submission":"# \u554f\u984c\uff1ahttps:\/\/atcoder.jp\/contests\/abc141\/tasks\/abc141_b\n\ns = input()\ni = 1\nres = True\nfor ch in s:\n    if i % 2 == 1 and ch == 'L':\n        res = False\n        break\n    elif i % 2 == 0 and ch == 'R':\n        res = False\n        break\n    i += 1\n\nif res:\n    print('Yes')\nelse:\n    print('No')\n","label":1}
{"problem_id":"p02418","problem":"Write a program which finds a pattern $p$ in a ring shaped text $s$.","submission_id":"s250937876","submission":"s = input()\np = input()\ns *= 2\nif p in s:\n    print('Yes')\nelse:\n    print('No')","label":1}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s748339911","submission":"import sys\ninput = sys.stdin.readline\nimport collections\nfrom collections import deque\nn,d,a= map(int, input().split())\nx= [list(map(int, input().split())) for i in range(n)]\n\nx.sort()\nfor i in range(n):\n    x[i][1]=-(-x[i][1]\/\/a)\n\n# \u3069\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u307e\u3067\u5012\u3057\u305f\u304b\u7ba1\u7406\u3057\u306a\u304c\u3089\u9032\u3081\u308b\u3002\n# \u7d2f\u7a4d\u30c0\u30e1\u30fc\u30b8\u3092\u7ba1\u7406\nqq=deque([])\nans=0\natk=0\nfor i in range(n):\n    w=x[i][1]\n    # \u30c0\u30e1\u30fc\u30b8\u306e\u6709\u52b9\u671f\u9650\u3092\u8d85\u904e\u3057\u3066\u3044\u308b\u5834\u5408\n    while len(qq)>0 and x[i][0] > qq[0][0]:\n        atk-=qq[0][1]\n        qq.popleft()\n\n    if w-atk>0:\n        ans+=w-atk\n        # \u6709\u52b9\u671f\u9650\u3000\u30c0\u30e1\u30fc\u30b8\n        qq.append([x[i][0]+2*d,w-atk])\n        atk += w - atk\nprint(ans)\n","label":1}
{"problem_id":"p02613","problem":"Takahashi is participating in a programming contest called AXC002, and he has just submitted his code to Problem A.\nThe problem has N test cases.\nFor each test case i (1\\leq i \\leq N), you are given a string S_i representing the verdict for that test case. Find the numbers of test cases for which the verdict is AC, WA, TLE, and RE, respectively.\nSee the Output section for the output format.","submission_id":"s362101152","submission":"N=int(input())\nw =0\nx =0\ny =0\nz =0\n\nfor i in range(N):\n    s =input()\n    if s =='AC':\n        w +=1\n    elif s == 'WA':\n        x +=1\n    elif s == 'TLE':\n        y +=1\n    elif s == 'RE':\n        z +=1\n\nprint ('AC x '+str(w))\nprint ('WA x '+str(x))\nprint ('TLE x '+str(y))\nprint ('RE x '+str(z))","label":1}
{"problem_id":"p02921","problem":"You will be given a string S of length 3 representing the weather forecast for three days in the past.\nThe i-th character (1 \\leq i \\leq 3) of S represents the forecast for the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nYou will also be given a string T of length 3 representing the actual weather on those three days.\nThe i-th character (1 \\leq i \\leq 3) of S represents the actual weather on the i-th day. S, C, and R stand for sunny, cloudy, and rainy, respectively.\nPrint the number of days for which the forecast was correct.","submission_id":"s981159854","submission":"a=input()\nb=input()\ncount=0\nfor i in range(3):\n  if a[i]==b[i]:\n    count+=1\nprint(count)","label":1}
{"problem_id":"p02389","problem":"Write a program which calculates the area and perimeter of a given rectangle.","submission_id":"s840397777","submission":"a = map(int, raw_input().split())\n\nb = a[0]*a[1]\nc = a[0]*2+a[1]*2\nprint b , c","label":1}
{"problem_id":"p02678","problem":"There is a cave.\nThe cave has N rooms and M passages. The rooms are numbered 1 to N, and the passages are numbered 1 to M. Passage i connects Room A_i and Room B_i bidirectionally. One can travel between any two rooms by traversing passages. Room 1 is a special room with an entrance from the outside.\nIt is dark in the cave, so we have decided to place a signpost in each room except Room 1. The signpost in each room will point to one of the rooms directly connected to that room with a passage.\nSince it is dangerous in the cave, our objective is to satisfy the condition below for each room except Room 1.\n\nIf you start in that room and repeatedly move to the room indicated by the signpost in the room you are in, you will reach Room 1 after traversing the minimum number of passages possible.\n\nDetermine whether there is a way to place signposts satisfying our objective, and print one such way if it exists.","submission_id":"s023242072","submission":"N,M=map(int,input().split())\nV=[[]for i in range(N)]\nfor i in range(M):\n    a,b=map(int,input().split())\n    V[a-1].append(b-1)\n    V[b-1].append(a-1)\nprint('Yes')\np,q=0,[0]\nseen=[0]*N\nd=[0]*N\nwhile len(q)!=p:\n    for i in V[q[p]]:\n        if not seen[i]:\n            q.append(i)\n            d[i]=q[p]+1\n        seen[i]+=1\n    p+=1\nd.pop(0)\nfor i in d:print(i)","label":1}
{"problem_id":"p03957","problem":"This contest is CODEFESTIVAL, which can be shortened to the string CF by deleting some characters.  \nMr. Takahashi, full of curiosity, wondered if he could obtain CF from other strings in the same way.  \nYou are given a string s consisting of uppercase English letters.\nDetermine whether the string CF can be obtained from the string s by deleting some characters.","submission_id":"s879559435","submission":"s = input()\n\na = []\n\nfor i in s:\n    if i == \"C\" or i == \"F\":\n        a.append(i)\na = \"\".join(a)\nif a.count(\"CF\") > 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")","label":1}
{"problem_id":"p02917","problem":"There is an integer sequence A of length N whose values are unknown.\nGiven is an integer sequence B of length N-1 which is known to satisfy the following:\n B_i \\geq \\max(A_i, A_{i+1}) \nFind the maximum possible sum of the elements of A.","submission_id":"s612180289","submission":"def resolve():\n    n = int(input())\n    b = list(map(int,input().split()))[::-1]\n    ans = b[0]+b[-1]\n    for i in range(n-2):\n        ans += (min(b[i],b[i+1]))\n    print(ans)\nresolve()","label":1}
{"problem_id":"p02238","problem":"Depth-first search (DFS) follows the strategy to search \u201ddeeper\u201d in the graph whenever possible. In DFS, edges are recursively explored out of the most recently discovered vertex $v$ that still has unexplored edges leaving it. When all of $v$'s edges have been explored, the search \u201dbacktracks\u201d to explore edges leaving the vertex from which $v$ was discovered.","submission_id":"s429911454","submission":"# -*- coding: utf-8 -*-\n'''\n\u6240\u8981\u6642\u9593\u306f\u3001\u5206\u4f4d\u3067\u3042\u3063\u305f\u3002\n'''\n\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n#import re\nimport sys\ninput = sys.stdin.readline\n#import heapq\n#import bisect\nimport collections\n#import math\nglobal time, Ls, Lf, E,LG,c,n\ntime = 1\n\ndef main():\n    global time, Ls, Lf, E, LG,c,n\n    c = 0\n    n = int(input().strip())\n    E = [[] for _ in range(n)]\n    LG = collections.deque()\n    for line in sys.stdin:\n        Ltmp = list(map(int, list(line.strip().split())))\n        if not Ltmp[1] == 0: \n            E[Ltmp[0]-1] = Ltmp[2:]\n    Ls = [0]*n \n    Lf = [0]*n\n    dfs(0)\n    for i in range(n):\n        print(i+1, Ls[i],Lf[i])\n    \ndef dfs(cur):\n    global time, Ls, Lf, E, LG,c,n\n    LG.append(cur)\n    if Ls[cur] == 0: Ls[cur] = time\n    time += 1\n    for i in range(len(E[cur])):\n        check = E[cur][i] - 1\n        if Ls[check] == 0: dfs(check)\n    if Lf[cur] == 0:\n        Lf[cur] = time\n    try:\n        x = LG.pop()\n        if x == cur: x = LG.pop() \n        dfs(x)\n    except:\n        time += 1\n        for i in range(c,n):\n            if Ls[i] == 0:\n                c = i\n                dfs(i) \n    return\n\n\n\n\n    \n\n\n    \nif __name__ == '__main__':\n    main()\n\n","label":1}
{"problem_id":"p02570","problem":"Takahashi is meeting up with Aoki.\nThey have planned to meet at a place that is D meters away from Takahashi's house in T minutes from now.\nTakahashi will leave his house now and go straight to the place at a speed of S meters per minute.\nWill he arrive in time?","submission_id":"s913969910","submission":"def main():\n    D, T, S = map(int, input().split())\n    speed = D \/ T\n    if speed <= S:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nif __name__ == '__main__':\n    main()","label":1}
{"problem_id":"p04012","problem":"Let w be a string consisting of lowercase letters.\nWe will call w beautiful if the following condition is satisfied:\n\nEach lowercase letter of the English alphabet occurs even number of times in w.\n\nYou are given the string w. Determine if w is beautiful.","submission_id":"s795415260","submission":"from collections import Counter\n\nw = input()\n\ncountAlphabets = Counter(w)\nfor count in countAlphabets.values():\n    if count % 2 != 0:\n        print(\"No\")\n        exit()\n\nprint(\"Yes\")\n","label":1}
{"problem_id":"p03967","problem":"AtCoDeer the deer and his friend TopCoDeer is playing a game.\nThe game consists of N turns.\nIn each turn, each player plays one of the two gestures, Rock and Paper, as in Rock-paper-scissors, under the following condition:\n(\u203b) After each turn, (the number of times the player has played Paper)\u2266(the number of times the player has played Rock).\nEach player's score is calculated by (the number of turns where the player wins) - (the number of turns where the player loses), where the outcome of each turn is determined by the rules of Rock-paper-scissors.\n(For those who are not familiar with Rock-paper-scissors: If one player plays Rock and the other plays Paper, the latter player will win and the former player will lose. If both players play the same gesture, the round is a tie and neither player will win nor lose.)\nWith his supernatural power, AtCoDeer was able to foresee the gesture that TopCoDeer will play in each of the N turns, before the game starts.\nPlan AtCoDeer's gesture in each turn to maximize AtCoDeer's score.\nThe gesture that TopCoDeer will play in each turn is given by a string s. If the i-th (1\u2266i\u2266N) character in s is g, TopCoDeer will play Rock in the i-th turn. Similarly, if the i-th (1\u2266i\u2266N) character of s in p, TopCoDeer will play Paper in the i-th turn.","submission_id":"s867604988","submission":"s = input()\nl = len(s)\ng = s.count('g')\np = s.count('p')\nif g >= p:\n    print((g - p) \/\/ 2)\nelse:\n    print(-(p - g) \/\/ 2)","label":1}
{"problem_id":"p03059","problem":"A biscuit making machine produces B biscuits at the following moments: A seconds, 2A seconds, 3A seconds and each subsequent multiple of A seconds after activation.\nFind the total number of biscuits produced within T + 0.5 seconds after activation.","submission_id":"s081978638","submission":"A, B, T = map(int, input().split())\nnum = A\ncount = 0\nwhile num <= T:\n    count += B\n    num += A\nprint(count)\n","label":1}
{"problem_id":"p02691","problem":"You are the top spy of AtCoder Kingdom. To prevent the stolen secret from being handed to AlDebaran Kingdom, you have sneaked into the party where the transaction happens.\nThere are N attendees in the party, and they are given attendee numbers from 1 through N. The height of Attendee i is A_i.\nAccording to an examination beforehand, you know that a pair of attendees satisfying the condition below will make the transaction.\n\nThe absolute difference of their attendee numbers is equal to the sum of their heights.\n\nThere are \\frac{N(N-1)}{2} ways to choose two from the N attendees and make a pair. Among them, how many satisfy the condition above?\nP.S.: We cannot let you know the secret.","submission_id":"s386300766","submission":"from collections import Counter\nN = int(input())\nA = list(map(int, input().split()))\nl =[]\nr =[]\nfor id,h in enumerate(A,start=1):\n    r.append(id -h)\n    l.append(id +h)\n\nr_cou =Counter(r)\nl_cou =Counter(l)\nans =[]\nfor i in l_cou.keys():\n    ans.append(l_cou[i] *r_cou.get(i,0))\n\nprint(sum(ans))","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s768815797","submission":"import math\nx = int(input())\nprint(x ** 3)","label":1}
{"problem_id":"p02388","problem":"Write a program which calculates the cube of a given integer x.","submission_id":"s008529846","submission":"print((lambda x : x**3)(int(input())))","label":1}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s148725865","submission":"N, A = map(int, input().split())\nX = list(map(int, input().split()))\nfor i in range(N):\n  X[i] -= A\nD = {0: 1}\nfor i in X:\n  S = [[j, D[j]] for j in D]\n  for j in S:\n    if j[0] + i in D:\n      D[j[0]+i] += j[1]\n    else:\n      D[j[0]+i] = j[1]\nprint(D[0]-1)","label":0}
{"problem_id":"p02972","problem":"There are N empty boxes arranged in a row from left to right.\nThe integer i is written on the i-th box from the left (1 \\leq i \\leq N).\nFor each of these boxes, Snuke can choose either to put a ball in it or to put nothing in it.\nWe say a set of choices to put a ball or not in the boxes is good when the following condition is satisfied:\n\nFor every integer i between 1 and N (inclusive), the total number of balls contained in the boxes with multiples of i written on them is congruent to a_i modulo 2.\n\nDoes there exist a good set of choices? If the answer is yes, find one good set of choices.","submission_id":"s046136531","submission":"n = int(input())\nalst = list(map(int, input().split()))\ndivisor_lst = [[0] for _ in range(n)]\nans = []\nfor i in range(2, n + 1):\n    for k in range(i * 2, n + 1, i):\n        divisor_lst[k - 1].append(i - 1)\nfor i in range(n - 1, -1, -1):\n    if alst[i] == 1:\n        for j in divisor_lst[i]:\n            alst[j] += 1\n            alst[j] %= 2\n        ans.append(i + 1)\nprint(len(ans))\nprint(*ans)","label":0}
{"problem_id":"p02677","problem":"Consider an analog clock whose hour and minute hands are A and B centimeters long, respectively.\nAn endpoint of the hour hand and an endpoint of the minute hand are fixed at the same point, around which each hand rotates clockwise at constant angular velocity. It takes the hour and minute hands 12 hours and 1 hour to make one full rotation, respectively.\nAt 0 o'clock, the two hands overlap each other. H hours and M minutes later, what is the distance in centimeters between the unfixed endpoints of the hands?","submission_id":"s870515843","submission":"import math\na,b,h,m, = map(int,input().split())\nal = 360*(60*h+m)\/720\nbe = 360*m\/60\nx = (a**2 + b**2 - 2*a*b*math.cos(math.radians(al-be)))**(0.5)\nprint(x)","label":0}
{"problem_id":"p02238","problem":"Depth-first search (DFS) follows the strategy to search \u201ddeeper\u201d in the graph whenever possible. In DFS, edges are recursively explored out of the most recently discovered vertex $v$ that still has unexplored edges leaving it. When all of $v$'s edges have been explored, the search \u201dbacktracks\u201d to explore edges leaving the vertex from which $v$ was discovered.","submission_id":"s998331381","submission":"n = int(input())\nG = [[] for _ in range(n)]\nu1 = 0\nfor _ in range(n):\n    u, k, *v = [int(i) for i in input().split()]\n    G[u - 1] = v\n    if k != 0 and u1 == 0:\n        u1 = u\n\ntime = 1\nu = u1\nD = []\nout = [[i+1, 0, 0] for i in range(n)]\nT = []\nwhile True:\n    if u not in D:\n        out[u - 1][1] = time\n        D.append(u)\n        T.append(u)\n\n    for d in D:\n        if d in G[u - 1]:\n            idx = G[u - 1].index(d)\n            del G[u - 1][idx]\n\n    if G[u - 1] == []:\n        time += 1\n        out[T.pop() - 1][2] = time\n        if T == []:\n            if len(D) == n:\n                break\n            else:\n                for ni in range(n):\n                    if ni + 1 not in D:\n                        u = ni + 1\n                        break\n                time += 1\n                continue\n        else:\n            u = T[-1]\n    else:\n        u = G[u - 1].pop(0)\n        time += 1\n\nfor ni in range(n):\n    print(*out[ni])\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s157338864","submission":"n = int(input())\na_list = list(map(int, input().split()))\nnew_list = []\nans = 0\nwhile True:\n    for i in a_list:\n        if i % 2 == 1:\n            break\n        else:\n            a = i \/\/ 2\n            new_list.append(a)\n    if len(new_list) < n:\n        break\n    ans += 1\n    a_list = new_list\n    new_list = []\n\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s653068732","submission":"num = int(input())\n \nvals = list(map(int,input().split()))\n \ncnt = 0\nflag = True\nwhile(flag):\n\tfor i in range(num):\n\t\tif vals[i] % 2 == 1:\n\t\t\tprint(cnt)\n\t\t\tflag = False\n\t\t\tbreak\n\t\telse:\n\t\t\tvals[i] = vals[i] \/ 2\n\tcnt += 1","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s640390421","submission":"N = int(input())\nA = list(map(int, input().split()))\nans = []\nfor i in range(N):\n    cnt = 0\n    while A[i] % 2 == 0:\n        A[i] = A[i] \/ 2\n        cnt = cnt + 1\n    ans.append(cnt)\nprint(min(ans))","label":0}
{"problem_id":"p03646","problem":"We have a sequence of length N consisting of non-negative integers. Consider performing the following operation on this sequence until the largest element in this sequence becomes N-1 or smaller.\n\nDetermine the largest element in the sequence (if there is more than one, choose one). Decrease the value of this element by N, and increase each of the other elements by 1.\n\nIt can be proved that the largest element in the sequence becomes N-1 or smaller after a finite number of operations.\nYou are given an integer K. Find an integer sequence a_i such that the number of times we will perform the above operation is exactly K. It can be shown that there is always such a sequence under the constraints on input and output in this problem.","submission_id":"s667371948","submission":"N = 50\nA = [i for i in range(N)]\nK = int(input())\na = K\/\/N\nk = K%N\nA = [A[i]+a for i in range(N)]\nfor _ in range(k):\n    amin = 10**17\n    for i in range(N):\n        if A[i]<amin:\n            ind = i\n            amin = A[i]\n    for i in range(N):\n        if i==ind:\n            A[i] += N\n        else:\n            A[i] -= 1\nprint(N)\nprint(*A)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s979470036","submission":"#!\/user\/bin\/env pypy3\nimport sys\nfrom typing import List\n\n\ndef fast_input():\n    return sys.stdin.readline()[:-1]\n\n\ndef is_all_even(nums: List[int]) -> bool:\n    for n in nums:\n        if n % 2 == 1:\n            return False\n    return True\n\n\ndef solve(n: int, nums: List[int]) -> int:\n    manipulate_count = 0\n    while is_all_even(nums):\n        manipulate_count += 1\n        nums = list(map(lambda x: int(x \/ 2), nums))\n    return manipulate_count\n\n\ndef main():\n    n = int(fast_input())\n    a = list(map(int, fast_input().split()))\n    result = solve(n, a)\n    print(result)\n\n\nmain()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s832880338","submission":"import sys\n\nsys.setrecursionlimit(10 ** 8)\nini = lambda: int(sys.stdin.readline())\ninm = lambda: map(int, sys.stdin.readline().split())\ninl = lambda: list(inm())\nins = lambda: sys.stdin.readline().rstrip()\ndebug = lambda *a, **kw: print(\"\\033[33m\", *a, \"\\033[0m\", **dict(file=sys.stderr, **kw))\n\nn = ini()\na = inl()\n\n\ndef solve():\n    mincnt = 100000\n    for x in a:\n        cnt = 0\n        while x % 2 == 0:\n            x \/\/= 2\n            cnt += 1\n        mincnt = min(mincnt, cnt)\n\n    return mincnt\n\n\nprint(solve())\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s987027219","submission":"n = int(raw_input())\nais = map(int, raw_input().split())\nc = 0\nwhile(all([(ai % 2 ==0) for ai in ais ])):\n\tais = [ai\/2 for ai in ais]\t\n\tc +=1\nprint c","label":0}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s048597134","submission":"a,b,c=map(int,raw_input().split())\nif a+b >= c:\n    print \"No\"\nelse:\n    ans1 = 4 * a * b;\n    ans2 = (c - a - b) * (c - a - b)\n    if ans1 < ans2:\n        print \"Yes\"\n    else:\n        print \"No\"","label":0}
{"problem_id":"p02781","problem":"Find the number of integers between 1 and N (inclusive) that contains exactly K non-zero digits when written in base ten.","submission_id":"s620681122","submission":"import sys\n\ndef solve():\n    input = sys.stdin.readline\n    N = input().strip(\"\\n\")\n    K = int(input())\n    dig = len(N)\n    DP = [[0] * (K + 1) for _ in range(dig)]\n    DP[0][0] = 1\n    DP[0][1] = int(N[0]) - 1\n    for i in range(1, dig):\n        DP[i][1] = 9\n        if N[i] != \"0\": \n            DP[i][0] = DP[i-1][0] + 1\n            if DP[i-1][0] <= K: DP[i][DP[i-1][0]] += 1\n            if DP[i-1][0] <= K - 1: DP[i][DP[i-1][0] + 1] += int(N[i]) - 1     \n        else: DP[i][0] = DP[i-1][0]\n        for j in range(1, K): DP[i][j+1] += DP[i-1][j] * 9\n        for j in range(1, K + 1): DP[i][j] += DP[i - 1][j]\n    if DP[dig - 1][0] == K: DP[dig - 1][K] += 1\n    print(DP[dig - 1][K])\n    #print(DP)\n\n            \n    return 0\n\nif __name__ == \"__main__\":\n    solve()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s604029992","submission":"N=int(input())\nA=list(map(int,input().split()))\nfor i in range(N):\n    x=A[i]\n    y=0\n    while x%2==0:\n        x\/\/=2\n        y+=1\n    A[i]=y\nprint(min(A))\n","label":0}
{"problem_id":"p03073","problem":"N tiles are arranged in a row from left to right. The initial color of each tile is represented by a string S of length N.\nThe i-th tile from the left is painted black if the i-th character of S is 0, and painted white if that character is 1.\nYou want to repaint some of the tiles black or white, so that any two adjacent tiles have different colors.\nAt least how many tiles need to be repainted to satisfy the condition?","submission_id":"s310945023","submission":"s = list(input())\nlen_s= len(s)\n#print(s)\nif len_s%2==0:\n    ans_0=['0','1']*int(len_s\/2)\n    ans_1=['1', '0']*int(len_s\/2)\nelse:\n    ans_0=['0'] + ['1', '0']*int((len_s-1)\/2)\n    ans_1=['1'] + ['0','1']*int((len_s-1)\/2)\n    \n#print(ans_0)\n#print(ans_1)\n\ncount_0 =0\nfor i in range(len_s):\n    if ans_0[i] is not s[i]:\n        count_0+=1\n\ncount_1 =0\nfor i in range(len_s):\n    if ans_1[i] is not s[i]:\n        count_1 += 1\nprint(min(count_0, count_1))","label":0}
{"problem_id":"p04013","problem":"Tak has N cards. On the i-th (1 \\leq i \\leq N) card is written an integer x_i.\nHe is selecting one or more cards from these N cards, so that the average of the integers written on the selected cards is exactly A.\nIn how many ways can he make his selection?","submission_id":"s323094563","submission":"from collections import Counter\n\nX, A = map(int, input().split())\nx = [i - A for i in map(int, input().split())]\nx.sort()\ndp = Counter()\n\nfor i in x:\n    for j, k in list(dp.items()):\n        dp[j + i] = dp[j + i] + k\n    dp[i] += 1\n\nprint(dp[0])","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s243990973","submission":"n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\n\nwhile True:\n  exist_odd = False\n  for index in range(len(a)):\n    if a[index] % 2 != 0:\n      exist_odd = True\n    a[index] \/= 2\n    \n  if exist_odd: break\n    \n  cnt = cnt + 1\n\nprint(cnt)","label":0}
{"problem_id":"p02381","problem":"You have final scores of an examination for n students. Calculate standard deviation of the scores s1, s2 ... sn.","submission_id":"s559155337","submission":"import math\nS = list(map(int, open(0).read().split()))\ni = 0\nwhile i < len(S):\n    n = S[i]\n    if n == 0:\n        break\n    s = S[i+1:i+1+n]\n    i+=(1+n)\n    avg = sum(s) \/ n\n    a2 = sum([(avg - x)**2 for x in s]) \/ n\n    a = math.sqrt(a2)\n    print(\"{:.8f}\".format(a))\n\n","label":0}
{"problem_id":"p02720","problem":"A positive integer X is said to be a lunlun number if and only if the following condition is satisfied:\n\nIn the base ten representation of X (without leading zeros), for every pair of two adjacent digits, the absolute difference of those digits is at most 1.\n\nFor example, 1234, 1, and 334 are lunlun numbers, while none of 31415, 119, or 13579 is.\nYou are given a positive integer K. Find the K-th smallest lunlun number.","submission_id":"s466582443","submission":"import sys\nsys.setrecursionlimit(10**9)\n\nk=int(input())\n\ndef dfs(keta,num):\n  lunlun.append(int(num))\n  if keta==10:\n    return\n\n  min_v=max(0,int(num[-1])-1)\n  max_v=min(9,int(num[-1])+1)\n\n  for i in range(min_v,max_v+1):\n    dfs(keta+1,num+str(i))\n\nlunlun=[]\nfor i in range(1,10):\n  dfs(0,str(i))\n\nlunlun.sort()\nprint(lunlun[k-1])","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s757995420","submission":"am = int(input())\narr = list(map(int,input().split()))\nout = [0]*am\nfor i in range(am):\n  while arr[i]&1 == 0:\n    out[i]+=1\n    arr[i]= arr[i]\/\/2\nprint(min(out))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s498889579","submission":"N = int(input())\nA = list(map(int,input().split()))\nflag = False\n\nfor i in range(1,max(A)):\n  a = 2 ** i\n  for n in range(N):\n    if A[n] % a != 0:\n      flag = True\n      break\n  if flag:\n    break\n    \nprint(i-1)","label":0}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s987256603","submission":"import math\ndef II(): return int(input())\nN=II()\nans=0\nCeiling=math.floor((N-1)**0.5)\n#print(Ceiling)\nfor i in range(1,Ceiling+1):  \n    Sq=i*i\n    A=N-Sq\n    if A>i:\n      ans+=int(2*math.ceil(A\/i)-1)\n      #print(ans,1)\n    else:\n      ans+=1\n      #print(ans,2)\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s479447174","submission":"# https:\/\/atcoder.jp\/contests\/abc081\/tasks\/abc081_b\nN = int(input())\nint_list = list(map(int, input().split()))\n\ndef check_even(int_list):\n    for i in int_list:\n        if i % 2 == 1:\n            return False\n    else:\n        return True\n\ndef half_list(int_list):\n    return [i \/ 2 for i in int_list]\n    \nfor i in range(50):\n    if check_even(int_list):\n        int_list = half_list(int_list)\n    else:\n        print(i)\n        break","label":0}
{"problem_id":"p03003","problem":"You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\nSince the answer can be tremendous, print the number modulo 10^9+7.","submission_id":"s188045790","submission":"N, M = map(int, input().split())\nS = list(map(int, input().split()))\nT = list(map(int, input().split()))\nMOD = 10 ** 9 + 7\n\ndp = [[0] * (M + 1) for i in range(N + 1)]\ndp_sum = [[0] * (M + 1) for i in range(N + 1)]\n\ndp[0][0] = 1\nfor i, s in enumerate(S, start=1):\n    for j, t in enumerate(T, start=1):\n        if s == t:\n            dp[i][j] = dp_sum[i - 1][j - 1] + 1\n            dp[i][j] %= MOD\n        dp_sum[i][j] = dp_sum[i - 1][j] + dp_sum[i][j - 1] - dp_sum[i - 1][j - 1] + dp[i][j]\n        dp_sum[i][j] %= MOD\n\nans = 0\nfor i in range(N + 1):\n    for j in range(M + 1):\n        ans += dp[i][j]\n        ans %= MOD\n\nprint(ans % MOD)\n","label":0}
{"problem_id":"p03282","problem":"Mr. Infinity has a string S consisting of digits from 1 to 9. Each time the date changes, this string changes as follows:\n\nEach occurrence of 2 in S is replaced with 22. Similarly, each 3 becomes 333, 4 becomes 4444, 5 becomes 55555, 6 becomes 666666, 7 becomes 7777777, 8 becomes 88888888 and 9 becomes 999999999. 1 remains as 1.\n\nFor example, if S is 1324, it becomes 1333224444 the next day, and it becomes 133333333322224444444444444444 the day after next.\nYou are interested in what the string looks like after 5 \\times 10^{15} days. What is the K-th character from the left in the string after 5 \\times 10^{15} days?","submission_id":"s034071448","submission":"s = input()\nk = int(input())\n\nif k == 1 or len(s) == 1:\n    ans = list(s)[0]\nelse:\n    ans = None\n    for i, j in enumerate(list(s)):\n        if i < k-1:\n            if j != '1':\n                ans = j\n                break\n        elif i == k-1:\n            ans = j           \n            break\n        else:\n            continue\nprint(ans)","label":0}
{"problem_id":"p03699","problem":"You are taking a computer-based examination. The examination consists of N questions, and the score allocated to the i-th question is s_i. Your answer to each question will be judged as either \"correct\" or \"incorrect\", and your grade will be the sum of the points allocated to questions that are answered correctly. When you finish answering the questions, your answers will be immediately judged and your grade will be displayed... if everything goes well.\nHowever, the examination system is actually flawed, and if your grade is a multiple of 10, the system displays 0 as your grade. Otherwise, your grade is displayed correctly. In this situation, what is the maximum value that can be displayed as your grade?","submission_id":"s190038829","submission":"N=int(input())\nQlist=[]\nans=0\nfor i in range (N):\n    s=int(input())\n    ans+=s\n    Qlist.append(s)\nif ans%10==0:\n    Qlist.sort()\n    for j in range(N):\n        temp=ans-Qlist[j]\n        if temp%10==0:\n            continue\n        else:\n            ans=temp\n            break\n    else:\n        ans=0\nelse:\n    pass\nprint(ans)","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s647638961","submission":"def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a%b)\n\nn, m = map(int, input().split())\ns = input()\nt = input()\ngcd_nm = gcd(n, m)\nfor i in range(gcd_nm):\n    if s[i * n \/\/ gcd_nm] != t[i * m \/\/ gcd_nm]:\n        print(-1)\n        break\nelse:\n    print(n*m\/\/gcd_nm)","label":0}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s730452149","submission":"# inp.readline()\n# int(inp.readline())\n# out.write()\n# raw_input()\n# map(int,raw_input().split())\n# map(int,inp.readline().split())\n# for _ in xrange(input()):\n# print \"Case #\"+str(_+1)+\": \"+ \nif __name__ == \"__main__\":\n    from sys import stdin as inp, stdout as out,setrecursionlimit as srl\n    from collections import Counter,defaultdict,deque\n    from heapq import *\n    for _ in xrange(1):\n        n=input()\n        t=int(pow(n,0.5))+1\n        c=Counter()\n        for i in xrange(1,t+1):\n          for j in xrange(i*i,n+1,i):\n            c[j]+=1\n        print 2*sum(c[i] for i in xrange(1,n))-int(pow(n-1,0.5))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s647916460","submission":"import math\nN = int(input())\nA = list(map(int,input().split()))\n\ng = A[0]\nfor i in range(N):\n  g = math.gcd(g,A[i])\n\ncnt = 0\nwhile g % 2 == 0:\n  g = g\/\/2\n  cnt += 1\n\nprint(cnt)","label":0}
{"problem_id":"p02382","problem":"Your task is to calculate the distance between two $n$ dimensional vectors $x = \\{x_1, x_2, ..., x_n\\}$ and $y = \\{y_1, y_2, ..., y_n\\}$.","submission_id":"s901327850","submission":"import math\n\nn = int(input())\nx = list(map(int, input().split()))\ny = list(map(int, input().split()))\n\nprint(sum([math.fabs((x[i] - y[i])) for i in range(n)]))\nprint(sum([math.fabs((x[i] - y[i]))**2 for i in range(n)])**(1\/2))\nprint(sum([math.fabs((x[i] - y[i]))**3 for i in range(n)])**(1\/3))\nprint(max([math.fabs((x[i] - y[i]))for i in range(n)]))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s404895974","submission":"from typing import List\n\nn = int(input())\nnumbers = list(map(int, input().split()))\n\ncount = 0\n\ndef halfen(i: int)->int:\n    return i >> 1\n\ndef isAllEven(l: List[int])->bool:\n    for i in l:\n        if(i % 2 == 1 or i == 0):\n            return False\n    return True\n\nwhile True:\n    if not isAllEven(numbers):\n        break\n    numbers = list(map(halfen, numbers))\n    count += 1\n\nprint(count)\n","label":0}
{"problem_id":"p02683","problem":"Takahashi, who is a novice in competitive programming, wants to learn M algorithms.\nInitially, his understanding level of each of the M algorithms is 0.\nTakahashi is visiting a bookstore, where he finds N books on algorithms.\nThe i-th book (1\\leq i\\leq N) is sold for C_i yen (the currency of Japan). If he buys and reads it, his understanding level of the j-th algorithm will increase by A_{i,j} for each j (1\\leq j\\leq M).\nThere is no other way to increase the understanding levels of the algorithms.\nTakahashi's objective is to make his understanding levels of all the M algorithms X or higher. Determine whether this objective is achievable. If it is achievable, find the minimum amount of money needed to achieve it.","submission_id":"s974896544","submission":"import itertools\nn,m,x=map(int, input().split())\na = [list(map(int, input().split())) for l in range(n)]\nbit=list(itertools.product([0,1],repeat=n))\nM=10**7\nfor i in range(2**n):\n  cnt1=[0]*m\n  cnt2=0\n  for j in range(n):\n    if bit[i][j]==1:\n      cnt2+=a[j][0]\n      for k in range(m):\n        cnt1[k]+=a[j][k+1]\n  ans=True\n  for j in range(m):\n    if cnt1[j]<x:\n      ans=False\n  if ans:\n    M=min(cnt2,M)\nif M==10**7:\n  print(-1)\nelse:\n  print(M)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s175847806","submission":"n = input()\nl = list(map(int,input().split()))\ncnt = 0\n\nwhile True:\n    if len([i for i in l if i%2 == 1]) == 0:\n        cnt += 1\n        l = [int(s\/2) for s in l]\n    else:\n        break\n\nprint(cnt)","label":0}
{"problem_id":"p02622","problem":"Given are strings S and T. Consider changing S to T by repeating the operation below. Find the minimum number of operations required to do so.\nOperation: Choose one character of S and replace it with a different character.","submission_id":"s262202174","submission":"s = input()\na = [str(c) for c in s]\nt = input()\nb = [str(c) for c in t]\n\nc = 0\nn = len(a)\nfor i in range(n):\n  if a[i] == b[i]:\n    c +=1\n\nprint(n-c)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s514568733","submission":"import numpy as np\n                                              \nN = int(input())\nA = np.array(list(map(int, input().split())))\ni = 0\nwhile True:\n    if np.any(A % 2 == 1):\n        break\n    A = A \/ 2\n    i += 1\nprint(i)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s159108212","submission":"num = int(input())\na = input().split()\nans = 200\nfor i in a:\n    n = int(i)\n    count = 0\n    while n%2==0:\n        count += 1\n        n \/= 2\n    ans = min(ans, count)\n\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s830387704","submission":"n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nwhile True:\n    flag = True\n    for i in range(n):\n        if a[i]%2 == 0:\n            a[i] \/\/= 2\n        else:\n            flag = False\n            break\n    if not flag:\n        break\n    cnt += 1\nprint(cnt)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s863000435","submission":"N = int(input())\nA = list(map(int,(input().split())))\n\ncount = 0\nis_continue = True\nwhile(True):\n    for i in A:\n        if(i % 2 != 0):\n            is_continue = False\n            break\n        if(i == 0):\n            is_continue = False\n            break\n\n    if(is_continue == False):\n        break\n    else:\n        counter = 0\n        for i in A:\n            A[counter] = i\/2\n            counter+=1   \n    count += 1    \n    \nprint(count)","label":0}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s577710916","submission":"N = int(input())\nA = [int(x) for x in input().split()]\n\nnodd = sum(a % 2 for a in A)\nif nodd % 2 == 0:\n    print(\"YES\")\nelse:\n    print(\"NO\")","label":0}
{"problem_id":"p03209","problem":"In some other world, today is Christmas.\nMr. Takaha decides to make a multi-dimensional burger in his party. A level-L burger (L is an integer greater than or equal to 0) is the following thing:\n\nA level-0 burger is a patty.\nA level-L burger (L \\geq 1) is a bun, a level-(L-1) burger, a patty, another level-(L-1) burger and another bun, stacked vertically in this order from the bottom.\n\nFor example, a level-1 burger and a level-2 burger look like BPPPB and BBPPPBPBPPPBB (rotated 90 degrees), where B and P stands for a bun and a patty.\nThe burger Mr. Takaha will make is a level-N burger. Lunlun the Dachshund will eat X layers from the bottom of this burger (a layer is a patty or a bun). How many patties will she eat?","submission_id":"s081787103","submission":"n, x = map(int, input().split())\ndef solve(n, i):\n    if n==0:\n        return 1\n    if i==0:\n        return 0\n    if i<(2**(n+2)-3)\/\/2:\n        return solve(n-1, i-1)\n    if i==(2**(n+2)-3)\/\/2:\n        return 2**n\n    if i<2**(n+2)-4:\n        return 2**n + solve(n-1, i-(2**(n+2)-3)\/\/2-1)\n    return 2**(n+1) - 1\nprint(solve(n, x-1))","label":0}
{"problem_id":"p02726","problem":"We have an undirected graph G with N vertices numbered 1 to N and N edges as follows:\n\nFor each i=1,2,...,N-1, there is an edge between Vertex i and Vertex i+1.\nThere is an edge between Vertex X and Vertex Y.\n\nFor each k=1,2,...,N-1, solve the problem below:\n\nFind the number of pairs of integers (i,j) (1 \\leq i < j \\leq N) such that the shortest distance between Vertex i and Vertex j in G is k.","submission_id":"s418674218","submission":"#!\/usr\/bin\/env python3\nimport sys\nimport collections as cl\n\n\ndef II():\n    return int(sys.stdin.readline())\n\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef main():\n    n, x, y = MI()\n    ans = [0] * (n)\n\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            dis = min(j - i, abs(i - x) + abs(j - y) + 1)\n            ans[dis] += 1\n\n    for i in range(1, n):\n        print(ans[i])\n\n\nmain()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s539679169","submission":"n=int(input())\na = list(map(int,input().split()))\ncount =1\n \nwhile all(a[i]%(2**count)==0 for i in range(n)):\n  count+=1\nprint(count-1)","label":0}
{"problem_id":"p03253","problem":"You are given positive integers N and M.\nHow many sequences a of length N consisting of positive integers satisfy a_1 \\times a_2 \\times ... \\times a_N = M? Find the count modulo 10^9+7.\nHere, two sequences a' and a'' are considered different when there exists some i such that a_i' \\neq a_i''.","submission_id":"s604771356","submission":"def resolve():\n    n,m= map(int, input().split())\n    a=[]\n    b=[]\n    i=2\n    l=1\n    while m!=1:\n      while m%i!=0:\n        i+=1\n      a.append(i)\n      m=m\/\/i\n    au=list(set(a))\n    for j in range(len(au)):\n        b.append(a.count(au[j]))\n    from operator import mul\n    from functools import reduce\n\n    def cmb(n, r):\n        r = min(n - r, r)\n        if r == 0: return 1\n        over = reduce(mul, range(n, n - r, -1))\n        under = reduce(mul, range(1, r + 1))\n        return over \/\/ under\n\n    for k in b:\n        l*=cmb(k+n-1,n-1)\n\n    print(l%(10**9+7))\nresolve()","label":0}
{"problem_id":"p02773","problem":"We have N voting papers. The i-th vote (1 \\leq i \\leq N) has the string S_i written on it.\nPrint all strings that are written on the most number of votes, in lexicographical order.","submission_id":"s795436666","submission":"N = int(input())\ndic, rst = {}, []\nfor i in range(N):\n    S = input()\n    if S in dic:\n        dic[S] += 1\n    else:\n        dic[S] = 1\nmax_val = max(dic.values())\n[ rst.append(key) for key, val in dic.items() if val == max_val ]\n[ print(i) for i in sorted(rst) ]","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s310000822","submission":"def calc_num2(num):\n  total = 0\n  while num % 2 == 0:\n    total += 1\n    num = num \/ 2\n  \n  return total\n\nnum_count = input()\nnum_list = [int(i) for i in input().split(' ')]\nans_list = []\nfor num in num_list:\n  ans_list.append(calc_num2(num))\n\nprint(min(ans_list))","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s716165663","submission":"import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\nh,n = map(int, input().split())\na = [None]*n\nb = [None]*n\nfor i in range(n):\n    a[i], b[i] = map(int, input().split())\n    \ndp = [float(\"inf\")]*(h+1)\ndp[0] = 0\nfor i in range(n):\n    for j in range(1,h+1):\n        dp[j] = min(dp[j], dp[max(0, j-a[i])] + b[i])\nprint(dp[h])","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s453505988","submission":"nn = int(input())\ndd = list(map(int,input().split()))\nnof_op = 0\nfinish = 0\nwhile True:\n    for ind in range(nn):\n        if (dd[ind] % 2) == 1:\n            finish = 1\n            break\n        else:\n            dd[ind] = dd[ind] \/ 2\n    if finish == 1:\n        break\n    else:\n        nof_op += 1\nprint(nof_op)","label":0}
{"problem_id":"p03197","problem":"There is an apple tree that bears apples of N colors. The N colors of these apples are numbered 1 to N, and there are a_i apples of Color i.\nYou and Lunlun the dachshund alternately perform the following operation (starting from you):\n\nChoose one or more apples from the tree and eat them. Here, the apples chosen at the same time must all have different colors.\n\nThe one who eats the last apple from the tree will be declared winner. If both you and Lunlun play optimally, which will win?","submission_id":"s154346197","submission":"print('first'if any(int(input())%2 for _ in range(int(input())))else'second')","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s351906479","submission":"n = int(input())\na = list(map(int, input().split()))\nx = 'Y'\nnum = -1\nwhile x == 'Y':\n    l = []\n    num += 1\n    for i in a:\n        if i%2 == 0:\n            l.append(i\/\/2)\n        else:\n            x = 'N'\n            break\n    a = l\nprint(num)","label":0}
{"problem_id":"p02995","problem":"You are given four integers A, B, C, and D. Find the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D.","submission_id":"s459843921","submission":"import math\n\nA,B,C,D=map(int,input().split())\ng=(C*D)\/\/math.gcd(C,D)\nprint((B-A+1)-(B\/\/C--(-A\/\/C)+1)-(B\/\/D--(-A\/\/D)+1)+(B\/\/g--(-A\/\/g)+1))","label":0}
{"problem_id":"p02788","problem":"Silver Fox is fighting with N monsters.\nThe monsters are standing in a row, and we can assume them to be standing on a number line. The i-th monster, standing at the coordinate X_i, has the health of H_i.\nSilver Fox can use bombs to attack the monsters.\nUsing a bomb at the coordinate x decreases the healths of all monsters between the coordinates x-D and x+D (inclusive) by A.\nThere is no way other than bombs to decrease the monster's health.\nSilver Fox wins when all the monsters' healths become 0 or below.\nFind the minimum number of bombs needed to win.","submission_id":"s230213849","submission":"n,d,a=map(int,input().split())\nxh=[list(map(int,input().split())) for _ in range(n)]\nxh.sort(key=lambda x:x[0])\nfrom collections import deque\nminusd=deque()\nnowd=0\nans=0\nfor x,h in xh:\n  while minusd and minusd[0][1]<=x:\n    d_,_=minusd.popleft()\n    nowd-=d_\n  tmp=max(0,(h-nowd+a-1)\/\/a)\n  ans+=tmp\n  nowd+=tmp*a\n  minusd.append([tmp*a,x+2*d+1])\n  #print(ans,nowd)\nprint(ans)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s295619737","submission":"input();a=list(map(int,input().split()));count=0\nwhile all([i%2==0 for i in a]):\n  a=[i\/\/2 for i in a];count+=1\nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s660479348","submission":"N = int(input())\nA = list(map(int, input().split()))\nans = 0\ndef yo(n):\n    return n%2\ndef waru(n):\n    return int(n \/ 2)\n\nfor i in range(200):\n    B = list(map(yo, A))\n    if sum(B) == 0:\n        A = list(map(waru, A))\n        ans += 1\nprint(ans)","label":0}
{"problem_id":"p03638","problem":"We have a grid with H rows and W columns of squares.\nSnuke is painting these squares in colors 1, 2, ..., N.\nHere, the following conditions should be satisfied:\n\nFor each i (1 \u2264 i \u2264 N), there are exactly a_i squares painted in Color i. Here, a_1 + a_2 + ... + a_N = H W.\nFor each i (1 \u2264 i \u2264 N), the squares painted in Color i are 4-connected. That is, every square painted in Color i can be reached from every square painted in Color i by repeatedly traveling to a horizontally or vertically adjacent square painted in Color i.\n\nFind a way to paint the squares so that the conditions are satisfied.\nIt can be shown that a solution always exists.","submission_id":"s214720789","submission":"h, w = map(int, input().split())\nn = int(input())\na = list(map(int, input().split()))\nans = [[] for i in range(h)]\ninc = True\nr = 0\nfor i in range(n):\n    while(a[i] > 0):\n        if(inc):\n            if(r <= h - 1):\n                ans[r].append(i + 1)\n                r += 1\n            else:\n                r = h - 1\n                ans[r].append(i + 1)\n                r -= 1\n                inc = False\n        else:\n            if(r >= 0):\n                ans[r].append(i + 1)\n                r -= 1\n            else:\n                r = 0\n                ans[r].append(i + 1)\n                r += 1\n                inc = True\n        a[i] -= 1\nfor x in ans:\n    for i in x:\n        print(i, end = \" \")\n    print()","label":0}
{"problem_id":"p03325","problem":"As AtCoder Beginner Contest 100 is taking place, the office of AtCoder, Inc. is decorated with a sequence of length N, a = {a_1, a_2, a_3, ..., a_N}.\nSnuke, an employee, would like to play with this sequence.\nSpecifically, he would like to repeat the following operation as many times as possible:\nFor every i satisfying 1 \\leq i \\leq N, perform one of the following: \"divide a_i by 2\" and \"multiply a_i by 3\".  \nHere, choosing \"multiply a_i by 3\" for every i is not allowed, and the value of a_i after the operation must be an integer.\n\nAt most how many operations can be performed?","submission_id":"s306761480","submission":"N = int(input())\na = list(map(int,input().split()))\ncount = 0\n\nfor i in a:\n  if i%2==0:\n    K=True\n    while K:\n      if i%2!=1:\n        i\/\/=2\n        count+=1\n      else:\n        K =False\n          \nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s802119805","submission":"N=int(input())\na = [int(i) for i in input().split()]\n\ncount=0\nwhile 1:\n    if sum([i%2 for i in a]) == 0:\n        a = [i\/2 for i in a]\n        count=count+1\n    else:\n        print(count)\n        break\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s606970344","submission":"from typing import List\n\n\ndef answer(n: int, a: List[int]) -> int:\n    count = 1\n    while all(i % 2 ** count == 0 for i in a):\n        count += 1\n    return count - 1\n\n\ndef main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer(n, a))\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s279751864","submission":"#-*-coding:utf-8-*-\nimport sys\ninput=sys.stdin.readline\nimport numpy as np\n\ndef main():\n    n = input()\n    A = np.array(input().split(),dtype=np.int32)\n    answer=0\n\n    while np.all(A%2==0):\n        A\/\/=2\n        answer+=1\n    print(answer)\n\nif __name__==\"__main__\":\n    main()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s466499955","submission":"N = int(input())\nA = list(map(int,input().split()))\ncount = 0\nroop = True\n\nwhile roop == True:\n    for i in range(N):\n        if A[i] % 2 == 0:\n            A[i] \/= 2\n        else:\n            roop = False\n            break\n    if roop == True:\n        count += 1\nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s947683408","submission":"n = int(input())\na = list(map(int, input().split()))\ncnt = 0\n\nwhile all(i%2==0 for i in a):\n  a = [i\/\/2 for i in a]\n  cnt+=1\n\nprint(cnt)\n","label":0}
{"problem_id":"p03807","problem":"There are N integers written on a blackboard. The i-th integer is A_i.\nTakahashi will repeatedly perform the following operation on these numbers:\n\nSelect a pair of integers, A_i and A_j, that have the same parity (that is, both are even or both are odd) and erase them.\nThen, write a new integer on the blackboard that is equal to the sum of those integers, A_i+A_j.\n\nDetermine whether it is possible to have only one integer on the blackboard.","submission_id":"s262847935","submission":"import numpy as np\nn = int(input())\nargList = np.array(list(map(int, input().split())) )\n\ng = sum(argList % 2 == 0)\nk = sum(argList % 2 == 1)\n\nflag = False\nif( k % 2 == 0):\n    #if( (int(k\/2) + g) % 2 == 0):\n    flag = True\nif flag:\n    print('YES')\nelse:\n    print('NO')","label":0}
{"problem_id":"p02918","problem":"There are N people standing in a queue from west to east.\nGiven is a string S of length N representing the directions of the people.\nThe i-th person from the west is facing west if the i-th character of S is L, and east if that character of S is R.\nA person is happy if the person in front of him\/her is facing the same direction.\nIf no person is standing in front of a person, however, he\/she is not happy.\nYou can perform the following operation any number of times between 0 and K (inclusive):\nOperation: Choose integers l and r such that 1 \\leq l \\leq r \\leq N, and rotate by 180 degrees the part of the queue: the l-th, (l+1)-th, ..., r-th persons. That is, for each i = 0, 1, ..., r-l, the (l + i)-th person from the west will stand the (r - i)-th from the west after the operation, facing east if he\/she is facing west now, and vice versa.\nWhat is the maximum possible number of happy people you can have?","submission_id":"s907243061","submission":"# -*- coding: utf-8 -*-\n# D\n\nimport sys\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\nimport math\nimport bisect\ninput = sys.stdin.readline\n\n# \u518d\u8d77\u56de\u6570\u4e0a\u9650\u5909\u66f4\n# sys.setrecursionlimit(1000000)\n\nn, k = map(int, input().split())\ns = input()\n\nprev = \"\"\nres = [0]\nfor i in range(1, n):\n    if s[i] == s[i-1]:\n        res.append(0)\n    else:\n        res.append(1)\n# print(res)\n\nans = n - sum(res) - 1\nans += k*2\nprint(min(ans, n-1))\n","label":0}
{"problem_id":"p02549","problem":"There are N cells arranged in a row, numbered 1, 2, \\ldots, N from left to right.\nTak lives in these cells and is currently on Cell 1. He is trying to reach Cell N by using the procedure described below.\nYou are given an integer K that is less than or equal to 10, and K non-intersecting segments [L_1, R_1], [L_2, R_2], \\ldots, [L_K, R_K].\nLet S be the union of these K segments.\nHere, the segment [l, r] denotes the set consisting of all integers i that satisfy l \\leq i \\leq r.\n\n\bWhen you are on Cell i, pick an integer d from S and move to Cell i + d. You cannot move out of the cells.\n\nTo help Tak, find the number of ways to go to Cell N, modulo 998244353.","submission_id":"s437304677","submission":"#!\/usr\/bin\/env python3\n\nimport sys\ninput=sys.stdin.readline\n\nmod=998244353\n\nn,k=map(int,input().split())\narr=[list(map(int,input().split())) for i in range(k)]\ndp=[0]*(n+1)\ndp[1]=1\nacum=[0]*(n+1)\nfor i in range(k):\n  l,r=arr[i]\n  if 1+l<=n:\n    acum[1+l]+=1\n  if 1+r+1<=n:\n    acum[1+r+1]-=1\nfor i in range(2,n+1):\n  acum[i]+=acum[i-1]\n  acum[i]%=mod\n  dp[i]=acum[i]\n  for j in range(k):\n    l,r=arr[j]\n    if i+l<=n:\n      acum[i+l]+=dp[i]\n    if i+r+1<=n:\n      acum[i+r+1]-=dp[i]\nprint(dp[n]%mod)","label":0}
{"problem_id":"p02381","problem":"You have final scores of an examination for n students. Calculate standard deviation of the scores s1, s2 ... sn.","submission_id":"s749537062","submission":"import math\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    inp = list(map(float,input().split()))\n    m = sum(inp)\/len(inp)\n    stdev = math.sqrt(sum([(s-m)**2 for s in inp])\/len(inp))\n    print(stdev)","label":0}
{"problem_id":"p03088","problem":"You are given an integer N. Find the number of strings of length N that satisfy the following conditions, modulo 10^9+7:\n\nThe string does not contain characters other than A, C, G and T.\nThe string does not contain AGC as a substring.\nThe condition above cannot be violated by swapping two adjacent characters once.","submission_id":"s055873774","submission":"n = int(input())\ndp = [[0] * 4 for i in range(n + 2)]  # dp[i][j]=(\u9577\u3055i\u306e\u6700\u5f8c\u306e\u6587\u5b57\u304cj\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u6587\u5b57\u5217\u306e\u6570:j= 0:A 1:G 2:C 3:T)\n# \u756a\u5175\u30922\u3064\u7f6e\u3044\u3066\u304a\u304f\u3068\u90fd\u5408\u304c\u3044\u3044\nfor i in range(4):\n    dp[2][i] = 1\nmod = 10**9 + 7\nfor i in range(3, n + 2):\n    for j in range(4):\n        for k in range(4):\n            dp[i][j] += dp[i - 1][k]\n    dp[i][2] -= dp[i - 2][0] # AGC\u3092\u53d6\u308a\u9664\u304f.\n    dp[i][2] -= dp[i - 2][1] # GAC\u3092\u53d6\u308a\u9664\u304f.\n    dp[i][1] -= dp[i - 2][0] - dp[i - 3][1] # ACG\u3092\u53d6\u308a\u9664\u304f. \u305f\u3060\u3057GACG\u306f\u3059\u3067\u306b\u53d6\u308a\u9664\u3044\u3066\u3044\u308b.\n    dp[i][2] -= 3 * dp[i - 3][0] # \u3059\u3067\u306b\u53d6\u308a\u9664\u3044\u3066\u3044\u308b\u3082\u306e\u306b\u6ce8\u610f\u3059\u308b.\u7d50\u679c\u7684\u306bAGGC,ATGC,AGTC\u3092\u53d6\u308a\u9664\u304f.\nprint(sum(dp[-1]) % mod)","label":0}
{"problem_id":"p02743","problem":"Does \\sqrt{a} + \\sqrt{b} < \\sqrt{c} hold?","submission_id":"s652093366","submission":"import numpy as np\n\na,b,c = map(int, input().split())\nx = (c-a-b)**2-4*a*b\n\n\nif(x>0 and c-a-b>=0): print('Yes')\nelse: print('No')\n","label":0}
{"problem_id":"p03472","problem":"You are going out for a walk, when you suddenly encounter a monster. Fortunately, you have N katana (swords), Katana 1, Katana 2, \u2026, Katana N, and can perform the following two kinds of attacks in any order:\n\nWield one of the katana you have. When you wield Katana i (1 \u2264 i \u2264 N), the monster receives a_i points of damage. The same katana can be wielded any number of times.\nThrow one of the katana you have. When you throw Katana i (1 \u2264 i \u2264 N) at the monster, it receives b_i points of damage, and you lose the katana. That is, you can no longer wield or throw that katana.\n\nThe monster will vanish when the total damage it has received is H points or more. At least how many attacks do you need in order to vanish it in total?","submission_id":"s498790530","submission":"n,h = map(int,input().split())\na = [0]*n\nb = [0]*n\nfor i in range(n):\n    a[i], b[i] = map(int,input().split())\na = sorted(a, reverse=True)\nb = sorted(b, reverse=True)\nc = 0\nj = 0\nwhile j<n:\n    if b[j] > a[0]:\n        c += b[j]\n    else:\n        break\n    j += 1\n    if c >= h:\n        break\n\nif c < h:\n    j += -(-(h-c)\/\/a[0])\nprint(j)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s633152604","submission":"n = int(input())\nl = list(map(int,input().split()))\ncount = 0\nwhile all(l[i] % 2 == 0 for i in range(n)):\n    l = [l[i] \/ 2 for i in range(n)]\n    count += 1\n    \nprint(count)","label":0}
{"problem_id":"p03837","problem":"You are given an undirected connected weighted graph with N vertices and M edges that contains neither self-loops nor double edges.\nThe i-th (1\u2264i\u2264M) edge connects vertex a_i and vertex b_i with a distance of c_i.\nHere, a self-loop is an edge where a_i = b_i (1\u2264i\u2264M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1\u2264i<j\u2264M).\nA connected graph is a graph where there is a path between every pair of different vertices.\nFind the number of the edges that are not contained in any shortest path between any pair of different vertices.","submission_id":"s630528201","submission":"import sys\ninput=sys.stdin.readline\nn,m=map(int,input().split())\na=[0]*m\nb=[0]*m\nc=[0]*m\nfor i in range(m):\n  a[i],b[i],c[i]=map(int,input().split())\n  a[i]-=1\n  b[i]-=1\nINF=10**18#float('inf')\ndist=[ [INF]*n for _ in range(n)]\nfor i in range(n):\n  dist[i][i]=0\nfor i in range(m):\n  dist[a[i]][b[i]]=c[i]\n  dist[b[i]][a[i]]=c[i]\n#floyd warshall\nfor k in range(n):\n  for i in range(n):\n    for j in range(n):\n      dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j])\nans=m\nfor i in range(m):\n  shortest=False\n  for j in range(n):\n    if dist[j][a[i]]+c[i]==dist[j][b[i]]:\n      shortest=True\n      break\n  if shortest:\n    ans-=1\nprint(ans)\n\n\n\n","label":0}
{"problem_id":"p03408","problem":"Takahashi has N blue cards and M red cards.\nA string is written on each card. The string written on the i-th blue card is s_i, and the string written on the i-th red card is t_i.\nTakahashi will now announce a string, and then check every card. Each time he finds a blue card with the string announced by him, he will earn 1 yen (the currency of Japan); each time he finds a red card with that string, he will lose 1 yen.\nHere, we only consider the case where the string announced by Takahashi and the string on the card are exactly the same. For example, if he announces atcoder, he will not earn money even if there are blue cards with atcoderr, atcode, btcoder, and so on. (On the other hand, he will not lose money even if there are red cards with such strings, either.)\nAt most how much can he earn on balance?\nNote that the same string may be written on multiple cards.","submission_id":"s855641435","submission":"N = int(input())\nNs = []\nfor i in range(N):\n  Ns.append(input())\n  \nM = int(input())\nMs = []\nfor i in range(M):\n  Ms.append(input())\n  \nWs = list(set(Ns + Ms))\n\nAs = []\nfor i in Ws:\n  ans = 0\n  for j in Ns:\n    if i == j:\n      ans += 1\n  for j in Ms:\n    if i == j:\n      ans -= 1\n  As.append(ans)\n  \nprint(max(max(As), 0))\n","label":0}
{"problem_id":"p02548","problem":"Given is a positive integer N.\nHow many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?","submission_id":"s942786357","submission":"#import sys\n#import numpy as np\nimport math\n#from fractions import Fraction\nimport itertools\nfrom collections import deque\nfrom collections import Counter\nimport heapq\nfrom fractions  import gcd\n#input=sys.stdin.readline\n#import bisect\nn=int(input())\nans=0\nfor i in range(1,n):\n    if n%i==0:\n        ans+=(n\/\/i)-1\n    else:\n        ans+=(n\/\/i)\nprint(ans)","label":0}
{"problem_id":"p02419","problem":"Write a program which reads a word W and a text T, and prints the number of word W which appears in text T","submission_id":"s038637818","submission":"w = str.lower(raw_input())\nt = []\nwhile True:\n  line = raw_input()\n  if line == \"END_OF_TEXT\":\n    break\n  else:\n    t += (map(str.lower, line.split(\" \")))\n\ncount = 0\nfor i in xrange(len(t)):\n  if w == t[i]:\n    count += 1\n\nprint count","label":0}
{"problem_id":"p02744","problem":"In this problem, we only consider strings consisting of lowercase English letters.\nStrings s and t are said to be isomorphic when the following conditions are satisfied:\n\n|s| = |t| holds.\nFor every pair i, j, one of the following holds:\ns_i = s_j and t_i = t_j.\ns_i \\neq s_j and t_i \\neq t_j.\n\n\n\nFor example, abcac and zyxzx are isomorphic, while abcac and ppppp are not.\nA string s is said to be in normal form when the following condition is satisfied:\n\nFor every string t that is isomorphic to s, s \\leq t holds. Here \\leq denotes lexicographic comparison.\n\nFor example, abcac is in normal form, but zyxzx is not since it is isomorphic to abcac, which is lexicographically smaller than zyxzx.\nYou are given an integer N.\nPrint all strings of length N that are in normal form, in lexicographically ascending order.","submission_id":"s862010519","submission":"from collections import deque\n\nn = int(input())\nif n == 1:\n    print('a')\nelse:\n    q = deque(['a'])\n    while q:\n        x = q.popleft()\n        l = len(x)\n        s = len(set(x))\n        for i in range(s+1):\n            nx = x + chr(i + 97)\n            if l + 1 == n:\n                print(nx)\n            if l < n - 1:\n                q.append(nx)\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s331770346","submission":"#from statistics import median\n#import collections\n#aa = collections.Counter(a) # list to list || .most_common(2)\u3067\u6700\u5927\u306e2\u500b\u3068\u308a\u3060\u305b\u308b\u304a a[0][0]\nfrom fractions import gcd\nfrom itertools import combinations,permutations,accumulate # (string,3) 3\u56de\n#from collections import deque\nfrom collections import deque,defaultdict,Counter\nimport decimal\nimport re\n#import bisect\n#\n#    d = m - k[i] - k[j]\n#    if kk[bisect.bisect_right(kk,d) - 1] == d:\n#\n#\n#\n# python\u3067\u7121\u7406\u306a\u3068\u304d\u306f\u3001pypy\u3067\u3084\u308b\u3068\u6b63\u89e3\u3059\u308b\u304b\u3082\uff01\uff01\n#\n#\n# my_round_int = lambda x:np.round((x*2 + 1)\/\/2)\n# \u56db\u6368\u4e94\u5165\nimport sys\nsys.setrecursionlimit(10000000)\nmod = 10**9 + 7\n#mod = 9982443453\ndef readInts():\n  return list(map(int,input().split()))\ndef I():\n  return int(input())\nn = I()\nA = readInts()\ncnt = 0\nwhile True:\n    for i in range(n):\n        if A[i] % 2 == 0:\n            A[i] \/\/= 2\n        else:\n            print(cnt)\n            exit()\n    cnt += 1\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s170038128","submission":"N = int(input())\nA = [int(s) for s in input().split()]\n\ndef func_half(x):\n    result = 0\n    if x % 2 == 0:\n        i = 1\n        while x % (2**i) == 0:\n            result = i\n            i += 1\n    return result\n\nans = 10**9\nfor a in A:\n    buf = func_half(a)\n    if buf == 0:\n        ans = 0\n        break\n    ans = min(ans, buf)\n\nprint(ans)","label":0}
{"problem_id":"p03007","problem":"There are N integers, A_1, A_2, ..., A_N, written on a blackboard.\nWe will repeat the following operation N-1 times so that we have only one integer on the blackboard.\n\nChoose two integers x and y on the blackboard and erase these two integers. Then, write a new integer x-y.\n\nFind the maximum possible value of the final integer on the blackboard and a sequence of operations that maximizes the final integer.","submission_id":"s215014572","submission":"from bisect import bisect\n\ndef solve():\n    N = int(input())\n    A = sorted(map(int,input().split()))\n    if N == 2:\n        res = [(max(A),min(A))]\n        s = max(A)-min(A)\n        return s, res\n\n    if A[0] >= 0:\n        res = []\n        x = A[0]\n        for a in A[1:-1]:\n            res.append((x,a))\n            x -= a\n        res.append((A[-1],x))\n        x = A[-1]-x\n        return (x,res)\n    if A[-1] <= 0:\n        res = []\n        x = A[-1]\n        for a in A[:-1]:\n            res.append((x,a))\n            x -= a\n        return (x,res)\n\n    res = []\n    p = bisect(A,0)-1\n    x = A[p]\n    for a in A[p+1:N-1]:\n        res.append((x,a))\n        x -= a\n    res.append((A[-1],x))\n    x = A[-1]-x\n    for a in A[:p]:\n        res.append((x,a))\n        x -= a\n    return (x,res)\n\n\n\ns,res = solve()\nprint(s)\nprint('\\n'.join(f'{a} {b}' for a,b in res))","label":0}
{"problem_id":"p02622","problem":"Given are strings S and T. Consider changing S to T by repeating the operation below. Find the minimum number of operations required to do so.\nOperation: Choose one character of S and replace it with a different character.","submission_id":"s711896252","submission":"s = input()\nt = input()\nif s == t:\n    print(0)\nelse:\n    ans = 0\n    for i, letter in enumerate(s):\n        if letter != t[i]:\n            ans += 1\n    print(ans)","label":0}
{"problem_id":"p03854","problem":"You are given a string S consisting of lowercase English letters.\nAnother string T is initially empty.\nDetermine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\nAppend one of the following at the end of T: dream, dreamer, erase and eraser.","submission_id":"s113147958","submission":"s = input()\n\ntmp = \"\"\ncnt = 0\nfor c in reversed(s):\n  tmp = c + tmp\n  if tmp in [\"dream\", \"dreamer\", \"erase\", \"eraser\"]:\n    cnt += len(tmp)\n    tmp = \"\"\n    \nif cnt == len(s):\n  print(\"YES\")\nelse:\n  print(\"NO\")","label":0}
{"problem_id":"p03095","problem":"You are given a string S of length N.\nAmong its subsequences, count the ones such that all characters are different, modulo 10^9+7. Two subsequences are considered different if their characters come from different positions in the string, even if they are the same as strings.\nHere, a subsequence of a string is a concatenation of one or more characters from the string without changing the order.","submission_id":"s586296102","submission":"P = 10**9 + 7\nN = int(input())\nS = input()\n\nd = [0]*26\nfor s in S:\n    d[ord(s)-97] += 1\n\nans = 1\nfor num in d:\n    ans *= (num+1)\n    ans %= P\nprint((ans-1)%P)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s818627922","submission":"\nn = int(input())\nx = list(map(int,input().split()))\n\ncount = 0\nwhile True:\n    if [i for i in x if i % 2 == 1]:\n        break\n    x = [i\/2 for i in x]\n    count+=1\n\nprint(count)","label":0}
{"problem_id":"p03231","problem":"You are given a string S of length N and another string T of length M.\nThese strings consist of lowercase English letters.\nA string X is called a good string when the following conditions are all met:\n\nLet L be the length of X. L is divisible by both N and M.\nConcatenating the 1-st, (\\frac{L}{N}+1)-th, (2 \\times \\frac{L}{N}+1)-th, ..., ((N-1)\\times\\frac{L}{N}+1)-th characters of X, without changing the order, results in S.\nConcatenating the 1-st, (\\frac{L}{M}+1)-th, (2 \\times \\frac{L}{M}+1)-th, ..., ((M-1)\\times\\frac{L}{M}+1)-th characters of X, without changing the order, results in T.\n\nDetermine if there exists a good string. If it exists, find the length of the shortest such string.","submission_id":"s812334817","submission":"from fractions import gcd\n\nN, M = map(int, input().split())\nS = input()\nT = input()\n\ndic = {}\nL = int((N*M) \/ gcd(N,M))\nans = L\n\nfor i in range(N):\n  dic[int(i*(L\/N)+1)] = i\n\nkey = set(dic.keys())\nfor i in range(M):\n  if i*(L\/M)+1 in key:\n    if S[dic[int(i*(L\/M)+1)]] == T[i]:continue\n    else: \n      ans = -1\n      break\n\n  \n\n\nprint(ans)\n","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s973512684","submission":"H, N = map(int, input().split())\nspells = []\nfor i in range(N):\n  A, B = map(int, input().split())\n  spells.append({\"attack\":A, \"cost\":B})\n\n# O(HN)\ndp = [0]\nfor i in range(H):\n  dp.append(2147483648)\n  \nfor h in range(H):\n  for spell in spells:\n    index = min(h+spell[\"attack\"], H)\n    current_min_mp = dp[index] \n    new_mp = dp[h] + spell[\"cost\"]\n    if (new_mp < current_min_mp):\n      dp[index] = new_mp\n\nprint(dp[-1])","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s860257180","submission":"n = int(input())\na = list(map(int, input().split()))\n\ntwo = [0] * n\n\nfor i in range(n):\n        while a[i]%2 == 0 :\n                two[i] += 1\n                a[i] = a[i] \/ 2\nprint(min(two))","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s548320415","submission":"N = int(input())\na = list(map(int,input().split()))\ndev = lambda x : x\/2\namari = lambda x : x % 2\nfor i in range(1000):\n    amari_a = list(map(amari, a))\n    if amari_a.count(1) > 0: break\n    a = list(map(dev,a))\nprint(i)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s097677455","submission":"n = int(input())\nA = list(map(int, input().split()))\ncan = True\ncount = 0\n\nwhile(can):\n    for i in range(len(A)):\n        if(A[i] % 2 != 0):\n            can = False\n        else:\n            A[i] = A[i] \/ 2\n    if(can):\n        count+=1\nprint(count)\n","label":0}
{"problem_id":"p03264","problem":"Find the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive). The order does not matter.","submission_id":"s756841415","submission":"K = int(input())\n \nev = K\/\/2\nodd = K\/\/2 + K%2\nprint(ev*odd)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s995596710","submission":"import numpy as np\nN = int(input())\nA = [int(x) for x in input().split()]\nA = np.array(A)\nans = list()\nfor i in range(N):\n  a = A[i]\n  num = 0\n  while a%2==0:\n    a \/= 2.0\n    num += 1\n  ans.append(num)\nprint(min(ans))","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s848487070","submission":"import sys\nsys.setrecursionlimit(10**9)\n\nH, N = map(int, input().split())\nmagic = [_ for _ in range(N)]\n\nfor k in range(N):\n  magic[k] = list(map(int, input().split()))\n  magic[k].append(magic[k][0]\/magic[k][1])\n\nmagic.sort(key = lambda x: x[2], reverse=True)\nans = [0 for _ in range(H+1)]\nvisited = [0]\nanskouho = [float('inf')]\n\ndef solve(start, power, point, maryoku):\n  if start == H:\n    print(min(point, min(anskouho)))\n    exit()\n  elif start > H:\n    anskouho.append(point)\n    visited.sort(reverse=True)\n    return 0\n  elif ans[start] != 0:\n    visited.sort(reverse=True)\n    return 0\n  else:\n    visited.append(start)\n    ans[start] = point\n    solve(start+power, power, point+maryoku, maryoku)\n\nfor k in range(N):\n  for item in visited:\n    solve(item+magic[k][0], magic[k][0], ans[item] + magic[k][1], magic[k][1])\n\nprint(min(anskouho))","label":0}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s359167491","submission":"import sys\n\nreadline = sys.stdin.readline\nMOD = 10 ** 9 + 7\nINF = float('INF')\nsys.setrecursionlimit(10 ** 5)\n\n\ndef main():\n    N = int(readline())\n    S = input()\n    K = int(readline())\n\n    letter = S[K - 1]\n\n    res = \"\"\n    for x in S:\n        if x == letter:\n            res += letter\n        else:\n            res += \"*\"\n\n    print(res)\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p02585","problem":"Takahashi will play a game using a piece on an array of squares numbered 1, 2, \\cdots, N. Square i has an integer C_i written on it. Also, he is given a permutation of 1, 2, \\cdots, N: P_1, P_2, \\cdots, P_N.\nNow, he will choose one square and place the piece on that square. Then, he will make the following move some number of times between 1 and K (inclusive):\n\nIn one move, if the piece is now on Square i (1 \\leq i \\leq N), move it to Square P_i. Here, his score increases by C_{P_i}.\n\nHelp him by finding the maximum possible score at the end of the game. (The score is 0 at the beginning of the game.)","submission_id":"s612893956","submission":"n,k = map(int, input().split())\np = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\ndef sim(start,mx): # simulate mx step from start, returns max_score\n    if mx==0:\n        return 0\n    now_p=0\n    nxt=p[start]-1\n    cnt=0\n    p_lis=[]\n\n    while True:\n        nxt=p[nxt]-1\n        now_p+=c[nxt]\n        p_lis.append(now_p)\n        cnt+=1\n        if cnt==mx:\n            break\n\n    return max(p_lis)\n\nvisited_p=set() # already checked flag\ncycle_score=[] # cycle loop score\ncycle_points=[]\nnow_cycle=0\n\nfor i in range(n):\n    if i in visited_p:\n        continue\n    visited_p.add(i)\n    now_p=0\n    nxt=p[i]-1\n    visited=set()\n    while True:\n        nxt=p[nxt]-1\n        visited_p.add(nxt)\n        if nxt in visited:\n            break\n        visited.add(nxt)\n        now_p+=c[nxt]\n    cycle_score.append(now_p)\n    cycle_points.append(list(visited))\n\nans=-float('inf')\n\nfor c_num in range(len(cycle_score)):\n#    print(c_num,cycle_score[c_num],cycle_points[c_num])\n    cycle_len=len(cycle_points[c_num])\n    for start in cycle_points[c_num]:\n\n        if cycle_score[c_num]<0: # no loop, just check min(loop_len,k)\n            score = sim(start,min(cycle_len,k))\n            ans=max(ans,score)\n\n        else: # loop as many as possible\n            loop_num = max(0,(k \/\/ cycle_len) - 1)\n            nokori=k-loop_num*cycle_len\n            score = sim(start,nokori) + loop_num*cycle_score[c_num]\n            ans=max(ans,score)\n\nprint(ans)\n\n","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s803790896","submission":"N=int(input())\nA=input().split()\nA=list(map(int,A))\ndef can_divide_by_2():\n    for i in range(N):\n        a=A[i]\n        if a%2==0:\n            a=a\/\/2\n            A[i]=a\n        else:\n            return False\nfor u in range(1000000):\n    x=can_divide_by_2()\n    if x==False:\n        break\nprint(u)","label":0}
{"problem_id":"p02583","problem":"We have sticks numbered 1, \\cdots, N. The length of Stick i (1 \\leq i \\leq N) is L_i.\nIn how many ways can we choose three of the sticks with different lengths that can form a triangle?\nThat is, find the number of triples of integers (i, j, k) (1 \\leq i < j < k \\leq N) that satisfy both of the following conditions:\n\nL_i, L_j, and L_k are all different.\nThere exists a triangle whose sides have lengths L_i, L_j, and L_k.","submission_id":"s713308760","submission":"#!\/usr\/bin\/env python3\nimport sys\nsys.setrecursionlimit(10**8)\nfrom bisect import bisect_left\nfrom itertools import product\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LC(): return [c for c in input().split()]\ndef LLI(n): return [LI() for _ in range(n)]\ndef NSTR(n): return [input() for _ in range(n)]\n\ndef array2d(N, M, initial=0):\n    return [[initial]*M for _ in range(N)]\n\ndef copy2d(orig, N, M):\n    ret = array2d(N, M)\n    for i in range(N):\n        for j in range(M):\n            ret[i][j] = orig[i][j]\n    return ret\n\n\nINF = float(\"inf\")\nMOD = 10**9 + 7\n\n\ndef main():\n    N = INT()\n    L = LI()\n    L.sort()\n    counter = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if L[i] == L[j] or L[j] == L[k]:\n                    continue\n                if L[i]+L[j] > L[k]:\n                    counter += 1\n                    # print(L[i], L[j], L[k])\n    print(counter)\n    return\n\n\nif __name__ == '__main__':\n    main()\n","label":0}
{"problem_id":"p03037","problem":"We have N ID cards, and there are M gates.\nWe can pass the i-th gate if we have one of the following ID cards: the L_i-th, (L_i+1)-th, ..., and R_i-th ID cards.\nHow many of the ID cards allow us to pass all the gates alone?","submission_id":"s600555749","submission":"\ndef solve():\n    dp = [0] * N\n    L = max(l)\n    R = min(r)\n    if L <= R:\n        i = list(range(L,R+1))\n        ans = len(i)\n    else:\n        ans = 0\n    print(ans)\n\nif __name__ == \"__main__\":\n    N,M = list(map(int, input().split()))\n#    LR = [list(map(int, input().split())) for _ in range(M)]\n    l,r = [0]*M, [0]*M\n    for c in range(M):\n        tmp = list(map(int, input().split()))\n        l[c] = tmp[0]\n        r[c] = tmp[1]\n    solve()  \n","label":0}
{"problem_id":"p02787","problem":"Ibis is fighting with a monster.\nThe health of the monster is H.\nIbis can cast N kinds of spells. Casting the i-th spell decreases the monster's health by A_i, at the cost of B_i Magic Points.\nThe same spell can be cast multiple times. There is no way other than spells to decrease the monster's health.\nIbis wins when the health of the monster becomes 0 or below.\nFind the minimum total Magic Points that have to be consumed before winning.","submission_id":"s657615429","submission":"h,n = map(int,input().split())\nab = []\nfor i in range(n):\n  a,b = map(int,input().split())\n  ab.append([a,b])\n\nab.sort(key=lambda x: x[0]\/x[1], reverse=True)\n\nif h==9999 and n==10:\n  print(139815)\n  exit()\n\n\n#bubble sort\n#for i in range(n-1,-1,-1):\n#  for j in range(0,i):\n#    if ab[j][0]*ab[j+1][1]<ab[j+1][0]*ab[j][1]:\n#      tmp = ab[j]\n#      ab[j] = ab[j+1]\n#      ab[j+1] = tmp\n\nans = 0\nansk = float('inf')\n\ndef indexH(h,arr):\n  li = []\n  for i in range(len(arr)):\n    if arr[i][0]>=h:\n      li.append(i)\n  return li[::-1]\n\n\n\nwhile 1:\n  if len(ab)==0:\n    break\n  maxa = max(ab, key=lambda x:x[0])[0]\n  if maxa<h:\n    k = ab[0]\n    x = (h-maxa)\/\/k[0]\n    l = max(x,1)\n    h-=k[0]*l\n    ans+=k[1]*l\n    #print(h,ans)\n  else:\n    c = 0\n    index = indexH(h,ab)\n    #print(h,index,ab,ab)\n    for i in range(len(index)):\n      ansk = min(ansk,ans+ab[index[i]][1])\n      ab.pop(index[i])\n\nprint(ansk)","label":0}
{"problem_id":"p03068","problem":"You are given a string S of length N consisting of lowercase English letters, and an integer K.\nPrint the string obtained by replacing every character in S that differs from the K-th character of S, with *.","submission_id":"s221585426","submission":"import math\n\nn = int(input())\ns = input()\nk = int(input()) - 1\nfor i in range(n):\n    print(s[i] if s[i] == s[k] else \"*\", end=\"\")\n","label":0}
{"problem_id":"p03061","problem":"There are N integers, A_1, A_2, ..., A_N, written on the blackboard.\nYou will choose one of them and replace it with an integer of your choice between 1 and 10^9 (inclusive), possibly the same as the integer originally written.\nFind the maximum possible greatest common divisor of the N integers on the blackboard after your move.","submission_id":"s910902908","submission":"import math\nN = int(input())\nA = list(map(int, input().split()))\n\nB = [0 for _ in range(N)]\nC = [0 for _ in range(N)]\n\nB[0] = A[0]\nfor i in range(1,N):\n  B[i] = math.gcd(B[i-1],A[i])\n\nC[N-1] = A[N-1]\nfor i in range(N-2,-1,-1):\n  C[i] = math.gcd(C[i+1],A[i])\n  \nans = max(C[1],B[N-2])\nfor i in range(1,N-1):\n  #print(i, math.gcd(C[i+1],B[i-1]))\n  ans = max(math.gcd(C[i+1],B[i-1]), ans)\n          \nprint(ans)\n#print(B)\n#print(C)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s286572567","submission":"n = int(input())\nnumbers = list(map(int, input().split()))\n\ndef div(x):#\u5404\u8981\u7d20\u30922\u3067\u5272\u3063\u3066\u8fd4\u3059\u95a2\u6570\n    return x\/2\n\ncount = 0\nwhile 1:\n    flag = 0\n    for num in numbers:\n        if num % 2:#2\u3067\u5272\u308a\u5207\u308c\u306a\u3044\n            flag=1\n            break\n    if flag==1:\n        break\n    count += 1\n    numbers = list(map(div,numbers))\n\nprint(count)\n","label":0}
{"problem_id":"p02729","problem":"We have N+M balls, each of which has an integer written on it.\nIt is known that:  \n\nThe numbers written on N of the balls are even.\nThe numbers written on M of the balls are odd.\n\nFind the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\nIt can be shown that this count does not depend on the actual values written on the balls.","submission_id":"s522966661","submission":"# -*- coding: utf-8 -*-\n\ndef main():\n\n    N, M = map(int, input().split())\n\n    numN = N * (N - 1) \/ 2\n    numM = M * (M - 1) \/ 2\n\n    ans = 0\n\n    if numN >= 0:\n        ans += numN\n\n    if numM >= 0:\n        ans += numM\n\n    print(int(ans))\n\n\nif __name__ == \"__main__\":\n    main()","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s773366195","submission":"digit = int(input())\nli = list(input().split(\" \"))\nli = [int(i) for i in li]\n\ncount = 0\nflag = False\n\nwhile flag==False:\n  for i in range(digit):\n    if li[i]%2==0:\n      li[i]=li[i]\/2\n    else:\n      flag=True\n        \n  if flag==False:\n    count+=1\n\nprint(count)","label":0}
{"problem_id":"p03494","problem":"There are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.","submission_id":"s575045794","submission":"def lo2(n):\n    count = 0\n    while n%2==0:\n        n=n\/\/2\n        count+=1\n    return count\n\nN = int(input())\nA = list(map(int,input().split()))\nA = list(map(lo2,A))\nprint(min(A))\n","label":0}
