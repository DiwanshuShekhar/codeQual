{"problem_id": "p02742", "submission_id": "s925579621", "problem_description": "We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:", "quality_assessment": {"functionality": "The code correctly calculates the number of squares a bishop can reach on a chessboard with given dimensions. It handles edge cases where either dimension of the board is 1.", "readability": "The code is concise and easy to read. The variable names are clear and convey their purpose effectively.", "pythonic": "The code makes use of Python features such as conditional expressions effectively, making it Pythonic.", "error_handling": "The code accounts for edge cases, ensuring correct output under various inputs. However, it does not explicitly handle invalid inputs (e.g., non-integer or negative values).", "efficiency": "The code is efficient for the task; it calculates the result in constant time without unnecessary computations or memory usage."}, "quality_score": {"functionality": "5", "readability": "4", "pythonic": "4", "error_handling": "3", "efficiency": "5"}}
{"problem_id": "p02742", "submission_id": "s696213181", "problem_description": "We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:", "quality_assessment": {"functionality": "The code calculates and outputs the number of squares a bishop can reach on an H\u00d7W board, starting from the top-left corner, including the case where H or W equals 1, which results in the bishop being able to visit only 1 square. The logic is correct and accurately implements the solution for the described problem.", "readability": "The code is consistently formatted and includes necessary comments, making the logic and flow easy to follow. Variable names are meaningful, contributing to the readability.", "pythonic": "The code makes use of Python's divmod function and conditional expressions effectively, adhering to Pythonic practices.", "error_handling": "The code does not have explicit error handling blocks, but the problem constraints ensure the input values are within expected ranges, making additional error handling non-essential for this specific case.", "efficiency": "The solution avoids unnecessary computations and uses a direct mathematical approach to calculate the answer, ensuring high efficiency and scalability for all input sizes within the problem constraints."}, "quality_score": {"functionality": "5", "readability": "5", "pythonic": "5", "error_handling": "4", "efficiency": "5"}}
{"problem_id": "p02742", "submission_id": "s723722855", "problem_description": "We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:", "quality_assessment": {"functionality": "The code accurately calculates the number of squares a bishop can reach on a given chessboard based on the input dimensions H and W. It properly handles edge cases such as when H or W is 1, ensuring correct output.", "readability": "The code is straightforward and easy to follow, with clear variable names and a logical flow. The use of conditional statements makes the logic easy to understand.", "pythonic": "The code makes good use of Python's if-else conditional statements and arithmetic operations, which are pythonic. However, it could be more concise and take advantage of Python's features for mathematical expressions.", "error_handling": "The code includes basic error handling for the edge case of a 1x1 board. However, it does not explicitly handle potential input errors or invalid data types.", "efficiency": "The calculation is direct and uses only basic arithmetic operations, making it efficient for the problem's requirements. There is no unnecessary computation or data structure usage."}, "quality_score": {"functionality": "5", "readability": "4", "pythonic": "4", "error_handling": "3", "efficiency": "5"}}
{"problem_id": "p02742", "submission_id": "s313108893", "problem_description": "We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:", "quality_assessment": {"functionality": "The code correctly calculates the number of squares a bishop can reach on a chessboard given the dimensions H (rows) and W (columns). For a board of 1xN or Nx1, it returns 1, as the bishop can only stay in its initial position. For other dimensions, it divides the number of total squares by 2, adding 1 if the total number of squares is odd, which correctly represents the number of squares reachable by the bishop.", "readability": "The code is straightforward and easy to understand. It directly checks for edge cases (1xN or Nx1 boards) and applies a simple mathematical operation to find the answer for larger boards. Comments or more descriptive variable names could enhance readability, but the logic is clear as is.", "pythonic": "The code uses Pythonic constructs effectively, like tuple unpacking for input and concise if-else expressions. The use of int() for division to ensure an integer result is appropriate. The code follows PEP 8 guidelines well, contributing to its pythonic quality.", "error_handling": "The code has basic error handling by correctly managing edge cases (1xN or Nx1 boards). However, it does not explicitly handle invalid input types or values that are not integers, which could lead to runtime errors if such cases occur.", "efficiency": "The code is efficient, running in constant time O(1), as the operations used do not depend on the size of the board beyond determining the edge cases. This makes it highly scalable for large input values."}, "quality_score": {"functionality": "5", "readability": "4", "pythonic": "4", "error_handling": "3", "efficiency": "5"}}
{"problem_id": "p02742", "submission_id": "s003692862", "problem_description": "We have a board with H horizontal rows and W vertical columns of squares.\nThere is a bishop at the top-left square on this board.\nHow many squares can this bishop reach by zero or more movements?\nHere the bishop can only move diagonally.\nMore formally, the bishop can move from the square at the r_1-th row (from the top) and the c_1-th column (from the left) to the square at the r_2-th row and the c_2-th column if and only if exactly one of the following holds:\n\nr_1 + c_1 = r_2 + c_2\nr_1 - c_1 = r_2 - c_2\n\nFor example, in the following figure, the bishop can move to any of the red squares in one move:", "quality_assessment": {"functionality": "The code correctly determines the number of squares reachable by the bishop based on the board dimensions (H x W). It accounts for the special cases where either dimension is equal to 1 and calculates the maximum number of reachable squares accordingly.", "readability": "The code is simple and uses basic arithmetic operations, making it easy to read and understand. The use of explicit variables for height and width makes the calculations clear.", "pythonic": "The code follows Python conventions and uses idiomatic expressions for arithmetic operations. However, it could be more concise by removing the unnecessary 'round' and 'exit' functions and combining conditions.", "error_handling": "The code lacks specific error handling mechanisms but operates safely under the problem's constraints. It correctly handles edge cases, such as when either dimension is 1.", "efficiency": "The code is efficient for the problem's scale, with a direct calculation that avoids unnecessary loops or operations. It computes the solution in constant time."}, "quality_score": {"functionality": "5", "readability": "4", "pythonic": "4", "error_handling": "3", "efficiency": "5"}}
