p03165 s802328019
s, t = input().split()

# Initialize DP table
dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]

# Fill DP table
for i in range(len(s)):
    for j in range(len(t)):
        if s[i] == t[j]:
            dp[i+1][j+1] = dp[i][j] + 1
        else:
            dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])

# Backtrack to find one of the longest common subsequences
i, j = len(s), len(t)
lcs = []
while i > 0 and j > 0:
    if dp[i][j] == dp[i-1][j]:
        i -= 1
    elif dp[i][j] == dp[i][j-1]:
        j -= 1
    else:
        lcs.append(s[i-1])
        i -= 1
        j -= 1

# Output the result
print(''.join(reversed(lcs)))
```
Expecting value: line 1 column 1 (char 0)
